package Model.APPS.E_EEPROM_XMC1.v4_1_10;

/*
Copyright (c) 2015-2016, Infineon Technologies AG
All rights reserved.                       
                                           
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
following conditions are met:  
                                                                            
Redistributions of source code must retain the above copyright notice, this list of conditions and the following
disclaimer.                       
 
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the distribution.                      
 
Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written permission.                                          
                                                                            
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                 
                                                                            
To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with 
Infineon Technologies AG: dave@infineon.com. */

/*************** Revision History **********************************************
 Version       Date        Description //Retain this format
 4.0.0       16-Feb-2015   Initial version for DAVEv4
 4.1.2       24-Apr-2015   1. E_EEPROM_XMC1_ReadBlockwithCRC() API name changed to
                              E_EEPROM_XMC1_VerifyBlockCrcStatus().<BR>
                           2. APP GUI modified to new format.<BR>
                           3. E_EEPROM_XMC1_OPERATION_STATUS_t enumeration parameter names changed and additional  
                              status parameter E_EEPROM_XMC1_OPERATION_STATUS_NO_CRC_WRITTEN added.<BR> 
 4.1.4       09-Jul-2015   Updated APP help documentation usage section code snippet.
 4.1.6       15-Aug-2015   Added support for XMC1400 devices.
 4.1.8       08-Jul-2016   Fixed incorrect case for an included header. <BR>
 4.1.10      23-Sep-2016   Fixed issue in APP migration to different flash devices. UI and 
                           configuration header file will have the correct bank1 flash end address.<BR>                                
 *******************************************************************************/
import ifx.davex.app.manifest.*
import java.util.regex.Matcher
import java.util.regex.Pattern
class  E_EEPROM_XMC1 extends E_EEPROM_XMC1_GUI {

    /*-------------------------------Begin: E_EEPROM_XMC1 propety section---------------------------------------*/
    def version            = '4.1.10'

    def categoriesDescription = ["General Purpose/Flash"]// Minimum DAVE version required for the App
    def minDaveVersion           = '4.0.0'

    // Keywords to search in APPS selection view
    def keywords      = [
	"FLASH",
	"Emulation",
	"EEPROM",
	"Flash Emulated EEPROM",
	"Data Storage",
	"all"
    ]

    def softwareIDs = [
          "XMC1.1.*.*.*":"1.0.0",
          "XMC1.2.*.*.*":"1.0.0",
          "XMC1.3.*.*.*":"1.0.0",
          "XMC1.4.*.*.*":"1.0.0"]

    /**
     * Singleton property:
     * When it is true the app can be instantiated only once. 
     */
    def singleton     = true


    /**
     * initProvider property
     * It shall be true to add a call to <AppName>_Init() 
     */
    def initProvider  = true

    /**
     * Deprecated app
     * Set it to true to indicate that the app shall be not used for new projects.
     */
    def deprecated    = false

    /**
     * Sharable property.
     * It shall be true to allows multiple apps to require the same instance of this app.
     */
    def sharable      = true

    /**
     *  App function description.
     */

    //  App short description
    def description = "Emulates a portion of flash as an EEPROM for data storage."

    // Begin : User variable section
    MRequiredApp appres_sw_crc
    GInteger gint_max_blocks = GInteger(value:0)
    // End   : User variable section

    // E_EEPROM_XMC1 Constructor
    public E_EEPROM_XMC1(DaveEnv daveEnv) {

	List Block_Number=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
	Integer flash_size_int =(((Integer)Integer.parseInt(daveEnv.project.selectedDevice.flashSize)) * 1024)
	Integer flash_start_address = 0x10001000
	Integer flash_end_address = 0x10001000 + flash_size_int
	gtab_dummy.visible = MF({false},Boolean)
	String fn_regexp = ~/^[^\d\W]\w*\Z/
	/* ---------------------------------------------------------- */
	/* ------------ App consumption Block ----------------------- */
	/* ---------------------------------------------------------- */
	appres_sw_crc = MRequiredApp("CRC_SW","BLOCK_CRC",RNOTSHARABLE,"4.0.2",MF({gcheck_data_block_crc.value},Boolean))
	
	/* -------------------------------------------------------- */
	/* ------------ APP Configuration ------------------------- */
	/* -------------------------------------------------------- */
	appres_sw_crc.setVal(["gint_crc_width", "value"],MF({16},Integer))
	appres_sw_crc.setVal(["gint_poly", "value"],MF({4129},Integer))

	gint_required_size.minValue = 256
	gint_required_size.maxValue = ( (flash_size_int/4) - 256 )

	gint_actual_bank_size.value = MF({(Integer)((Integer)(Math.ceil(gint_required_size.value / 256)) * 256)},Integer)
	gint_actual_bank1_size.value =  MF({gint_actual_bank_size.value},Integer)
	gint_total_eeprom_size.value = MF({(Integer)((Integer)(gint_actual_bank_size.value * 2) + 512)},Integer)

	gint_bank0_start_address.value =  MF({(Integer)(flash_end_address  -  gint_total_eeprom_size.value) } ,Integer)
	gint_bank0_end_address.value   =  MF({(Integer)((flash_end_address - (gint_total_eeprom_size.value / 2)) - 1)  } ,Integer)
	gint_bank1_start_address.value =  MF({(Integer)(flash_end_address  - (gint_total_eeprom_size.value / 2)) } ,Integer)
	/* Dummy multiplication with zero (gint_total_eeprom_size.value * 0) is to solve the DAVE MS MF variable execution issue. */
	gint_bank1_end_address.value   =  MF({(Integer)(flash_end_address  - (gint_total_eeprom_size.value * 0) -1) } ,Integer)

	gint_bank0_size.value   =  MF({(Integer)(gint_actual_bank_size.value + 256)},Integer)
	gint_bank1_size.value   =  MF({(Integer)(gint_actual_bank_size.value + 256)},Integer)

	gint_max_blocks.value = MF({Block_Number[(gcombo_no_of_blocks.options.indexOf(gcombo_no_of_blocks.value))]},Integer)

	gint_block1_size.enabled = MF({if(gint_max_blocks.value >0 ) {true}else{false}},Boolean)
	gstring_block1_name.enabled = MF({if(gint_max_blocks.value >0) {true} else{false}},Boolean)
	glabel_block1_name.enabled = MF({if(gint_max_blocks.value >0) {true} else{false}},Boolean)

	gint_block2_size.enabled = MF({if(gint_max_blocks.value >1 ) {true} else{false}},Boolean)
	gstring_block2_name.enabled = MF({if(gint_max_blocks.value >1) {true} else{false}},Boolean)
	glabel_block2_name.enabled = MF({if(gint_max_blocks.value >1) {true} else{false}},Boolean)

	gint_block3_size.enabled = MF({if(gint_max_blocks.value >2 ) {true} else{false}},Boolean)
	gstring_block3_name.enabled = MF({if(gint_max_blocks.value >2) {true} else{false}},Boolean)
	glabel_block3_name.enabled = MF({if(gint_max_blocks.value >2) {true} else{false}},Boolean)

	gint_block4_size.enabled = MF({if(gint_max_blocks.value >3) {true} else{false}},Boolean)
	gstring_block4_name.enabled = MF({if(gint_max_blocks.value >3) {true} else{false}},Boolean)
	glabel_block4_name.enabled = MF({if(gint_max_blocks.value >3) {true} else{false}},Boolean)

	gint_block5_size.enabled = MF({if(gint_max_blocks.value >4) {true} else{false}},Boolean)
	gstring_block5_name.enabled = MF({if(gint_max_blocks.value >4) {true} else{false}},Boolean)
	glabel_block5_name.enabled = MF({if(gint_max_blocks.value >4) {true} else{false}},Boolean)

	gint_block6_size.enabled = MF({if(gint_max_blocks.value >5) {true} else{false}},Boolean)
	gstring_block6_name.enabled = MF({if(gint_max_blocks.value >5) {true} else{false}},Boolean)
	glabel_block6_name.enabled = MF({if(gint_max_blocks.value >5) {true} else{false}},Boolean)

	gint_block7_size.enabled = MF({if(gint_max_blocks.value >6) {true} else{false}},Boolean)
	gstring_block7_name.enabled = MF({if(gint_max_blocks.value >6) {true} else{false}},Boolean)
	glabel_block7_name.enabled = MF({if(gint_max_blocks.value >6) {true} else{false}},Boolean)

	gint_block8_size.enabled = MF({if(gint_max_blocks.value >7) {true} else{false}},Boolean)
	gstring_block8_name.enabled = MF({if(gint_max_blocks.value >7) {true} else{false}},Boolean)
	glabel_block8_name.enabled = MF({if(gint_max_blocks.value >7) {true} else{false}},Boolean)

	gint_block9_size.enabled = MF({if(gint_max_blocks.value >8) {true} else{false}},Boolean)
	gstring_block9_name.enabled = MF({if(gint_max_blocks.value >8) {true} else{false}},Boolean)
	glabel_block9_name.enabled = MF({if(gint_max_blocks.value >8) {true} else{false}},Boolean)

	gint_block10_size.enabled = MF({if(gint_max_blocks.value >9) {true} else{false}},Boolean)
	gstring_block10_name.enabled = MF({if(gint_max_blocks.value >9) {true} else{false}},Boolean)
	glabel_block10_name.enabled = MF({if(gint_max_blocks.value >9) {true} else{false}},Boolean)

	gimage_block1.visible = MF({
	  Matcher matcher = (gstring_block1_name.value =~ fn_regexp)
	    
	  if( (gstring_block1_name.enabled == true) &&
	    (((gstring_block1_name.value == gstring_block2_name.value)  && (gstring_block2_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block3_name.value)  && (gstring_block3_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block4_name.value)  && (gstring_block4_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block5_name.value)  && (gstring_block5_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block6_name.value)  && (gstring_block6_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block7_name.value)  && (gstring_block7_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block8_name.value)  && (gstring_block8_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true )) ||
	    ((gstring_block1_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true)) ||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block2.visible = MF({
	    Matcher matcher = (gstring_block2_name.value =~ fn_regexp)
	    
	    if( (gstring_block2_name.enabled == true) &&
	    ( (gstring_block2_name.value == gstring_block1_name.value)  ||
	    ((gstring_block2_name.value == gstring_block3_name.value)  && (gstring_block3_name.enabled == true )) ||
	    ((gstring_block2_name.value == gstring_block4_name.value)  && (gstring_block4_name.enabled == true )) ||
	    ((gstring_block2_name.value == gstring_block5_name.value)  && (gstring_block5_name.enabled == true )) ||
	    ((gstring_block2_name.value == gstring_block6_name.value)  && (gstring_block6_name.enabled == true )) ||
	    ((gstring_block2_name.value == gstring_block7_name.value)  && (gstring_block7_name.enabled == true )) ||
	    ((gstring_block2_name.value == gstring_block8_name.value)  && (gstring_block8_name.enabled == true )) ||
	    ((gstring_block2_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true )) ||
	    ((gstring_block2_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true)) ||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block3.visible = MF({
	    Matcher matcher = (gstring_block3_name.value =~ fn_regexp)
	    
	    if(  (gstring_block3_name.enabled == true) &&
	    ( (gstring_block3_name.value == gstring_block1_name.value)  ||
	    (gstring_block3_name.value == gstring_block2_name.value)  ||
	    ((gstring_block3_name.value == gstring_block4_name.value)  && (gstring_block4_name.enabled == true)) ||
	    ((gstring_block3_name.value == gstring_block5_name.value)  && (gstring_block5_name.enabled == true)) ||
	    ((gstring_block3_name.value == gstring_block6_name.value)  && (gstring_block6_name.enabled == true)) ||
	    ((gstring_block3_name.value == gstring_block7_name.value)  && (gstring_block7_name.enabled == true)) ||
	    ((gstring_block3_name.value == gstring_block8_name.value)  && (gstring_block8_name.enabled == true)) ||
	    ((gstring_block3_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true)) ||
	    ((gstring_block3_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true))||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block4.visible = MF({
	    Matcher matcher = (gstring_block4_name.value =~ fn_regexp)
	    
	    if(  (gstring_block4_name.enabled == true) &&
	    ( (gstring_block4_name.value == gstring_block1_name.value)  ||
	    (gstring_block4_name.value == gstring_block2_name.value)  ||
	    (gstring_block4_name.value == gstring_block3_name.value)  ||
	    ((gstring_block4_name.value == gstring_block5_name.value)  && (gstring_block5_name.enabled == true)) ||
	    ((gstring_block4_name.value == gstring_block6_name.value)  && (gstring_block6_name.enabled == true)) ||
	    ((gstring_block4_name.value == gstring_block7_name.value)  && (gstring_block7_name.enabled == true)) ||
	    ((gstring_block4_name.value == gstring_block8_name.value)  && (gstring_block8_name.enabled == true)) ||
	    ((gstring_block4_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true)) ||
	    ((gstring_block4_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true))||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block5.visible = MF({
	    Matcher matcher = (gstring_block5_name.value =~ fn_regexp)
	    
	    if(  (gstring_block5_name.enabled == true) &&
	    ( (gstring_block5_name.value == gstring_block1_name.value)  ||
	    (gstring_block5_name.value == gstring_block2_name.value)  ||
	    (gstring_block5_name.value == gstring_block3_name.value)  ||
	    (gstring_block5_name.value == gstring_block4_name.value)  ||
	    ((gstring_block5_name.value == gstring_block6_name.value)  && (gstring_block6_name.enabled == true)) ||
	    ((gstring_block5_name.value == gstring_block7_name.value)  && (gstring_block7_name.enabled == true)) ||
	    ((gstring_block5_name.value == gstring_block8_name.value)  && (gstring_block8_name.enabled == true)) ||
	    ((gstring_block5_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true)) ||
	    ((gstring_block5_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true))||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block6.visible = MF({
	    Matcher matcher = (gstring_block6_name.value =~ fn_regexp)
	    
	    if(  (gstring_block6_name.enabled == true) &&
	    ( (gstring_block6_name.value == gstring_block1_name.value)  ||
	    (gstring_block6_name.value == gstring_block2_name.value)  ||
	    (gstring_block6_name.value == gstring_block3_name.value)  ||
	    (gstring_block6_name.value == gstring_block4_name.value)  ||
	    (gstring_block6_name.value == gstring_block5_name.value)  ||
	    ((gstring_block6_name.value == gstring_block7_name.value)  && (gstring_block7_name.enabled == true)) ||
	    ((gstring_block6_name.value == gstring_block8_name.value)  && (gstring_block8_name.enabled == true)) ||
	    ((gstring_block6_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true)) ||
	    ((gstring_block6_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true))||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block7.visible = MF({
	    Matcher matcher = (gstring_block7_name.value =~ fn_regexp)
	    
	    if(  (gstring_block7_name.enabled == true) &&
	    ( (gstring_block7_name.value == gstring_block1_name.value)  ||
	    (gstring_block7_name.value == gstring_block2_name.value)  ||
	    (gstring_block7_name.value == gstring_block3_name.value)  ||
	    (gstring_block7_name.value == gstring_block4_name.value)  ||
	    (gstring_block7_name.value == gstring_block5_name.value)  ||
	    (gstring_block7_name.value == gstring_block6_name.value)  ||
	    ((gstring_block7_name.value == gstring_block8_name.value)  && (gstring_block8_name.enabled == true)) ||
	    ((gstring_block7_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true)) ||
	    ((gstring_block7_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true))||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block8.visible = MF({
	    Matcher matcher = (gstring_block8_name.value =~ fn_regexp)
	    
	    if(  (gstring_block8_name.enabled == true) &&
	    ( (gstring_block8_name.value == gstring_block1_name.value)  ||
	    (gstring_block8_name.value == gstring_block2_name.value)  ||
	    (gstring_block8_name.value == gstring_block3_name.value)  ||
	    (gstring_block8_name.value == gstring_block4_name.value)  ||
	    (gstring_block8_name.value == gstring_block5_name.value)  ||
	    (gstring_block8_name.value == gstring_block6_name.value)  ||
	    (gstring_block8_name.value == gstring_block7_name.value)  ||
	    ((gstring_block8_name.value == gstring_block9_name.value)  && (gstring_block9_name.enabled == true)) ||
	    ((gstring_block8_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true))||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block9.visible = MF({
	    Matcher matcher = (gstring_block9_name.value =~ fn_regexp)
	    
	    if(  (gstring_block9_name.enabled == true) &&
	    ( (gstring_block9_name.value == gstring_block1_name.value)  ||
	    (gstring_block9_name.value == gstring_block2_name.value)  ||
	    (gstring_block9_name.value == gstring_block3_name.value)  ||
	    (gstring_block9_name.value == gstring_block4_name.value)  ||
	    (gstring_block9_name.value == gstring_block5_name.value)  ||
	    (gstring_block9_name.value == gstring_block6_name.value)  ||
	    (gstring_block9_name.value == gstring_block7_name.value)  ||
	    (gstring_block9_name.value == gstring_block8_name.value)  ||
	    ((gstring_block9_name.value == gstring_block10_name.value) && (gstring_block10_name.enabled == true))|| 
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gimage_block10.visible = MF({
	    Matcher matcher = (gstring_block10_name.value =~ fn_regexp)
	    
	    if(  (gstring_block10_name.enabled == true) &&
	    ( (gstring_block10_name.value == gstring_block1_name.value)  ||
	    (gstring_block10_name.value == gstring_block2_name.value)  ||
	    (gstring_block10_name.value == gstring_block3_name.value)  ||
	    (gstring_block10_name.value == gstring_block4_name.value)  ||
	    (gstring_block10_name.value == gstring_block5_name.value)  ||
	    (gstring_block10_name.value == gstring_block6_name.value)  ||
	    (gstring_block10_name.value == gstring_block7_name.value)  ||
	    (gstring_block10_name.value == gstring_block8_name.value)  ||
	    (gstring_block10_name.value == gstring_block9_name.value)  ||
	    ((!matcher.matches()) == true ) )
	    )
	    { true}
	    else
	    {false}},Boolean)

	gmessage_name_clash.visible = MF({
	    if(    (gimage_block1.visible == true)  ||
	    (gimage_block2.visible == true)  ||
	    (gimage_block3.visible == true)  ||
	    (gimage_block4.visible == true)  ||
	    (gimage_block5.visible == true)  ||
	    (gimage_block6.visible == true)  ||
	    (gimage_block7.visible == true)  ||
	    (gimage_block8.visible == true)  ||
	    (gimage_block9.visible == true)  ||
	    (gimage_block10.visible == true)
	    )
	    { true}
	    else
	    {false}},Boolean)
    }

    /* -------------------------------------------------------- */
    /* ------------  File Generation  ------------------------- */
    /* -------------------------------------------------------- */
    def generateFiles()	{
	copy("e_eeprom_xmc1.c", "e_eeprom_xmc1.c")
	copy("e_eeprom_xmc1.h", "e_eeprom_xmc1.h")
	generate("e_eeprom_xmc1_confc.tmpl", "e_eeprom_xmc1_conf.c")
	generate("e_eeprom_xmc1_confh.tmpl", "e_eeprom_xmc1_conf.h")
	generate("e_eeprom_xmc1_externh.tmpl", "e_eeprom_xmc1_extern.h")
    }

}
