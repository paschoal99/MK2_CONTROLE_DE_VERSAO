
MK2_TESTE_ACIONAMENTO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b674  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  1000c674  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         0000014c  20000550  1000c7b8  00010550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000064c  2000069c  0000054c  0001069c  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00001238  00000000  00000000  000106a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001c7eb  00000000  00000000  000118d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004114  00000000  00000000  0002e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000099fa  00000000  00000000  000321d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000401c  00000000  00000000  0003bbd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000b0d6  00000000  00000000  0003fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f2a  00000000  00000000  0004acc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f30  00000000  00000000  00050bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000e93  00000000  00000000  00051b20  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	1000c674 	.word	0x1000c674
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	1000c7b8 	.word	0x1000c7b8
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	2000069c 	.word	0x2000069c
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	1000c904 	.word	0x1000c904
	ldr	r2, =__ram_code_start
10001084:	2000069c 	.word	0x2000069c
	ldr	r3, =__ram_code_end
10001088:	2000069c 	.word	0x2000069c
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	2000069c 	.word	0x2000069c
	ldr	r2, =__bss_end
10001090:	20000ce8 	.word	0x20000ce8
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	1000c1b9 	.word	0x1000c1b9
    blx  r0
#endif

    ldr  r0, =main
10001098:	10008879 	.word	0x10008879

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f005 fd06 	bl	10006ab4 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f005 fd4a 	bl	10006b40 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f001 f8b8 	bl	1000227c <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f001 f8a5 	bl	1000227c <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	2000069c 	.word	0x2000069c
10001168:	200006a0 	.word	0x200006a0
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
10001188:	b580      	push	{r7, lr}
1000118a:	b082      	sub	sp, #8
1000118c:	af00      	add	r7, sp, #0
1000118e:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eru);
}
10001190:	46bd      	mov	sp, r7
10001192:	b002      	add	sp, #8
10001194:	bd80      	pop	{r7, pc}
10001196:	46c0      	nop			; (mov r8, r8)

10001198 <XMC_FLASH_IsBusy>:
 * \par<b>Related APIs:</b><BR>
 * XMC_FLASH_GetStatus()\n\n\n
 *
 */
__STATIC_INLINE bool XMC_FLASH_IsBusy(void)
{
10001198:	b580      	push	{r7, lr}
1000119a:	af00      	add	r7, sp, #0
  return (bool)(XMC_FLASH_GetStatus() & XMC_FLASH_STATUS_BUSY);
1000119c:	f000 f81a 	bl	100011d4 <XMC_FLASH_GetStatus>
100011a0:	1c02      	adds	r2, r0, #0
100011a2:	2301      	movs	r3, #1
100011a4:	4013      	ands	r3, r2
100011a6:	1e5a      	subs	r2, r3, #1
100011a8:	4193      	sbcs	r3, r2
100011aa:	b2db      	uxtb	r3, r3
}
100011ac:	1c18      	adds	r0, r3, #0
100011ae:	46bd      	mov	sp, r7
100011b0:	bd80      	pop	{r7, pc}
100011b2:	46c0      	nop			; (mov r8, r8)

100011b4 <XMC_FLASH_ClearStatus>:

/*
 * This API shall clear the ECC and VERIFICATION error status.
 */
void XMC_FLASH_ClearStatus(void)
{
100011b4:	b580      	push	{r7, lr}
100011b6:	af00      	add	r7, sp, #0
  NVM->NVMPROG |= (uint16_t)((uint16_t)NVM_NVMPROG_RSTVERR_Msk | (uint16_t)NVM_NVMPROG_RSTECC_Msk);
100011b8:	4905      	ldr	r1, [pc, #20]	; (100011d0 <XMC_FLASH_ClearStatus+0x1c>)
100011ba:	4b05      	ldr	r3, [pc, #20]	; (100011d0 <XMC_FLASH_ClearStatus+0x1c>)
100011bc:	889b      	ldrh	r3, [r3, #4]
100011be:	b29b      	uxth	r3, r3
100011c0:	22c0      	movs	r2, #192	; 0xc0
100011c2:	0192      	lsls	r2, r2, #6
100011c4:	4313      	orrs	r3, r2
100011c6:	b29b      	uxth	r3, r3
100011c8:	808b      	strh	r3, [r1, #4]
}
100011ca:	46bd      	mov	sp, r7
100011cc:	bd80      	pop	{r7, pc}
100011ce:	46c0      	nop			; (mov r8, r8)
100011d0:	40050000 	.word	0x40050000

100011d4 <XMC_FLASH_GetStatus>:

/*
 * This API shall return the status of NVM.
 */
uint32_t XMC_FLASH_GetStatus(void)
{
100011d4:	b580      	push	{r7, lr}
100011d6:	af00      	add	r7, sp, #0
  return NVM->NVMSTATUS;
100011d8:	4b02      	ldr	r3, [pc, #8]	; (100011e4 <XMC_FLASH_GetStatus+0x10>)
100011da:	881b      	ldrh	r3, [r3, #0]
100011dc:	b29b      	uxth	r3, r3
}
100011de:	1c18      	adds	r0, r3, #0
100011e0:	46bd      	mov	sp, r7
100011e2:	bd80      	pop	{r7, pc}
100011e4:	40050000 	.word	0x40050000

100011e8 <XMC_FLASH_ProgramVerifyPage>:
{
  (void)XMC1000_NvmErasePage(address);
}

void XMC_FLASH_ProgramVerifyPage(uint32_t *address, const uint32_t *data)
{
100011e8:	b580      	push	{r7, lr}
100011ea:	b082      	sub	sp, #8
100011ec:	af00      	add	r7, sp, #0
100011ee:	6078      	str	r0, [r7, #4]
100011f0:	6039      	str	r1, [r7, #0]
  (void)XMC1000_NvmProgVerify(data, address);
100011f2:	2382      	movs	r3, #130	; 0x82
100011f4:	005b      	lsls	r3, r3, #1
100011f6:	681b      	ldr	r3, [r3, #0]
100011f8:	6839      	ldr	r1, [r7, #0]
100011fa:	687a      	ldr	r2, [r7, #4]
100011fc:	1c08      	adds	r0, r1, #0
100011fe:	1c11      	adds	r1, r2, #0
10001200:	4798      	blx	r3
}
10001202:	46bd      	mov	sp, r7
10001204:	b002      	add	sp, #8
10001206:	bd80      	pop	{r7, pc}

10001208 <XMC_FLASH_WriteBlocks>:

/* Write blocks of data into flash*/
void XMC_FLASH_WriteBlocks(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verify)
{
10001208:	b580      	push	{r7, lr}
1000120a:	b086      	sub	sp, #24
1000120c:	af00      	add	r7, sp, #0
1000120e:	60f8      	str	r0, [r7, #12]
10001210:	60b9      	str	r1, [r7, #8]
10001212:	607a      	str	r2, [r7, #4]
10001214:	1c1a      	adds	r2, r3, #0
10001216:	1cfb      	adds	r3, r7, #3
10001218:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_FLASH_WriteBlocks: Starting address not aligned to Block",
                                                                   ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  /* Configure the continuous Write option command and reset the NVM error / verification status*/
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
1000121a:	4a29      	ldr	r2, [pc, #164]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
1000121c:	4b28      	ldr	r3, [pc, #160]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
1000121e:	889b      	ldrh	r3, [r3, #4]
10001220:	b29b      	uxth	r3, r3
10001222:	21ff      	movs	r1, #255	; 0xff
10001224:	438b      	bics	r3, r1
10001226:	b29b      	uxth	r3, r3
10001228:	8093      	strh	r3, [r2, #4]
  NVM->NVMPROG |= (uint16_t)(NVM_NVMPROG_RSTVERR_Msk | NVM_NVMPROG_RSTECC_Msk);
1000122a:	4925      	ldr	r1, [pc, #148]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
1000122c:	4b24      	ldr	r3, [pc, #144]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
1000122e:	889b      	ldrh	r3, [r3, #4]
10001230:	b29b      	uxth	r3, r3
10001232:	22c0      	movs	r2, #192	; 0xc0
10001234:	0192      	lsls	r2, r2, #6
10001236:	4313      	orrs	r3, r2
10001238:	b29b      	uxth	r3, r3
1000123a:	808b      	strh	r3, [r1, #4]

  if (verify == true)
1000123c:	1cfb      	adds	r3, r7, #3
1000123e:	781b      	ldrb	r3, [r3, #0]
10001240:	2b00      	cmp	r3, #0
10001242:	d008      	beq.n	10001256 <XMC_FLASH_WriteBlocks+0x4e>
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE_VERIFY;
10001244:	4a1e      	ldr	r2, [pc, #120]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
10001246:	4b1e      	ldr	r3, [pc, #120]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
10001248:	889b      	ldrh	r3, [r3, #4]
1000124a:	b29b      	uxth	r3, r3
1000124c:	2161      	movs	r1, #97	; 0x61
1000124e:	430b      	orrs	r3, r1
10001250:	b29b      	uxth	r3, r3
10001252:	8093      	strh	r3, [r2, #4]
10001254:	e007      	b.n	10001266 <XMC_FLASH_WriteBlocks+0x5e>
  }
  else
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
10001256:	4a1a      	ldr	r2, [pc, #104]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
10001258:	4b19      	ldr	r3, [pc, #100]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
1000125a:	889b      	ldrh	r3, [r3, #4]
1000125c:	b29b      	uxth	r3, r3
1000125e:	21a1      	movs	r1, #161	; 0xa1
10001260:	430b      	orrs	r3, r1
10001262:	b29b      	uxth	r3, r3
10001264:	8093      	strh	r3, [r2, #4]
  }

  for (block = 0U; block < num_blocks; ++block)
10001266:	2300      	movs	r3, #0
10001268:	613b      	str	r3, [r7, #16]
1000126a:	e01a      	b.n	100012a2 <XMC_FLASH_WriteBlocks+0x9a>
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
1000126c:	2300      	movs	r3, #0
1000126e:	617b      	str	r3, [r7, #20]
10001270:	e00c      	b.n	1000128c <XMC_FLASH_WriteBlocks+0x84>
    {
      *address = *data;
10001272:	68bb      	ldr	r3, [r7, #8]
10001274:	681a      	ldr	r2, [r3, #0]
10001276:	68fb      	ldr	r3, [r7, #12]
10001278:	601a      	str	r2, [r3, #0]
      data++;
1000127a:	68bb      	ldr	r3, [r7, #8]
1000127c:	3304      	adds	r3, #4
1000127e:	60bb      	str	r3, [r7, #8]
      address++;
10001280:	68fb      	ldr	r3, [r7, #12]
10001282:	3304      	adds	r3, #4
10001284:	60fb      	str	r3, [r7, #12]
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
  }

  for (block = 0U; block < num_blocks; ++block)
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
10001286:	697b      	ldr	r3, [r7, #20]
10001288:	3301      	adds	r3, #1
1000128a:	617b      	str	r3, [r7, #20]
1000128c:	697b      	ldr	r3, [r7, #20]
1000128e:	2b03      	cmp	r3, #3
10001290:	d9ef      	bls.n	10001272 <XMC_FLASH_WriteBlocks+0x6a>
      *address = *data;
      data++;
      address++;
    }
      
    while (XMC_FLASH_IsBusy() == true)
10001292:	46c0      	nop			; (mov r8, r8)
10001294:	f7ff ff80 	bl	10001198 <XMC_FLASH_IsBusy>
10001298:	1e03      	subs	r3, r0, #0
1000129a:	d1fb      	bne.n	10001294 <XMC_FLASH_WriteBlocks+0x8c>
  else
  {
    NVM->NVMPROG |= (uint16_t)FLASH_ACTION_CONTINUOUS_WRITE;
  }

  for (block = 0U; block < num_blocks; ++block)
1000129c:	693b      	ldr	r3, [r7, #16]
1000129e:	3301      	adds	r3, #1
100012a0:	613b      	str	r3, [r7, #16]
100012a2:	693a      	ldr	r2, [r7, #16]
100012a4:	687b      	ldr	r3, [r7, #4]
100012a6:	429a      	cmp	r2, r3
100012a8:	d3e0      	bcc.n	1000126c <XMC_FLASH_WriteBlocks+0x64>
    {
    }
  }

  /* Stop continuous write operation */
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
100012aa:	4a05      	ldr	r2, [pc, #20]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
100012ac:	4b04      	ldr	r3, [pc, #16]	; (100012c0 <XMC_FLASH_WriteBlocks+0xb8>)
100012ae:	889b      	ldrh	r3, [r3, #4]
100012b0:	b29b      	uxth	r3, r3
100012b2:	21ff      	movs	r1, #255	; 0xff
100012b4:	438b      	bics	r3, r1
100012b6:	b29b      	uxth	r3, r3
100012b8:	8093      	strh	r3, [r2, #4]
}
100012ba:	46bd      	mov	sp, r7
100012bc:	b006      	add	sp, #24
100012be:	bd80      	pop	{r7, pc}
100012c0:	40050000 	.word	0x40050000

100012c4 <XMC_FLASH_ErasePages>:

/* Erase flash pages */
void XMC_FLASH_ErasePages(uint32_t *address, uint32_t num_pages)
{
100012c4:	b580      	push	{r7, lr}
100012c6:	b084      	sub	sp, #16
100012c8:	af00      	add	r7, sp, #0
100012ca:	6078      	str	r0, [r7, #4]
100012cc:	6039      	str	r1, [r7, #0]
  uint32_t page;

  XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
                                                                    ((uint32_t)address & FLASH_PAGE_ADDR_MASK) == 0U)

  for (page = 0U; page < num_pages; ++page)
100012ce:	2300      	movs	r3, #0
100012d0:	60fb      	str	r3, [r7, #12]
100012d2:	e011      	b.n	100012f8 <XMC_FLASH_ErasePages+0x34>
  {
    (void)XMC1000_NvmErasePage(address);
100012d4:	2380      	movs	r3, #128	; 0x80
100012d6:	005b      	lsls	r3, r3, #1
100012d8:	681b      	ldr	r3, [r3, #0]
100012da:	687a      	ldr	r2, [r7, #4]
100012dc:	1c10      	adds	r0, r2, #0
100012de:	4798      	blx	r3

    while (XMC_FLASH_IsBusy() == true)
100012e0:	46c0      	nop			; (mov r8, r8)
100012e2:	f7ff ff59 	bl	10001198 <XMC_FLASH_IsBusy>
100012e6:	1e03      	subs	r3, r0, #0
100012e8:	d1fb      	bne.n	100012e2 <XMC_FLASH_ErasePages+0x1e>
    {
    }

    /* Increment the page address for the next erase */
    address += XMC_FLASH_WORDS_PER_PAGE;
100012ea:	687b      	ldr	r3, [r7, #4]
100012ec:	3301      	adds	r3, #1
100012ee:	33ff      	adds	r3, #255	; 0xff
100012f0:	607b      	str	r3, [r7, #4]
  uint32_t page;

  XMC_ASSERT("XMC_FLASH_ErasePages: Starting address not aligned to Page",
                                                                    ((uint32_t)address & FLASH_PAGE_ADDR_MASK) == 0U)

  for (page = 0U; page < num_pages; ++page)
100012f2:	68fb      	ldr	r3, [r7, #12]
100012f4:	3301      	adds	r3, #1
100012f6:	60fb      	str	r3, [r7, #12]
100012f8:	68fa      	ldr	r2, [r7, #12]
100012fa:	683b      	ldr	r3, [r7, #0]
100012fc:	429a      	cmp	r2, r3
100012fe:	d3e9      	bcc.n	100012d4 <XMC_FLASH_ErasePages+0x10>
    /* Increment the page address for the next erase */
    address += XMC_FLASH_WORDS_PER_PAGE;

  }

}
10001300:	46bd      	mov	sp, r7
10001302:	b004      	add	sp, #16
10001304:	bd80      	pop	{r7, pc}
10001306:	46c0      	nop			; (mov r8, r8)

10001308 <XMC_FLASH_ReadBlocks>:
  NVM->NVMPROG &= (uint16_t)(~(uint16_t)NVM_NVMPROG_ACTION_Msk);
}

/* Read data blocks from flash */
void XMC_FLASH_ReadBlocks(uint32_t *address, uint32_t *data, uint32_t num_blocks)
{
10001308:	b580      	push	{r7, lr}
1000130a:	b086      	sub	sp, #24
1000130c:	af00      	add	r7, sp, #0
1000130e:	60f8      	str	r0, [r7, #12]
10001310:	60b9      	str	r1, [r7, #8]
10001312:	607a      	str	r2, [r7, #4]
  uint32_t block;

  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
                                                                  ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
10001314:	2300      	movs	r3, #0
10001316:	613b      	str	r3, [r7, #16]
10001318:	e015      	b.n	10001346 <XMC_FLASH_ReadBlocks+0x3e>
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
1000131a:	2300      	movs	r3, #0
1000131c:	617b      	str	r3, [r7, #20]
1000131e:	e00c      	b.n	1000133a <XMC_FLASH_ReadBlocks+0x32>
    {
      *data = *address;
10001320:	68fb      	ldr	r3, [r7, #12]
10001322:	681a      	ldr	r2, [r3, #0]
10001324:	68bb      	ldr	r3, [r7, #8]
10001326:	601a      	str	r2, [r3, #0]
      data++;
10001328:	68bb      	ldr	r3, [r7, #8]
1000132a:	3304      	adds	r3, #4
1000132c:	60bb      	str	r3, [r7, #8]
      address++;
1000132e:	68fb      	ldr	r3, [r7, #12]
10001330:	3304      	adds	r3, #4
10001332:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
                                                                  ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
  {
    for (word = 0U; word < XMC_FLASH_WORDS_PER_BLOCK; ++word)
10001334:	697b      	ldr	r3, [r7, #20]
10001336:	3301      	adds	r3, #1
10001338:	617b      	str	r3, [r7, #20]
1000133a:	697b      	ldr	r3, [r7, #20]
1000133c:	2b03      	cmp	r3, #3
1000133e:	d9ef      	bls.n	10001320 <XMC_FLASH_ReadBlocks+0x18>
  uint32_t block;

  XMC_ASSERT("XMC_FLASH_ReadBlocks: Starting address not aligned to Block",
                                                                  ((uint32_t)address & FLASH_BLOCK_ADDR_MASK) == 0U)

  for (block = 0U; block < num_blocks; ++block)
10001340:	693b      	ldr	r3, [r7, #16]
10001342:	3301      	adds	r3, #1
10001344:	613b      	str	r3, [r7, #16]
10001346:	693a      	ldr	r2, [r7, #16]
10001348:	687b      	ldr	r3, [r7, #4]
1000134a:	429a      	cmp	r2, r3
1000134c:	d3e5      	bcc.n	1000131a <XMC_FLASH_ReadBlocks+0x12>
      *data = *address;
      data++;
      address++;
    }
  }
}
1000134e:	46bd      	mov	sp, r7
10001350:	b006      	add	sp, #24
10001352:	bd80      	pop	{r7, pc}

10001354 <XMC_FLASH_ProgramPage>:
  XMC_FLASH_ErasePages(address, XMC_FLASH_PAGES_PER_SECTOR);
}

/* Program single page */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
10001354:	b580      	push	{r7, lr}
10001356:	b082      	sub	sp, #8
10001358:	af00      	add	r7, sp, #0
1000135a:	6078      	str	r0, [r7, #4]
1000135c:	6039      	str	r1, [r7, #0]
  XMC_FLASH_ProgramVerifyPage(address, data);
1000135e:	687a      	ldr	r2, [r7, #4]
10001360:	683b      	ldr	r3, [r7, #0]
10001362:	1c10      	adds	r0, r2, #0
10001364:	1c19      	adds	r1, r3, #0
10001366:	f7ff ff3f 	bl	100011e8 <XMC_FLASH_ProgramVerifyPage>
}
1000136a:	46bd      	mov	sp, r7
1000136c:	b002      	add	sp, #8
1000136e:	bd80      	pop	{r7, pc}

10001370 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001370:	b590      	push	{r4, r7, lr}
10001372:	b085      	sub	sp, #20
10001374:	af00      	add	r7, sp, #0
10001376:	60f8      	str	r0, [r7, #12]
10001378:	607a      	str	r2, [r7, #4]
1000137a:	230b      	movs	r3, #11
1000137c:	18fb      	adds	r3, r7, r3
1000137e:	1c0a      	adds	r2, r1, #0
10001380:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001382:	230b      	movs	r3, #11
10001384:	18fb      	adds	r3, r7, r3
10001386:	781b      	ldrb	r3, [r3, #0]
10001388:	089b      	lsrs	r3, r3, #2
1000138a:	b2db      	uxtb	r3, r3
1000138c:	1c18      	adds	r0, r3, #0
1000138e:	230b      	movs	r3, #11
10001390:	18fb      	adds	r3, r7, r3
10001392:	781b      	ldrb	r3, [r3, #0]
10001394:	089b      	lsrs	r3, r3, #2
10001396:	b2db      	uxtb	r3, r3
10001398:	1c1a      	adds	r2, r3, #0
1000139a:	68fb      	ldr	r3, [r7, #12]
1000139c:	3204      	adds	r2, #4
1000139e:	0092      	lsls	r2, r2, #2
100013a0:	58d3      	ldr	r3, [r2, r3]
100013a2:	220b      	movs	r2, #11
100013a4:	18ba      	adds	r2, r7, r2
100013a6:	7812      	ldrb	r2, [r2, #0]
100013a8:	2103      	movs	r1, #3
100013aa:	400a      	ands	r2, r1
100013ac:	00d2      	lsls	r2, r2, #3
100013ae:	1c11      	adds	r1, r2, #0
100013b0:	22fc      	movs	r2, #252	; 0xfc
100013b2:	408a      	lsls	r2, r1
100013b4:	43d2      	mvns	r2, r2
100013b6:	401a      	ands	r2, r3
100013b8:	1c11      	adds	r1, r2, #0
100013ba:	68fb      	ldr	r3, [r7, #12]
100013bc:	1d02      	adds	r2, r0, #4
100013be:	0092      	lsls	r2, r2, #2
100013c0:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100013c2:	68fb      	ldr	r3, [r7, #12]
100013c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100013c6:	220b      	movs	r2, #11
100013c8:	18ba      	adds	r2, r7, r2
100013ca:	7812      	ldrb	r2, [r2, #0]
100013cc:	0052      	lsls	r2, r2, #1
100013ce:	1c11      	adds	r1, r2, #0
100013d0:	2203      	movs	r2, #3
100013d2:	408a      	lsls	r2, r1
100013d4:	43d2      	mvns	r2, r2
100013d6:	401a      	ands	r2, r3
100013d8:	68fb      	ldr	r3, [r7, #12]
100013da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100013dc:	230b      	movs	r3, #11
100013de:	18fb      	adds	r3, r7, r3
100013e0:	781b      	ldrb	r3, [r3, #0]
100013e2:	08db      	lsrs	r3, r3, #3
100013e4:	b2db      	uxtb	r3, r3
100013e6:	1c18      	adds	r0, r3, #0
100013e8:	230b      	movs	r3, #11
100013ea:	18fb      	adds	r3, r7, r3
100013ec:	781b      	ldrb	r3, [r3, #0]
100013ee:	08db      	lsrs	r3, r3, #3
100013f0:	b2db      	uxtb	r3, r3
100013f2:	1c1a      	adds	r2, r3, #0
100013f4:	68fb      	ldr	r3, [r7, #12]
100013f6:	3210      	adds	r2, #16
100013f8:	0092      	lsls	r2, r2, #2
100013fa:	58d3      	ldr	r3, [r2, r3]
100013fc:	220b      	movs	r2, #11
100013fe:	18ba      	adds	r2, r7, r2
10001400:	7812      	ldrb	r2, [r2, #0]
10001402:	2107      	movs	r1, #7
10001404:	400a      	ands	r2, r1
10001406:	0092      	lsls	r2, r2, #2
10001408:	1c11      	adds	r1, r2, #0
1000140a:	2204      	movs	r2, #4
1000140c:	408a      	lsls	r2, r1
1000140e:	43d2      	mvns	r2, r2
10001410:	401a      	ands	r2, r3
10001412:	1c11      	adds	r1, r2, #0
10001414:	68fb      	ldr	r3, [r7, #12]
10001416:	1c02      	adds	r2, r0, #0
10001418:	3210      	adds	r2, #16
1000141a:	0092      	lsls	r2, r2, #2
1000141c:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
1000141e:	230b      	movs	r3, #11
10001420:	18fb      	adds	r3, r7, r3
10001422:	781b      	ldrb	r3, [r3, #0]
10001424:	08db      	lsrs	r3, r3, #3
10001426:	b2db      	uxtb	r3, r3
10001428:	1c18      	adds	r0, r3, #0
1000142a:	230b      	movs	r3, #11
1000142c:	18fb      	adds	r3, r7, r3
1000142e:	781b      	ldrb	r3, [r3, #0]
10001430:	08db      	lsrs	r3, r3, #3
10001432:	b2db      	uxtb	r3, r3
10001434:	1c1a      	adds	r2, r3, #0
10001436:	68fb      	ldr	r3, [r7, #12]
10001438:	3210      	adds	r2, #16
1000143a:	0092      	lsls	r2, r2, #2
1000143c:	58d2      	ldr	r2, [r2, r3]
1000143e:	687b      	ldr	r3, [r7, #4]
10001440:	785b      	ldrb	r3, [r3, #1]
10001442:	1c1c      	adds	r4, r3, #0
10001444:	230b      	movs	r3, #11
10001446:	18fb      	adds	r3, r7, r3
10001448:	781b      	ldrb	r3, [r3, #0]
1000144a:	2107      	movs	r1, #7
1000144c:	400b      	ands	r3, r1
1000144e:	009b      	lsls	r3, r3, #2
10001450:	409c      	lsls	r4, r3
10001452:	1c23      	adds	r3, r4, #0
10001454:	431a      	orrs	r2, r3
10001456:	1c11      	adds	r1, r2, #0
10001458:	68fb      	ldr	r3, [r7, #12]
1000145a:	1c02      	adds	r2, r0, #0
1000145c:	3210      	adds	r2, #16
1000145e:	0092      	lsls	r2, r2, #2
10001460:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001462:	68fb      	ldr	r3, [r7, #12]
10001464:	4a20      	ldr	r2, [pc, #128]	; (100014e8 <XMC_GPIO_Init+0x178>)
10001466:	4293      	cmp	r3, r2
10001468:	d10c      	bne.n	10001484 <XMC_GPIO_Init+0x114>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
1000146a:	68fb      	ldr	r3, [r7, #12]
1000146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
1000146e:	220b      	movs	r2, #11
10001470:	18ba      	adds	r2, r7, r2
10001472:	7812      	ldrb	r2, [r2, #0]
10001474:	2101      	movs	r1, #1
10001476:	4091      	lsls	r1, r2
10001478:	1c0a      	adds	r2, r1, #0
1000147a:	43d2      	mvns	r2, r2
1000147c:	401a      	ands	r2, r3
1000147e:	68fb      	ldr	r3, [r7, #12]
10001480:	661a      	str	r2, [r3, #96]	; 0x60
10001482:	e00d      	b.n	100014a0 <XMC_GPIO_Init+0x130>
  }
  else 
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
10001484:	687b      	ldr	r3, [r7, #4]
10001486:	781b      	ldrb	r3, [r3, #0]
10001488:	b2db      	uxtb	r3, r3
1000148a:	b25b      	sxtb	r3, r3
1000148c:	2b00      	cmp	r3, #0
1000148e:	da07      	bge.n	100014a0 <XMC_GPIO_Init+0x130>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
10001490:	687b      	ldr	r3, [r7, #4]
10001492:	685a      	ldr	r2, [r3, #4]
10001494:	230b      	movs	r3, #11
10001496:	18fb      	adds	r3, r7, r3
10001498:	781b      	ldrb	r3, [r3, #0]
1000149a:	409a      	lsls	r2, r3
1000149c:	68fb      	ldr	r3, [r7, #12]
1000149e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100014a0:	230b      	movs	r3, #11
100014a2:	18fb      	adds	r3, r7, r3
100014a4:	781b      	ldrb	r3, [r3, #0]
100014a6:	089b      	lsrs	r3, r3, #2
100014a8:	b2db      	uxtb	r3, r3
100014aa:	1c18      	adds	r0, r3, #0
100014ac:	230b      	movs	r3, #11
100014ae:	18fb      	adds	r3, r7, r3
100014b0:	781b      	ldrb	r3, [r3, #0]
100014b2:	089b      	lsrs	r3, r3, #2
100014b4:	b2db      	uxtb	r3, r3
100014b6:	1c1a      	adds	r2, r3, #0
100014b8:	68fb      	ldr	r3, [r7, #12]
100014ba:	3204      	adds	r2, #4
100014bc:	0092      	lsls	r2, r2, #2
100014be:	58d2      	ldr	r2, [r2, r3]
100014c0:	687b      	ldr	r3, [r7, #4]
100014c2:	781b      	ldrb	r3, [r3, #0]
100014c4:	1c1c      	adds	r4, r3, #0
100014c6:	230b      	movs	r3, #11
100014c8:	18fb      	adds	r3, r7, r3
100014ca:	781b      	ldrb	r3, [r3, #0]
100014cc:	2103      	movs	r1, #3
100014ce:	400b      	ands	r3, r1
100014d0:	00db      	lsls	r3, r3, #3
100014d2:	409c      	lsls	r4, r3
100014d4:	1c23      	adds	r3, r4, #0
100014d6:	431a      	orrs	r2, r3
100014d8:	1c11      	adds	r1, r2, #0
100014da:	68fb      	ldr	r3, [r7, #12]
100014dc:	1d02      	adds	r2, r0, #4
100014de:	0092      	lsls	r2, r2, #2
100014e0:	50d1      	str	r1, [r2, r3]
}
100014e2:	46bd      	mov	sp, r7
100014e4:	b005      	add	sp, #20
100014e6:	bd90      	pop	{r4, r7, pc}
100014e8:	40040200 	.word	0x40040200

100014ec <delay>:
}

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
static void delay(uint32_t cycles)
{
100014ec:	b580      	push	{r7, lr}
100014ee:	b082      	sub	sp, #8
100014f0:	af00      	add	r7, sp, #0
100014f2:	6078      	str	r0, [r7, #4]
  while(cycles > 0U)
100014f4:	e003      	b.n	100014fe <delay+0x12>
  {
    __NOP();
100014f6:	46c0      	nop			; (mov r8, r8)
    cycles--;
100014f8:	687b      	ldr	r3, [r7, #4]
100014fa:	3b01      	subs	r3, #1
100014fc:	607b      	str	r3, [r7, #4]

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
static void delay(uint32_t cycles)
{
  while(cycles > 0U)
100014fe:	687b      	ldr	r3, [r7, #4]
10001500:	2b00      	cmp	r3, #0
10001502:	d1f8      	bne.n	100014f6 <delay+0xa>
  {
    __NOP();
    cycles--;
  }
}
10001504:	46bd      	mov	sp, r7
10001506:	b002      	add	sp, #8
10001508:	bd80      	pop	{r7, pc}
1000150a:	46c0      	nop			; (mov r8, r8)

1000150c <XMC_SCU_INTERRUPT_EnableEvent>:
}
 #endif

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
1000150c:	b5b0      	push	{r4, r5, r7, lr}
1000150e:	b082      	sub	sp, #8
10001510:	af00      	add	r7, sp, #0
10001512:	6038      	str	r0, [r7, #0]
10001514:	6079      	str	r1, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
10001516:	4b09      	ldr	r3, [pc, #36]	; (1000153c <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
10001518:	4a08      	ldr	r2, [pc, #32]	; (1000153c <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
1000151a:	6851      	ldr	r1, [r2, #4]
1000151c:	683a      	ldr	r2, [r7, #0]
1000151e:	430a      	orrs	r2, r1
10001520:	605a      	str	r2, [r3, #4]
#if UC_SERIES == XMC14
  SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
10001522:	4b06      	ldr	r3, [pc, #24]	; (1000153c <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
10001524:	4a05      	ldr	r2, [pc, #20]	; (1000153c <XMC_SCU_INTERRUPT_EnableEvent+0x30>)
10001526:	6a52      	ldr	r2, [r2, #36]	; 0x24
10001528:	6879      	ldr	r1, [r7, #4]
1000152a:	000c      	movs	r4, r1
1000152c:	2100      	movs	r1, #0
1000152e:	1c0d      	adds	r5, r1, #0
10001530:	1c21      	adds	r1, r4, #0
10001532:	430a      	orrs	r2, r1
10001534:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
10001536:	46bd      	mov	sp, r7
10001538:	b002      	add	sp, #8
1000153a:	bdb0      	pop	{r4, r5, r7, pc}
1000153c:	40010038 	.word	0x40010038

10001540 <XMC_SCU_INTERUPT_GetEventStatus>:
#endif
}

/* API to get the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
10001540:	b5b0      	push	{r4, r5, r7, lr}
10001542:	b082      	sub	sp, #8
10001544:	af00      	add	r7, sp, #0
  XMC_SCU_INTERRUPT_EVENT_t tmp;

  tmp = SCU_INTERRUPT->SRRAW;
10001546:	4b0e      	ldr	r3, [pc, #56]	; (10001580 <XMC_SCU_INTERUPT_GetEventStatus+0x40>)
10001548:	681b      	ldr	r3, [r3, #0]
1000154a:	603b      	str	r3, [r7, #0]
1000154c:	2300      	movs	r3, #0
1000154e:	607b      	str	r3, [r7, #4]
#if UC_SERIES == XMC14
  tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
10001550:	4b0b      	ldr	r3, [pc, #44]	; (10001580 <XMC_SCU_INTERUPT_GetEventStatus+0x40>)
10001552:	6a1b      	ldr	r3, [r3, #32]
10001554:	1c1c      	adds	r4, r3, #0
10001556:	2300      	movs	r3, #0
10001558:	1c1d      	adds	r5, r3, #0
1000155a:	0022      	movs	r2, r4
1000155c:	2300      	movs	r3, #0
1000155e:	1c19      	adds	r1, r3, #0
10001560:	1c0b      	adds	r3, r1, #0
10001562:	1c14      	adds	r4, r2, #0
10001564:	683a      	ldr	r2, [r7, #0]
10001566:	431a      	orrs	r2, r3
10001568:	603a      	str	r2, [r7, #0]
1000156a:	687a      	ldr	r2, [r7, #4]
1000156c:	4322      	orrs	r2, r4
1000156e:	1c13      	adds	r3, r2, #0
10001570:	607b      	str	r3, [r7, #4]
#endif
  return (tmp);
10001572:	683b      	ldr	r3, [r7, #0]
10001574:	687c      	ldr	r4, [r7, #4]
}
10001576:	1c18      	adds	r0, r3, #0
10001578:	1c21      	adds	r1, r4, #0
1000157a:	46bd      	mov	sp, r7
1000157c:	b002      	add	sp, #8
1000157e:	bdb0      	pop	{r4, r5, r7, pc}
10001580:	40010038 	.word	0x40010038

10001584 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
10001584:	b5b0      	push	{r4, r5, r7, lr}
10001586:	b082      	sub	sp, #8
10001588:	af00      	add	r7, sp, #0
1000158a:	6038      	str	r0, [r7, #0]
1000158c:	6079      	str	r1, [r7, #4]
  SCU_INTERRUPT->SRCLR |= (uint32_t)event;
1000158e:	4b09      	ldr	r3, [pc, #36]	; (100015b4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
10001590:	4a08      	ldr	r2, [pc, #32]	; (100015b4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
10001592:	6891      	ldr	r1, [r2, #8]
10001594:	683a      	ldr	r2, [r7, #0]
10001596:	430a      	orrs	r2, r1
10001598:	609a      	str	r2, [r3, #8]
#if UC_SERIES == XMC14
  SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
1000159a:	4b06      	ldr	r3, [pc, #24]	; (100015b4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
1000159c:	4a05      	ldr	r2, [pc, #20]	; (100015b4 <XMC_SCU_INTERRUPT_ClearEventStatus+0x30>)
1000159e:	6a92      	ldr	r2, [r2, #40]	; 0x28
100015a0:	6879      	ldr	r1, [r7, #4]
100015a2:	000c      	movs	r4, r1
100015a4:	2100      	movs	r1, #0
100015a6:	1c0d      	adds	r5, r1, #0
100015a8:	1c21      	adds	r1, r4, #0
100015aa:	430a      	orrs	r2, r1
100015ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
100015ae:	46bd      	mov	sp, r7
100015b0:	b002      	add	sp, #8
100015b2:	bdb0      	pop	{r4, r5, r7, pc}
100015b4:	40010038 	.word	0x40010038

100015b8 <XMC_SCU_LockProtectedBits>:

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
100015b8:	b580      	push	{r7, lr}
100015ba:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100015bc:	4b02      	ldr	r3, [pc, #8]	; (100015c8 <XMC_SCU_LockProtectedBits+0x10>)
100015be:	22c3      	movs	r2, #195	; 0xc3
100015c0:	625a      	str	r2, [r3, #36]	; 0x24
}
100015c2:	46bd      	mov	sp, r7
100015c4:	bd80      	pop	{r7, pc}
100015c6:	46c0      	nop			; (mov r8, r8)
100015c8:	40010000 	.word	0x40010000

100015cc <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
100015cc:	b580      	push	{r7, lr}
100015ce:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100015d0:	4b05      	ldr	r3, [pc, #20]	; (100015e8 <XMC_SCU_UnlockProtectedBits+0x1c>)
100015d2:	22c0      	movs	r2, #192	; 0xc0
100015d4:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100015d6:	46c0      	nop			; (mov r8, r8)
100015d8:	4b03      	ldr	r3, [pc, #12]	; (100015e8 <XMC_SCU_UnlockProtectedBits+0x1c>)
100015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100015dc:	2204      	movs	r2, #4
100015de:	4013      	ands	r3, r2
100015e0:	d1fa      	bne.n	100015d8 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100015e2:	46bd      	mov	sp, r7
100015e4:	bd80      	pop	{r7, pc}
100015e6:	46c0      	nop			; (mov r8, r8)
100015e8:	40010000 	.word	0x40010000

100015ec <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100015ec:	b580      	push	{r7, lr}
100015ee:	b082      	sub	sp, #8
100015f0:	af00      	add	r7, sp, #0
100015f2:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
100015f4:	f7ff ffea 	bl	100015cc <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
100015f8:	687b      	ldr	r3, [r7, #4]
100015fa:	799b      	ldrb	r3, [r3, #6]
100015fc:	2b30      	cmp	r3, #48	; 0x30
100015fe:	d03c      	beq.n	1000167a <XMC_SCU_CLOCK_Init+0x8e>
  {
    if (OSCHP_GetFrequency() > 20000000U)
10001600:	f7ff fdba 	bl	10001178 <OSCHP_GetFrequency>
10001604:	1e02      	subs	r2, r0, #0
10001606:	4b36      	ldr	r3, [pc, #216]	; (100016e0 <XMC_SCU_CLOCK_Init+0xf4>)
10001608:	429a      	cmp	r2, r3
1000160a:	d909      	bls.n	10001620 <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
1000160c:	4a35      	ldr	r2, [pc, #212]	; (100016e4 <XMC_SCU_CLOCK_Init+0xf8>)
1000160e:	4935      	ldr	r1, [pc, #212]	; (100016e4 <XMC_SCU_CLOCK_Init+0xf8>)
10001610:	2390      	movs	r3, #144	; 0x90
10001612:	5acb      	ldrh	r3, [r1, r3]
10001614:	b29b      	uxth	r3, r3
10001616:	2140      	movs	r1, #64	; 0x40
10001618:	430b      	orrs	r3, r1
1000161a:	b299      	uxth	r1, r3
1000161c:	2390      	movs	r3, #144	; 0x90
1000161e:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001620:	4a30      	ldr	r2, [pc, #192]	; (100016e4 <XMC_SCU_CLOCK_Init+0xf8>)
10001622:	4930      	ldr	r1, [pc, #192]	; (100016e4 <XMC_SCU_CLOCK_Init+0xf8>)
10001624:	2390      	movs	r3, #144	; 0x90
10001626:	5acb      	ldrh	r3, [r1, r3]
10001628:	b29b      	uxth	r3, r3
1000162a:	b29b      	uxth	r3, r3
1000162c:	1c19      	adds	r1, r3, #0
1000162e:	2332      	movs	r3, #50	; 0x32
10001630:	4399      	bics	r1, r3
10001632:	1c0b      	adds	r3, r1, #0
10001634:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001636:	687b      	ldr	r3, [r7, #4]
10001638:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000163a:	b29b      	uxth	r3, r3
1000163c:	430b      	orrs	r3, r1
1000163e:	b29b      	uxth	r3, r3
10001640:	b299      	uxth	r1, r3
10001642:	2390      	movs	r3, #144	; 0x90
10001644:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* Restart OSC_HP oscillator watchdog */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001646:	4b28      	ldr	r3, [pc, #160]	; (100016e8 <XMC_SCU_CLOCK_Init+0xfc>)
10001648:	2202      	movs	r2, #2
1000164a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Enable OSC_HP oscillator watchdog*/
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
1000164c:	4b27      	ldr	r3, [pc, #156]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
1000164e:	4a27      	ldr	r2, [pc, #156]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
10001650:	6952      	ldr	r2, [r2, #20]
10001652:	4927      	ldr	r1, [pc, #156]	; (100016f0 <XMC_SCU_CLOCK_Init+0x104>)
10001654:	400a      	ands	r2, r1
10001656:	615a      	str	r2, [r3, #20]
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk;
10001658:	4b24      	ldr	r3, [pc, #144]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
1000165a:	4a24      	ldr	r2, [pc, #144]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
1000165c:	6952      	ldr	r2, [r2, #20]
1000165e:	2180      	movs	r1, #128	; 0x80
10001660:	0489      	lsls	r1, r1, #18
10001662:	430a      	orrs	r2, r1
10001664:	615a      	str	r2, [r3, #20]

      /* Wait a few DCO2 cycles for the update of the clock detection result */
      delay(2500);
10001666:	4b23      	ldr	r3, [pc, #140]	; (100016f4 <XMC_SCU_CLOCK_Init+0x108>)
10001668:	1c18      	adds	r0, r3, #0
1000166a:	f7ff ff3f 	bl	100014ec <delay>

      /* check clock is ok */
    }
    while(SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
1000166e:	4b1e      	ldr	r3, [pc, #120]	; (100016e8 <XMC_SCU_CLOCK_Init+0xfc>)
10001670:	6a1b      	ldr	r3, [r3, #32]
10001672:	2202      	movs	r2, #2
10001674:	4013      	ands	r3, r2
10001676:	d1e6      	bne.n	10001646 <XMC_SCU_CLOCK_Init+0x5a>
10001678:	e009      	b.n	1000168e <XMC_SCU_CLOCK_Init+0xa2>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
1000167a:	4a1a      	ldr	r2, [pc, #104]	; (100016e4 <XMC_SCU_CLOCK_Init+0xf8>)
1000167c:	4919      	ldr	r1, [pc, #100]	; (100016e4 <XMC_SCU_CLOCK_Init+0xf8>)
1000167e:	2390      	movs	r3, #144	; 0x90
10001680:	5acb      	ldrh	r3, [r1, r3]
10001682:	b29b      	uxth	r3, r3
10001684:	2130      	movs	r1, #48	; 0x30
10001686:	430b      	orrs	r3, r1
10001688:	b299      	uxth	r1, r3
1000168a:	2390      	movs	r3, #144	; 0x90
1000168c:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
1000168e:	4a15      	ldr	r2, [pc, #84]	; (100016e4 <XMC_SCU_CLOCK_Init+0xf8>)
10001690:	687b      	ldr	r3, [r7, #4]
10001692:	79db      	ldrb	r3, [r3, #7]
10001694:	b299      	uxth	r1, r3
10001696:	238c      	movs	r3, #140	; 0x8c
10001698:	52d1      	strh	r1, [r2, r3]

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
1000169a:	4b14      	ldr	r3, [pc, #80]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
1000169c:	4a13      	ldr	r2, [pc, #76]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
1000169e:	69d2      	ldr	r2, [r2, #28]
100016a0:	4915      	ldr	r1, [pc, #84]	; (100016f8 <XMC_SCU_CLOCK_Init+0x10c>)
100016a2:	400a      	ands	r2, r1
                    config->dclk_src;
100016a4:	6879      	ldr	r1, [r7, #4]
100016a6:	8889      	ldrh	r1, [r1, #4]
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
100016a8:	430a      	orrs	r2, r1
100016aa:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100016ac:	4a0f      	ldr	r2, [pc, #60]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
100016ae:	4b0f      	ldr	r3, [pc, #60]	; (100016ec <XMC_SCU_CLOCK_Init+0x100>)
100016b0:	681b      	ldr	r3, [r3, #0]
100016b2:	4912      	ldr	r1, [pc, #72]	; (100016fc <XMC_SCU_CLOCK_Init+0x110>)
100016b4:	4019      	ands	r1, r3
                   config->rtc_src |
100016b6:	687b      	ldr	r3, [r7, #4]
100016b8:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100016ba:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
100016bc:	687b      	ldr	r3, [r7, #4]
100016be:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
100016c0:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
100016c2:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
100016c4:	f7ff ff78 	bl	100015b8 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
100016c8:	687b      	ldr	r3, [r7, #4]
100016ca:	789b      	ldrb	r3, [r3, #2]
100016cc:	1c1a      	adds	r2, r3, #0
100016ce:	687b      	ldr	r3, [r7, #4]
100016d0:	881b      	ldrh	r3, [r3, #0]
100016d2:	1c10      	adds	r0, r2, #0
100016d4:	1c19      	adds	r1, r3, #0
100016d6:	f000 f82d 	bl	10001734 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
100016da:	46bd      	mov	sp, r7
100016dc:	b002      	add	sp, #8
100016de:	bd80      	pop	{r7, pc}
100016e0:	01312d00 	.word	0x01312d00
100016e4:	40011000 	.word	0x40011000
100016e8:	40010038 	.word	0x40010038
100016ec:	40010300 	.word	0x40010300
100016f0:	fdffffff 	.word	0xfdffffff
100016f4:	000009c4 	.word	0x000009c4
100016f8:	fffffdff 	.word	0xfffffdff
100016fc:	fff0ffff 	.word	0xfff0ffff

10001700 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10001700:	b580      	push	{r7, lr}
10001702:	b082      	sub	sp, #8
10001704:	af00      	add	r7, sp, #0
10001706:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
10001708:	f7ff ff60 	bl	100015cc <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
1000170c:	4b08      	ldr	r3, [pc, #32]	; (10001730 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000170e:	4a08      	ldr	r2, [pc, #32]	; (10001730 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10001710:	6911      	ldr	r1, [r2, #16]
10001712:	687a      	ldr	r2, [r7, #4]
10001714:	430a      	orrs	r2, r1
10001716:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001718:	46c0      	nop			; (mov r8, r8)
1000171a:	4b05      	ldr	r3, [pc, #20]	; (10001730 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000171c:	681a      	ldr	r2, [r3, #0]
1000171e:	2380      	movs	r3, #128	; 0x80
10001720:	05db      	lsls	r3, r3, #23
10001722:	4013      	ands	r3, r2
10001724:	d1f9      	bne.n	1000171a <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
10001726:	f7ff ff47 	bl	100015b8 <XMC_SCU_LockProtectedBits>
}
1000172a:	46bd      	mov	sp, r7
1000172c:	b002      	add	sp, #8
1000172e:	bd80      	pop	{r7, pc}
10001730:	40010300 	.word	0x40010300

10001734 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001734:	b580      	push	{r7, lr}
10001736:	b084      	sub	sp, #16
10001738:	af00      	add	r7, sp, #0
1000173a:	6078      	str	r0, [r7, #4]
1000173c:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
1000173e:	f7ff ff45 	bl	100015cc <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001742:	4b27      	ldr	r3, [pc, #156]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001744:	681a      	ldr	r2, [r3, #0]
10001746:	23ff      	movs	r3, #255	; 0xff
10001748:	021b      	lsls	r3, r3, #8
1000174a:	4013      	ands	r3, r2
1000174c:	0a1b      	lsrs	r3, r3, #8
1000174e:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001750:	4b23      	ldr	r3, [pc, #140]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001752:	4a23      	ldr	r2, [pc, #140]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001754:	69d2      	ldr	r2, [r2, #28]
10001756:	2103      	movs	r1, #3
10001758:	438a      	bics	r2, r1
1000175a:	1c11      	adds	r1, r2, #0
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
1000175c:	683a      	ldr	r2, [r7, #0]
1000175e:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
10001760:	430a      	orrs	r2, r1
10001762:	61da      	str	r2, [r3, #28]
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001764:	4b1e      	ldr	r3, [pc, #120]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001766:	4a1e      	ldr	r2, [pc, #120]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001768:	6812      	ldr	r2, [r2, #0]
1000176a:	491e      	ldr	r1, [pc, #120]	; (100017e4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
1000176c:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
1000176e:	683a      	ldr	r2, [r7, #0]
10001770:	20ff      	movs	r0, #255	; 0xff
10001772:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001774:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001776:	491c      	ldr	r1, [pc, #112]	; (100017e8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001778:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000177a:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000177c:	46c0      	nop			; (mov r8, r8)
1000177e:	4b18      	ldr	r3, [pc, #96]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001780:	681a      	ldr	r2, [r3, #0]
10001782:	2380      	movs	r3, #128	; 0x80
10001784:	05db      	lsls	r3, r3, #23
10001786:	4013      	ands	r3, r2
10001788:	d1f9      	bne.n	1000177e <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
1000178a:	68fa      	ldr	r2, [r7, #12]
1000178c:	687b      	ldr	r3, [r7, #4]
1000178e:	429a      	cmp	r2, r3
10001790:	d806      	bhi.n	100017a0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
10001792:	68fa      	ldr	r2, [r7, #12]
10001794:	687b      	ldr	r3, [r7, #4]
10001796:	1c10      	adds	r0, r2, #0
10001798:	1c19      	adds	r1, r3, #0
1000179a:	f000 f853 	bl	10001844 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000179e:	e005      	b.n	100017ac <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
100017a0:	68fa      	ldr	r2, [r7, #12]
100017a2:	687b      	ldr	r3, [r7, #4]
100017a4:	1c10      	adds	r0, r2, #0
100017a6:	1c19      	adds	r1, r3, #0
100017a8:	f000 f822 	bl	100017f0 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100017ac:	4b0c      	ldr	r3, [pc, #48]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100017ae:	4a0c      	ldr	r2, [pc, #48]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100017b0:	6812      	ldr	r2, [r2, #0]
100017b2:	490e      	ldr	r1, [pc, #56]	; (100017ec <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
100017b4:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100017b6:	687a      	ldr	r2, [r7, #4]
100017b8:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100017ba:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100017bc:	490a      	ldr	r1, [pc, #40]	; (100017e8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
100017be:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100017c0:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100017c2:	46c0      	nop			; (mov r8, r8)
100017c4:	4b06      	ldr	r3, [pc, #24]	; (100017e0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100017c6:	681a      	ldr	r2, [r3, #0]
100017c8:	2380      	movs	r3, #128	; 0x80
100017ca:	05db      	lsls	r3, r3, #23
100017cc:	4013      	ands	r3, r2
100017ce:	d1f9      	bne.n	100017c4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
100017d0:	f7ff fef2 	bl	100015b8 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
100017d4:	f7ff fc6c 	bl	100010b0 <SystemCoreClockUpdate>

}
100017d8:	46bd      	mov	sp, r7
100017da:	b004      	add	sp, #16
100017dc:	bd80      	pop	{r7, pc}
100017de:	46c0      	nop			; (mov r8, r8)
100017e0:	40010300 	.word	0x40010300
100017e4:	c00fff00 	.word	0xc00fff00
100017e8:	3ff00000 	.word	0x3ff00000
100017ec:	c00f00ff 	.word	0xc00f00ff

100017f0 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100017f0:	b580      	push	{r7, lr}
100017f2:	b082      	sub	sp, #8
100017f4:	af00      	add	r7, sp, #0
100017f6:	6078      	str	r0, [r7, #4]
100017f8:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
100017fa:	e014      	b.n	10001826 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
100017fc:	687b      	ldr	r3, [r7, #4]
100017fe:	089b      	lsrs	r3, r3, #2
10001800:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001802:	4b0d      	ldr	r3, [pc, #52]	; (10001838 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001804:	4a0c      	ldr	r2, [pc, #48]	; (10001838 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001806:	6812      	ldr	r2, [r2, #0]
10001808:	490c      	ldr	r1, [pc, #48]	; (1000183c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
1000180a:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
1000180c:	687a      	ldr	r2, [r7, #4]
1000180e:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001810:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10001812:	490b      	ldr	r1, [pc, #44]	; (10001840 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10001814:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001816:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001818:	46c0      	nop			; (mov r8, r8)
1000181a:	4b07      	ldr	r3, [pc, #28]	; (10001838 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
1000181c:	681a      	ldr	r2, [r3, #0]
1000181e:	2380      	movs	r3, #128	; 0x80
10001820:	05db      	lsls	r3, r3, #23
10001822:	4013      	ands	r3, r2
10001824:	d1f9      	bne.n	1000181a <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001826:	683b      	ldr	r3, [r7, #0]
10001828:	009a      	lsls	r2, r3, #2
1000182a:	687b      	ldr	r3, [r7, #4]
1000182c:	429a      	cmp	r2, r3
1000182e:	d3e5      	bcc.n	100017fc <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
10001830:	46bd      	mov	sp, r7
10001832:	b002      	add	sp, #8
10001834:	bd80      	pop	{r7, pc}
10001836:	46c0      	nop			; (mov r8, r8)
10001838:	40010300 	.word	0x40010300
1000183c:	c00f00ff 	.word	0xc00f00ff
10001840:	3ff00000 	.word	0x3ff00000

10001844 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001844:	b580      	push	{r7, lr}
10001846:	b082      	sub	sp, #8
10001848:	af00      	add	r7, sp, #0
1000184a:	6078      	str	r0, [r7, #4]
1000184c:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
1000184e:	e019      	b.n	10001884 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if(0U == curr_idiv)
10001850:	687b      	ldr	r3, [r7, #4]
10001852:	2b00      	cmp	r3, #0
10001854:	d101      	bne.n	1000185a <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
10001856:	2301      	movs	r3, #1
10001858:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000185a:	687b      	ldr	r3, [r7, #4]
1000185c:	009b      	lsls	r3, r3, #2
1000185e:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001860:	4b0c      	ldr	r3, [pc, #48]	; (10001894 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001862:	4a0c      	ldr	r2, [pc, #48]	; (10001894 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001864:	6812      	ldr	r2, [r2, #0]
10001866:	490c      	ldr	r1, [pc, #48]	; (10001898 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001868:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000186a:	687a      	ldr	r2, [r7, #4]
1000186c:	0212      	lsls	r2, r2, #8
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000186e:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001870:	490a      	ldr	r1, [pc, #40]	; (1000189c <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
10001872:	430a      	orrs	r2, r1
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001874:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001876:	46c0      	nop			; (mov r8, r8)
10001878:	4b06      	ldr	r3, [pc, #24]	; (10001894 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
1000187a:	681a      	ldr	r2, [r3, #0]
1000187c:	2380      	movs	r3, #128	; 0x80
1000187e:	05db      	lsls	r3, r3, #23
10001880:	4013      	ands	r3, r2
10001882:	d1f9      	bne.n	10001878 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001884:	687b      	ldr	r3, [r7, #4]
10001886:	009a      	lsls	r2, r3, #2
10001888:	683b      	ldr	r3, [r7, #0]
1000188a:	429a      	cmp	r2, r3
1000188c:	d3e0      	bcc.n	10001850 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
1000188e:	46bd      	mov	sp, r7
10001890:	b002      	add	sp, #8
10001892:	bd80      	pop	{r7, pc}
10001894:	40010300 	.word	0x40010300
10001898:	c00f00ff 	.word	0xc00f00ff
1000189c:	3ff00000 	.word	0x3ff00000

100018a0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
100018a0:	b580      	push	{r7, lr}
100018a2:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
100018a4:	4b02      	ldr	r3, [pc, #8]	; (100018b0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
100018a6:	681b      	ldr	r3, [r3, #0]
}
100018a8:	1c18      	adds	r0, r3, #0
100018aa:	46bd      	mov	sp, r7
100018ac:	bd80      	pop	{r7, pc}
100018ae:	46c0      	nop			; (mov r8, r8)
100018b0:	20003ffc 	.word	0x20003ffc

100018b4 <XMC_SCU_INTERRUPT_SetEventHandler>:

/*
 * API to assign the event handler function to be executed on occurrence of the selected event
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
100018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100018b6:	b087      	sub	sp, #28
100018b8:	af00      	add	r7, sp, #0
100018ba:	60b8      	str	r0, [r7, #8]
100018bc:	60f9      	str	r1, [r7, #12]
100018be:	607a      	str	r2, [r7, #4]
  XMC_SCU_STATUS_t status;

  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;
100018c0:	2200      	movs	r2, #0
100018c2:	617a      	str	r2, [r7, #20]

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100018c4:	e002      	b.n	100018cc <XMC_SCU_INTERRUPT_SetEventHandler+0x18>
  {
    index++;
100018c6:	697a      	ldr	r2, [r7, #20]
100018c8:	3201      	adds	r2, #1
100018ca:	617a      	str	r2, [r7, #20]
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100018cc:	697a      	ldr	r2, [r7, #20]
100018ce:	1c11      	adds	r1, r2, #0
100018d0:	3920      	subs	r1, #32
100018d2:	2900      	cmp	r1, #0
100018d4:	db03      	blt.n	100018de <XMC_SCU_INTERRUPT_SetEventHandler+0x2a>
100018d6:	68f8      	ldr	r0, [r7, #12]
100018d8:	40c8      	lsrs	r0, r1
100018da:	1c03      	adds	r3, r0, #0
100018dc:	e008      	b.n	100018f0 <XMC_SCU_INTERRUPT_SetEventHandler+0x3c>
100018de:	2120      	movs	r1, #32
100018e0:	1a89      	subs	r1, r1, r2
100018e2:	68f8      	ldr	r0, [r7, #12]
100018e4:	4088      	lsls	r0, r1
100018e6:	1c01      	adds	r1, r0, #0
100018e8:	68b8      	ldr	r0, [r7, #8]
100018ea:	40d0      	lsrs	r0, r2
100018ec:	1c03      	adds	r3, r0, #0
100018ee:	430b      	orrs	r3, r1
100018f0:	68f9      	ldr	r1, [r7, #12]
100018f2:	40d1      	lsrs	r1, r2
100018f4:	1c0c      	adds	r4, r1, #0
100018f6:	2201      	movs	r2, #1
100018f8:	401a      	ands	r2, r3
100018fa:	1c15      	adds	r5, r2, #0
100018fc:	2200      	movs	r2, #0
100018fe:	4022      	ands	r2, r4
10001900:	1c16      	adds	r6, r2, #0
10001902:	1c2a      	adds	r2, r5, #0
10001904:	4332      	orrs	r2, r6
10001906:	d102      	bne.n	1000190e <XMC_SCU_INTERRUPT_SetEventHandler+0x5a>
10001908:	697a      	ldr	r2, [r7, #20]
1000190a:	2a3f      	cmp	r2, #63	; 0x3f
1000190c:	d9db      	bls.n	100018c6 <XMC_SCU_INTERRUPT_SetEventHandler+0x12>
  {
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
1000190e:	697b      	ldr	r3, [r7, #20]
10001910:	2b40      	cmp	r3, #64	; 0x40
10001912:	d104      	bne.n	1000191e <XMC_SCU_INTERRUPT_SetEventHandler+0x6a>
  {
    status = XMC_SCU_STATUS_ERROR;
10001914:	2313      	movs	r3, #19
10001916:	18fb      	adds	r3, r7, r3
10001918:	2201      	movs	r2, #1
1000191a:	701a      	strb	r2, [r3, #0]
1000191c:	e008      	b.n	10001930 <XMC_SCU_INTERRUPT_SetEventHandler+0x7c>
  }
  else
  {
    event_handler_list[index] = handler;
1000191e:	4b08      	ldr	r3, [pc, #32]	; (10001940 <XMC_SCU_INTERRUPT_SetEventHandler+0x8c>)
10001920:	697a      	ldr	r2, [r7, #20]
10001922:	0092      	lsls	r2, r2, #2
10001924:	6879      	ldr	r1, [r7, #4]
10001926:	50d1      	str	r1, [r2, r3]
    status = XMC_SCU_STATUS_OK;
10001928:	2313      	movs	r3, #19
1000192a:	18fb      	adds	r3, r7, r3
1000192c:	2200      	movs	r2, #0
1000192e:	701a      	strb	r2, [r3, #0]
  }

  return (status);
10001930:	2313      	movs	r3, #19
10001932:	18fb      	adds	r3, r7, r3
10001934:	781b      	ldrb	r3, [r3, #0]
}
10001936:	1c18      	adds	r0, r3, #0
10001938:	46bd      	mov	sp, r7
1000193a:	b007      	add	sp, #28
1000193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000193e:	46c0      	nop			; (mov r8, r8)
10001940:	200006a4 	.word	0x200006a4

10001944 <XMC_SCU_IRQHandler>:

/*
 * A common function to execute callback functions for multiple events
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
10001944:	b5f0      	push	{r4, r5, r6, r7, lr}
10001946:	b08f      	sub	sp, #60	; 0x3c
10001948:	af00      	add	r7, sp, #0
1000194a:	61f8      	str	r0, [r7, #28]

  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
1000194c:	2300      	movs	r3, #0
1000194e:	637b      	str	r3, [r7, #52]	; 0x34
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
10001950:	f7ff fdf6 	bl	10001540 <XMC_SCU_INTERUPT_GetEventStatus>
10001954:	4a38      	ldr	r2, [pc, #224]	; (10001a38 <XMC_SCU_IRQHandler+0xf4>)
10001956:	69fb      	ldr	r3, [r7, #28]
10001958:	00db      	lsls	r3, r3, #3
1000195a:	18d3      	adds	r3, r2, r3
1000195c:	681a      	ldr	r2, [r3, #0]
1000195e:	685b      	ldr	r3, [r3, #4]
10001960:	1c16      	adds	r6, r2, #0
10001962:	4006      	ands	r6, r0
10001964:	62be      	str	r6, [r7, #40]	; 0x28
10001966:	400b      	ands	r3, r1
10001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  XMC_SCU_INTERRUPT_ClearEventStatus(event);
1000196a:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000196e:	1c10      	adds	r0, r2, #0
10001970:	1c19      	adds	r1, r3, #0
10001972:	f7ff fe07 	bl	10001584 <XMC_SCU_INTERRUPT_ClearEventStatus>

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001976:	e055      	b.n	10001a24 <XMC_SCU_IRQHandler+0xe0>
  {
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
10001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000197a:	1c1a      	adds	r2, r3, #0
1000197c:	3a20      	subs	r2, #32
1000197e:	2a00      	cmp	r2, #0
10001980:	db03      	blt.n	1000198a <XMC_SCU_IRQHandler+0x46>
10001982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10001984:	40d1      	lsrs	r1, r2
10001986:	1c0c      	adds	r4, r1, #0
10001988:	e008      	b.n	1000199c <XMC_SCU_IRQHandler+0x58>
1000198a:	2220      	movs	r2, #32
1000198c:	1ad2      	subs	r2, r2, r3
1000198e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10001990:	4091      	lsls	r1, r2
10001992:	1c0a      	adds	r2, r1, #0
10001994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10001996:	40d9      	lsrs	r1, r3
10001998:	1c0c      	adds	r4, r1, #0
1000199a:	4314      	orrs	r4, r2
1000199c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000199e:	40da      	lsrs	r2, r3
100019a0:	1c15      	adds	r5, r2, #0
100019a2:	2301      	movs	r3, #1
100019a4:	4023      	ands	r3, r4
100019a6:	60bb      	str	r3, [r7, #8]
100019a8:	2300      	movs	r3, #0
100019aa:	402b      	ands	r3, r5
100019ac:	60fb      	str	r3, [r7, #12]
100019ae:	68b9      	ldr	r1, [r7, #8]
100019b0:	68fa      	ldr	r2, [r7, #12]
100019b2:	1c0b      	adds	r3, r1, #0
100019b4:	4313      	orrs	r3, r2
100019b6:	d032      	beq.n	10001a1e <XMC_SCU_IRQHandler+0xda>
    {
      event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
100019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100019ba:	1c1a      	adds	r2, r3, #0
100019bc:	3a20      	subs	r2, #32
100019be:	2a00      	cmp	r2, #0
100019c0:	db03      	blt.n	100019ca <XMC_SCU_IRQHandler+0x86>
100019c2:	2101      	movs	r1, #1
100019c4:	4091      	lsls	r1, r2
100019c6:	6179      	str	r1, [r7, #20]
100019c8:	e00a      	b.n	100019e0 <XMC_SCU_IRQHandler+0x9c>
100019ca:	2220      	movs	r2, #32
100019cc:	1ad2      	subs	r2, r2, r3
100019ce:	2101      	movs	r1, #1
100019d0:	40d1      	lsrs	r1, r2
100019d2:	1c0a      	adds	r2, r1, #0
100019d4:	2100      	movs	r1, #0
100019d6:	4099      	lsls	r1, r3
100019d8:	6179      	str	r1, [r7, #20]
100019da:	6979      	ldr	r1, [r7, #20]
100019dc:	4311      	orrs	r1, r2
100019de:	6179      	str	r1, [r7, #20]
100019e0:	2201      	movs	r2, #1
100019e2:	409a      	lsls	r2, r3
100019e4:	613a      	str	r2, [r7, #16]
100019e6:	6939      	ldr	r1, [r7, #16]
100019e8:	697a      	ldr	r2, [r7, #20]
100019ea:	1c0b      	adds	r3, r1, #0
100019ec:	43db      	mvns	r3, r3
100019ee:	603b      	str	r3, [r7, #0]
100019f0:	1c13      	adds	r3, r2, #0
100019f2:	43db      	mvns	r3, r3
100019f4:	607b      	str	r3, [r7, #4]
100019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
100019f8:	6838      	ldr	r0, [r7, #0]
100019fa:	6879      	ldr	r1, [r7, #4]
100019fc:	1c02      	adds	r2, r0, #0
100019fe:	4013      	ands	r3, r2
10001a00:	62bb      	str	r3, [r7, #40]	; 0x28
10001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001a04:	1c0a      	adds	r2, r1, #0
10001a06:	4013      	ands	r3, r2
10001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      event_handler = event_handler_list[index];
10001a0a:	4b0c      	ldr	r3, [pc, #48]	; (10001a3c <XMC_SCU_IRQHandler+0xf8>)
10001a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10001a0e:	0092      	lsls	r2, r2, #2
10001a10:	58d3      	ldr	r3, [r2, r3]
10001a12:	627b      	str	r3, [r7, #36]	; 0x24
      if (event_handler != NULL)
10001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001a16:	2b00      	cmp	r3, #0
10001a18:	d001      	beq.n	10001a1e <XMC_SCU_IRQHandler+0xda>
      {
        event_handler();
10001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001a1c:	4798      	blx	r3
      }

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
10001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001a20:	3301      	adds	r3, #1
10001a22:	637b      	str	r3, [r7, #52]	; 0x34

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10001a28:	4313      	orrs	r3, r2
10001a2a:	d002      	beq.n	10001a32 <XMC_SCU_IRQHandler+0xee>
10001a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001a2e:	2b3f      	cmp	r3, #63	; 0x3f
10001a30:	d9a2      	bls.n	10001978 <XMC_SCU_IRQHandler+0x34>

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
  }
}
10001a32:	46bd      	mov	sp, r7
10001a34:	b00f      	add	sp, #60	; 0x3c
10001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001a38:	20000550 	.word	0x20000550
10001a3c:	200006a4 	.word	0x200006a4

10001a40 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10001a40:	b580      	push	{r7, lr}
10001a42:	b082      	sub	sp, #8
10001a44:	af00      	add	r7, sp, #0
10001a46:	1c02      	adds	r2, r0, #0
10001a48:	1dfb      	adds	r3, r7, #7
10001a4a:	701a      	strb	r2, [r3, #0]
10001a4c:	1d3b      	adds	r3, r7, #4
10001a4e:	1c0a      	adds	r2, r1, #0
10001a50:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
10001a52:	1d3b      	adds	r3, r7, #4
10001a54:	1d3a      	adds	r2, r7, #4
10001a56:	8812      	ldrh	r2, [r2, #0]
10001a58:	2103      	movs	r1, #3
10001a5a:	400a      	ands	r2, r1
10001a5c:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10001a5e:	1dfb      	adds	r3, r7, #7
10001a60:	781b      	ldrb	r3, [r3, #0]
10001a62:	2b0f      	cmp	r3, #15
10001a64:	d813      	bhi.n	10001a8e <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001a66:	4b18      	ldr	r3, [pc, #96]	; (10001ac8 <XMC_SCU_SetInterruptControl+0x88>)
10001a68:	4a17      	ldr	r2, [pc, #92]	; (10001ac8 <XMC_SCU_SetInterruptControl+0x88>)
10001a6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10001a6c:	1df9      	adds	r1, r7, #7
10001a6e:	7809      	ldrb	r1, [r1, #0]
10001a70:	0049      	lsls	r1, r1, #1
10001a72:	1c08      	adds	r0, r1, #0
10001a74:	2103      	movs	r1, #3
10001a76:	4081      	lsls	r1, r0
10001a78:	43c9      	mvns	r1, r1
10001a7a:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
10001a7c:	1d39      	adds	r1, r7, #4
10001a7e:	8809      	ldrh	r1, [r1, #0]
10001a80:	1df8      	adds	r0, r7, #7
10001a82:	7800      	ldrb	r0, [r0, #0]
10001a84:	0040      	lsls	r0, r0, #1
10001a86:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001a88:	430a      	orrs	r2, r1
10001a8a:	66da      	str	r2, [r3, #108]	; 0x6c
10001a8c:	e018      	b.n	10001ac0 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
10001a8e:	1dfb      	adds	r3, r7, #7
10001a90:	1dfa      	adds	r2, r7, #7
10001a92:	7812      	ldrb	r2, [r2, #0]
10001a94:	210f      	movs	r1, #15
10001a96:	400a      	ands	r2, r1
10001a98:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001a9a:	4b0b      	ldr	r3, [pc, #44]	; (10001ac8 <XMC_SCU_SetInterruptControl+0x88>)
10001a9c:	4a0a      	ldr	r2, [pc, #40]	; (10001ac8 <XMC_SCU_SetInterruptControl+0x88>)
10001a9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
10001aa0:	1df9      	adds	r1, r7, #7
10001aa2:	7809      	ldrb	r1, [r1, #0]
10001aa4:	0049      	lsls	r1, r1, #1
10001aa6:	1c08      	adds	r0, r1, #0
10001aa8:	2103      	movs	r1, #3
10001aaa:	4081      	lsls	r1, r0
10001aac:	43c9      	mvns	r1, r1
10001aae:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
10001ab0:	1d39      	adds	r1, r7, #4
10001ab2:	8809      	ldrh	r1, [r1, #0]
10001ab4:	1df8      	adds	r0, r7, #7
10001ab6:	7800      	ldrb	r0, [r0, #0]
10001ab8:	0040      	lsls	r0, r0, #1
10001aba:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001abc:	430a      	orrs	r2, r1
10001abe:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
10001ac0:	46bd      	mov	sp, r7
10001ac2:	b002      	add	sp, #8
10001ac4:	bd80      	pop	{r7, pc}
10001ac6:	46c0      	nop			; (mov r8, r8)
10001ac8:	40010000 	.word	0x40010000

10001acc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10001acc:	b580      	push	{r7, lr}
10001ace:	b082      	sub	sp, #8
10001ad0:	af00      	add	r7, sp, #0
10001ad2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001ad4:	687b      	ldr	r3, [r7, #4]
10001ad6:	68db      	ldr	r3, [r3, #12]
10001ad8:	2280      	movs	r2, #128	; 0x80
10001ada:	0052      	lsls	r2, r2, #1
10001adc:	431a      	orrs	r2, r3
10001ade:	687b      	ldr	r3, [r7, #4]
10001ae0:	60da      	str	r2, [r3, #12]
}
10001ae2:	46bd      	mov	sp, r7
10001ae4:	b002      	add	sp, #8
10001ae6:	bd80      	pop	{r7, pc}

10001ae8 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
10001ae8:	b580      	push	{r7, lr}
10001aea:	b082      	sub	sp, #8
10001aec:	af00      	add	r7, sp, #0
10001aee:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10001af0:	687b      	ldr	r3, [r7, #4]
10001af2:	4a09      	ldr	r2, [pc, #36]	; (10001b18 <XMC_CCU4_lUngateClock+0x30>)
10001af4:	4293      	cmp	r3, r2
10001af6:	d103      	bne.n	10001b00 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10001af8:	2004      	movs	r0, #4
10001afa:	f7ff fe01 	bl	10001700 <XMC_SCU_CLOCK_UngatePeripheralClock>
10001afe:	e008      	b.n	10001b12 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10001b00:	687b      	ldr	r3, [r7, #4]
10001b02:	4a06      	ldr	r2, [pc, #24]	; (10001b1c <XMC_CCU4_lUngateClock+0x34>)
10001b04:	4293      	cmp	r3, r2
10001b06:	d104      	bne.n	10001b12 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
10001b08:	2380      	movs	r3, #128	; 0x80
10001b0a:	029b      	lsls	r3, r3, #10
10001b0c:	1c18      	adds	r0, r3, #0
10001b0e:	f7ff fdf7 	bl	10001700 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001b12:	46bd      	mov	sp, r7
10001b14:	b002      	add	sp, #8
10001b16:	bd80      	pop	{r7, pc}
10001b18:	48040000 	.word	0x48040000
10001b1c:	48044000 	.word	0x48044000

10001b20 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10001b20:	b580      	push	{r7, lr}
10001b22:	b082      	sub	sp, #8
10001b24:	af00      	add	r7, sp, #0
10001b26:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001b28:	687b      	ldr	r3, [r7, #4]
10001b2a:	1c18      	adds	r0, r3, #0
10001b2c:	f7ff ffdc 	bl	10001ae8 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10001b30:	46bd      	mov	sp, r7
10001b32:	b002      	add	sp, #8
10001b34:	bd80      	pop	{r7, pc}
10001b36:	46c0      	nop			; (mov r8, r8)

10001b38 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001b38:	b580      	push	{r7, lr}
10001b3a:	b084      	sub	sp, #16
10001b3c:	af00      	add	r7, sp, #0
10001b3e:	6078      	str	r0, [r7, #4]
10001b40:	1c0a      	adds	r2, r1, #0
10001b42:	1cfb      	adds	r3, r7, #3
10001b44:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10001b46:	687b      	ldr	r3, [r7, #4]
10001b48:	1c18      	adds	r0, r3, #0
10001b4a:	f7ff ffe9 	bl	10001b20 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10001b4e:	687b      	ldr	r3, [r7, #4]
10001b50:	1c18      	adds	r0, r3, #0
10001b52:	f7ff ffbb 	bl	10001acc <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
10001b56:	687b      	ldr	r3, [r7, #4]
10001b58:	681b      	ldr	r3, [r3, #0]
10001b5a:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001b5c:	68fb      	ldr	r3, [r7, #12]
10001b5e:	4a07      	ldr	r2, [pc, #28]	; (10001b7c <XMC_CCU4_Init+0x44>)
10001b60:	4013      	ands	r3, r2
10001b62:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001b64:	1cfb      	adds	r3, r7, #3
10001b66:	781b      	ldrb	r3, [r3, #0]
10001b68:	039b      	lsls	r3, r3, #14
10001b6a:	68fa      	ldr	r2, [r7, #12]
10001b6c:	4313      	orrs	r3, r2
10001b6e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10001b70:	687b      	ldr	r3, [r7, #4]
10001b72:	68fa      	ldr	r2, [r7, #12]
10001b74:	601a      	str	r2, [r3, #0]
}
10001b76:	46bd      	mov	sp, r7
10001b78:	b004      	add	sp, #16
10001b7a:	bd80      	pop	{r7, pc}
10001b7c:	ffff3fff 	.word	0xffff3fff

10001b80 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
10001b80:	b580      	push	{r7, lr}
10001b82:	b082      	sub	sp, #8
10001b84:	af00      	add	r7, sp, #0
10001b86:	6078      	str	r0, [r7, #4]
10001b88:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001b8a:	683b      	ldr	r3, [r7, #0]
10001b8c:	681a      	ldr	r2, [r3, #0]
10001b8e:	687b      	ldr	r3, [r7, #4]
10001b90:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001b92:	683b      	ldr	r3, [r7, #0]
10001b94:	795b      	ldrb	r3, [r3, #5]
10001b96:	069b      	lsls	r3, r3, #26
10001b98:	0fdb      	lsrs	r3, r3, #31
10001b9a:	b2db      	uxtb	r3, r3
10001b9c:	051a      	lsls	r2, r3, #20
10001b9e:	687b      	ldr	r3, [r7, #4]
10001ba0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
10001ba2:	683b      	ldr	r3, [r7, #0]
10001ba4:	791b      	ldrb	r3, [r3, #4]
10001ba6:	071b      	lsls	r3, r3, #28
10001ba8:	0f1b      	lsrs	r3, r3, #28
10001baa:	b2db      	uxtb	r3, r3
10001bac:	1c1a      	adds	r2, r3, #0
10001bae:	687b      	ldr	r3, [r7, #4]
10001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001bb2:	683b      	ldr	r3, [r7, #0]
10001bb4:	795b      	ldrb	r3, [r3, #5]
10001bb6:	071b      	lsls	r3, r3, #28
10001bb8:	0f1b      	lsrs	r3, r3, #28
10001bba:	b2db      	uxtb	r3, r3
10001bbc:	1c1a      	adds	r2, r3, #0
10001bbe:	687b      	ldr	r3, [r7, #4]
10001bc0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
10001bc2:	683b      	ldr	r3, [r7, #0]
10001bc4:	795b      	ldrb	r3, [r3, #5]
10001bc6:	06db      	lsls	r3, r3, #27
10001bc8:	0fdb      	lsrs	r3, r3, #31
10001bca:	b2db      	uxtb	r3, r3
10001bcc:	1c1a      	adds	r2, r3, #0
10001bce:	687b      	ldr	r3, [r7, #4]
10001bd0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001bd2:	683b      	ldr	r3, [r7, #0]
10001bd4:	791b      	ldrb	r3, [r3, #4]
10001bd6:	061b      	lsls	r3, r3, #24
10001bd8:	0f1b      	lsrs	r3, r3, #28
10001bda:	b2db      	uxtb	r3, r3
10001bdc:	1c1a      	adds	r2, r3, #0
10001bde:	687b      	ldr	r3, [r7, #4]
10001be0:	62da      	str	r2, [r3, #44]	; 0x2c
}
10001be2:	46bd      	mov	sp, r7
10001be4:	b002      	add	sp, #8
10001be6:	bd80      	pop	{r7, pc}

10001be8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001be8:	b580      	push	{r7, lr}
10001bea:	b086      	sub	sp, #24
10001bec:	af00      	add	r7, sp, #0
10001bee:	6078      	str	r0, [r7, #4]
10001bf0:	1c08      	adds	r0, r1, #0
10001bf2:	1c11      	adds	r1, r2, #0
10001bf4:	1cfb      	adds	r3, r7, #3
10001bf6:	1c02      	adds	r2, r0, #0
10001bf8:	701a      	strb	r2, [r3, #0]
10001bfa:	1cbb      	adds	r3, r7, #2
10001bfc:	1c0a      	adds	r2, r1, #0
10001bfe:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001c00:	687b      	ldr	r3, [r7, #4]
10001c02:	22a8      	movs	r2, #168	; 0xa8
10001c04:	589b      	ldr	r3, [r3, r2]
10001c06:	60fb      	str	r3, [r7, #12]
  
  switch(event)
10001c08:	1cfb      	adds	r3, r7, #3
10001c0a:	781b      	ldrb	r3, [r3, #0]
10001c0c:	2b09      	cmp	r3, #9
10001c0e:	d81a      	bhi.n	10001c46 <XMC_CCU4_SLICE_SetInterruptNode+0x5e>
10001c10:	009a      	lsls	r2, r3, #2
10001c12:	4b1a      	ldr	r3, [pc, #104]	; (10001c7c <XMC_CCU4_SLICE_SetInterruptNode+0x94>)
10001c14:	18d3      	adds	r3, r2, r3
10001c16:	681b      	ldr	r3, [r3, #0]
10001c18:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001c1a:	2303      	movs	r3, #3
10001c1c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10001c1e:	2300      	movs	r3, #0
10001c20:	617b      	str	r3, [r7, #20]
      break;
10001c22:	e016      	b.n	10001c52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001c24:	230c      	movs	r3, #12
10001c26:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001c28:	2302      	movs	r3, #2
10001c2a:	617b      	str	r3, [r7, #20]
      break;
10001c2c:	e011      	b.n	10001c52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10001c2e:	23c0      	movs	r3, #192	; 0xc0
10001c30:	009b      	lsls	r3, r3, #2
10001c32:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001c34:	2308      	movs	r3, #8
10001c36:	617b      	str	r3, [r7, #20]
      break;
10001c38:	e00b      	b.n	10001c52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001c3a:	23c0      	movs	r3, #192	; 0xc0
10001c3c:	011b      	lsls	r3, r3, #4
10001c3e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10001c40:	230a      	movs	r3, #10
10001c42:	617b      	str	r3, [r7, #20]
      break;
10001c44:	e005      	b.n	10001c52 <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001c46:	23c0      	movs	r3, #192	; 0xc0
10001c48:	019b      	lsls	r3, r3, #6
10001c4a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001c4c:	230c      	movs	r3, #12
10001c4e:	617b      	str	r3, [r7, #20]
      break;
10001c50:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask; 
10001c52:	693b      	ldr	r3, [r7, #16]
10001c54:	43da      	mvns	r2, r3
10001c56:	68fb      	ldr	r3, [r7, #12]
10001c58:	4013      	ands	r3, r2
10001c5a:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
10001c5c:	1cbb      	adds	r3, r7, #2
10001c5e:	781a      	ldrb	r2, [r3, #0]
10001c60:	697b      	ldr	r3, [r7, #20]
10001c62:	409a      	lsls	r2, r3
10001c64:	1c13      	adds	r3, r2, #0
10001c66:	68fa      	ldr	r2, [r7, #12]
10001c68:	4313      	orrs	r3, r2
10001c6a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
10001c6c:	687b      	ldr	r3, [r7, #4]
10001c6e:	21a8      	movs	r1, #168	; 0xa8
10001c70:	68fa      	ldr	r2, [r7, #12]
10001c72:	505a      	str	r2, [r3, r1]
}
10001c74:	46bd      	mov	sp, r7
10001c76:	b006      	add	sp, #24
10001c78:	bd80      	pop	{r7, pc}
10001c7a:	46c0      	nop			; (mov r8, r8)
10001c7c:	1000c214 	.word	0x1000c214

10001c80 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
10001c80:	b580      	push	{r7, lr}
10001c82:	b084      	sub	sp, #16
10001c84:	af00      	add	r7, sp, #0
10001c86:	60f8      	str	r0, [r7, #12]
10001c88:	607a      	str	r2, [r7, #4]
10001c8a:	230b      	movs	r3, #11
10001c8c:	18fb      	adds	r3, r7, r3
10001c8e:	1c0a      	adds	r2, r1, #0
10001c90:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
10001c92:	68fb      	ldr	r3, [r7, #12]
10001c94:	1c18      	adds	r0, r3, #0
10001c96:	f7ff fa77 	bl	10001188 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
10001c9a:	68fb      	ldr	r3, [r7, #12]
10001c9c:	681b      	ldr	r3, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
10001c9e:	220b      	movs	r2, #11
10001ca0:	18ba      	adds	r2, r7, r2
10001ca2:	7812      	ldrb	r2, [r2, #0]
10001ca4:	0092      	lsls	r2, r2, #2
10001ca6:	1c11      	adds	r1, r2, #0
10001ca8:	220f      	movs	r2, #15
10001caa:	408a      	lsls	r2, r1
10001cac:	43d2      	mvns	r2, r2
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
10001cae:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
10001cb0:	687b      	ldr	r3, [r7, #4]
10001cb2:	681b      	ldr	r3, [r3, #0]
10001cb4:	210b      	movs	r1, #11
10001cb6:	1879      	adds	r1, r7, r1
10001cb8:	7809      	ldrb	r1, [r1, #0]
10001cba:	0089      	lsls	r1, r1, #2
10001cbc:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
10001cbe:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
10001cc0:	68fb      	ldr	r3, [r7, #12]
10001cc2:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
10001cc4:	230b      	movs	r3, #11
10001cc6:	18fb      	adds	r3, r7, r3
10001cc8:	781a      	ldrb	r2, [r3, #0]
10001cca:	687b      	ldr	r3, [r7, #4]
10001ccc:	6859      	ldr	r1, [r3, #4]
10001cce:	68fb      	ldr	r3, [r7, #12]
10001cd0:	3204      	adds	r2, #4
10001cd2:	0092      	lsls	r2, r2, #2
10001cd4:	50d1      	str	r1, [r2, r3]
}
10001cd6:	46bd      	mov	sp, r7
10001cd8:	b004      	add	sp, #16
10001cda:	bd80      	pop	{r7, pc}

10001cdc <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
10001cdc:	b590      	push	{r4, r7, lr}
10001cde:	b083      	sub	sp, #12
10001ce0:	af00      	add	r7, sp, #0
10001ce2:	6078      	str	r0, [r7, #4]
10001ce4:	1c08      	adds	r0, r1, #0
10001ce6:	1c11      	adds	r1, r2, #0
10001ce8:	1cfb      	adds	r3, r7, #3
10001cea:	1c02      	adds	r2, r0, #0
10001cec:	701a      	strb	r2, [r3, #0]
10001cee:	1cbb      	adds	r3, r7, #2
10001cf0:	1c0a      	adds	r2, r1, #0
10001cf2:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
10001cf4:	1cfb      	adds	r3, r7, #3
10001cf6:	781a      	ldrb	r2, [r3, #0]
10001cf8:	1cbb      	adds	r3, r7, #2
10001cfa:	781b      	ldrb	r3, [r3, #0]
10001cfc:	2103      	movs	r1, #3
10001cfe:	400b      	ands	r3, r1
10001d00:	b2d9      	uxtb	r1, r3
10001d02:	687b      	ldr	r3, [r7, #4]
10001d04:	3208      	adds	r2, #8
10001d06:	0092      	lsls	r2, r2, #2
10001d08:	2003      	movs	r0, #3
10001d0a:	4001      	ands	r1, r0
10001d0c:	0109      	lsls	r1, r1, #4
10001d0e:	58d0      	ldr	r0, [r2, r3]
10001d10:	2430      	movs	r4, #48	; 0x30
10001d12:	43a0      	bics	r0, r4
10001d14:	4301      	orrs	r1, r0
10001d16:	50d1      	str	r1, [r2, r3]

}
10001d18:	46bd      	mov	sp, r7
10001d1a:	b003      	add	sp, #12
10001d1c:	bd90      	pop	{r4, r7, pc}
10001d1e:	46c0      	nop			; (mov r8, r8)

10001d20 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
10001d20:	b590      	push	{r4, r7, lr}
10001d22:	b083      	sub	sp, #12
10001d24:	af00      	add	r7, sp, #0
10001d26:	6078      	str	r0, [r7, #4]
10001d28:	1c08      	adds	r0, r1, #0
10001d2a:	1c11      	adds	r1, r2, #0
10001d2c:	1cfb      	adds	r3, r7, #3
10001d2e:	1c02      	adds	r2, r0, #0
10001d30:	701a      	strb	r2, [r3, #0]
10001d32:	1cbb      	adds	r3, r7, #2
10001d34:	1c0a      	adds	r2, r1, #0
10001d36:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
10001d38:	1cfb      	adds	r3, r7, #3
10001d3a:	781b      	ldrb	r3, [r3, #0]
10001d3c:	089b      	lsrs	r3, r3, #2
10001d3e:	b2db      	uxtb	r3, r3
10001d40:	1c18      	adds	r0, r3, #0
10001d42:	1cfb      	adds	r3, r7, #3
10001d44:	781b      	ldrb	r3, [r3, #0]
10001d46:	089b      	lsrs	r3, r3, #2
10001d48:	b2db      	uxtb	r3, r3
10001d4a:	1c1a      	adds	r2, r3, #0
10001d4c:	687b      	ldr	r3, [r7, #4]
10001d4e:	3204      	adds	r2, #4
10001d50:	0092      	lsls	r2, r2, #2
10001d52:	58d3      	ldr	r3, [r2, r3]
10001d54:	1cfa      	adds	r2, r7, #3
10001d56:	7812      	ldrb	r2, [r2, #0]
10001d58:	2103      	movs	r1, #3
10001d5a:	400a      	ands	r2, r1
10001d5c:	00d2      	lsls	r2, r2, #3
10001d5e:	1c11      	adds	r1, r2, #0
10001d60:	22fc      	movs	r2, #252	; 0xfc
10001d62:	408a      	lsls	r2, r1
10001d64:	43d2      	mvns	r2, r2
10001d66:	401a      	ands	r2, r3
10001d68:	1c11      	adds	r1, r2, #0
10001d6a:	687b      	ldr	r3, [r7, #4]
10001d6c:	1d02      	adds	r2, r0, #4
10001d6e:	0092      	lsls	r2, r2, #2
10001d70:	50d1      	str	r1, [r2, r3]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
10001d72:	1cfb      	adds	r3, r7, #3
10001d74:	781b      	ldrb	r3, [r3, #0]
10001d76:	089b      	lsrs	r3, r3, #2
10001d78:	b2db      	uxtb	r3, r3
10001d7a:	1c1c      	adds	r4, r3, #0
10001d7c:	1cfb      	adds	r3, r7, #3
10001d7e:	781b      	ldrb	r3, [r3, #0]
10001d80:	089b      	lsrs	r3, r3, #2
10001d82:	b2db      	uxtb	r3, r3
10001d84:	1c1a      	adds	r2, r3, #0
10001d86:	687b      	ldr	r3, [r7, #4]
10001d88:	3204      	adds	r2, #4
10001d8a:	0092      	lsls	r2, r2, #2
10001d8c:	58d2      	ldr	r2, [r2, r3]
10001d8e:	1cbb      	adds	r3, r7, #2
10001d90:	781b      	ldrb	r3, [r3, #0]
10001d92:	1cf9      	adds	r1, r7, #3
10001d94:	7809      	ldrb	r1, [r1, #0]
10001d96:	2003      	movs	r0, #3
10001d98:	4001      	ands	r1, r0
10001d9a:	00c9      	lsls	r1, r1, #3
10001d9c:	408b      	lsls	r3, r1
10001d9e:	431a      	orrs	r2, r3
10001da0:	1c11      	adds	r1, r2, #0
10001da2:	687b      	ldr	r3, [r7, #4]
10001da4:	1d22      	adds	r2, r4, #4
10001da6:	0092      	lsls	r2, r2, #2
10001da8:	50d1      	str	r1, [r2, r3]
}
10001daa:	46bd      	mov	sp, r7
10001dac:	b003      	add	sp, #12
10001dae:	bd90      	pop	{r4, r7, pc}

10001db0 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001db0:	b580      	push	{r7, lr}
10001db2:	b082      	sub	sp, #8
10001db4:	af00      	add	r7, sp, #0
10001db6:	6078      	str	r0, [r7, #4]
10001db8:	1c08      	adds	r0, r1, #0
10001dba:	1c11      	adds	r1, r2, #0
10001dbc:	1cfb      	adds	r3, r7, #3
10001dbe:	1c02      	adds	r2, r0, #0
10001dc0:	701a      	strb	r2, [r3, #0]
10001dc2:	1cbb      	adds	r3, r7, #2
10001dc4:	1c0a      	adds	r2, r1, #0
10001dc6:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001dc8:	687b      	ldr	r3, [r7, #4]
10001dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001dcc:	1cfa      	adds	r2, r7, #3
10001dce:	7812      	ldrb	r2, [r2, #0]
10001dd0:	0052      	lsls	r2, r2, #1
10001dd2:	1c11      	adds	r1, r2, #0
10001dd4:	2203      	movs	r2, #3
10001dd6:	408a      	lsls	r2, r1
10001dd8:	43d2      	mvns	r2, r2
10001dda:	401a      	ands	r2, r3
10001ddc:	687b      	ldr	r3, [r7, #4]
10001dde:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
10001de0:	687b      	ldr	r3, [r7, #4]
10001de2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10001de4:	1cbb      	adds	r3, r7, #2
10001de6:	781b      	ldrb	r3, [r3, #0]
10001de8:	1cf9      	adds	r1, r7, #3
10001dea:	7809      	ldrb	r1, [r1, #0]
10001dec:	0049      	lsls	r1, r1, #1
10001dee:	408b      	lsls	r3, r1
10001df0:	431a      	orrs	r2, r3
10001df2:	687b      	ldr	r3, [r7, #4]
10001df4:	675a      	str	r2, [r3, #116]	; 0x74
}
10001df6:	46bd      	mov	sp, r7
10001df8:	b002      	add	sp, #8
10001dfa:	bd80      	pop	{r7, pc}

10001dfc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10001dfc:	b580      	push	{r7, lr}
10001dfe:	b082      	sub	sp, #8
10001e00:	af00      	add	r7, sp, #0
10001e02:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10001e04:	687b      	ldr	r3, [r7, #4]
10001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001e08:	b2db      	uxtb	r3, r3
10001e0a:	227f      	movs	r2, #127	; 0x7f
10001e0c:	4393      	bics	r3, r2
10001e0e:	b2db      	uxtb	r3, r3
}
10001e10:	1c18      	adds	r0, r3, #0
10001e12:	46bd      	mov	sp, r7
10001e14:	b002      	add	sp, #8
10001e16:	bd80      	pop	{r7, pc}

10001e18 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
10001e18:	b580      	push	{r7, lr}
10001e1a:	b082      	sub	sp, #8
10001e1c:	af00      	add	r7, sp, #0
10001e1e:	6078      	str	r0, [r7, #4]
10001e20:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10001e22:	687b      	ldr	r3, [r7, #4]
10001e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10001e26:	683b      	ldr	r3, [r7, #0]
10001e28:	431a      	orrs	r2, r3
10001e2a:	687b      	ldr	r3, [r7, #4]
10001e2c:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001e2e:	46bd      	mov	sp, r7
10001e30:	b002      	add	sp, #8
10001e32:	bd80      	pop	{r7, pc}

10001e34 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
10001e34:	b580      	push	{r7, lr}
10001e36:	b082      	sub	sp, #8
10001e38:	af00      	add	r7, sp, #0
10001e3a:	6078      	str	r0, [r7, #4]
10001e3c:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
10001e3e:	687b      	ldr	r3, [r7, #4]
10001e40:	1c18      	adds	r0, r3, #0
10001e42:	f000 fb67 	bl	10002514 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
10001e46:	687b      	ldr	r3, [r7, #4]
10001e48:	4a0e      	ldr	r2, [pc, #56]	; (10001e84 <XMC_I2C_CH_Init+0x50>)
10001e4a:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
10001e4c:	683b      	ldr	r3, [r7, #0]
10001e4e:	889b      	ldrh	r3, [r3, #4]
10001e50:	687a      	ldr	r2, [r7, #4]
10001e52:	1c10      	adds	r0, r2, #0
10001e54:	1c19      	adds	r1, r3, #0
10001e56:	f000 f817 	bl	10001e88 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
10001e5a:	683b      	ldr	r3, [r7, #0]
10001e5c:	681b      	ldr	r3, [r3, #0]
10001e5e:	687a      	ldr	r2, [r7, #4]
10001e60:	1c10      	adds	r0, r2, #0
10001e62:	1c19      	adds	r1, r3, #0
10001e64:	f000 f838 	bl	10001ed8 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
10001e68:	687b      	ldr	r3, [r7, #4]
10001e6a:	22a0      	movs	r2, #160	; 0xa0
10001e6c:	00d2      	lsls	r2, r2, #3
10001e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
10001e70:	687b      	ldr	r3, [r7, #4]
10001e72:	2201      	movs	r2, #1
10001e74:	4252      	negs	r2, r2
10001e76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
10001e78:	687b      	ldr	r3, [r7, #4]
10001e7a:	2200      	movs	r2, #0
10001e7c:	641a      	str	r2, [r3, #64]	; 0x40
}
10001e7e:	46bd      	mov	sp, r7
10001e80:	b002      	add	sp, #8
10001e82:	bd80      	pop	{r7, pc}
10001e84:	073f0303 	.word	0x073f0303

10001e88 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
10001e88:	b580      	push	{r7, lr}
10001e8a:	b082      	sub	sp, #8
10001e8c:	af00      	add	r7, sp, #0
10001e8e:	6078      	str	r0, [r7, #4]
10001e90:	1c0a      	adds	r2, r1, #0
10001e92:	1cbb      	adds	r3, r7, #2
10001e94:	801a      	strh	r2, [r3, #0]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
10001e96:	1cbb      	adds	r3, r7, #2
10001e98:	881a      	ldrh	r2, [r3, #0]
10001e9a:	23f8      	movs	r3, #248	; 0xf8
10001e9c:	01db      	lsls	r3, r3, #7
10001e9e:	401a      	ands	r2, r3
10001ea0:	23f0      	movs	r3, #240	; 0xf0
10001ea2:	01db      	lsls	r3, r3, #7
10001ea4:	429a      	cmp	r2, r3
10001ea6:	d10e      	bne.n	10001ec6 <XMC_I2C_CH_SetSlaveAddress+0x3e>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
10001ea8:	1cbb      	adds	r3, r7, #2
10001eaa:	881b      	ldrh	r3, [r3, #0]
10001eac:	22ff      	movs	r2, #255	; 0xff
10001eae:	401a      	ands	r2, r3
10001eb0:	1cbb      	adds	r3, r7, #2
10001eb2:	881b      	ldrh	r3, [r3, #0]
10001eb4:	005b      	lsls	r3, r3, #1
10001eb6:	1c19      	adds	r1, r3, #0
10001eb8:	23fe      	movs	r3, #254	; 0xfe
10001eba:	021b      	lsls	r3, r3, #8
10001ebc:	400b      	ands	r3, r1
10001ebe:	431a      	orrs	r2, r3
10001ec0:	687b      	ldr	r3, [r7, #4]
10001ec2:	63da      	str	r2, [r3, #60]	; 0x3c
10001ec4:	e004      	b.n	10001ed0 <XMC_I2C_CH_SetSlaveAddress+0x48>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
10001ec6:	1cbb      	adds	r3, r7, #2
10001ec8:	881b      	ldrh	r3, [r3, #0]
10001eca:	021a      	lsls	r2, r3, #8
10001ecc:	687b      	ldr	r3, [r7, #4]
10001ece:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
10001ed0:	46bd      	mov	sp, r7
10001ed2:	b002      	add	sp, #8
10001ed4:	bd80      	pop	{r7, pc}
10001ed6:	46c0      	nop			; (mov r8, r8)

10001ed8 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
10001ed8:	b580      	push	{r7, lr}
10001eda:	b084      	sub	sp, #16
10001edc:	af00      	add	r7, sp, #0
10001ede:	6078      	str	r0, [r7, #4]
10001ee0:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
10001ee2:	230f      	movs	r3, #15
10001ee4:	18fb      	adds	r3, r7, r3
10001ee6:	2201      	movs	r2, #1
10001ee8:	701a      	strb	r2, [r3, #0]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
10001eea:	683b      	ldr	r3, [r7, #0]
10001eec:	4a1d      	ldr	r2, [pc, #116]	; (10001f64 <XMC_I2C_CH_SetBaudrate+0x8c>)
10001eee:	4293      	cmp	r3, r2
10001ef0:	d813      	bhi.n	10001f1a <XMC_I2C_CH_SetBaudrate+0x42>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
10001ef2:	687b      	ldr	r3, [r7, #4]
10001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001ef6:	4a1c      	ldr	r2, [pc, #112]	; (10001f68 <XMC_I2C_CH_SetBaudrate+0x90>)
10001ef8:	401a      	ands	r2, r3
10001efa:	687b      	ldr	r3, [r7, #4]
10001efc:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
10001efe:	687a      	ldr	r2, [r7, #4]
10001f00:	683b      	ldr	r3, [r7, #0]
10001f02:	1c10      	adds	r0, r2, #0
10001f04:	1c19      	adds	r1, r3, #0
10001f06:	220a      	movs	r2, #10
10001f08:	f000 fb40 	bl	1000258c <XMC_USIC_CH_SetBaudrate>
10001f0c:	1e03      	subs	r3, r0, #0
10001f0e:	d121      	bne.n	10001f54 <XMC_I2C_CH_SetBaudrate+0x7c>
    {
      status = XMC_I2C_CH_STATUS_OK;
10001f10:	230f      	movs	r3, #15
10001f12:	18fb      	adds	r3, r7, r3
10001f14:	2200      	movs	r2, #0
10001f16:	701a      	strb	r2, [r3, #0]
10001f18:	e01c      	b.n	10001f54 <XMC_I2C_CH_SetBaudrate+0x7c>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
10001f1a:	683b      	ldr	r3, [r7, #0]
10001f1c:	4a13      	ldr	r2, [pc, #76]	; (10001f6c <XMC_I2C_CH_SetBaudrate+0x94>)
10001f1e:	4293      	cmp	r3, r2
10001f20:	d814      	bhi.n	10001f4c <XMC_I2C_CH_SetBaudrate+0x74>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
10001f22:	687b      	ldr	r3, [r7, #4]
10001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001f26:	2280      	movs	r2, #128	; 0x80
10001f28:	0292      	lsls	r2, r2, #10
10001f2a:	431a      	orrs	r2, r3
10001f2c:	687b      	ldr	r3, [r7, #4]
10001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
10001f30:	687a      	ldr	r2, [r7, #4]
10001f32:	683b      	ldr	r3, [r7, #0]
10001f34:	1c10      	adds	r0, r2, #0
10001f36:	1c19      	adds	r1, r3, #0
10001f38:	2219      	movs	r2, #25
10001f3a:	f000 fb27 	bl	1000258c <XMC_USIC_CH_SetBaudrate>
10001f3e:	1e03      	subs	r3, r0, #0
10001f40:	d108      	bne.n	10001f54 <XMC_I2C_CH_SetBaudrate+0x7c>
    {
      status = XMC_I2C_CH_STATUS_OK;
10001f42:	230f      	movs	r3, #15
10001f44:	18fb      	adds	r3, r7, r3
10001f46:	2200      	movs	r2, #0
10001f48:	701a      	strb	r2, [r3, #0]
10001f4a:	e003      	b.n	10001f54 <XMC_I2C_CH_SetBaudrate+0x7c>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
10001f4c:	230f      	movs	r3, #15
10001f4e:	18fb      	adds	r3, r7, r3
10001f50:	2201      	movs	r2, #1
10001f52:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10001f54:	230f      	movs	r3, #15
10001f56:	18fb      	adds	r3, r7, r3
10001f58:	781b      	ldrb	r3, [r3, #0]
}
10001f5a:	1c18      	adds	r0, r3, #0
10001f5c:	46bd      	mov	sp, r7
10001f5e:	b004      	add	sp, #16
10001f60:	bd80      	pop	{r7, pc}
10001f62:	46c0      	nop			; (mov r8, r8)
10001f64:	000186a0 	.word	0x000186a0
10001f68:	fffdffff 	.word	0xfffdffff
10001f6c:	00061a80 	.word	0x00061a80

10001f70 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10001f70:	b580      	push	{r7, lr}
10001f72:	b084      	sub	sp, #16
10001f74:	af00      	add	r7, sp, #0
10001f76:	6078      	str	r0, [r7, #4]
10001f78:	1c08      	adds	r0, r1, #0
10001f7a:	1c11      	adds	r1, r2, #0
10001f7c:	1cbb      	adds	r3, r7, #2
10001f7e:	1c02      	adds	r2, r0, #0
10001f80:	801a      	strh	r2, [r3, #0]
10001f82:	1c7b      	adds	r3, r7, #1
10001f84:	1c0a      	adds	r2, r1, #0
10001f86:	701a      	strb	r2, [r3, #0]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
10001f88:	1cbb      	adds	r3, r7, #2
10001f8a:	881b      	ldrh	r3, [r3, #0]
10001f8c:	2280      	movs	r2, #128	; 0x80
10001f8e:	00d2      	lsls	r2, r2, #3
10001f90:	4313      	orrs	r3, r2
10001f92:	b29b      	uxth	r3, r3
10001f94:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
10001f96:	1c7b      	adds	r3, r7, #1
10001f98:	781b      	ldrb	r3, [r3, #0]
10001f9a:	2b01      	cmp	r3, #1
10001f9c:	d103      	bne.n	10001fa6 <XMC_I2C_CH_MasterStart+0x36>
  {
    temp |= 0x1U;
10001f9e:	68fb      	ldr	r3, [r7, #12]
10001fa0:	2201      	movs	r2, #1
10001fa2:	4313      	orrs	r3, r2
10001fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10001fa6:	687a      	ldr	r2, [r7, #4]
10001fa8:	2384      	movs	r3, #132	; 0x84
10001faa:	005b      	lsls	r3, r3, #1
10001fac:	58d2      	ldr	r2, [r2, r3]
10001fae:	23e0      	movs	r3, #224	; 0xe0
10001fb0:	04db      	lsls	r3, r3, #19
10001fb2:	4013      	ands	r3, r2
10001fb4:	d113      	bne.n	10001fde <XMC_I2C_CH_MasterStart+0x6e>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10001fb6:	46c0      	nop			; (mov r8, r8)
10001fb8:	687b      	ldr	r3, [r7, #4]
10001fba:	1c18      	adds	r0, r3, #0
10001fbc:	f7ff ff1e 	bl	10001dfc <XMC_USIC_CH_GetTransmitBufferStatus>
10001fc0:	1e03      	subs	r3, r0, #0
10001fc2:	2b80      	cmp	r3, #128	; 0x80
10001fc4:	d0f8      	beq.n	10001fb8 <XMC_I2C_CH_MasterStart+0x48>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10001fc6:	687a      	ldr	r2, [r7, #4]
10001fc8:	2380      	movs	r3, #128	; 0x80
10001fca:	019b      	lsls	r3, r3, #6
10001fcc:	1c10      	adds	r0, r2, #0
10001fce:	1c19      	adds	r1, r3, #0
10001fd0:	f7ff ff22 	bl	10001e18 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	2180      	movs	r1, #128	; 0x80
10001fd8:	68fa      	ldr	r2, [r7, #12]
10001fda:	505a      	str	r2, [r3, r1]
10001fdc:	e004      	b.n	10001fe8 <XMC_I2C_CH_MasterStart+0x78>
  }
  else
  {
    channel->IN[0U] = temp;
10001fde:	687a      	ldr	r2, [r7, #4]
10001fe0:	23c0      	movs	r3, #192	; 0xc0
10001fe2:	005b      	lsls	r3, r3, #1
10001fe4:	68f9      	ldr	r1, [r7, #12]
10001fe6:	50d1      	str	r1, [r2, r3]
  }
}
10001fe8:	46bd      	mov	sp, r7
10001fea:	b004      	add	sp, #16
10001fec:	bd80      	pop	{r7, pc}
10001fee:	46c0      	nop			; (mov r8, r8)

10001ff0 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
10001ff0:	b580      	push	{r7, lr}
10001ff2:	b084      	sub	sp, #16
10001ff4:	af00      	add	r7, sp, #0
10001ff6:	6078      	str	r0, [r7, #4]
10001ff8:	1c08      	adds	r0, r1, #0
10001ffa:	1c11      	adds	r1, r2, #0
10001ffc:	1cbb      	adds	r3, r7, #2
10001ffe:	1c02      	adds	r2, r0, #0
10002000:	801a      	strh	r2, [r3, #0]
10002002:	1c7b      	adds	r3, r7, #1
10002004:	1c0a      	adds	r2, r1, #0
10002006:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
10002008:	1cbb      	adds	r3, r7, #2
1000200a:	881b      	ldrh	r3, [r3, #0]
1000200c:	22a0      	movs	r2, #160	; 0xa0
1000200e:	00d2      	lsls	r2, r2, #3
10002010:	4313      	orrs	r3, r2
10002012:	b29b      	uxth	r3, r3
10002014:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
10002016:	1c7b      	adds	r3, r7, #1
10002018:	781b      	ldrb	r3, [r3, #0]
1000201a:	2b01      	cmp	r3, #1
1000201c:	d103      	bne.n	10002026 <XMC_I2C_CH_MasterRepeatedStart+0x36>
  {
    tmp |= 0x1U;
1000201e:	68fb      	ldr	r3, [r7, #12]
10002020:	2201      	movs	r2, #1
10002022:	4313      	orrs	r3, r2
10002024:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10002026:	687a      	ldr	r2, [r7, #4]
10002028:	2384      	movs	r3, #132	; 0x84
1000202a:	005b      	lsls	r3, r3, #1
1000202c:	58d2      	ldr	r2, [r2, r3]
1000202e:	23e0      	movs	r3, #224	; 0xe0
10002030:	04db      	lsls	r3, r3, #19
10002032:	4013      	ands	r3, r2
10002034:	d113      	bne.n	1000205e <XMC_I2C_CH_MasterRepeatedStart+0x6e>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10002036:	46c0      	nop			; (mov r8, r8)
10002038:	687b      	ldr	r3, [r7, #4]
1000203a:	1c18      	adds	r0, r3, #0
1000203c:	f7ff fede 	bl	10001dfc <XMC_USIC_CH_GetTransmitBufferStatus>
10002040:	1e03      	subs	r3, r0, #0
10002042:	2b80      	cmp	r3, #128	; 0x80
10002044:	d0f8      	beq.n	10002038 <XMC_I2C_CH_MasterRepeatedStart+0x48>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10002046:	687a      	ldr	r2, [r7, #4]
10002048:	2380      	movs	r3, #128	; 0x80
1000204a:	019b      	lsls	r3, r3, #6
1000204c:	1c10      	adds	r0, r2, #0
1000204e:	1c19      	adds	r1, r3, #0
10002050:	f7ff fee2 	bl	10001e18 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
10002054:	687b      	ldr	r3, [r7, #4]
10002056:	2180      	movs	r1, #128	; 0x80
10002058:	68fa      	ldr	r2, [r7, #12]
1000205a:	505a      	str	r2, [r3, r1]
1000205c:	e004      	b.n	10002068 <XMC_I2C_CH_MasterRepeatedStart+0x78>
  }
  else
  {
    channel->IN[0U] = tmp;
1000205e:	687a      	ldr	r2, [r7, #4]
10002060:	23c0      	movs	r3, #192	; 0xc0
10002062:	005b      	lsls	r3, r3, #1
10002064:	68f9      	ldr	r1, [r7, #12]
10002066:	50d1      	str	r1, [r2, r3]
  }
}
10002068:	46bd      	mov	sp, r7
1000206a:	b004      	add	sp, #16
1000206c:	bd80      	pop	{r7, pc}
1000206e:	46c0      	nop			; (mov r8, r8)

10002070 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
10002070:	b580      	push	{r7, lr}
10002072:	b082      	sub	sp, #8
10002074:	af00      	add	r7, sp, #0
10002076:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10002078:	687a      	ldr	r2, [r7, #4]
1000207a:	2384      	movs	r3, #132	; 0x84
1000207c:	005b      	lsls	r3, r3, #1
1000207e:	58d2      	ldr	r2, [r2, r3]
10002080:	23e0      	movs	r3, #224	; 0xe0
10002082:	04db      	lsls	r3, r3, #19
10002084:	4013      	ands	r3, r2
10002086:	d114      	bne.n	100020b2 <XMC_I2C_CH_MasterStop+0x42>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10002088:	46c0      	nop			; (mov r8, r8)
1000208a:	687b      	ldr	r3, [r7, #4]
1000208c:	1c18      	adds	r0, r3, #0
1000208e:	f7ff feb5 	bl	10001dfc <XMC_USIC_CH_GetTransmitBufferStatus>
10002092:	1e03      	subs	r3, r0, #0
10002094:	2b80      	cmp	r3, #128	; 0x80
10002096:	d0f8      	beq.n	1000208a <XMC_I2C_CH_MasterStop+0x1a>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10002098:	687a      	ldr	r2, [r7, #4]
1000209a:	2380      	movs	r3, #128	; 0x80
1000209c:	019b      	lsls	r3, r3, #6
1000209e:	1c10      	adds	r0, r2, #0
100020a0:	1c19      	adds	r1, r3, #0
100020a2:	f7ff feb9 	bl	10001e18 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
100020a6:	687b      	ldr	r3, [r7, #4]
100020a8:	2180      	movs	r1, #128	; 0x80
100020aa:	22c0      	movs	r2, #192	; 0xc0
100020ac:	00d2      	lsls	r2, r2, #3
100020ae:	505a      	str	r2, [r3, r1]
100020b0:	e005      	b.n	100020be <XMC_I2C_CH_MasterStop+0x4e>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
100020b2:	687a      	ldr	r2, [r7, #4]
100020b4:	23c0      	movs	r3, #192	; 0xc0
100020b6:	005b      	lsls	r3, r3, #1
100020b8:	21c0      	movs	r1, #192	; 0xc0
100020ba:	00c9      	lsls	r1, r1, #3
100020bc:	50d1      	str	r1, [r2, r3]
  }
}
100020be:	46bd      	mov	sp, r7
100020c0:	b002      	add	sp, #8
100020c2:	bd80      	pop	{r7, pc}

100020c4 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
100020c4:	b580      	push	{r7, lr}
100020c6:	b082      	sub	sp, #8
100020c8:	af00      	add	r7, sp, #0
100020ca:	6078      	str	r0, [r7, #4]
100020cc:	1c0a      	adds	r2, r1, #0
100020ce:	1cfb      	adds	r3, r7, #3
100020d0:	701a      	strb	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
100020d2:	687a      	ldr	r2, [r7, #4]
100020d4:	2384      	movs	r3, #132	; 0x84
100020d6:	005b      	lsls	r3, r3, #1
100020d8:	58d2      	ldr	r2, [r2, r3]
100020da:	23e0      	movs	r3, #224	; 0xe0
100020dc:	04db      	lsls	r3, r3, #19
100020de:	4013      	ands	r3, r2
100020e0:	d114      	bne.n	1000210c <XMC_I2C_CH_MasterTransmit+0x48>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
100020e2:	46c0      	nop			; (mov r8, r8)
100020e4:	687b      	ldr	r3, [r7, #4]
100020e6:	1c18      	adds	r0, r3, #0
100020e8:	f7ff fe88 	bl	10001dfc <XMC_USIC_CH_GetTransmitBufferStatus>
100020ec:	1e03      	subs	r3, r0, #0
100020ee:	2b80      	cmp	r3, #128	; 0x80
100020f0:	d0f8      	beq.n	100020e4 <XMC_I2C_CH_MasterTransmit+0x20>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100020f2:	687a      	ldr	r2, [r7, #4]
100020f4:	2380      	movs	r3, #128	; 0x80
100020f6:	019b      	lsls	r3, r3, #6
100020f8:	1c10      	adds	r0, r2, #0
100020fa:	1c19      	adds	r1, r3, #0
100020fc:	f7ff fe8c 	bl	10001e18 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
10002100:	1cfb      	adds	r3, r7, #3
10002102:	781a      	ldrb	r2, [r3, #0]
10002104:	687b      	ldr	r3, [r7, #4]
10002106:	2180      	movs	r1, #128	; 0x80
10002108:	505a      	str	r2, [r3, r1]
1000210a:	e005      	b.n	10002118 <XMC_I2C_CH_MasterTransmit+0x54>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
1000210c:	1cfb      	adds	r3, r7, #3
1000210e:	7819      	ldrb	r1, [r3, #0]
10002110:	687a      	ldr	r2, [r7, #4]
10002112:	23c0      	movs	r3, #192	; 0xc0
10002114:	005b      	lsls	r3, r3, #1
10002116:	50d1      	str	r1, [r2, r3]
  }
}
10002118:	46bd      	mov	sp, r7
1000211a:	b002      	add	sp, #8
1000211c:	bd80      	pop	{r7, pc}
1000211e:	46c0      	nop			; (mov r8, r8)

10002120 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
10002120:	b580      	push	{r7, lr}
10002122:	b082      	sub	sp, #8
10002124:	af00      	add	r7, sp, #0
10002126:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
10002128:	687a      	ldr	r2, [r7, #4]
1000212a:	2384      	movs	r3, #132	; 0x84
1000212c:	005b      	lsls	r3, r3, #1
1000212e:	58d2      	ldr	r2, [r2, r3]
10002130:	23e0      	movs	r3, #224	; 0xe0
10002132:	04db      	lsls	r3, r3, #19
10002134:	4013      	ands	r3, r2
10002136:	d114      	bne.n	10002162 <XMC_I2C_CH_MasterReceiveAck+0x42>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10002138:	46c0      	nop			; (mov r8, r8)
1000213a:	687b      	ldr	r3, [r7, #4]
1000213c:	1c18      	adds	r0, r3, #0
1000213e:	f7ff fe5d 	bl	10001dfc <XMC_USIC_CH_GetTransmitBufferStatus>
10002142:	1e03      	subs	r3, r0, #0
10002144:	2b80      	cmp	r3, #128	; 0x80
10002146:	d0f8      	beq.n	1000213a <XMC_I2C_CH_MasterReceiveAck+0x1a>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10002148:	687a      	ldr	r2, [r7, #4]
1000214a:	2380      	movs	r3, #128	; 0x80
1000214c:	019b      	lsls	r3, r3, #6
1000214e:	1c10      	adds	r0, r2, #0
10002150:	1c19      	adds	r1, r3, #0
10002152:	f7ff fe61 	bl	10001e18 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10002156:	687b      	ldr	r3, [r7, #4]
10002158:	2180      	movs	r1, #128	; 0x80
1000215a:	2280      	movs	r2, #128	; 0x80
1000215c:	0092      	lsls	r2, r2, #2
1000215e:	505a      	str	r2, [r3, r1]
10002160:	e005      	b.n	1000216e <XMC_I2C_CH_MasterReceiveAck+0x4e>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
10002162:	687a      	ldr	r2, [r7, #4]
10002164:	23c0      	movs	r3, #192	; 0xc0
10002166:	005b      	lsls	r3, r3, #1
10002168:	2180      	movs	r1, #128	; 0x80
1000216a:	0089      	lsls	r1, r1, #2
1000216c:	50d1      	str	r1, [r2, r3]
  }
}
1000216e:	46bd      	mov	sp, r7
10002170:	b002      	add	sp, #8
10002172:	bd80      	pop	{r7, pc}

10002174 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
10002174:	b580      	push	{r7, lr}
10002176:	b082      	sub	sp, #8
10002178:	af00      	add	r7, sp, #0
1000217a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
1000217c:	687a      	ldr	r2, [r7, #4]
1000217e:	2384      	movs	r3, #132	; 0x84
10002180:	005b      	lsls	r3, r3, #1
10002182:	58d2      	ldr	r2, [r2, r3]
10002184:	23e0      	movs	r3, #224	; 0xe0
10002186:	04db      	lsls	r3, r3, #19
10002188:	4013      	ands	r3, r2
1000218a:	d114      	bne.n	100021b6 <XMC_I2C_CH_MasterReceiveNack+0x42>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1000218c:	46c0      	nop			; (mov r8, r8)
1000218e:	687b      	ldr	r3, [r7, #4]
10002190:	1c18      	adds	r0, r3, #0
10002192:	f7ff fe33 	bl	10001dfc <XMC_USIC_CH_GetTransmitBufferStatus>
10002196:	1e03      	subs	r3, r0, #0
10002198:	2b80      	cmp	r3, #128	; 0x80
1000219a:	d0f8      	beq.n	1000218e <XMC_I2C_CH_MasterReceiveNack+0x1a>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
1000219c:	687a      	ldr	r2, [r7, #4]
1000219e:	2380      	movs	r3, #128	; 0x80
100021a0:	019b      	lsls	r3, r3, #6
100021a2:	1c10      	adds	r0, r2, #0
100021a4:	1c19      	adds	r1, r3, #0
100021a6:	f7ff fe37 	bl	10001e18 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
100021aa:	687b      	ldr	r3, [r7, #4]
100021ac:	2180      	movs	r1, #128	; 0x80
100021ae:	22c0      	movs	r2, #192	; 0xc0
100021b0:	0092      	lsls	r2, r2, #2
100021b2:	505a      	str	r2, [r3, r1]
100021b4:	e005      	b.n	100021c2 <XMC_I2C_CH_MasterReceiveNack+0x4e>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
100021b6:	687a      	ldr	r2, [r7, #4]
100021b8:	23c0      	movs	r3, #192	; 0xc0
100021ba:	005b      	lsls	r3, r3, #1
100021bc:	21c0      	movs	r1, #192	; 0xc0
100021be:	0089      	lsls	r1, r1, #2
100021c0:	50d1      	str	r1, [r2, r3]
  }
}
100021c2:	46bd      	mov	sp, r7
100021c4:	b002      	add	sp, #8
100021c6:	bd80      	pop	{r7, pc}

100021c8 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
100021c8:	b580      	push	{r7, lr}
100021ca:	b084      	sub	sp, #16
100021cc:	af00      	add	r7, sp, #0
100021ce:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
100021d0:	687a      	ldr	r2, [r7, #4]
100021d2:	2386      	movs	r3, #134	; 0x86
100021d4:	005b      	lsls	r3, r3, #1
100021d6:	58d2      	ldr	r2, [r2, r3]
100021d8:	23e0      	movs	r3, #224	; 0xe0
100021da:	04db      	lsls	r3, r3, #19
100021dc:	4013      	ands	r3, r2
100021de:	d105      	bne.n	100021ec <XMC_I2C_CH_GetReceivedData+0x24>
  {
    retval = (uint8_t)channel->RBUF;
100021e0:	687b      	ldr	r3, [r7, #4]
100021e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100021e4:	230f      	movs	r3, #15
100021e6:	18fb      	adds	r3, r7, r3
100021e8:	701a      	strb	r2, [r3, #0]
100021ea:	e006      	b.n	100021fa <XMC_I2C_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
100021ec:	687a      	ldr	r2, [r7, #4]
100021ee:	238e      	movs	r3, #142	; 0x8e
100021f0:	005b      	lsls	r3, r3, #1
100021f2:	58d2      	ldr	r2, [r2, r3]
100021f4:	230f      	movs	r3, #15
100021f6:	18fb      	adds	r3, r7, r3
100021f8:	701a      	strb	r2, [r3, #0]
  }

  return retval;
100021fa:	230f      	movs	r3, #15
100021fc:	18fb      	adds	r3, r7, r3
100021fe:	781b      	ldrb	r3, [r3, #0]
}
10002200:	1c18      	adds	r0, r3, #0
10002202:	46bd      	mov	sp, r7
10002204:	b004      	add	sp, #16
10002206:	bd80      	pop	{r7, pc}

10002208 <XMC_I2C_CH_EnableEvent>:
  }
  return status;
}

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002208:	b580      	push	{r7, lr}
1000220a:	b082      	sub	sp, #8
1000220c:	af00      	add	r7, sp, #0
1000220e:	6078      	str	r0, [r7, #4]
10002210:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
10002212:	687b      	ldr	r3, [r7, #4]
10002214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10002216:	6839      	ldr	r1, [r7, #0]
10002218:	23fe      	movs	r3, #254	; 0xfe
1000221a:	025b      	lsls	r3, r3, #9
1000221c:	400b      	ands	r3, r1
1000221e:	431a      	orrs	r2, r3
10002220:	687b      	ldr	r3, [r7, #4]
10002222:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
10002224:	687b      	ldr	r3, [r7, #4]
10002226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10002228:	683b      	ldr	r3, [r7, #0]
1000222a:	4904      	ldr	r1, [pc, #16]	; (1000223c <XMC_I2C_CH_EnableEvent+0x34>)
1000222c:	400b      	ands	r3, r1
1000222e:	431a      	orrs	r2, r3
10002230:	687b      	ldr	r3, [r7, #4]
10002232:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002234:	46bd      	mov	sp, r7
10002236:	b002      	add	sp, #8
10002238:	bd80      	pop	{r7, pc}
1000223a:	46c0      	nop			; (mov r8, r8)
1000223c:	41fc0000 	.word	0x41fc0000

10002240 <XMC_I2C_CH_DisableEvent>:

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002240:	b580      	push	{r7, lr}
10002242:	b082      	sub	sp, #8
10002244:	af00      	add	r7, sp, #0
10002246:	6078      	str	r0, [r7, #4]
10002248:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
1000224a:	687b      	ldr	r3, [r7, #4]
1000224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000224e:	6839      	ldr	r1, [r7, #0]
10002250:	22fe      	movs	r2, #254	; 0xfe
10002252:	0252      	lsls	r2, r2, #9
10002254:	400a      	ands	r2, r1
10002256:	43d2      	mvns	r2, r2
10002258:	401a      	ands	r2, r3
1000225a:	687b      	ldr	r3, [r7, #4]
1000225c:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
1000225e:	687b      	ldr	r3, [r7, #4]
10002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002262:	683a      	ldr	r2, [r7, #0]
10002264:	4904      	ldr	r1, [pc, #16]	; (10002278 <XMC_I2C_CH_DisableEvent+0x38>)
10002266:	400a      	ands	r2, r1
10002268:	43d2      	mvns	r2, r2
1000226a:	401a      	ands	r2, r3
1000226c:	687b      	ldr	r3, [r7, #4]
1000226e:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002270:	46bd      	mov	sp, r7
10002272:	b002      	add	sp, #8
10002274:	bd80      	pop	{r7, pc}
10002276:	46c0      	nop			; (mov r8, r8)
10002278:	41fc0000 	.word	0x41fc0000

1000227c <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
1000227c:	b580      	push	{r7, lr}
1000227e:	b088      	sub	sp, #32
10002280:	af00      	add	r7, sp, #0
10002282:	6078      	str	r0, [r7, #4]
10002284:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10002286:	f3ef 8310 	mrs	r3, PRIMASK
1000228a:	617b      	str	r3, [r7, #20]
  return(result);
1000228c:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000228e:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10002290:	b672      	cpsid	i
  __disable_irq ();
  return status;
10002292:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10002294:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002296:	4b0c      	ldr	r3, [pc, #48]	; (100022c8 <__aeabi_uidiv+0x4c>)
10002298:	2204      	movs	r2, #4
1000229a:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
1000229c:	4b0a      	ldr	r3, [pc, #40]	; (100022c8 <__aeabi_uidiv+0x4c>)
1000229e:	687a      	ldr	r2, [r7, #4]
100022a0:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
100022a2:	4b09      	ldr	r3, [pc, #36]	; (100022c8 <__aeabi_uidiv+0x4c>)
100022a4:	683a      	ldr	r2, [r7, #0]
100022a6:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
100022a8:	4b07      	ldr	r3, [pc, #28]	; (100022c8 <__aeabi_uidiv+0x4c>)
100022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100022ac:	61bb      	str	r3, [r7, #24]
100022ae:	69fb      	ldr	r3, [r7, #28]
100022b0:	60fb      	str	r3, [r7, #12]
100022b2:	68fb      	ldr	r3, [r7, #12]
100022b4:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100022b6:	68bb      	ldr	r3, [r7, #8]
100022b8:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
100022bc:	69bb      	ldr	r3, [r7, #24]
}
100022be:	1c18      	adds	r0, r3, #0
100022c0:	46bd      	mov	sp, r7
100022c2:	b008      	add	sp, #32
100022c4:	bd80      	pop	{r7, pc}
100022c6:	46c0      	nop			; (mov r8, r8)
100022c8:	40030000 	.word	0x40030000

100022cc <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
100022cc:	b580      	push	{r7, lr}
100022ce:	b088      	sub	sp, #32
100022d0:	af00      	add	r7, sp, #0
100022d2:	6078      	str	r0, [r7, #4]
100022d4:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
100022d6:	f3ef 8310 	mrs	r3, PRIMASK
100022da:	617b      	str	r3, [r7, #20]
  return(result);
100022dc:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
100022de:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100022e0:	b672      	cpsid	i
  __disable_irq ();
  return status;
100022e2:	693b      	ldr	r3, [r7, #16]
/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
100022e4:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
100022e6:	4b0c      	ldr	r3, [pc, #48]	; (10002318 <__aeabi_idiv+0x4c>)
100022e8:	2200      	movs	r2, #0
100022ea:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100022ec:	4b0a      	ldr	r3, [pc, #40]	; (10002318 <__aeabi_idiv+0x4c>)
100022ee:	687a      	ldr	r2, [r7, #4]
100022f0:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
100022f2:	4b09      	ldr	r3, [pc, #36]	; (10002318 <__aeabi_idiv+0x4c>)
100022f4:	683a      	ldr	r2, [r7, #0]
100022f6:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
100022f8:	4b07      	ldr	r3, [pc, #28]	; (10002318 <__aeabi_idiv+0x4c>)
100022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100022fc:	61bb      	str	r3, [r7, #24]
100022fe:	69fb      	ldr	r3, [r7, #28]
10002300:	60fb      	str	r3, [r7, #12]
10002302:	68fb      	ldr	r3, [r7, #12]
10002304:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002306:	68bb      	ldr	r3, [r7, #8]
10002308:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);
  
  return result;
1000230c:	69bb      	ldr	r3, [r7, #24]
}
1000230e:	1c18      	adds	r0, r3, #0
10002310:	46bd      	mov	sp, r7
10002312:	b008      	add	sp, #32
10002314:	bd80      	pop	{r7, pc}
10002316:	46c0      	nop			; (mov r8, r8)
10002318:	40030000 	.word	0x40030000

1000231c <__aeabi_uidivmod>:

/* This function performs unsigned integer division modulo */
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
1000231c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000231e:	b08d      	sub	sp, #52	; 0x34
10002320:	af00      	add	r7, sp, #0
10002322:	6078      	str	r0, [r7, #4]
10002324:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10002326:	f3ef 8210 	mrs	r2, PRIMASK
1000232a:	617a      	str	r2, [r7, #20]
  return(result);
1000232c:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000232e:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10002330:	b672      	cpsid	i
  __disable_irq ();
  return status;
10002332:	693a      	ldr	r2, [r7, #16]
uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
10002334:	62fa      	str	r2, [r7, #44]	; 0x2c
  
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10002336:	4a15      	ldr	r2, [pc, #84]	; (1000238c <__aeabi_uidivmod+0x70>)
10002338:	2104      	movs	r1, #4
1000233a:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
1000233c:	4a13      	ldr	r2, [pc, #76]	; (1000238c <__aeabi_uidivmod+0x70>)
1000233e:	6879      	ldr	r1, [r7, #4]
10002340:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
10002342:	4a12      	ldr	r2, [pc, #72]	; (1000238c <__aeabi_uidivmod+0x70>)
10002344:	6839      	ldr	r1, [r7, #0]
10002346:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;
10002348:	4a10      	ldr	r2, [pc, #64]	; (1000238c <__aeabi_uidivmod+0x70>)
1000234a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1000234c:	623a      	str	r2, [r7, #32]
1000234e:	2200      	movs	r2, #0
10002350:	627a      	str	r2, [r7, #36]	; 0x24
  quot = (uint64_t)MATH->QUOT;
10002352:	4a0e      	ldr	r2, [pc, #56]	; (1000238c <__aeabi_uidivmod+0x70>)
10002354:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002356:	61ba      	str	r2, [r7, #24]
10002358:	2200      	movs	r2, #0
1000235a:	61fa      	str	r2, [r7, #28]
1000235c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000235e:	60fa      	str	r2, [r7, #12]
10002360:	68fa      	ldr	r2, [r7, #12]
10002362:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10002364:	68ba      	ldr	r2, [r7, #8]
10002366:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((remainder << 32) | quot);
1000236a:	6a3a      	ldr	r2, [r7, #32]
1000236c:	0014      	movs	r4, r2
1000236e:	2200      	movs	r2, #0
10002370:	1c13      	adds	r3, r2, #0
10002372:	69ba      	ldr	r2, [r7, #24]
10002374:	431a      	orrs	r2, r3
10002376:	1c15      	adds	r5, r2, #0
10002378:	69fa      	ldr	r2, [r7, #28]
1000237a:	4322      	orrs	r2, r4
1000237c:	1c16      	adds	r6, r2, #0
1000237e:	1c2b      	adds	r3, r5, #0
10002380:	1c34      	adds	r4, r6, #0
}
10002382:	1c18      	adds	r0, r3, #0
10002384:	1c21      	adds	r1, r4, #0
10002386:	46bd      	mov	sp, r7
10002388:	b00d      	add	sp, #52	; 0x34
1000238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000238c:	40030000 	.word	0x40030000

10002390 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10002390:	b580      	push	{r7, lr}
10002392:	b082      	sub	sp, #8
10002394:	af00      	add	r7, sp, #0
10002396:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10002398:	687b      	ldr	r3, [r7, #4]
1000239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000239c:	b2db      	uxtb	r3, r3
1000239e:	227f      	movs	r2, #127	; 0x7f
100023a0:	4393      	bics	r3, r2
100023a2:	b2db      	uxtb	r3, r3
}
100023a4:	1c18      	adds	r0, r3, #0
100023a6:	46bd      	mov	sp, r7
100023a8:	b002      	add	sp, #8
100023aa:	bd80      	pop	{r7, pc}

100023ac <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
100023ac:	b580      	push	{r7, lr}
100023ae:	b082      	sub	sp, #8
100023b0:	af00      	add	r7, sp, #0
100023b2:	6078      	str	r0, [r7, #4]
100023b4:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
100023b6:	687b      	ldr	r3, [r7, #4]
100023b8:	683a      	ldr	r2, [r7, #0]
100023ba:	64da      	str	r2, [r3, #76]	; 0x4c
}
100023bc:	46bd      	mov	sp, r7
100023be:	b002      	add	sp, #8
100023c0:	bd80      	pop	{r7, pc}
100023c2:	46c0      	nop			; (mov r8, r8)

100023c4 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
100023c4:	b580      	push	{r7, lr}
100023c6:	b084      	sub	sp, #16
100023c8:	af00      	add	r7, sp, #0
100023ca:	6078      	str	r0, [r7, #4]
100023cc:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
100023ce:	2310      	movs	r3, #16
100023d0:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
100023d2:	687b      	ldr	r3, [r7, #4]
100023d4:	1c18      	adds	r0, r3, #0
100023d6:	f000 f89d 	bl	10002514 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
100023da:	683b      	ldr	r3, [r7, #0]
100023dc:	79db      	ldrb	r3, [r3, #7]
100023de:	2b00      	cmp	r3, #0
100023e0:	d002      	beq.n	100023e8 <XMC_UART_CH_Init+0x24>
  {
    oversampling = (uint32_t)config->oversampling;
100023e2:	683b      	ldr	r3, [r7, #0]
100023e4:	79db      	ldrb	r3, [r3, #7]
100023e6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
100023e8:	683b      	ldr	r3, [r7, #0]
100023ea:	681a      	ldr	r2, [r3, #0]
100023ec:	6879      	ldr	r1, [r7, #4]
100023ee:	68fb      	ldr	r3, [r7, #12]
100023f0:	1c08      	adds	r0, r1, #0
100023f2:	1c11      	adds	r1, r2, #0
100023f4:	1c1a      	adds	r2, r3, #0
100023f6:	f000 f8c9 	bl	1000258c <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
100023fa:	683b      	ldr	r3, [r7, #0]
100023fc:	799b      	ldrb	r3, [r3, #6]
100023fe:	3b01      	subs	r3, #1
10002400:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
10002402:	68fb      	ldr	r3, [r7, #12]
10002404:	085b      	lsrs	r3, r3, #1
10002406:	3301      	adds	r3, #1
10002408:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
1000240a:	4313      	orrs	r3, r2
1000240c:	4a19      	ldr	r2, [pc, #100]	; (10002474 <XMC_UART_CH_Init+0xb0>)
1000240e:	431a      	orrs	r2, r3
10002410:	687b      	ldr	r3, [r7, #4]
10002412:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10002414:	683b      	ldr	r3, [r7, #0]
10002416:	791b      	ldrb	r3, [r3, #4]
10002418:	3b01      	subs	r3, #1
1000241a:	061b      	lsls	r3, r3, #24
1000241c:	2281      	movs	r2, #129	; 0x81
1000241e:	0052      	lsls	r2, r2, #1
10002420:	431a      	orrs	r2, r3
10002422:	687b      	ldr	r3, [r7, #4]
10002424:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10002426:	683b      	ldr	r3, [r7, #0]
10002428:	795b      	ldrb	r3, [r3, #5]
1000242a:	2b00      	cmp	r3, #0
1000242c:	d009      	beq.n	10002442 <XMC_UART_CH_Init+0x7e>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
1000242e:	687b      	ldr	r3, [r7, #4]
10002430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002432:	683b      	ldr	r3, [r7, #0]
10002434:	795b      	ldrb	r3, [r3, #5]
10002436:	3b01      	subs	r3, #1
10002438:	041b      	lsls	r3, r3, #16
1000243a:	431a      	orrs	r2, r3
1000243c:	687b      	ldr	r3, [r7, #4]
1000243e:	635a      	str	r2, [r3, #52]	; 0x34
10002440:	e008      	b.n	10002454 <XMC_UART_CH_Init+0x90>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
10002442:	687b      	ldr	r3, [r7, #4]
10002444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002446:	683b      	ldr	r3, [r7, #0]
10002448:	791b      	ldrb	r3, [r3, #4]
1000244a:	3b01      	subs	r3, #1
1000244c:	041b      	lsls	r3, r3, #16
1000244e:	431a      	orrs	r2, r3
10002450:	687b      	ldr	r3, [r7, #4]
10002452:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
10002454:	687b      	ldr	r3, [r7, #4]
10002456:	22a0      	movs	r2, #160	; 0xa0
10002458:	00d2      	lsls	r2, r2, #3
1000245a:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
1000245c:	687b      	ldr	r3, [r7, #4]
1000245e:	2201      	movs	r2, #1
10002460:	4252      	negs	r2, r2
10002462:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10002464:	683b      	ldr	r3, [r7, #0]
10002466:	891b      	ldrh	r3, [r3, #8]
10002468:	1c1a      	adds	r2, r3, #0
1000246a:	687b      	ldr	r3, [r7, #4]
1000246c:	641a      	str	r2, [r3, #64]	; 0x40
}
1000246e:	46bd      	mov	sp, r7
10002470:	b004      	add	sp, #16
10002472:	bd80      	pop	{r7, pc}
10002474:	00030001 	.word	0x00030001

10002478 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
10002478:	b580      	push	{r7, lr}
1000247a:	b082      	sub	sp, #8
1000247c:	af00      	add	r7, sp, #0
1000247e:	6078      	str	r0, [r7, #4]
10002480:	1c0a      	adds	r2, r1, #0
10002482:	1cbb      	adds	r3, r7, #2
10002484:	801a      	strh	r2, [r3, #0]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
10002486:	687a      	ldr	r2, [r7, #4]
10002488:	2384      	movs	r3, #132	; 0x84
1000248a:	005b      	lsls	r3, r3, #1
1000248c:	58d2      	ldr	r2, [r2, r3]
1000248e:	23e0      	movs	r3, #224	; 0xe0
10002490:	04db      	lsls	r3, r3, #19
10002492:	4013      	ands	r3, r2
10002494:	d114      	bne.n	100024c0 <XMC_UART_CH_Transmit+0x48>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10002496:	46c0      	nop			; (mov r8, r8)
10002498:	687b      	ldr	r3, [r7, #4]
1000249a:	1c18      	adds	r0, r3, #0
1000249c:	f7ff ff78 	bl	10002390 <XMC_USIC_CH_GetTransmitBufferStatus>
100024a0:	1e03      	subs	r3, r0, #0
100024a2:	2b80      	cmp	r3, #128	; 0x80
100024a4:	d0f8      	beq.n	10002498 <XMC_UART_CH_Transmit+0x20>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100024a6:	687a      	ldr	r2, [r7, #4]
100024a8:	2380      	movs	r3, #128	; 0x80
100024aa:	019b      	lsls	r3, r3, #6
100024ac:	1c10      	adds	r0, r2, #0
100024ae:	1c19      	adds	r1, r3, #0
100024b0:	f7ff ff7c 	bl	100023ac <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
100024b4:	1cbb      	adds	r3, r7, #2
100024b6:	881a      	ldrh	r2, [r3, #0]
100024b8:	687b      	ldr	r3, [r7, #4]
100024ba:	2180      	movs	r1, #128	; 0x80
100024bc:	505a      	str	r2, [r3, r1]
100024be:	e005      	b.n	100024cc <XMC_UART_CH_Transmit+0x54>
  }
  else
  {
    channel->IN[0U] = data;
100024c0:	1cbb      	adds	r3, r7, #2
100024c2:	8819      	ldrh	r1, [r3, #0]
100024c4:	687a      	ldr	r2, [r7, #4]
100024c6:	23c0      	movs	r3, #192	; 0xc0
100024c8:	005b      	lsls	r3, r3, #1
100024ca:	50d1      	str	r1, [r2, r3]
  }
}
100024cc:	46bd      	mov	sp, r7
100024ce:	b002      	add	sp, #8
100024d0:	bd80      	pop	{r7, pc}
100024d2:	46c0      	nop			; (mov r8, r8)

100024d4 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
100024d4:	b580      	push	{r7, lr}
100024d6:	b084      	sub	sp, #16
100024d8:	af00      	add	r7, sp, #0
100024da:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
100024dc:	687a      	ldr	r2, [r7, #4]
100024de:	2386      	movs	r3, #134	; 0x86
100024e0:	005b      	lsls	r3, r3, #1
100024e2:	58d2      	ldr	r2, [r2, r3]
100024e4:	23e0      	movs	r3, #224	; 0xe0
100024e6:	04db      	lsls	r3, r3, #19
100024e8:	4013      	ands	r3, r2
100024ea:	d105      	bne.n	100024f8 <XMC_UART_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
100024ec:	687b      	ldr	r3, [r7, #4]
100024ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100024f0:	230e      	movs	r3, #14
100024f2:	18fb      	adds	r3, r7, r3
100024f4:	801a      	strh	r2, [r3, #0]
100024f6:	e006      	b.n	10002506 <XMC_UART_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
100024f8:	687a      	ldr	r2, [r7, #4]
100024fa:	238e      	movs	r3, #142	; 0x8e
100024fc:	005b      	lsls	r3, r3, #1
100024fe:	58d2      	ldr	r2, [r2, r3]
10002500:	230e      	movs	r3, #14
10002502:	18fb      	adds	r3, r7, r3
10002504:	801a      	strh	r2, [r3, #0]
  }

  return retval;
10002506:	230e      	movs	r3, #14
10002508:	18fb      	adds	r3, r7, r3
1000250a:	881b      	ldrh	r3, [r3, #0]
}
1000250c:	1c18      	adds	r0, r3, #0
1000250e:	46bd      	mov	sp, r7
10002510:	b004      	add	sp, #16
10002512:	bd80      	pop	{r7, pc}

10002514 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10002514:	b580      	push	{r7, lr}
10002516:	b082      	sub	sp, #8
10002518:	af00      	add	r7, sp, #0
1000251a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
1000251c:	687a      	ldr	r2, [r7, #4]
1000251e:	2390      	movs	r3, #144	; 0x90
10002520:	05db      	lsls	r3, r3, #23
10002522:	429a      	cmp	r2, r3
10002524:	d003      	beq.n	1000252e <XMC_USIC_CH_Enable+0x1a>
10002526:	687b      	ldr	r3, [r7, #4]
10002528:	4a13      	ldr	r2, [pc, #76]	; (10002578 <XMC_USIC_CH_Enable+0x64>)
1000252a:	4293      	cmp	r3, r2
1000252c:	d104      	bne.n	10002538 <XMC_USIC_CH_Enable+0x24>
  {
    XMC_USIC_Enable(XMC_USIC0);
1000252e:	4b13      	ldr	r3, [pc, #76]	; (1000257c <XMC_USIC_CH_Enable+0x68>)
10002530:	1c18      	adds	r0, r3, #0
10002532:	f000 f997 	bl	10002864 <XMC_USIC_Enable>
10002536:	e00b      	b.n	10002550 <XMC_USIC_CH_Enable+0x3c>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
10002538:	687b      	ldr	r3, [r7, #4]
1000253a:	4a11      	ldr	r2, [pc, #68]	; (10002580 <XMC_USIC_CH_Enable+0x6c>)
1000253c:	4293      	cmp	r3, r2
1000253e:	d003      	beq.n	10002548 <XMC_USIC_CH_Enable+0x34>
10002540:	687b      	ldr	r3, [r7, #4]
10002542:	4a10      	ldr	r2, [pc, #64]	; (10002584 <XMC_USIC_CH_Enable+0x70>)
10002544:	4293      	cmp	r3, r2
10002546:	d103      	bne.n	10002550 <XMC_USIC_CH_Enable+0x3c>
  {
    XMC_USIC_Enable(XMC_USIC1);
10002548:	4b0f      	ldr	r3, [pc, #60]	; (10002588 <XMC_USIC_CH_Enable+0x74>)
1000254a:	1c18      	adds	r0, r3, #0
1000254c:	f000 f98a 	bl	10002864 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10002550:	687b      	ldr	r3, [r7, #4]
10002552:	2203      	movs	r2, #3
10002554:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10002556:	46c0      	nop			; (mov r8, r8)
10002558:	687b      	ldr	r3, [r7, #4]
1000255a:	68db      	ldr	r3, [r3, #12]
1000255c:	2201      	movs	r2, #1
1000255e:	4013      	ands	r3, r2
10002560:	d0fa      	beq.n	10002558 <XMC_USIC_CH_Enable+0x44>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10002562:	687b      	ldr	r3, [r7, #4]
10002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002566:	220f      	movs	r2, #15
10002568:	4393      	bics	r3, r2
1000256a:	1c1a      	adds	r2, r3, #0
1000256c:	687b      	ldr	r3, [r7, #4]
1000256e:	641a      	str	r2, [r3, #64]	; 0x40
}
10002570:	46bd      	mov	sp, r7
10002572:	b002      	add	sp, #8
10002574:	bd80      	pop	{r7, pc}
10002576:	46c0      	nop			; (mov r8, r8)
10002578:	48000200 	.word	0x48000200
1000257c:	48000008 	.word	0x48000008
10002580:	48004000 	.word	0x48004000
10002584:	48004200 	.word	0x48004200
10002588:	48004008 	.word	0x48004008

1000258c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
1000258c:	b580      	push	{r7, lr}
1000258e:	b08e      	sub	sp, #56	; 0x38
10002590:	af00      	add	r7, sp, #0
10002592:	60f8      	str	r0, [r7, #12]
10002594:	60b9      	str	r1, [r7, #8]
10002596:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10002598:	68bb      	ldr	r3, [r7, #8]
1000259a:	2b63      	cmp	r3, #99	; 0x63
1000259c:	d95c      	bls.n	10002658 <XMC_USIC_CH_SetBaudrate+0xcc>
1000259e:	687b      	ldr	r3, [r7, #4]
100025a0:	2b00      	cmp	r3, #0
100025a2:	d059      	beq.n	10002658 <XMC_USIC_CH_SetBaudrate+0xcc>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
100025a4:	f7ff f97c 	bl	100018a0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
100025a8:	1c03      	adds	r3, r0, #0
100025aa:	1c18      	adds	r0, r3, #0
100025ac:	2164      	movs	r1, #100	; 0x64
100025ae:	f7ff fe65 	bl	1000227c <__aeabi_uidiv>
100025b2:	1c03      	adds	r3, r0, #0
100025b4:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
100025b6:	68bb      	ldr	r3, [r7, #8]
100025b8:	1c18      	adds	r0, r3, #0
100025ba:	2164      	movs	r1, #100	; 0x64
100025bc:	f7ff fe5e 	bl	1000227c <__aeabi_uidiv>
100025c0:	1c03      	adds	r3, r0, #0
100025c2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
100025c4:	2301      	movs	r3, #1
100025c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
100025c8:	2301      	movs	r3, #1
100025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
100025cc:	4b28      	ldr	r3, [pc, #160]	; (10002670 <XMC_USIC_CH_SetBaudrate+0xe4>)
100025ce:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
100025d0:	4b27      	ldr	r3, [pc, #156]	; (10002670 <XMC_USIC_CH_SetBaudrate+0xe4>)
100025d2:	633b      	str	r3, [r7, #48]	; 0x30
100025d4:	e024      	b.n	10002620 <XMC_USIC_CH_SetBaudrate+0x94>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
100025d6:	6a3b      	ldr	r3, [r7, #32]
100025d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100025da:	435a      	muls	r2, r3
100025dc:	1c11      	adds	r1, r2, #0
100025de:	68bb      	ldr	r3, [r7, #8]
100025e0:	687a      	ldr	r2, [r7, #4]
100025e2:	4353      	muls	r3, r2
100025e4:	1c08      	adds	r0, r1, #0
100025e6:	1c19      	adds	r1, r3, #0
100025e8:	f7ff fe48 	bl	1000227c <__aeabi_uidiv>
100025ec:	1c03      	adds	r3, r0, #0
100025ee:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
100025f0:	69fb      	ldr	r3, [r7, #28]
100025f2:	0a9b      	lsrs	r3, r3, #10
100025f4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
100025f6:	69fb      	ldr	r3, [r7, #28]
100025f8:	059b      	lsls	r3, r3, #22
100025fa:	0d9b      	lsrs	r3, r3, #22
100025fc:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
100025fe:	69bb      	ldr	r3, [r7, #24]
10002600:	4a1b      	ldr	r2, [pc, #108]	; (10002670 <XMC_USIC_CH_SetBaudrate+0xe4>)
10002602:	4293      	cmp	r3, r2
10002604:	d809      	bhi.n	1000261a <XMC_USIC_CH_SetBaudrate+0x8e>
10002606:	697a      	ldr	r2, [r7, #20]
10002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000260a:	429a      	cmp	r2, r3
1000260c:	d205      	bcs.n	1000261a <XMC_USIC_CH_SetBaudrate+0x8e>
      {
        pdiv_frac_min = pdiv_frac;
1000260e:	697b      	ldr	r3, [r7, #20]
10002610:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10002612:	69bb      	ldr	r3, [r7, #24]
10002614:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002618:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
1000261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000261c:	3b01      	subs	r3, #1
1000261e:	633b      	str	r3, [r7, #48]	; 0x30
10002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002622:	2b00      	cmp	r3, #0
10002624:	d1d7      	bne.n	100025d6 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002628:	2280      	movs	r2, #128	; 0x80
1000262a:	0212      	lsls	r2, r2, #8
1000262c:	431a      	orrs	r2, r3
1000262e:	68fb      	ldr	r3, [r7, #12]
10002630:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10002632:	68fb      	ldr	r3, [r7, #12]
10002634:	695b      	ldr	r3, [r3, #20]
10002636:	4a0f      	ldr	r2, [pc, #60]	; (10002674 <XMC_USIC_CH_SetBaudrate+0xe8>)
10002638:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
1000263a:	687b      	ldr	r3, [r7, #4]
1000263c:	3b01      	subs	r3, #1
1000263e:	029b      	lsls	r3, r3, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10002640:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002644:	3b01      	subs	r3, #1
10002646:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10002648:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
1000264a:	68fb      	ldr	r3, [r7, #12]
1000264c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
1000264e:	2337      	movs	r3, #55	; 0x37
10002650:	18fb      	adds	r3, r7, r3
10002652:	2200      	movs	r2, #0
10002654:	701a      	strb	r2, [r3, #0]
10002656:	e003      	b.n	10002660 <XMC_USIC_CH_SetBaudrate+0xd4>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10002658:	2337      	movs	r3, #55	; 0x37
1000265a:	18fb      	adds	r3, r7, r3
1000265c:	2201      	movs	r2, #1
1000265e:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10002660:	2337      	movs	r3, #55	; 0x37
10002662:	18fb      	adds	r3, r7, r3
10002664:	781b      	ldrb	r3, [r3, #0]
}
10002666:	1c18      	adds	r0, r3, #0
10002668:	46bd      	mov	sp, r7
1000266a:	b00e      	add	sp, #56	; 0x38
1000266c:	bd80      	pop	{r7, pc}
1000266e:	46c0      	nop			; (mov r8, r8)
10002670:	000003ff 	.word	0x000003ff
10002674:	fc0080ef 	.word	0xfc0080ef

10002678 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
10002678:	b580      	push	{r7, lr}
1000267a:	b084      	sub	sp, #16
1000267c:	af00      	add	r7, sp, #0
1000267e:	60f8      	str	r0, [r7, #12]
10002680:	60b9      	str	r1, [r7, #8]
10002682:	603b      	str	r3, [r7, #0]
10002684:	1dfb      	adds	r3, r7, #7
10002686:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
10002688:	68fa      	ldr	r2, [r7, #12]
1000268a:	2384      	movs	r3, #132	; 0x84
1000268c:	005b      	lsls	r3, r3, #1
1000268e:	58d3      	ldr	r3, [r2, r3]
10002690:	4a0e      	ldr	r2, [pc, #56]	; (100026cc <XMC_USIC_CH_TXFIFO_Configure+0x54>)
10002692:	4013      	ands	r3, r2
10002694:	1c19      	adds	r1, r3, #0
10002696:	68fa      	ldr	r2, [r7, #12]
10002698:	2384      	movs	r3, #132	; 0x84
1000269a:	005b      	lsls	r3, r3, #1
1000269c:	50d1      	str	r1, [r2, r3]
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
1000269e:	68fa      	ldr	r2, [r7, #12]
100026a0:	2384      	movs	r3, #132	; 0x84
100026a2:	005b      	lsls	r3, r3, #1
100026a4:	58d3      	ldr	r3, [r2, r3]
100026a6:	4a0a      	ldr	r2, [pc, #40]	; (100026d0 <XMC_USIC_CH_TXFIFO_Configure+0x58>)
100026a8:	401a      	ands	r2, r3
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100026aa:	683b      	ldr	r3, [r7, #0]
100026ac:	0219      	lsls	r1, r3, #8
100026ae:	68bb      	ldr	r3, [r7, #8]
100026b0:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
100026b2:	1dfb      	adds	r3, r7, #7
100026b4:	781b      	ldrb	r3, [r3, #0]
100026b6:	061b      	lsls	r3, r3, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
100026b8:	430b      	orrs	r3, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
100026ba:	431a      	orrs	r2, r3
100026bc:	1c11      	adds	r1, r2, #0
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
100026be:	68fa      	ldr	r2, [r7, #12]
100026c0:	2384      	movs	r3, #132	; 0x84
100026c2:	005b      	lsls	r3, r3, #1
100026c4:	50d1      	str	r1, [r2, r3]
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
100026c6:	46bd      	mov	sp, r7
100026c8:	b004      	add	sp, #16
100026ca:	bd80      	pop	{r7, pc}
100026cc:	f8ffffff 	.word	0xf8ffffff
100026d0:	f8ffc0c0 	.word	0xf8ffc0c0

100026d4 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
100026d4:	b580      	push	{r7, lr}
100026d6:	b084      	sub	sp, #16
100026d8:	af00      	add	r7, sp, #0
100026da:	60f8      	str	r0, [r7, #12]
100026dc:	60b9      	str	r1, [r7, #8]
100026de:	603b      	str	r3, [r7, #0]
100026e0:	1dfb      	adds	r3, r7, #7
100026e2:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
100026e4:	68fa      	ldr	r2, [r7, #12]
100026e6:	2386      	movs	r3, #134	; 0x86
100026e8:	005b      	lsls	r3, r3, #1
100026ea:	58d3      	ldr	r3, [r2, r3]
100026ec:	4a10      	ldr	r2, [pc, #64]	; (10002730 <XMC_USIC_CH_RXFIFO_Configure+0x5c>)
100026ee:	4013      	ands	r3, r2
100026f0:	1c19      	adds	r1, r3, #0
100026f2:	68fa      	ldr	r2, [r7, #12]
100026f4:	2386      	movs	r3, #134	; 0x86
100026f6:	005b      	lsls	r3, r3, #1
100026f8:	50d1      	str	r1, [r2, r3]

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
100026fa:	68fa      	ldr	r2, [r7, #12]
100026fc:	2386      	movs	r3, #134	; 0x86
100026fe:	005b      	lsls	r3, r3, #1
10002700:	58d3      	ldr	r3, [r2, r3]
10002702:	4a0c      	ldr	r2, [pc, #48]	; (10002734 <XMC_USIC_CH_RXFIFO_Configure+0x60>)
10002704:	401a      	ands	r2, r3
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
10002706:	683b      	ldr	r3, [r7, #0]
10002708:	0219      	lsls	r1, r3, #8
1000270a:	68bb      	ldr	r3, [r7, #8]
1000270c:	4319      	orrs	r1, r3
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
1000270e:	1dfb      	adds	r3, r7, #7
10002710:	781b      	ldrb	r3, [r3, #0]
10002712:	061b      	lsls	r3, r3, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
10002714:	430b      	orrs	r3, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
10002716:	4313      	orrs	r3, r2
10002718:	2280      	movs	r2, #128	; 0x80
1000271a:	0552      	lsls	r2, r2, #21
1000271c:	431a      	orrs	r2, r3
1000271e:	1c11      	adds	r1, r2, #0
10002720:	68fa      	ldr	r2, [r7, #12]
10002722:	2386      	movs	r3, #134	; 0x86
10002724:	005b      	lsls	r3, r3, #1
10002726:	50d1      	str	r1, [r2, r3]
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
10002728:	46bd      	mov	sp, r7
1000272a:	b004      	add	sp, #16
1000272c:	bd80      	pop	{r7, pc}
1000272e:	46c0      	nop			; (mov r8, r8)
10002730:	f8ffffff 	.word	0xf8ffffff
10002734:	efffc0c0 	.word	0xefffc0c0

10002738 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
10002738:	b580      	push	{r7, lr}
1000273a:	b084      	sub	sp, #16
1000273c:	af00      	add	r7, sp, #0
1000273e:	60f8      	str	r0, [r7, #12]
10002740:	607a      	str	r2, [r7, #4]
10002742:	230b      	movs	r3, #11
10002744:	18fb      	adds	r3, r7, r3
10002746:	1c0a      	adds	r2, r1, #0
10002748:	701a      	strb	r2, [r3, #0]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
1000274a:	68fa      	ldr	r2, [r7, #12]
1000274c:	2386      	movs	r3, #134	; 0x86
1000274e:	005b      	lsls	r3, r3, #1
10002750:	58d3      	ldr	r3, [r2, r3]
10002752:	4a0e      	ldr	r2, [pc, #56]	; (1000278c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x54>)
10002754:	4013      	ands	r3, r2
10002756:	1c19      	adds	r1, r3, #0
10002758:	68fa      	ldr	r2, [r7, #12]
1000275a:	2386      	movs	r3, #134	; 0x86
1000275c:	005b      	lsls	r3, r3, #1
1000275e:	50d1      	str	r1, [r2, r3]

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002760:	68fa      	ldr	r2, [r7, #12]
10002762:	2386      	movs	r3, #134	; 0x86
10002764:	005b      	lsls	r3, r3, #1
10002766:	58d3      	ldr	r3, [r2, r3]
10002768:	4a09      	ldr	r2, [pc, #36]	; (10002790 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit+0x58>)
1000276a:	401a      	ands	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
10002770:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
10002772:	230b      	movs	r3, #11
10002774:	18fb      	adds	r3, r7, r3
10002776:	781b      	ldrb	r3, [r3, #0]
10002778:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
1000277a:	431a      	orrs	r2, r3
1000277c:	1c11      	adds	r1, r2, #0
1000277e:	68fa      	ldr	r2, [r7, #12]
10002780:	2386      	movs	r3, #134	; 0x86
10002782:	005b      	lsls	r3, r3, #1
10002784:	50d1      	str	r1, [r2, r3]
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
10002786:	46bd      	mov	sp, r7
10002788:	b004      	add	sp, #16
1000278a:	bd80      	pop	{r7, pc}
1000278c:	f8ffffff 	.word	0xf8ffffff
10002790:	ffffc0ff 	.word	0xffffc0ff

10002794 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
10002794:	b580      	push	{r7, lr}
10002796:	b084      	sub	sp, #16
10002798:	af00      	add	r7, sp, #0
1000279a:	60f8      	str	r0, [r7, #12]
1000279c:	607a      	str	r2, [r7, #4]
1000279e:	230b      	movs	r3, #11
100027a0:	18fb      	adds	r3, r7, r3
100027a2:	1c0a      	adds	r2, r1, #0
100027a4:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100027a6:	68fb      	ldr	r3, [r7, #12]
100027a8:	699b      	ldr	r3, [r3, #24]
100027aa:	220b      	movs	r2, #11
100027ac:	18ba      	adds	r2, r7, r2
100027ae:	7812      	ldrb	r2, [r2, #0]
100027b0:	2107      	movs	r1, #7
100027b2:	4091      	lsls	r1, r2
100027b4:	1c0a      	adds	r2, r1, #0
100027b6:	43d2      	mvns	r2, r2
100027b8:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
100027ba:	230b      	movs	r3, #11
100027bc:	18fb      	adds	r3, r7, r3
100027be:	781b      	ldrb	r3, [r3, #0]
100027c0:	6879      	ldr	r1, [r7, #4]
100027c2:	4099      	lsls	r1, r3
100027c4:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100027c6:	431a      	orrs	r2, r3
100027c8:	68fb      	ldr	r3, [r7, #12]
100027ca:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
100027cc:	46bd      	mov	sp, r7
100027ce:	b004      	add	sp, #16
100027d0:	bd80      	pop	{r7, pc}
100027d2:	46c0      	nop			; (mov r8, r8)

100027d4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
100027d4:	b580      	push	{r7, lr}
100027d6:	b084      	sub	sp, #16
100027d8:	af00      	add	r7, sp, #0
100027da:	60f8      	str	r0, [r7, #12]
100027dc:	607a      	str	r2, [r7, #4]
100027de:	230b      	movs	r3, #11
100027e0:	18fb      	adds	r3, r7, r3
100027e2:	1c0a      	adds	r2, r1, #0
100027e4:	701a      	strb	r2, [r3, #0]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
100027e6:	68fa      	ldr	r2, [r7, #12]
100027e8:	2384      	movs	r3, #132	; 0x84
100027ea:	005b      	lsls	r3, r3, #1
100027ec:	58d3      	ldr	r3, [r2, r3]
100027ee:	220b      	movs	r2, #11
100027f0:	18ba      	adds	r2, r7, r2
100027f2:	7812      	ldrb	r2, [r2, #0]
100027f4:	2107      	movs	r1, #7
100027f6:	4091      	lsls	r1, r2
100027f8:	1c0a      	adds	r2, r1, #0
100027fa:	43d2      	mvns	r2, r2
100027fc:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
100027fe:	230b      	movs	r3, #11
10002800:	18fb      	adds	r3, r7, r3
10002802:	781b      	ldrb	r3, [r3, #0]
10002804:	6879      	ldr	r1, [r7, #4]
10002806:	4099      	lsls	r1, r3
10002808:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000280a:	431a      	orrs	r2, r3
1000280c:	1c11      	adds	r1, r2, #0
1000280e:	68fa      	ldr	r2, [r7, #12]
10002810:	2384      	movs	r3, #132	; 0x84
10002812:	005b      	lsls	r3, r3, #1
10002814:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
10002816:	46bd      	mov	sp, r7
10002818:	b004      	add	sp, #16
1000281a:	bd80      	pop	{r7, pc}

1000281c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
1000281c:	b580      	push	{r7, lr}
1000281e:	b084      	sub	sp, #16
10002820:	af00      	add	r7, sp, #0
10002822:	60f8      	str	r0, [r7, #12]
10002824:	607a      	str	r2, [r7, #4]
10002826:	230b      	movs	r3, #11
10002828:	18fb      	adds	r3, r7, r3
1000282a:	1c0a      	adds	r2, r1, #0
1000282c:	701a      	strb	r2, [r3, #0]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
1000282e:	68fa      	ldr	r2, [r7, #12]
10002830:	2386      	movs	r3, #134	; 0x86
10002832:	005b      	lsls	r3, r3, #1
10002834:	58d3      	ldr	r3, [r2, r3]
10002836:	220b      	movs	r2, #11
10002838:	18ba      	adds	r2, r7, r2
1000283a:	7812      	ldrb	r2, [r2, #0]
1000283c:	2107      	movs	r1, #7
1000283e:	4091      	lsls	r1, r2
10002840:	1c0a      	adds	r2, r1, #0
10002842:	43d2      	mvns	r2, r2
10002844:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
10002846:	230b      	movs	r3, #11
10002848:	18fb      	adds	r3, r7, r3
1000284a:	781b      	ldrb	r3, [r3, #0]
1000284c:	6879      	ldr	r1, [r7, #4]
1000284e:	4099      	lsls	r1, r3
10002850:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10002852:	431a      	orrs	r2, r3
10002854:	1c11      	adds	r1, r2, #0
10002856:	68fa      	ldr	r2, [r7, #12]
10002858:	2386      	movs	r3, #134	; 0x86
1000285a:	005b      	lsls	r3, r3, #1
1000285c:	50d1      	str	r1, [r2, r3]
                   (service_request << (uint32_t)interrupt_node));
}
1000285e:	46bd      	mov	sp, r7
10002860:	b004      	add	sp, #16
10002862:	bd80      	pop	{r7, pc}

10002864 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
10002864:	b580      	push	{r7, lr}
10002866:	b082      	sub	sp, #8
10002868:	af00      	add	r7, sp, #0
1000286a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
1000286c:	687b      	ldr	r3, [r7, #4]
1000286e:	4a09      	ldr	r2, [pc, #36]	; (10002894 <XMC_USIC_Enable+0x30>)
10002870:	4293      	cmp	r3, r2
10002872:	d103      	bne.n	1000287c <XMC_USIC_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10002874:	2008      	movs	r0, #8
10002876:	f7fe ff43 	bl	10001700 <XMC_SCU_CLOCK_UngatePeripheralClock>
1000287a:	e008      	b.n	1000288e <XMC_USIC_Enable+0x2a>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
1000287c:	687b      	ldr	r3, [r7, #4]
1000287e:	4a06      	ldr	r2, [pc, #24]	; (10002898 <XMC_USIC_Enable+0x34>)
10002880:	4293      	cmp	r3, r2
10002882:	d104      	bne.n	1000288e <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
10002884:	2380      	movs	r3, #128	; 0x80
10002886:	02db      	lsls	r3, r3, #11
10002888:	1c18      	adds	r0, r3, #0
1000288a:	f7fe ff39 	bl	10001700 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
1000288e:	46bd      	mov	sp, r7
10002890:	b002      	add	sp, #8
10002892:	bd80      	pop	{r7, pc}
10002894:	48000008 	.word	0x48000008
10002898:	48004008 	.word	0x48004008

1000289c <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
1000289c:	b580      	push	{r7, lr}
1000289e:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
100028a0:	2380      	movs	r3, #128	; 0x80
100028a2:	009b      	lsls	r3, r3, #2
100028a4:	1c18      	adds	r0, r3, #0
100028a6:	f7fe ff2b 	bl	10001700 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
#endif  
}
100028aa:	46bd      	mov	sp, r7
100028ac:	bd80      	pop	{r7, pc}
100028ae:	46c0      	nop			; (mov r8, r8)

100028b0 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
100028b0:	b580      	push	{r7, lr}
100028b2:	b082      	sub	sp, #8
100028b4:	af00      	add	r7, sp, #0
100028b6:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
100028b8:	f7ff fff0 	bl	1000289c <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
100028bc:	4a07      	ldr	r2, [pc, #28]	; (100028dc <XMC_WDT_Init+0x2c>)
100028be:	687b      	ldr	r3, [r7, #4]
100028c0:	689b      	ldr	r3, [r3, #8]
100028c2:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
100028c4:	4a05      	ldr	r2, [pc, #20]	; (100028dc <XMC_WDT_Init+0x2c>)
100028c6:	687b      	ldr	r3, [r7, #4]
100028c8:	685b      	ldr	r3, [r3, #4]
100028ca:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
100028cc:	4a03      	ldr	r2, [pc, #12]	; (100028dc <XMC_WDT_Init+0x2c>)
100028ce:	687b      	ldr	r3, [r7, #4]
100028d0:	681b      	ldr	r3, [r3, #0]
100028d2:	6153      	str	r3, [r2, #20]
}
100028d4:	46bd      	mov	sp, r7
100028d6:	b002      	add	sp, #8
100028d8:	bd80      	pop	{r7, pc}
100028da:	46c0      	nop			; (mov r8, r8)
100028dc:	40020000 	.word	0x40020000

100028e0 <_init>:
  }
}

/* Init */
void _init(void)
{}
100028e0:	b580      	push	{r7, lr}
100028e2:	af00      	add	r7, sp, #0
100028e4:	46bd      	mov	sp, r7
100028e6:	bd80      	pop	{r7, pc}

100028e8 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
100028e8:	b590      	push	{r4, r7, lr}
100028ea:	b085      	sub	sp, #20
100028ec:	af00      	add	r7, sp, #0
100028ee:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
100028f0:	230f      	movs	r3, #15
100028f2:	18fb      	adds	r3, r7, r3
100028f4:	2200      	movs	r2, #0
100028f6:	701a      	strb	r2, [r3, #0]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
100028f8:	687b      	ldr	r3, [r7, #4]
100028fa:	7b1b      	ldrb	r3, [r3, #12]
100028fc:	2201      	movs	r2, #1
100028fe:	4053      	eors	r3, r2
10002900:	b2db      	uxtb	r3, r3
10002902:	2b00      	cmp	r3, #0
10002904:	d014      	beq.n	10002930 <WATCHDOG_Init+0x48>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
10002906:	230f      	movs	r3, #15
10002908:	18fc      	adds	r4, r7, r3
1000290a:	687b      	ldr	r3, [r7, #4]
1000290c:	1c18      	adds	r0, r3, #0
1000290e:	f000 f817 	bl	10002940 <WATCHDOG_lPrewarning_Configure>
10002912:	1c03      	adds	r3, r0, #0
10002914:	7023      	strb	r3, [r4, #0]
      if(WATCHDOG_STATUS_FAILURE != status)
10002916:	230f      	movs	r3, #15
10002918:	18fb      	adds	r3, r7, r3
1000291a:	781b      	ldrb	r3, [r3, #0]
1000291c:	2b01      	cmp	r3, #1
1000291e:	d007      	beq.n	10002930 <WATCHDOG_Init+0x48>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
10002920:	687b      	ldr	r3, [r7, #4]
10002922:	681b      	ldr	r3, [r3, #0]
10002924:	1c18      	adds	r0, r3, #0
10002926:	f7ff ffc3 	bl	100028b0 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
1000292a:	687b      	ldr	r3, [r7, #4]
1000292c:	2201      	movs	r2, #1
1000292e:	731a      	strb	r2, [r3, #12]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
10002930:	230f      	movs	r3, #15
10002932:	18fb      	adds	r3, r7, r3
10002934:	781b      	ldrb	r3, [r3, #0]
}
10002936:	1c18      	adds	r0, r3, #0
10002938:	46bd      	mov	sp, r7
1000293a:	b005      	add	sp, #20
1000293c:	bd90      	pop	{r4, r7, pc}
1000293e:	46c0      	nop			; (mov r8, r8)

10002940 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
10002940:	b590      	push	{r4, r7, lr}
10002942:	b085      	sub	sp, #20
10002944:	af00      	add	r7, sp, #0
10002946:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
10002948:	230f      	movs	r3, #15
1000294a:	18fb      	adds	r3, r7, r3
1000294c:	2200      	movs	r2, #0
1000294e:	701a      	strb	r2, [r3, #0]
  /* Normal interrupt generation */
#if (WATCHDOG_EVENT_VIA_SCU == 1U)
  #if(UC_FAMILY == XMC4)
    status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC4_Init(handle->scu_global_handler);
  #else
    status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC1_Init(handle->scu_global_handler);
10002950:	687b      	ldr	r3, [r7, #4]
10002952:	685b      	ldr	r3, [r3, #4]
10002954:	220f      	movs	r2, #15
10002956:	18bc      	adds	r4, r7, r2
10002958:	1c18      	adds	r0, r3, #0
1000295a:	f002 facf 	bl	10004efc <GLOBAL_SCU_XMC1_Init>
1000295e:	1c03      	adds	r3, r0, #0
10002960:	7023      	strb	r3, [r4, #0]
  #endif
    if ((handle->callback_func_ptr != NULL) &&  (status != WATCHDOG_STATUS_FAILURE))
10002962:	687b      	ldr	r3, [r7, #4]
10002964:	689b      	ldr	r3, [r3, #8]
10002966:	2b00      	cmp	r3, #0
10002968:	d014      	beq.n	10002994 <WATCHDOG_lPrewarning_Configure+0x54>
1000296a:	230f      	movs	r3, #15
1000296c:	18fb      	adds	r3, r7, r3
1000296e:	781b      	ldrb	r3, [r3, #0]
10002970:	2b01      	cmp	r3, #1
10002972:	d00f      	beq.n	10002994 <WATCHDOG_lPrewarning_Configure+0x54>
    {
      /* Enable the pre-warn event */
      XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
10002974:	2001      	movs	r0, #1
10002976:	2100      	movs	r1, #0
10002978:	f7fe fdc8 	bl	1000150c <XMC_SCU_INTERRUPT_EnableEvent>
      /* Register User defined Event Handler function */
	  #if(UC_FAMILY == XMC4)
      status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(GLOBAL_SCU_XMC4_EVENT_WDT_WARNING,
    		                                                       handle->callback_func_ptr);
	  #else
      status = (WATCHDOG_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback(GLOBAL_SCU_XMC1_EVENT_WDT_WARNING,
1000297c:	687b      	ldr	r3, [r7, #4]
1000297e:	689b      	ldr	r3, [r3, #8]
10002980:	220f      	movs	r2, #15
10002982:	18bc      	adds	r4, r7, r2
10002984:	2001      	movs	r0, #1
10002986:	2100      	movs	r1, #0
10002988:	1c1a      	adds	r2, r3, #0
1000298a:	f002 fb2b 	bl	10004fe4 <GLOBAL_SCU_XMC1_RegisterCallback>
1000298e:	1c03      	adds	r3, r0, #0
10002990:	7023      	strb	r3, [r4, #0]
10002992:	e003      	b.n	1000299c <WATCHDOG_lPrewarning_Configure+0x5c>
    		                                                       handle->callback_func_ptr);
	  #endif
    }
    else
    {
      status = WATCHDOG_STATUS_FAILURE;
10002994:	230f      	movs	r3, #15
10002996:	18fb      	adds	r3, r7, r3
10002998:	2201      	movs	r2, #1
1000299a:	701a      	strb	r2, [r3, #0]
#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
#endif

  return (status);
1000299c:	230f      	movs	r3, #15
1000299e:	18fb      	adds	r3, r7, r3
100029a0:	781b      	ldrb	r3, [r3, #0]
}
100029a2:	1c18      	adds	r0, r3, #0
100029a4:	46bd      	mov	sp, r7
100029a6:	b005      	add	sp, #20
100029a8:	bd90      	pop	{r4, r7, pc}
100029aa:	46c0      	nop			; (mov r8, r8)

100029ac <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100029ac:	b580      	push	{r7, lr}
100029ae:	b082      	sub	sp, #8
100029b0:	af00      	add	r7, sp, #0
100029b2:	6078      	str	r0, [r7, #4]
100029b4:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
100029b6:	687b      	ldr	r3, [r7, #4]
100029b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
100029ba:	683b      	ldr	r3, [r7, #0]
100029bc:	431a      	orrs	r2, r3
100029be:	687b      	ldr	r3, [r7, #4]
100029c0:	641a      	str	r2, [r3, #64]	; 0x40
}
100029c2:	46bd      	mov	sp, r7
100029c4:	b002      	add	sp, #8
100029c6:	bd80      	pop	{r7, pc}

100029c8 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100029c8:	b580      	push	{r7, lr}
100029ca:	b082      	sub	sp, #8
100029cc:	af00      	add	r7, sp, #0
100029ce:	6078      	str	r0, [r7, #4]
100029d0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100029d6:	683a      	ldr	r2, [r7, #0]
100029d8:	43d2      	mvns	r2, r2
100029da:	401a      	ands	r2, r3
100029dc:	687b      	ldr	r3, [r7, #4]
100029de:	641a      	str	r2, [r3, #64]	; 0x40
}
100029e0:	46bd      	mov	sp, r7
100029e2:	b002      	add	sp, #8
100029e4:	bd80      	pop	{r7, pc}
100029e6:	46c0      	nop			; (mov r8, r8)

100029e8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100029e8:	b580      	push	{r7, lr}
100029ea:	b082      	sub	sp, #8
100029ec:	af00      	add	r7, sp, #0
100029ee:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100029f0:	687b      	ldr	r3, [r7, #4]
100029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100029f4:	b2db      	uxtb	r3, r3
100029f6:	227f      	movs	r2, #127	; 0x7f
100029f8:	4393      	bics	r3, r2
100029fa:	b2db      	uxtb	r3, r3
}
100029fc:	1c18      	adds	r0, r3, #0
100029fe:	46bd      	mov	sp, r7
10002a00:	b002      	add	sp, #8
10002a02:	bd80      	pop	{r7, pc}

10002a04 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
10002a04:	b580      	push	{r7, lr}
10002a06:	b082      	sub	sp, #8
10002a08:	af00      	add	r7, sp, #0
10002a0a:	6078      	str	r0, [r7, #4]
10002a0c:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
10002a0e:	683b      	ldr	r3, [r7, #0]
10002a10:	2280      	movs	r2, #128	; 0x80
10002a12:	0252      	lsls	r2, r2, #9
10002a14:	409a      	lsls	r2, r3
10002a16:	687b      	ldr	r3, [r7, #4]
10002a18:	669a      	str	r2, [r3, #104]	; 0x68
}
10002a1a:	46bd      	mov	sp, r7
10002a1c:	b002      	add	sp, #8
10002a1e:	bd80      	pop	{r7, pc}

10002a20 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002a20:	b580      	push	{r7, lr}
10002a22:	b082      	sub	sp, #8
10002a24:	af00      	add	r7, sp, #0
10002a26:	6078      	str	r0, [r7, #4]
10002a28:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10002a2a:	687a      	ldr	r2, [r7, #4]
10002a2c:	2384      	movs	r3, #132	; 0x84
10002a2e:	005b      	lsls	r3, r3, #1
10002a30:	58d2      	ldr	r2, [r2, r3]
10002a32:	683b      	ldr	r3, [r7, #0]
10002a34:	431a      	orrs	r2, r3
10002a36:	1c11      	adds	r1, r2, #0
10002a38:	687a      	ldr	r2, [r7, #4]
10002a3a:	2384      	movs	r3, #132	; 0x84
10002a3c:	005b      	lsls	r3, r3, #1
10002a3e:	50d1      	str	r1, [r2, r3]
}
10002a40:	46bd      	mov	sp, r7
10002a42:	b002      	add	sp, #8
10002a44:	bd80      	pop	{r7, pc}
10002a46:	46c0      	nop			; (mov r8, r8)

10002a48 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002a48:	b580      	push	{r7, lr}
10002a4a:	b082      	sub	sp, #8
10002a4c:	af00      	add	r7, sp, #0
10002a4e:	6078      	str	r0, [r7, #4]
10002a50:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
10002a52:	687a      	ldr	r2, [r7, #4]
10002a54:	2384      	movs	r3, #132	; 0x84
10002a56:	005b      	lsls	r3, r3, #1
10002a58:	58d3      	ldr	r3, [r2, r3]
10002a5a:	683a      	ldr	r2, [r7, #0]
10002a5c:	43d2      	mvns	r2, r2
10002a5e:	401a      	ands	r2, r3
10002a60:	1c11      	adds	r1, r2, #0
10002a62:	687a      	ldr	r2, [r7, #4]
10002a64:	2384      	movs	r3, #132	; 0x84
10002a66:	005b      	lsls	r3, r3, #1
10002a68:	50d1      	str	r1, [r2, r3]
}
10002a6a:	46bd      	mov	sp, r7
10002a6c:	b002      	add	sp, #8
10002a6e:	bd80      	pop	{r7, pc}

10002a70 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10002a70:	b580      	push	{r7, lr}
10002a72:	b082      	sub	sp, #8
10002a74:	af00      	add	r7, sp, #0
10002a76:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
10002a78:	687a      	ldr	r2, [r7, #4]
10002a7a:	238c      	movs	r3, #140	; 0x8c
10002a7c:	005b      	lsls	r3, r3, #1
10002a7e:	2180      	movs	r1, #128	; 0x80
10002a80:	0209      	lsls	r1, r1, #8
10002a82:	50d1      	str	r1, [r2, r3]
}
10002a84:	46bd      	mov	sp, r7
10002a86:	b002      	add	sp, #8
10002a88:	bd80      	pop	{r7, pc}
10002a8a:	46c0      	nop			; (mov r8, r8)

10002a8c <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10002a8c:	b580      	push	{r7, lr}
10002a8e:	b082      	sub	sp, #8
10002a90:	af00      	add	r7, sp, #0
10002a92:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10002a94:	687a      	ldr	r2, [r7, #4]
10002a96:	238a      	movs	r3, #138	; 0x8a
10002a98:	005b      	lsls	r3, r3, #1
10002a9a:	58d2      	ldr	r2, [r2, r3]
10002a9c:	2380      	movs	r3, #128	; 0x80
10002a9e:	015b      	lsls	r3, r3, #5
10002aa0:	4013      	ands	r3, r2
10002aa2:	1e5a      	subs	r2, r3, #1
10002aa4:	4193      	sbcs	r3, r2
10002aa6:	b2db      	uxtb	r3, r3
}
10002aa8:	1c18      	adds	r0, r3, #0
10002aaa:	46bd      	mov	sp, r7
10002aac:	b002      	add	sp, #8
10002aae:	bd80      	pop	{r7, pc}

10002ab0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10002ab0:	b580      	push	{r7, lr}
10002ab2:	b082      	sub	sp, #8
10002ab4:	af00      	add	r7, sp, #0
10002ab6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
10002ab8:	687a      	ldr	r2, [r7, #4]
10002aba:	238a      	movs	r3, #138	; 0x8a
10002abc:	005b      	lsls	r3, r3, #1
10002abe:	58d2      	ldr	r2, [r2, r3]
10002ac0:	2380      	movs	r3, #128	; 0x80
10002ac2:	011b      	lsls	r3, r3, #4
10002ac4:	4013      	ands	r3, r2
10002ac6:	1e5a      	subs	r2, r3, #1
10002ac8:	4193      	sbcs	r3, r2
10002aca:	b2db      	uxtb	r3, r3
}
10002acc:	1c18      	adds	r0, r3, #0
10002ace:	46bd      	mov	sp, r7
10002ad0:	b002      	add	sp, #8
10002ad2:	bd80      	pop	{r7, pc}

10002ad4 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002ad4:	b580      	push	{r7, lr}
10002ad6:	b082      	sub	sp, #8
10002ad8:	af00      	add	r7, sp, #0
10002ada:	6078      	str	r0, [r7, #4]
10002adc:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
10002ade:	687a      	ldr	r2, [r7, #4]
10002ae0:	2386      	movs	r3, #134	; 0x86
10002ae2:	005b      	lsls	r3, r3, #1
10002ae4:	58d2      	ldr	r2, [r2, r3]
10002ae6:	683b      	ldr	r3, [r7, #0]
10002ae8:	431a      	orrs	r2, r3
10002aea:	1c11      	adds	r1, r2, #0
10002aec:	687a      	ldr	r2, [r7, #4]
10002aee:	2386      	movs	r3, #134	; 0x86
10002af0:	005b      	lsls	r3, r3, #1
10002af2:	50d1      	str	r1, [r2, r3]
}
10002af4:	46bd      	mov	sp, r7
10002af6:	b002      	add	sp, #8
10002af8:	bd80      	pop	{r7, pc}
10002afa:	46c0      	nop			; (mov r8, r8)

10002afc <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10002afc:	b580      	push	{r7, lr}
10002afe:	b082      	sub	sp, #8
10002b00:	af00      	add	r7, sp, #0
10002b02:	6078      	str	r0, [r7, #4]
10002b04:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
10002b06:	687a      	ldr	r2, [r7, #4]
10002b08:	2386      	movs	r3, #134	; 0x86
10002b0a:	005b      	lsls	r3, r3, #1
10002b0c:	58d3      	ldr	r3, [r2, r3]
10002b0e:	683a      	ldr	r2, [r7, #0]
10002b10:	43d2      	mvns	r2, r2
10002b12:	401a      	ands	r2, r3
10002b14:	1c11      	adds	r1, r2, #0
10002b16:	687a      	ldr	r2, [r7, #4]
10002b18:	2386      	movs	r3, #134	; 0x86
10002b1a:	005b      	lsls	r3, r3, #1
10002b1c:	50d1      	str	r1, [r2, r3]
}
10002b1e:	46bd      	mov	sp, r7
10002b20:	b002      	add	sp, #8
10002b22:	bd80      	pop	{r7, pc}

10002b24 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
10002b24:	b580      	push	{r7, lr}
10002b26:	b082      	sub	sp, #8
10002b28:	af00      	add	r7, sp, #0
10002b2a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
10002b2c:	687a      	ldr	r2, [r7, #4]
10002b2e:	238c      	movs	r3, #140	; 0x8c
10002b30:	005b      	lsls	r3, r3, #1
10002b32:	2180      	movs	r1, #128	; 0x80
10002b34:	01c9      	lsls	r1, r1, #7
10002b36:	50d1      	str	r1, [r2, r3]
}
10002b38:	46bd      	mov	sp, r7
10002b3a:	b002      	add	sp, #8
10002b3c:	bd80      	pop	{r7, pc}
10002b3e:	46c0      	nop			; (mov r8, r8)

10002b40 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10002b40:	b580      	push	{r7, lr}
10002b42:	b082      	sub	sp, #8
10002b44:	af00      	add	r7, sp, #0
10002b46:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
10002b48:	687a      	ldr	r2, [r7, #4]
10002b4a:	238a      	movs	r3, #138	; 0x8a
10002b4c:	005b      	lsls	r3, r3, #1
10002b4e:	58d3      	ldr	r3, [r2, r3]
10002b50:	2208      	movs	r2, #8
10002b52:	4013      	ands	r3, r2
10002b54:	1e5a      	subs	r2, r3, #1
10002b56:	4193      	sbcs	r3, r2
10002b58:	b2db      	uxtb	r3, r3
}
10002b5a:	1c18      	adds	r0, r3, #0
10002b5c:	46bd      	mov	sp, r7
10002b5e:	b002      	add	sp, #8
10002b60:	bd80      	pop	{r7, pc}
10002b62:	46c0      	nop			; (mov r8, r8)

10002b64 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
10002b64:	b590      	push	{r4, r7, lr}
10002b66:	b085      	sub	sp, #20
10002b68:	af00      	add	r7, sp, #0
10002b6a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
10002b6c:	230f      	movs	r3, #15
10002b6e:	18fb      	adds	r3, r7, r3
10002b70:	2200      	movs	r2, #0
10002b72:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
10002b74:	687b      	ldr	r3, [r7, #4]
10002b76:	685b      	ldr	r3, [r3, #4]
10002b78:	685b      	ldr	r3, [r3, #4]
10002b7a:	220f      	movs	r2, #15
10002b7c:	18bc      	adds	r4, r7, r2
10002b7e:	4798      	blx	r3
10002b80:	1c03      	adds	r3, r0, #0
10002b82:	7023      	strb	r3, [r4, #0]

  return status;
10002b84:	230f      	movs	r3, #15
10002b86:	18fb      	adds	r3, r7, r3
10002b88:	781b      	ldrb	r3, [r3, #0]
}
10002b8a:	1c18      	adds	r0, r3, #0
10002b8c:	46bd      	mov	sp, r7
10002b8e:	b005      	add	sp, #20
10002b90:	bd90      	pop	{r4, r7, pc}
10002b92:	46c0      	nop			; (mov r8, r8)

10002b94 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10002b94:	b590      	push	{r4, r7, lr}
10002b96:	b087      	sub	sp, #28
10002b98:	af00      	add	r7, sp, #0
10002b9a:	60f8      	str	r0, [r7, #12]
10002b9c:	60b9      	str	r1, [r7, #8]
10002b9e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10002ba0:	2317      	movs	r3, #23
10002ba2:	18fb      	adds	r3, r7, r3
10002ba4:	2204      	movs	r2, #4
10002ba6:	701a      	strb	r2, [r3, #0]

  switch(handle->config->transmit_mode)
10002ba8:	68fb      	ldr	r3, [r7, #12]
10002baa:	685b      	ldr	r3, [r3, #4]
10002bac:	2229      	movs	r2, #41	; 0x29
10002bae:	5c9b      	ldrb	r3, [r3, r2]
10002bb0:	2b00      	cmp	r3, #0
10002bb2:	d000      	beq.n	10002bb6 <UART_Transmit+0x22>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
10002bb4:	e00c      	b.n	10002bd0 <UART_Transmit+0x3c>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
10002bb6:	2317      	movs	r3, #23
10002bb8:	18fc      	adds	r4, r7, r3
10002bba:	68f9      	ldr	r1, [r7, #12]
10002bbc:	68ba      	ldr	r2, [r7, #8]
10002bbe:	687b      	ldr	r3, [r7, #4]
10002bc0:	1c08      	adds	r0, r1, #0
10002bc2:	1c11      	adds	r1, r2, #0
10002bc4:	1c1a      	adds	r2, r3, #0
10002bc6:	f000 f831 	bl	10002c2c <UART_StartTransmitIRQ>
10002bca:	1c03      	adds	r3, r0, #0
10002bcc:	7023      	strb	r3, [r4, #0]
    break;
10002bce:	46c0      	nop			; (mov r8, r8)
    break;
#endif
  default:
    break;
  }
  return ret_stat;
10002bd0:	2317      	movs	r3, #23
10002bd2:	18fb      	adds	r3, r7, r3
10002bd4:	781b      	ldrb	r3, [r3, #0]
}
10002bd6:	1c18      	adds	r0, r3, #0
10002bd8:	46bd      	mov	sp, r7
10002bda:	b007      	add	sp, #28
10002bdc:	bd90      	pop	{r4, r7, pc}
10002bde:	46c0      	nop			; (mov r8, r8)

10002be0 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10002be0:	b590      	push	{r4, r7, lr}
10002be2:	b087      	sub	sp, #28
10002be4:	af00      	add	r7, sp, #0
10002be6:	60f8      	str	r0, [r7, #12]
10002be8:	60b9      	str	r1, [r7, #8]
10002bea:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10002bec:	2317      	movs	r3, #23
10002bee:	18fb      	adds	r3, r7, r3
10002bf0:	2204      	movs	r2, #4
10002bf2:	701a      	strb	r2, [r3, #0]

  switch(handle->config->receive_mode)
10002bf4:	68fb      	ldr	r3, [r7, #12]
10002bf6:	685b      	ldr	r3, [r3, #4]
10002bf8:	222a      	movs	r2, #42	; 0x2a
10002bfa:	5c9b      	ldrb	r3, [r3, r2]
10002bfc:	2b00      	cmp	r3, #0
10002bfe:	d000      	beq.n	10002c02 <UART_Receive+0x22>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
10002c00:	e00c      	b.n	10002c1c <UART_Receive+0x3c>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
10002c02:	2317      	movs	r3, #23
10002c04:	18fc      	adds	r4, r7, r3
10002c06:	68f9      	ldr	r1, [r7, #12]
10002c08:	68ba      	ldr	r2, [r7, #8]
10002c0a:	687b      	ldr	r3, [r7, #4]
10002c0c:	1c08      	adds	r0, r1, #0
10002c0e:	1c11      	adds	r1, r2, #0
10002c10:	1c1a      	adds	r2, r3, #0
10002c12:	f000 f873 	bl	10002cfc <UART_StartReceiveIRQ>
10002c16:	1c03      	adds	r3, r0, #0
10002c18:	7023      	strb	r3, [r4, #0]
    break;
10002c1a:	46c0      	nop			; (mov r8, r8)
    break;
#endif
  default:
    break;
  }
  return ret_stat;
10002c1c:	2317      	movs	r3, #23
10002c1e:	18fb      	adds	r3, r7, r3
10002c20:	781b      	ldrb	r3, [r3, #0]
}
10002c22:	1c18      	adds	r0, r3, #0
10002c24:	46bd      	mov	sp, r7
10002c26:	b007      	add	sp, #28
10002c28:	bd90      	pop	{r4, r7, pc}
10002c2a:	46c0      	nop			; (mov r8, r8)

10002c2c <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10002c2c:	b580      	push	{r7, lr}
10002c2e:	b086      	sub	sp, #24
10002c30:	af00      	add	r7, sp, #0
10002c32:	60f8      	str	r0, [r7, #12]
10002c34:	60b9      	str	r1, [r7, #8]
10002c36:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10002c38:	2317      	movs	r3, #23
10002c3a:	18fb      	adds	r3, r7, r3
10002c3c:	2204      	movs	r2, #4
10002c3e:	701a      	strb	r2, [r3, #0]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10002c40:	68fb      	ldr	r3, [r7, #12]
10002c42:	689b      	ldr	r3, [r3, #8]
10002c44:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
10002c46:	68fb      	ldr	r3, [r7, #12]
10002c48:	685b      	ldr	r3, [r3, #4]
10002c4a:	2229      	movs	r2, #41	; 0x29
10002c4c:	5c9b      	ldrb	r3, [r3, r2]
10002c4e:	2b00      	cmp	r3, #0
10002c50:	d14c      	bne.n	10002cec <UART_StartTransmitIRQ+0xc0>
  {
    ret_stat = UART_STATUS_BUSY;
10002c52:	2317      	movs	r3, #23
10002c54:	18fb      	adds	r3, r7, r3
10002c56:	2202      	movs	r2, #2
10002c58:	701a      	strb	r2, [r3, #0]
    if (ptr_runtime->tx_busy == false)
10002c5a:	693b      	ldr	r3, [r7, #16]
10002c5c:	7e1b      	ldrb	r3, [r3, #24]
10002c5e:	b2db      	uxtb	r3, r3
10002c60:	2201      	movs	r2, #1
10002c62:	4053      	eors	r3, r2
10002c64:	b2db      	uxtb	r3, r3
10002c66:	2b00      	cmp	r3, #0
10002c68:	d040      	beq.n	10002cec <UART_StartTransmitIRQ+0xc0>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
10002c6a:	68bb      	ldr	r3, [r7, #8]
10002c6c:	2b00      	cmp	r3, #0
10002c6e:	d039      	beq.n	10002ce4 <UART_StartTransmitIRQ+0xb8>
10002c70:	687b      	ldr	r3, [r7, #4]
10002c72:	2b00      	cmp	r3, #0
10002c74:	d036      	beq.n	10002ce4 <UART_StartTransmitIRQ+0xb8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
10002c76:	693b      	ldr	r3, [r7, #16]
10002c78:	68ba      	ldr	r2, [r7, #8]
10002c7a:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
10002c7c:	693b      	ldr	r3, [r7, #16]
10002c7e:	687a      	ldr	r2, [r7, #4]
10002c80:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
10002c82:	693b      	ldr	r3, [r7, #16]
10002c84:	2200      	movs	r2, #0
10002c86:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
10002c88:	693b      	ldr	r3, [r7, #16]
10002c8a:	2201      	movs	r2, #1
10002c8c:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10002c8e:	68fb      	ldr	r3, [r7, #12]
10002c90:	685b      	ldr	r3, [r3, #4]
10002c92:	222b      	movs	r2, #43	; 0x2b
10002c94:	5c9b      	ldrb	r3, [r3, r2]
10002c96:	2b00      	cmp	r3, #0
10002c98:	d00d      	beq.n	10002cb6 <UART_StartTransmitIRQ+0x8a>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
10002c9a:	68fb      	ldr	r3, [r7, #12]
10002c9c:	681b      	ldr	r3, [r3, #0]
10002c9e:	1c18      	adds	r0, r3, #0
10002ca0:	f7ff fee6 	bl	10002a70 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10002ca4:	68fb      	ldr	r3, [r7, #12]
10002ca6:	681a      	ldr	r2, [r3, #0]
10002ca8:	2380      	movs	r3, #128	; 0x80
10002caa:	05db      	lsls	r3, r3, #23
10002cac:	1c10      	adds	r0, r2, #0
10002cae:	1c19      	adds	r1, r3, #0
10002cb0:	f7ff feb6 	bl	10002a20 <XMC_USIC_CH_TXFIFO_EnableEvent>
10002cb4:	e007      	b.n	10002cc6 <UART_StartTransmitIRQ+0x9a>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
10002cb6:	68fb      	ldr	r3, [r7, #12]
10002cb8:	681a      	ldr	r2, [r3, #0]
10002cba:	2380      	movs	r3, #128	; 0x80
10002cbc:	019b      	lsls	r3, r3, #6
10002cbe:	1c10      	adds	r0, r2, #0
10002cc0:	1c19      	adds	r1, r3, #0
10002cc2:	f7ff fe73 	bl	100029ac <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
10002cc6:	2317      	movs	r3, #23
10002cc8:	18fb      	adds	r3, r7, r3
10002cca:	2200      	movs	r2, #0
10002ccc:	701a      	strb	r2, [r3, #0]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
10002cce:	68fb      	ldr	r3, [r7, #12]
10002cd0:	6819      	ldr	r1, [r3, #0]
10002cd2:	68fb      	ldr	r3, [r7, #12]
10002cd4:	685b      	ldr	r3, [r3, #4]
10002cd6:	222d      	movs	r2, #45	; 0x2d
10002cd8:	5c9b      	ldrb	r3, [r3, r2]
10002cda:	1c08      	adds	r0, r1, #0
10002cdc:	1c19      	adds	r1, r3, #0
10002cde:	f7ff fe91 	bl	10002a04 <XMC_USIC_CH_TriggerServiceRequest>
10002ce2:	e003      	b.n	10002cec <UART_StartTransmitIRQ+0xc0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
10002ce4:	2317      	movs	r3, #23
10002ce6:	18fb      	adds	r3, r7, r3
10002ce8:	2203      	movs	r2, #3
10002cea:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret_stat;
10002cec:	2317      	movs	r3, #23
10002cee:	18fb      	adds	r3, r7, r3
10002cf0:	781b      	ldrb	r3, [r3, #0]
}
10002cf2:	1c18      	adds	r0, r3, #0
10002cf4:	46bd      	mov	sp, r7
10002cf6:	b006      	add	sp, #24
10002cf8:	bd80      	pop	{r7, pc}
10002cfa:	46c0      	nop			; (mov r8, r8)

10002cfc <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
10002cfc:	b580      	push	{r7, lr}
10002cfe:	b086      	sub	sp, #24
10002d00:	af00      	add	r7, sp, #0
10002d02:	60f8      	str	r0, [r7, #12]
10002d04:	60b9      	str	r1, [r7, #8]
10002d06:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
10002d08:	2317      	movs	r3, #23
10002d0a:	18fb      	adds	r3, r7, r3
10002d0c:	2204      	movs	r2, #4
10002d0e:	701a      	strb	r2, [r3, #0]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10002d10:	68fb      	ldr	r3, [r7, #12]
10002d12:	689b      	ldr	r3, [r3, #8]
10002d14:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)))

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
10002d16:	68fb      	ldr	r3, [r7, #12]
10002d18:	685b      	ldr	r3, [r3, #4]
10002d1a:	222a      	movs	r2, #42	; 0x2a
10002d1c:	5c9b      	ldrb	r3, [r3, r2]
10002d1e:	2b00      	cmp	r3, #0
10002d20:	d148      	bne.n	10002db4 <UART_StartReceiveIRQ+0xb8>
  {
    ret_stat = UART_STATUS_BUSY;
10002d22:	2317      	movs	r3, #23
10002d24:	18fb      	adds	r3, r7, r3
10002d26:	2202      	movs	r2, #2
10002d28:	701a      	strb	r2, [r3, #0]
    if (ptr_runtime->rx_busy == false)
10002d2a:	693b      	ldr	r3, [r7, #16]
10002d2c:	7e5b      	ldrb	r3, [r3, #25]
10002d2e:	b2db      	uxtb	r3, r3
10002d30:	2201      	movs	r2, #1
10002d32:	4053      	eors	r3, r2
10002d34:	b2db      	uxtb	r3, r3
10002d36:	2b00      	cmp	r3, #0
10002d38:	d03c      	beq.n	10002db4 <UART_StartReceiveIRQ+0xb8>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
10002d3a:	68bb      	ldr	r3, [r7, #8]
10002d3c:	2b00      	cmp	r3, #0
10002d3e:	d035      	beq.n	10002dac <UART_StartReceiveIRQ+0xb0>
10002d40:	687b      	ldr	r3, [r7, #4]
10002d42:	2b00      	cmp	r3, #0
10002d44:	d032      	beq.n	10002dac <UART_StartReceiveIRQ+0xb0>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
10002d46:	693b      	ldr	r3, [r7, #16]
10002d48:	68ba      	ldr	r2, [r7, #8]
10002d4a:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
10002d4c:	693b      	ldr	r3, [r7, #16]
10002d4e:	687a      	ldr	r2, [r7, #4]
10002d50:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
10002d52:	693b      	ldr	r3, [r7, #16]
10002d54:	2201      	movs	r2, #1
10002d56:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
10002d58:	693b      	ldr	r3, [r7, #16]
10002d5a:	2200      	movs	r2, #0
10002d5c:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10002d5e:	68fb      	ldr	r3, [r7, #12]
10002d60:	685b      	ldr	r3, [r3, #4]
10002d62:	222c      	movs	r2, #44	; 0x2c
10002d64:	5c9b      	ldrb	r3, [r3, r2]
10002d66:	2b00      	cmp	r3, #0
10002d68:	d013      	beq.n	10002d92 <UART_StartReceiveIRQ+0x96>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
10002d6a:	68fb      	ldr	r3, [r7, #12]
10002d6c:	681b      	ldr	r3, [r3, #0]
10002d6e:	1c18      	adds	r0, r3, #0
10002d70:	f7ff fed8 	bl	10002b24 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
10002d74:	68fa      	ldr	r2, [r7, #12]
10002d76:	687b      	ldr	r3, [r7, #4]
10002d78:	1c10      	adds	r0, r2, #0
10002d7a:	1c19      	adds	r1, r3, #0
10002d7c:	f000 f93e 	bl	10002ffc <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
10002d80:	68fb      	ldr	r3, [r7, #12]
10002d82:	681a      	ldr	r2, [r3, #0]
10002d84:	23c0      	movs	r3, #192	; 0xc0
10002d86:	05db      	lsls	r3, r3, #23
10002d88:	1c10      	adds	r0, r2, #0
10002d8a:	1c19      	adds	r1, r3, #0
10002d8c:	f7ff fea2 	bl	10002ad4 <XMC_USIC_CH_RXFIFO_EnableEvent>
10002d90:	e007      	b.n	10002da2 <UART_StartReceiveIRQ+0xa6>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
10002d92:	68fb      	ldr	r3, [r7, #12]
10002d94:	681a      	ldr	r2, [r3, #0]
10002d96:	23c0      	movs	r3, #192	; 0xc0
10002d98:	021b      	lsls	r3, r3, #8
10002d9a:	1c10      	adds	r0, r2, #0
10002d9c:	1c19      	adds	r1, r3, #0
10002d9e:	f7ff fe05 	bl	100029ac <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
10002da2:	2317      	movs	r3, #23
10002da4:	18fb      	adds	r3, r7, r3
10002da6:	2200      	movs	r2, #0
10002da8:	701a      	strb	r2, [r3, #0]
10002daa:	e003      	b.n	10002db4 <UART_StartReceiveIRQ+0xb8>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
10002dac:	2317      	movs	r3, #23
10002dae:	18fb      	adds	r3, r7, r3
10002db0:	2203      	movs	r2, #3
10002db2:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret_stat;
10002db4:	2317      	movs	r3, #23
10002db6:	18fb      	adds	r3, r7, r3
10002db8:	781b      	ldrb	r3, [r3, #0]
}
10002dba:	1c18      	adds	r0, r3, #0
10002dbc:	46bd      	mov	sp, r7
10002dbe:	b006      	add	sp, #24
10002dc0:	bd80      	pop	{r7, pc}
10002dc2:	46c0      	nop			; (mov r8, r8)

10002dc4 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
10002dc4:	b580      	push	{r7, lr}
10002dc6:	b084      	sub	sp, #16
10002dc8:	af00      	add	r7, sp, #0
10002dca:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10002dcc:	687b      	ldr	r3, [r7, #4]
10002dce:	689b      	ldr	r3, [r3, #8]
10002dd0:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10002dd2:	68fb      	ldr	r3, [r7, #12]
10002dd4:	68da      	ldr	r2, [r3, #12]
10002dd6:	68fb      	ldr	r3, [r7, #12]
10002dd8:	689b      	ldr	r3, [r3, #8]
10002dda:	429a      	cmp	r2, r3
10002ddc:	d241      	bcs.n	10002e62 <UART_lTransmitHandler+0x9e>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10002dde:	687b      	ldr	r3, [r7, #4]
10002de0:	685b      	ldr	r3, [r3, #4]
10002de2:	222b      	movs	r2, #43	; 0x2b
10002de4:	5c9b      	ldrb	r3, [r3, r2]
10002de6:	2b00      	cmp	r3, #0
10002de8:	d028      	beq.n	10002e3c <UART_lTransmitHandler+0x78>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10002dea:	e01a      	b.n	10002e22 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10002dec:	68fb      	ldr	r3, [r7, #12]
10002dee:	68da      	ldr	r2, [r3, #12]
10002df0:	68fb      	ldr	r3, [r7, #12]
10002df2:	689b      	ldr	r3, [r3, #8]
10002df4:	429a      	cmp	r2, r3
10002df6:	d212      	bcs.n	10002e1e <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10002df8:	687b      	ldr	r3, [r7, #4]
10002dfa:	6819      	ldr	r1, [r3, #0]
10002dfc:	68fb      	ldr	r3, [r7, #12]
10002dfe:	681a      	ldr	r2, [r3, #0]
10002e00:	68fb      	ldr	r3, [r7, #12]
10002e02:	68db      	ldr	r3, [r3, #12]
10002e04:	18d3      	adds	r3, r2, r3
10002e06:	781b      	ldrb	r3, [r3, #0]
10002e08:	b29b      	uxth	r3, r3
10002e0a:	1c08      	adds	r0, r1, #0
10002e0c:	1c19      	adds	r1, r3, #0
10002e0e:	f7ff fb33 	bl	10002478 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
10002e12:	68fb      	ldr	r3, [r7, #12]
10002e14:	68db      	ldr	r3, [r3, #12]
10002e16:	1c5a      	adds	r2, r3, #1
10002e18:	68fb      	ldr	r3, [r7, #12]
10002e1a:	60da      	str	r2, [r3, #12]
10002e1c:	e001      	b.n	10002e22 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
10002e1e:	46c0      	nop			; (mov r8, r8)
10002e20:	e055      	b.n	10002ece <UART_lTransmitHandler+0x10a>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
10002e22:	687b      	ldr	r3, [r7, #4]
10002e24:	681b      	ldr	r3, [r3, #0]
10002e26:	1c18      	adds	r0, r3, #0
10002e28:	f7ff fe30 	bl	10002a8c <XMC_USIC_CH_TXFIFO_IsFull>
10002e2c:	1c03      	adds	r3, r0, #0
10002e2e:	1c1a      	adds	r2, r3, #0
10002e30:	2301      	movs	r3, #1
10002e32:	4053      	eors	r3, r2
10002e34:	b2db      	uxtb	r3, r3
10002e36:	2b00      	cmp	r3, #0
10002e38:	d1d8      	bne.n	10002dec <UART_lTransmitHandler+0x28>
10002e3a:	e048      	b.n	10002ece <UART_lTransmitHandler+0x10a>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10002e3c:	687b      	ldr	r3, [r7, #4]
10002e3e:	6819      	ldr	r1, [r3, #0]
10002e40:	68fb      	ldr	r3, [r7, #12]
10002e42:	681a      	ldr	r2, [r3, #0]
10002e44:	68fb      	ldr	r3, [r7, #12]
10002e46:	68db      	ldr	r3, [r3, #12]
10002e48:	18d3      	adds	r3, r2, r3
10002e4a:	781b      	ldrb	r3, [r3, #0]
10002e4c:	b29b      	uxth	r3, r3
10002e4e:	1c08      	adds	r0, r1, #0
10002e50:	1c19      	adds	r1, r3, #0
10002e52:	f7ff fb11 	bl	10002478 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
10002e56:	68fb      	ldr	r3, [r7, #12]
10002e58:	68db      	ldr	r3, [r3, #12]
10002e5a:	1c5a      	adds	r2, r3, #1
10002e5c:	68fb      	ldr	r3, [r7, #12]
10002e5e:	60da      	str	r2, [r3, #12]
10002e60:	e035      	b.n	10002ece <UART_lTransmitHandler+0x10a>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
10002e62:	687b      	ldr	r3, [r7, #4]
10002e64:	681b      	ldr	r3, [r3, #0]
10002e66:	1c18      	adds	r0, r3, #0
10002e68:	f7ff fe22 	bl	10002ab0 <XMC_USIC_CH_TXFIFO_IsEmpty>
10002e6c:	1e03      	subs	r3, r0, #0
10002e6e:	d02e      	beq.n	10002ece <UART_lTransmitHandler+0x10a>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10002e70:	687b      	ldr	r3, [r7, #4]
10002e72:	685b      	ldr	r3, [r3, #4]
10002e74:	222b      	movs	r2, #43	; 0x2b
10002e76:	5c9b      	ldrb	r3, [r3, r2]
10002e78:	2b00      	cmp	r3, #0
10002e7a:	d008      	beq.n	10002e8e <UART_lTransmitHandler+0xca>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10002e7c:	687b      	ldr	r3, [r7, #4]
10002e7e:	681a      	ldr	r2, [r3, #0]
10002e80:	2380      	movs	r3, #128	; 0x80
10002e82:	05db      	lsls	r3, r3, #23
10002e84:	1c10      	adds	r0, r2, #0
10002e86:	1c19      	adds	r1, r3, #0
10002e88:	f7ff fdde 	bl	10002a48 <XMC_USIC_CH_TXFIFO_DisableEvent>
10002e8c:	e007      	b.n	10002e9e <UART_lTransmitHandler+0xda>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
10002e8e:	687b      	ldr	r3, [r7, #4]
10002e90:	681a      	ldr	r2, [r3, #0]
10002e92:	2380      	movs	r3, #128	; 0x80
10002e94:	019b      	lsls	r3, r3, #6
10002e96:	1c10      	adds	r0, r2, #0
10002e98:	1c19      	adds	r1, r3, #0
10002e9a:	f7ff fd95 	bl	100029c8 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
10002e9e:	46c0      	nop			; (mov r8, r8)
10002ea0:	687b      	ldr	r3, [r7, #4]
10002ea2:	681b      	ldr	r3, [r3, #0]
10002ea4:	1c18      	adds	r0, r3, #0
10002ea6:	f7ff fd9f 	bl	100029e8 <XMC_USIC_CH_GetTransmitBufferStatus>
10002eaa:	1e03      	subs	r3, r0, #0
10002eac:	2b80      	cmp	r3, #128	; 0x80
10002eae:	d0f7      	beq.n	10002ea0 <UART_lTransmitHandler+0xdc>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
10002eb0:	68fb      	ldr	r3, [r7, #12]
10002eb2:	2200      	movs	r2, #0
10002eb4:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
10002eb6:	68fb      	ldr	r3, [r7, #12]
10002eb8:	2200      	movs	r2, #0
10002eba:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
10002ebc:	687b      	ldr	r3, [r7, #4]
10002ebe:	685b      	ldr	r3, [r3, #4]
10002ec0:	689b      	ldr	r3, [r3, #8]
10002ec2:	2b00      	cmp	r3, #0
10002ec4:	d003      	beq.n	10002ece <UART_lTransmitHandler+0x10a>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
10002ec6:	687b      	ldr	r3, [r7, #4]
10002ec8:	685b      	ldr	r3, [r3, #4]
10002eca:	689b      	ldr	r3, [r3, #8]
10002ecc:	4798      	blx	r3
      }
    }
  }
}
10002ece:	46bd      	mov	sp, r7
10002ed0:	b004      	add	sp, #16
10002ed2:	bd80      	pop	{r7, pc}

10002ed4 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
10002ed4:	b590      	push	{r4, r7, lr}
10002ed6:	b085      	sub	sp, #20
10002ed8:	af00      	add	r7, sp, #0
10002eda:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
10002edc:	687b      	ldr	r3, [r7, #4]
10002ede:	689b      	ldr	r3, [r3, #8]
10002ee0:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
10002ee2:	687b      	ldr	r3, [r7, #4]
10002ee4:	685b      	ldr	r3, [r3, #4]
10002ee6:	222c      	movs	r2, #44	; 0x2c
10002ee8:	5c9b      	ldrb	r3, [r3, r2]
10002eea:	2b00      	cmp	r3, #0
10002eec:	d051      	beq.n	10002f92 <UART_lReceiveHandler+0xbe>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
10002eee:	e033      	b.n	10002f58 <UART_lReceiveHandler+0x84>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10002ef0:	68fb      	ldr	r3, [r7, #12]
10002ef2:	695a      	ldr	r2, [r3, #20]
10002ef4:	68fb      	ldr	r3, [r7, #12]
10002ef6:	691b      	ldr	r3, [r3, #16]
10002ef8:	429a      	cmp	r2, r3
10002efa:	d211      	bcs.n	10002f20 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
10002efc:	68fb      	ldr	r3, [r7, #12]
10002efe:	685a      	ldr	r2, [r3, #4]
10002f00:	68fb      	ldr	r3, [r7, #12]
10002f02:	695b      	ldr	r3, [r3, #20]
10002f04:	18d4      	adds	r4, r2, r3
10002f06:	687b      	ldr	r3, [r7, #4]
10002f08:	681b      	ldr	r3, [r3, #0]
10002f0a:	1c18      	adds	r0, r3, #0
10002f0c:	f7ff fae2 	bl	100024d4 <XMC_UART_CH_GetReceivedData>
10002f10:	1c03      	adds	r3, r0, #0
10002f12:	b2db      	uxtb	r3, r3
10002f14:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
10002f16:	68fb      	ldr	r3, [r7, #12]
10002f18:	695b      	ldr	r3, [r3, #20]
10002f1a:	1c5a      	adds	r2, r3, #1
10002f1c:	68fb      	ldr	r3, [r7, #12]
10002f1e:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10002f20:	68fb      	ldr	r3, [r7, #12]
10002f22:	695a      	ldr	r2, [r3, #20]
10002f24:	68fb      	ldr	r3, [r7, #12]
10002f26:	691b      	ldr	r3, [r3, #16]
10002f28:	429a      	cmp	r2, r3
10002f2a:	d115      	bne.n	10002f58 <UART_lReceiveHandler+0x84>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
10002f2c:	68fb      	ldr	r3, [r7, #12]
10002f2e:	2200      	movs	r2, #0
10002f30:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
10002f32:	687b      	ldr	r3, [r7, #4]
10002f34:	681a      	ldr	r2, [r3, #0]
10002f36:	23c0      	movs	r3, #192	; 0xc0
10002f38:	05db      	lsls	r3, r3, #23
10002f3a:	1c10      	adds	r0, r2, #0
10002f3c:	1c19      	adds	r1, r3, #0
10002f3e:	f7ff fddd 	bl	10002afc <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
10002f42:	687b      	ldr	r3, [r7, #4]
10002f44:	685b      	ldr	r3, [r3, #4]
10002f46:	68db      	ldr	r3, [r3, #12]
10002f48:	2b00      	cmp	r3, #0
10002f4a:	d004      	beq.n	10002f56 <UART_lReceiveHandler+0x82>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
10002f4c:	687b      	ldr	r3, [r7, #4]
10002f4e:	685b      	ldr	r3, [r3, #4]
10002f50:	68db      	ldr	r3, [r3, #12]
10002f52:	4798      	blx	r3
        }
        break;
10002f54:	e00c      	b.n	10002f70 <UART_lReceiveHandler+0x9c>
10002f56:	e00b      	b.n	10002f70 <UART_lReceiveHandler+0x9c>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
10002f58:	687b      	ldr	r3, [r7, #4]
10002f5a:	681b      	ldr	r3, [r3, #0]
10002f5c:	1c18      	adds	r0, r3, #0
10002f5e:	f7ff fdef 	bl	10002b40 <XMC_USIC_CH_RXFIFO_IsEmpty>
10002f62:	1c03      	adds	r3, r0, #0
10002f64:	1c1a      	adds	r2, r3, #0
10002f66:	2301      	movs	r3, #1
10002f68:	4053      	eors	r3, r2
10002f6a:	b2db      	uxtb	r3, r3
10002f6c:	2b00      	cmp	r3, #0
10002f6e:	d1bf      	bne.n	10002ef0 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10002f70:	68fb      	ldr	r3, [r7, #12]
10002f72:	695a      	ldr	r2, [r3, #20]
10002f74:	68fb      	ldr	r3, [r7, #12]
10002f76:	691b      	ldr	r3, [r3, #16]
10002f78:	429a      	cmp	r2, r3
10002f7a:	d23c      	bcs.n	10002ff6 <UART_lReceiveHandler+0x122>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
10002f7c:	68fb      	ldr	r3, [r7, #12]
10002f7e:	691a      	ldr	r2, [r3, #16]
10002f80:	68fb      	ldr	r3, [r7, #12]
10002f82:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
10002f84:	1ad3      	subs	r3, r2, r3
10002f86:	687a      	ldr	r2, [r7, #4]
10002f88:	1c10      	adds	r0, r2, #0
10002f8a:	1c19      	adds	r1, r3, #0
10002f8c:	f000 f836 	bl	10002ffc <UART_lReconfigureRxFIFO>
10002f90:	e031      	b.n	10002ff6 <UART_lReceiveHandler+0x122>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10002f92:	68fb      	ldr	r3, [r7, #12]
10002f94:	695a      	ldr	r2, [r3, #20]
10002f96:	68fb      	ldr	r3, [r7, #12]
10002f98:	691b      	ldr	r3, [r3, #16]
10002f9a:	429a      	cmp	r2, r3
10002f9c:	d211      	bcs.n	10002fc2 <UART_lReceiveHandler+0xee>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
10002f9e:	68fb      	ldr	r3, [r7, #12]
10002fa0:	685a      	ldr	r2, [r3, #4]
10002fa2:	68fb      	ldr	r3, [r7, #12]
10002fa4:	695b      	ldr	r3, [r3, #20]
10002fa6:	18d4      	adds	r4, r2, r3
10002fa8:	687b      	ldr	r3, [r7, #4]
10002faa:	681b      	ldr	r3, [r3, #0]
10002fac:	1c18      	adds	r0, r3, #0
10002fae:	f7ff fa91 	bl	100024d4 <XMC_UART_CH_GetReceivedData>
10002fb2:	1c03      	adds	r3, r0, #0
10002fb4:	b2db      	uxtb	r3, r3
10002fb6:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
10002fb8:	68fb      	ldr	r3, [r7, #12]
10002fba:	695b      	ldr	r3, [r3, #20]
10002fbc:	1c5a      	adds	r2, r3, #1
10002fbe:	68fb      	ldr	r3, [r7, #12]
10002fc0:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10002fc2:	68fb      	ldr	r3, [r7, #12]
10002fc4:	695a      	ldr	r2, [r3, #20]
10002fc6:	68fb      	ldr	r3, [r7, #12]
10002fc8:	691b      	ldr	r3, [r3, #16]
10002fca:	429a      	cmp	r2, r3
10002fcc:	d113      	bne.n	10002ff6 <UART_lReceiveHandler+0x122>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
10002fce:	68fb      	ldr	r3, [r7, #12]
10002fd0:	2200      	movs	r2, #0
10002fd2:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
10002fd4:	687b      	ldr	r3, [r7, #4]
10002fd6:	681a      	ldr	r2, [r3, #0]
10002fd8:	23c0      	movs	r3, #192	; 0xc0
10002fda:	021b      	lsls	r3, r3, #8
10002fdc:	1c10      	adds	r0, r2, #0
10002fde:	1c19      	adds	r1, r3, #0
10002fe0:	f7ff fcf2 	bl	100029c8 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
10002fe4:	687b      	ldr	r3, [r7, #4]
10002fe6:	685b      	ldr	r3, [r3, #4]
10002fe8:	68db      	ldr	r3, [r3, #12]
10002fea:	2b00      	cmp	r3, #0
10002fec:	d003      	beq.n	10002ff6 <UART_lReceiveHandler+0x122>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
10002fee:	687b      	ldr	r3, [r7, #4]
10002ff0:	685b      	ldr	r3, [r3, #4]
10002ff2:	68db      	ldr	r3, [r3, #12]
10002ff4:	4798      	blx	r3
      }
    }
  }
}
10002ff6:	46bd      	mov	sp, r7
10002ff8:	b005      	add	sp, #20
10002ffa:	bd90      	pop	{r4, r7, pc}

10002ffc <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
10002ffc:	b580      	push	{r7, lr}
10002ffe:	b084      	sub	sp, #16
10003000:	af00      	add	r7, sp, #0
10003002:	6078      	str	r0, [r7, #4]
10003004:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
10003006:	2300      	movs	r3, #0
10003008:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
1000300a:	687b      	ldr	r3, [r7, #4]
1000300c:	685b      	ldr	r3, [r3, #4]
1000300e:	222c      	movs	r2, #44	; 0x2c
10003010:	5c9b      	ldrb	r3, [r3, r2]
10003012:	1c1a      	adds	r2, r3, #0
10003014:	2301      	movs	r3, #1
10003016:	4093      	lsls	r3, r2
10003018:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
1000301a:	683a      	ldr	r2, [r7, #0]
1000301c:	68bb      	ldr	r3, [r7, #8]
1000301e:	429a      	cmp	r2, r3
10003020:	d203      	bcs.n	1000302a <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
10003022:	683b      	ldr	r3, [r7, #0]
10003024:	3b01      	subs	r3, #1
10003026:	60fb      	str	r3, [r7, #12]
10003028:	e002      	b.n	10003030 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
1000302a:	68bb      	ldr	r3, [r7, #8]
1000302c:	3b01      	subs	r3, #1
1000302e:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
10003030:	687b      	ldr	r3, [r7, #4]
10003032:	6819      	ldr	r1, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
10003034:	687b      	ldr	r3, [r7, #4]
10003036:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
10003038:	222c      	movs	r2, #44	; 0x2c
1000303a:	5c9a      	ldrb	r2, [r3, r2]
1000303c:	68fb      	ldr	r3, [r7, #12]
1000303e:	1c08      	adds	r0, r1, #0
10003040:	1c11      	adds	r1, r2, #0
10003042:	1c1a      	adds	r2, r3, #0
10003044:	f7ff fb78 	bl	10002738 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
10003048:	46bd      	mov	sp, r7
1000304a:	b004      	add	sp, #16
1000304c:	bd80      	pop	{r7, pc}
1000304e:	46c0      	nop			; (mov r8, r8)

10003050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10003050:	b580      	push	{r7, lr}
10003052:	b082      	sub	sp, #8
10003054:	af00      	add	r7, sp, #0
10003056:	1c02      	adds	r2, r0, #0
10003058:	1dfb      	adds	r3, r7, #7
1000305a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000305c:	1dfb      	adds	r3, r7, #7
1000305e:	781b      	ldrb	r3, [r3, #0]
10003060:	2b7f      	cmp	r3, #127	; 0x7f
10003062:	d809      	bhi.n	10003078 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10003064:	4b06      	ldr	r3, [pc, #24]	; (10003080 <__NVIC_EnableIRQ+0x30>)
10003066:	1dfa      	adds	r2, r7, #7
10003068:	7812      	ldrb	r2, [r2, #0]
1000306a:	1c11      	adds	r1, r2, #0
1000306c:	221f      	movs	r2, #31
1000306e:	400a      	ands	r2, r1
10003070:	2101      	movs	r1, #1
10003072:	4091      	lsls	r1, r2
10003074:	1c0a      	adds	r2, r1, #0
10003076:	601a      	str	r2, [r3, #0]
  }
}
10003078:	46bd      	mov	sp, r7
1000307a:	b002      	add	sp, #8
1000307c:	bd80      	pop	{r7, pc}
1000307e:	46c0      	nop			; (mov r8, r8)
10003080:	e000e100 	.word	0xe000e100

10003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003084:	b5b0      	push	{r4, r5, r7, lr}
10003086:	b082      	sub	sp, #8
10003088:	af00      	add	r7, sp, #0
1000308a:	1c02      	adds	r2, r0, #0
1000308c:	6039      	str	r1, [r7, #0]
1000308e:	1dfb      	adds	r3, r7, #7
10003090:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003092:	1dfb      	adds	r3, r7, #7
10003094:	781b      	ldrb	r3, [r3, #0]
10003096:	2b7f      	cmp	r3, #127	; 0x7f
10003098:	d827      	bhi.n	100030ea <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000309a:	4c2d      	ldr	r4, [pc, #180]	; (10003150 <__NVIC_SetPriority+0xcc>)
1000309c:	1dfb      	adds	r3, r7, #7
1000309e:	781b      	ldrb	r3, [r3, #0]
100030a0:	b25b      	sxtb	r3, r3
100030a2:	089b      	lsrs	r3, r3, #2
100030a4:	492a      	ldr	r1, [pc, #168]	; (10003150 <__NVIC_SetPriority+0xcc>)
100030a6:	1dfa      	adds	r2, r7, #7
100030a8:	7812      	ldrb	r2, [r2, #0]
100030aa:	b252      	sxtb	r2, r2
100030ac:	0892      	lsrs	r2, r2, #2
100030ae:	32c0      	adds	r2, #192	; 0xc0
100030b0:	0092      	lsls	r2, r2, #2
100030b2:	5852      	ldr	r2, [r2, r1]
100030b4:	1df9      	adds	r1, r7, #7
100030b6:	7809      	ldrb	r1, [r1, #0]
100030b8:	1c08      	adds	r0, r1, #0
100030ba:	2103      	movs	r1, #3
100030bc:	4001      	ands	r1, r0
100030be:	00c9      	lsls	r1, r1, #3
100030c0:	1c08      	adds	r0, r1, #0
100030c2:	21ff      	movs	r1, #255	; 0xff
100030c4:	4081      	lsls	r1, r0
100030c6:	43c9      	mvns	r1, r1
100030c8:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100030ca:	683a      	ldr	r2, [r7, #0]
100030cc:	0192      	lsls	r2, r2, #6
100030ce:	20ff      	movs	r0, #255	; 0xff
100030d0:	4002      	ands	r2, r0
100030d2:	1df8      	adds	r0, r7, #7
100030d4:	7800      	ldrb	r0, [r0, #0]
100030d6:	1c05      	adds	r5, r0, #0
100030d8:	2003      	movs	r0, #3
100030da:	4028      	ands	r0, r5
100030dc:	00c0      	lsls	r0, r0, #3
100030de:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100030e0:	430a      	orrs	r2, r1
100030e2:	33c0      	adds	r3, #192	; 0xc0
100030e4:	009b      	lsls	r3, r3, #2
100030e6:	511a      	str	r2, [r3, r4]
100030e8:	e02e      	b.n	10003148 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100030ea:	4c1a      	ldr	r4, [pc, #104]	; (10003154 <__NVIC_SetPriority+0xd0>)
100030ec:	1dfb      	adds	r3, r7, #7
100030ee:	781b      	ldrb	r3, [r3, #0]
100030f0:	1c1a      	adds	r2, r3, #0
100030f2:	230f      	movs	r3, #15
100030f4:	4013      	ands	r3, r2
100030f6:	3b08      	subs	r3, #8
100030f8:	0899      	lsrs	r1, r3, #2
100030fa:	4a16      	ldr	r2, [pc, #88]	; (10003154 <__NVIC_SetPriority+0xd0>)
100030fc:	1dfb      	adds	r3, r7, #7
100030fe:	781b      	ldrb	r3, [r3, #0]
10003100:	1c18      	adds	r0, r3, #0
10003102:	230f      	movs	r3, #15
10003104:	4003      	ands	r3, r0
10003106:	3b08      	subs	r3, #8
10003108:	089b      	lsrs	r3, r3, #2
1000310a:	3306      	adds	r3, #6
1000310c:	009b      	lsls	r3, r3, #2
1000310e:	18d3      	adds	r3, r2, r3
10003110:	685b      	ldr	r3, [r3, #4]
10003112:	1dfa      	adds	r2, r7, #7
10003114:	7812      	ldrb	r2, [r2, #0]
10003116:	1c10      	adds	r0, r2, #0
10003118:	2203      	movs	r2, #3
1000311a:	4002      	ands	r2, r0
1000311c:	00d2      	lsls	r2, r2, #3
1000311e:	1c10      	adds	r0, r2, #0
10003120:	22ff      	movs	r2, #255	; 0xff
10003122:	4082      	lsls	r2, r0
10003124:	43d2      	mvns	r2, r2
10003126:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003128:	683b      	ldr	r3, [r7, #0]
1000312a:	019b      	lsls	r3, r3, #6
1000312c:	20ff      	movs	r0, #255	; 0xff
1000312e:	4003      	ands	r3, r0
10003130:	1df8      	adds	r0, r7, #7
10003132:	7800      	ldrb	r0, [r0, #0]
10003134:	1c05      	adds	r5, r0, #0
10003136:	2003      	movs	r0, #3
10003138:	4028      	ands	r0, r5
1000313a:	00c0      	lsls	r0, r0, #3
1000313c:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000313e:	431a      	orrs	r2, r3
10003140:	1d8b      	adds	r3, r1, #6
10003142:	009b      	lsls	r3, r3, #2
10003144:	18e3      	adds	r3, r4, r3
10003146:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003148:	46bd      	mov	sp, r7
1000314a:	b002      	add	sp, #8
1000314c:	bdb0      	pop	{r4, r5, r7, pc}
1000314e:	46c0      	nop			; (mov r8, r8)
10003150:	e000e100 	.word	0xe000e100
10003154:	e000ed00 	.word	0xe000ed00

10003158 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10003158:	b580      	push	{r7, lr}
1000315a:	b082      	sub	sp, #8
1000315c:	af00      	add	r7, sp, #0
1000315e:	6078      	str	r0, [r7, #4]
10003160:	1c08      	adds	r0, r1, #0
10003162:	1c11      	adds	r1, r2, #0
10003164:	1cfb      	adds	r3, r7, #3
10003166:	1c02      	adds	r2, r0, #0
10003168:	701a      	strb	r2, [r3, #0]
1000316a:	1cbb      	adds	r3, r7, #2
1000316c:	1c0a      	adds	r2, r1, #0
1000316e:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003170:	1cfb      	adds	r3, r7, #3
10003172:	7818      	ldrb	r0, [r3, #0]
10003174:	1cfb      	adds	r3, r7, #3
10003176:	781b      	ldrb	r3, [r3, #0]
10003178:	687a      	ldr	r2, [r7, #4]
1000317a:	3306      	adds	r3, #6
1000317c:	009b      	lsls	r3, r3, #2
1000317e:	18d3      	adds	r3, r2, r3
10003180:	685b      	ldr	r3, [r3, #4]
10003182:	2207      	movs	r2, #7
10003184:	4393      	bics	r3, r2
10003186:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10003188:	1cbb      	adds	r3, r7, #2
1000318a:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000318c:	431a      	orrs	r2, r3
1000318e:	6879      	ldr	r1, [r7, #4]
10003190:	1d83      	adds	r3, r0, #6
10003192:	009b      	lsls	r3, r3, #2
10003194:	18cb      	adds	r3, r1, r3
10003196:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10003198:	46bd      	mov	sp, r7
1000319a:	b002      	add	sp, #8
1000319c:	bd80      	pop	{r7, pc}
1000319e:	46c0      	nop			; (mov r8, r8)

100031a0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
100031a0:	b580      	push	{r7, lr}
100031a2:	b082      	sub	sp, #8
100031a4:	af00      	add	r7, sp, #0
100031a6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
100031a8:	687b      	ldr	r3, [r7, #4]
100031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100031ac:	220f      	movs	r2, #15
100031ae:	4393      	bics	r3, r2
100031b0:	2202      	movs	r2, #2
100031b2:	431a      	orrs	r2, r3
100031b4:	687b      	ldr	r3, [r7, #4]
100031b6:	641a      	str	r2, [r3, #64]	; 0x40
}
100031b8:	46bd      	mov	sp, r7
100031ba:	b002      	add	sp, #8
100031bc:	bd80      	pop	{r7, pc}
100031be:	46c0      	nop			; (mov r8, r8)

100031c0 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
100031c0:	b580      	push	{r7, lr}
100031c2:	b082      	sub	sp, #8
100031c4:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
100031c6:	1dfb      	adds	r3, r7, #7
100031c8:	2200      	movs	r2, #0
100031ca:	701a      	strb	r2, [r3, #0]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 6U, &UART_0_rx_pin_config);
100031cc:	4a37      	ldr	r2, [pc, #220]	; (100032ac <UART_0_init+0xec>)
100031ce:	4b38      	ldr	r3, [pc, #224]	; (100032b0 <UART_0_init+0xf0>)
100031d0:	1c10      	adds	r0, r2, #0
100031d2:	2106      	movs	r1, #6
100031d4:	1c1a      	adds	r2, r3, #0
100031d6:	f7fe f8cb 	bl	10001370 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH1, &UART_0_channel_config);
100031da:	4a36      	ldr	r2, [pc, #216]	; (100032b4 <UART_0_init+0xf4>)
100031dc:	4b36      	ldr	r3, [pc, #216]	; (100032b8 <UART_0_init+0xf8>)
100031de:	1c10      	adds	r0, r2, #0
100031e0:	1c19      	adds	r1, r3, #0
100031e2:	f7ff f8ef 	bl	100023c4 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX0, 2U);
100031e6:	4b33      	ldr	r3, [pc, #204]	; (100032b4 <UART_0_init+0xf4>)
100031e8:	1c18      	adds	r0, r3, #0
100031ea:	2100      	movs	r1, #0
100031ec:	2202      	movs	r2, #2
100031ee:	f7ff ffb3 	bl	10003158 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
100031f2:	4b30      	ldr	r3, [pc, #192]	; (100032b4 <UART_0_init+0xf4>)
100031f4:	1c18      	adds	r0, r3, #0
100031f6:	2103      	movs	r1, #3
100031f8:	2200      	movs	r2, #0
100031fa:	f7ff ffad 	bl	10003158 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
100031fe:	4b2d      	ldr	r3, [pc, #180]	; (100032b4 <UART_0_init+0xf4>)
10003200:	1c18      	adds	r0, r3, #0
10003202:	2105      	movs	r1, #5
10003204:	2200      	movs	r2, #0
10003206:	f7ff ffa7 	bl	10003158 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH1,
1000320a:	4b2a      	ldr	r3, [pc, #168]	; (100032b4 <UART_0_init+0xf4>)
1000320c:	1c18      	adds	r0, r3, #0
1000320e:	2110      	movs	r1, #16
10003210:	2204      	movs	r2, #4
10003212:	2301      	movs	r3, #1
10003214:	f7ff fa30 	bl	10002678 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH1,
10003218:	4b26      	ldr	r3, [pc, #152]	; (100032b4 <UART_0_init+0xf4>)
1000321a:	1c18      	adds	r0, r3, #0
1000321c:	2100      	movs	r1, #0
1000321e:	2204      	movs	r2, #4
10003220:	2300      	movs	r3, #0
10003222:	f7ff fa57 	bl	100026d4 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH1);
10003226:	4b23      	ldr	r3, [pc, #140]	; (100032b4 <UART_0_init+0xf4>)
10003228:	1c18      	adds	r0, r3, #0
1000322a:	f7ff ffb9 	bl	100031a0 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 7U, &UART_0_tx_pin_config);
1000322e:	4a1f      	ldr	r2, [pc, #124]	; (100032ac <UART_0_init+0xec>)
10003230:	4b22      	ldr	r3, [pc, #136]	; (100032bc <UART_0_init+0xfc>)
10003232:	1c10      	adds	r0, r2, #0
10003234:	2107      	movs	r1, #7
10003236:	1c1a      	adds	r2, r3, #0
10003238:	f7fe f89a 	bl	10001370 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
1000323c:	4b1d      	ldr	r3, [pc, #116]	; (100032b4 <UART_0_init+0xf4>)
1000323e:	1c18      	adds	r0, r3, #0
10003240:	2110      	movs	r1, #16
10003242:	2200      	movs	r2, #0
10003244:	f7ff faa6 	bl	10002794 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
10003248:	4b1a      	ldr	r3, [pc, #104]	; (100032b4 <UART_0_init+0xf4>)
1000324a:	1c18      	adds	r0, r3, #0
1000324c:	2110      	movs	r1, #16
1000324e:	2203      	movs	r2, #3
10003250:	f7ff fac0 	bl	100027d4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      3U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
10003254:	4b17      	ldr	r3, [pc, #92]	; (100032b4 <UART_0_init+0xf4>)
10003256:	1c18      	adds	r0, r3, #0
10003258:	2110      	movs	r1, #16
1000325a:	2202      	movs	r2, #2
1000325c:	f7ff fade 	bl	1000281c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x2U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
10003260:	4b14      	ldr	r3, [pc, #80]	; (100032b4 <UART_0_init+0xf4>)
10003262:	1c18      	adds	r0, r3, #0
10003264:	2113      	movs	r1, #19
10003266:	2202      	movs	r2, #2
10003268:	f7ff fad8 	bl	1000281c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x2U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)12, 3U);
1000326c:	200c      	movs	r0, #12
1000326e:	2103      	movs	r1, #3
10003270:	f7ff ff08 	bl	10003084 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(12U, XMC_SCU_IRQCTRL_USIC0_SR3_IRQ12);
10003274:	23c0      	movs	r3, #192	; 0xc0
10003276:	011b      	lsls	r3, r3, #4
10003278:	200c      	movs	r0, #12
1000327a:	1c19      	adds	r1, r3, #0
1000327c:	f7fe fbe0 	bl	10001a40 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)12);
10003280:	200c      	movs	r0, #12
10003282:	f7ff fee5 	bl	10003050 <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)11, 3U);
10003286:	200b      	movs	r0, #11
10003288:	2103      	movs	r1, #3
1000328a:	f7ff fefb 	bl	10003084 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(11U, XMC_SCU_IRQCTRL_USIC0_SR2_IRQ11);
1000328e:	23b0      	movs	r3, #176	; 0xb0
10003290:	011b      	lsls	r3, r3, #4
10003292:	200b      	movs	r0, #11
10003294:	1c19      	adds	r1, r3, #0
10003296:	f7fe fbd3 	bl	10001a40 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)11);
1000329a:	200b      	movs	r0, #11
1000329c:	f7ff fed8 	bl	10003050 <__NVIC_EnableIRQ>
  return status;
100032a0:	1dfb      	adds	r3, r7, #7
100032a2:	781b      	ldrb	r3, [r3, #0]
}
100032a4:	1c18      	adds	r0, r3, #0
100032a6:	46bd      	mov	sp, r7
100032a8:	b002      	add	sp, #8
100032aa:	bd80      	pop	{r7, pc}
100032ac:	40040000 	.word	0x40040000
100032b0:	1000c28c 	.word	0x1000c28c
100032b4:	48000200 	.word	0x48000200
100032b8:	1000c23c 	.word	0x1000c23c
100032bc:	1000c248 	.word	0x1000c248

100032c0 <IRQ12_Handler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
100032c0:	b580      	push	{r7, lr}
100032c2:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
100032c4:	4b02      	ldr	r3, [pc, #8]	; (100032d0 <IRQ12_Handler+0x10>)
100032c6:	1c18      	adds	r0, r3, #0
100032c8:	f7ff fd7c 	bl	10002dc4 <UART_lTransmitHandler>
}
100032cc:	46bd      	mov	sp, r7
100032ce:	bd80      	pop	{r7, pc}
100032d0:	20000584 	.word	0x20000584

100032d4 <IRQ11_Handler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
100032d4:	b580      	push	{r7, lr}
100032d6:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
100032d8:	4b02      	ldr	r3, [pc, #8]	; (100032e4 <IRQ11_Handler+0x10>)
100032da:	1c18      	adds	r0, r3, #0
100032dc:	f7ff fdfa 	bl	10002ed4 <UART_lReceiveHandler>
}
100032e0:	46bd      	mov	sp, r7
100032e2:	bd80      	pop	{r7, pc}
100032e4:	20000584 	.word	0x20000584

100032e8 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
100032e8:	b580      	push	{r7, lr}
100032ea:	b082      	sub	sp, #8
100032ec:	af00      	add	r7, sp, #0
100032ee:	6078      	str	r0, [r7, #4]
100032f0:	1c0a      	adds	r2, r1, #0
100032f2:	1cfb      	adds	r3, r7, #3
100032f4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
100032f6:	687b      	ldr	r3, [r7, #4]
100032f8:	68da      	ldr	r2, [r3, #12]
100032fa:	1cfb      	adds	r3, r7, #3
100032fc:	781b      	ldrb	r3, [r3, #0]
100032fe:	2101      	movs	r1, #1
10003300:	4099      	lsls	r1, r3
10003302:	1c0b      	adds	r3, r1, #0
10003304:	431a      	orrs	r2, r3
10003306:	687b      	ldr	r3, [r7, #4]
10003308:	60da      	str	r2, [r3, #12]
}
1000330a:	46bd      	mov	sp, r7
1000330c:	b002      	add	sp, #8
1000330e:	bd80      	pop	{r7, pc}

10003310 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10003310:	b580      	push	{r7, lr}
10003312:	b082      	sub	sp, #8
10003314:	af00      	add	r7, sp, #0
10003316:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10003318:	687b      	ldr	r3, [r7, #4]
1000331a:	2201      	movs	r2, #1
1000331c:	60da      	str	r2, [r3, #12]
}
1000331e:	46bd      	mov	sp, r7
10003320:	b002      	add	sp, #8
10003322:	bd80      	pop	{r7, pc}

10003324 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
10003324:	b580      	push	{r7, lr}
10003326:	b082      	sub	sp, #8
10003328:	af00      	add	r7, sp, #0
1000332a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1000332c:	687b      	ldr	r3, [r7, #4]
1000332e:	2202      	movs	r2, #2
10003330:	611a      	str	r2, [r3, #16]
}
10003332:	46bd      	mov	sp, r7
10003334:	b002      	add	sp, #8
10003336:	bd80      	pop	{r7, pc}

10003338 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10003338:	b580      	push	{r7, lr}
1000333a:	b082      	sub	sp, #8
1000333c:	af00      	add	r7, sp, #0
1000333e:	6078      	str	r0, [r7, #4]
10003340:	1c0a      	adds	r2, r1, #0
10003342:	1cbb      	adds	r3, r7, #2
10003344:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10003346:	1cbb      	adds	r3, r7, #2
10003348:	881a      	ldrh	r2, [r3, #0]
1000334a:	687b      	ldr	r3, [r7, #4]
1000334c:	635a      	str	r2, [r3, #52]	; 0x34
}
1000334e:	46bd      	mov	sp, r7
10003350:	b002      	add	sp, #8
10003352:	bd80      	pop	{r7, pc}

10003354 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10003354:	b580      	push	{r7, lr}
10003356:	b082      	sub	sp, #8
10003358:	af00      	add	r7, sp, #0
1000335a:	6078      	str	r0, [r7, #4]
1000335c:	1c0a      	adds	r2, r1, #0
1000335e:	1cbb      	adds	r3, r7, #2
10003360:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10003362:	1cbb      	adds	r3, r7, #2
10003364:	881a      	ldrh	r2, [r3, #0]
10003366:	687b      	ldr	r3, [r7, #4]
10003368:	63da      	str	r2, [r3, #60]	; 0x3c
}
1000336a:	46bd      	mov	sp, r7
1000336c:	b002      	add	sp, #8
1000336e:	bd80      	pop	{r7, pc}

10003370 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10003370:	b580      	push	{r7, lr}
10003372:	b082      	sub	sp, #8
10003374:	af00      	add	r7, sp, #0
10003376:	6078      	str	r0, [r7, #4]
10003378:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
1000337a:	687b      	ldr	r3, [r7, #4]
1000337c:	683a      	ldr	r2, [r7, #0]
1000337e:	611a      	str	r2, [r3, #16]
}
10003380:	46bd      	mov	sp, r7
10003382:	b002      	add	sp, #8
10003384:	bd80      	pop	{r7, pc}
10003386:	46c0      	nop			; (mov r8, r8)

10003388 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10003388:	b580      	push	{r7, lr}
1000338a:	b082      	sub	sp, #8
1000338c:	af00      	add	r7, sp, #0
1000338e:	6078      	str	r0, [r7, #4]
10003390:	1c0a      	adds	r2, r1, #0
10003392:	1cfb      	adds	r3, r7, #3
10003394:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10003396:	687b      	ldr	r3, [r7, #4]
10003398:	22a4      	movs	r2, #164	; 0xa4
1000339a:	589a      	ldr	r2, [r3, r2]
1000339c:	1cfb      	adds	r3, r7, #3
1000339e:	781b      	ldrb	r3, [r3, #0]
100033a0:	2101      	movs	r1, #1
100033a2:	4099      	lsls	r1, r3
100033a4:	1c0b      	adds	r3, r1, #0
100033a6:	431a      	orrs	r2, r3
100033a8:	687b      	ldr	r3, [r7, #4]
100033aa:	21a4      	movs	r1, #164	; 0xa4
100033ac:	505a      	str	r2, [r3, r1]
}
100033ae:	46bd      	mov	sp, r7
100033b0:	b002      	add	sp, #8
100033b2:	bd80      	pop	{r7, pc}

100033b4 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
100033b4:	b590      	push	{r4, r7, lr}
100033b6:	b085      	sub	sp, #20
100033b8:	af00      	add	r7, sp, #0
100033ba:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
100033bc:	230f      	movs	r3, #15
100033be:	18fb      	adds	r3, r7, r3
100033c0:	2200      	movs	r2, #0
100033c2:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
100033c4:	687b      	ldr	r3, [r7, #4]
100033c6:	2226      	movs	r2, #38	; 0x26
100033c8:	5c9b      	ldrb	r3, [r3, r2]
100033ca:	2201      	movs	r2, #1
100033cc:	4053      	eors	r3, r2
100033ce:	b2db      	uxtb	r3, r3
100033d0:	2b00      	cmp	r3, #0
100033d2:	d00c      	beq.n	100033ee <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
100033d4:	687b      	ldr	r3, [r7, #4]
100033d6:	2221      	movs	r2, #33	; 0x21
100033d8:	5c9b      	ldrb	r3, [r3, r2]
100033da:	2b00      	cmp	r3, #0
100033dc:	d107      	bne.n	100033ee <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
100033de:	230f      	movs	r3, #15
100033e0:	18fc      	adds	r4, r7, r3
100033e2:	687b      	ldr	r3, [r7, #4]
100033e4:	1c18      	adds	r0, r3, #0
100033e6:	f000 f809 	bl	100033fc <TIMER_CCU4_lInit>
100033ea:	1c03      	adds	r3, r0, #0
100033ec:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
100033ee:	230f      	movs	r3, #15
100033f0:	18fb      	adds	r3, r7, r3
100033f2:	781b      	ldrb	r3, [r3, #0]
}
100033f4:	1c18      	adds	r0, r3, #0
100033f6:	46bd      	mov	sp, r7
100033f8:	b005      	add	sp, #20
100033fa:	bd90      	pop	{r4, r7, pc}

100033fc <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
100033fc:	b590      	push	{r4, r7, lr}
100033fe:	b085      	sub	sp, #20
10003400:	af00      	add	r7, sp, #0
10003402:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
10003404:	687b      	ldr	r3, [r7, #4]
10003406:	691b      	ldr	r3, [r3, #16]
10003408:	220f      	movs	r2, #15
1000340a:	18bc      	adds	r4, r7, r2
1000340c:	1c18      	adds	r0, r3, #0
1000340e:	f001 fe0f 	bl	10005030 <GLOBAL_CCU4_Init>
10003412:	1c03      	adds	r3, r0, #0
10003414:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
10003416:	687b      	ldr	r3, [r7, #4]
10003418:	691b      	ldr	r3, [r3, #16]
1000341a:	689a      	ldr	r2, [r3, #8]
1000341c:	687b      	ldr	r3, [r7, #4]
1000341e:	7e1b      	ldrb	r3, [r3, #24]
10003420:	1c10      	adds	r0, r2, #0
10003422:	1c19      	adds	r1, r3, #0
10003424:	f7ff ff60 	bl	100032e8 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10003428:	687b      	ldr	r3, [r7, #4]
1000342a:	695a      	ldr	r2, [r3, #20]
1000342c:	687b      	ldr	r3, [r7, #4]
1000342e:	69db      	ldr	r3, [r3, #28]
10003430:	1c10      	adds	r0, r2, #0
10003432:	1c19      	adds	r1, r3, #0
10003434:	f7fe fba4 	bl	10001b80 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
10003438:	687b      	ldr	r3, [r7, #4]
1000343a:	1c18      	adds	r0, r3, #0
1000343c:	f000 f830 	bl	100034a0 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
10003440:	687b      	ldr	r3, [r7, #4]
10003442:	2225      	movs	r2, #37	; 0x25
10003444:	5c9b      	ldrb	r3, [r3, r2]
10003446:	2b00      	cmp	r3, #0
10003448:	d00f      	beq.n	1000346a <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000344a:	687b      	ldr	r3, [r7, #4]
1000344c:	6959      	ldr	r1, [r3, #20]
1000344e:	687b      	ldr	r3, [r7, #4]
10003450:	2220      	movs	r2, #32
10003452:	5c9b      	ldrb	r3, [r3, r2]
10003454:	1c08      	adds	r0, r1, #0
10003456:	2100      	movs	r1, #0
10003458:	1c1a      	adds	r2, r3, #0
1000345a:	f7fe fbc5 	bl	10001be8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
1000345e:	687b      	ldr	r3, [r7, #4]
10003460:	695b      	ldr	r3, [r3, #20]
10003462:	1c18      	adds	r0, r3, #0
10003464:	2100      	movs	r1, #0
10003466:	f7ff ff8f 	bl	10003388 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
1000346a:	687b      	ldr	r3, [r7, #4]
1000346c:	695b      	ldr	r3, [r3, #20]
1000346e:	1c18      	adds	r0, r3, #0
10003470:	f7ff ff58 	bl	10003324 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
10003474:	687b      	ldr	r3, [r7, #4]
10003476:	2226      	movs	r2, #38	; 0x26
10003478:	2101      	movs	r1, #1
1000347a:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
1000347c:	687b      	ldr	r3, [r7, #4]
1000347e:	2224      	movs	r2, #36	; 0x24
10003480:	5c9b      	ldrb	r3, [r3, r2]
10003482:	2b00      	cmp	r3, #0
10003484:	d004      	beq.n	10003490 <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10003486:	687b      	ldr	r3, [r7, #4]
10003488:	695b      	ldr	r3, [r3, #20]
1000348a:	1c18      	adds	r0, r3, #0
1000348c:	f7ff ff40 	bl	10003310 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
10003490:	230f      	movs	r3, #15
10003492:	18fb      	adds	r3, r7, r3
10003494:	781b      	ldrb	r3, [r3, #0]
}
10003496:	1c18      	adds	r0, r3, #0
10003498:	46bd      	mov	sp, r7
1000349a:	b005      	add	sp, #20
1000349c:	bd90      	pop	{r4, r7, pc}
1000349e:	46c0      	nop			; (mov r8, r8)

100034a0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
100034a0:	b580      	push	{r7, lr}
100034a2:	b082      	sub	sp, #8
100034a4:	af00      	add	r7, sp, #0
100034a6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
100034a8:	687b      	ldr	r3, [r7, #4]
100034aa:	695a      	ldr	r2, [r3, #20]
100034ac:	687b      	ldr	r3, [r7, #4]
100034ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
100034b0:	1c10      	adds	r0, r2, #0
100034b2:	1c19      	adds	r1, r3, #0
100034b4:	f7ff ff40 	bl	10003338 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
100034b8:	687b      	ldr	r3, [r7, #4]
100034ba:	695b      	ldr	r3, [r3, #20]
100034bc:	1c18      	adds	r0, r3, #0
100034be:	2100      	movs	r1, #0
100034c0:	f7ff ff48 	bl	10003354 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
100034c4:	687b      	ldr	r3, [r7, #4]
100034c6:	691b      	ldr	r3, [r3, #16]
100034c8:	689a      	ldr	r2, [r3, #8]
100034ca:	687b      	ldr	r3, [r7, #4]
100034cc:	68db      	ldr	r3, [r3, #12]
100034ce:	1c10      	adds	r0, r2, #0
100034d0:	1c19      	adds	r1, r3, #0
100034d2:	f7ff ff4d 	bl	10003370 <XMC_CCU4_EnableShadowTransfer>
}
100034d6:	46bd      	mov	sp, r7
100034d8:	b002      	add	sp, #8
100034da:	bd80      	pop	{r7, pc}

100034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100034dc:	b580      	push	{r7, lr}
100034de:	b082      	sub	sp, #8
100034e0:	af00      	add	r7, sp, #0
100034e2:	1c02      	adds	r2, r0, #0
100034e4:	1dfb      	adds	r3, r7, #7
100034e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100034e8:	1dfb      	adds	r3, r7, #7
100034ea:	781b      	ldrb	r3, [r3, #0]
100034ec:	2b7f      	cmp	r3, #127	; 0x7f
100034ee:	d809      	bhi.n	10003504 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100034f0:	4b06      	ldr	r3, [pc, #24]	; (1000350c <__NVIC_EnableIRQ+0x30>)
100034f2:	1dfa      	adds	r2, r7, #7
100034f4:	7812      	ldrb	r2, [r2, #0]
100034f6:	1c11      	adds	r1, r2, #0
100034f8:	221f      	movs	r2, #31
100034fa:	400a      	ands	r2, r1
100034fc:	2101      	movs	r1, #1
100034fe:	4091      	lsls	r1, r2
10003500:	1c0a      	adds	r2, r1, #0
10003502:	601a      	str	r2, [r3, #0]
  }
}
10003504:	46bd      	mov	sp, r7
10003506:	b002      	add	sp, #8
10003508:	bd80      	pop	{r7, pc}
1000350a:	46c0      	nop			; (mov r8, r8)
1000350c:	e000e100 	.word	0xe000e100

10003510 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10003510:	b580      	push	{r7, lr}
10003512:	b082      	sub	sp, #8
10003514:	af00      	add	r7, sp, #0
10003516:	1c02      	adds	r2, r0, #0
10003518:	1dfb      	adds	r3, r7, #7
1000351a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000351c:	1dfb      	adds	r3, r7, #7
1000351e:	781b      	ldrb	r3, [r3, #0]
10003520:	2b7f      	cmp	r3, #127	; 0x7f
10003522:	d80a      	bhi.n	1000353a <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10003524:	4906      	ldr	r1, [pc, #24]	; (10003540 <__NVIC_ClearPendingIRQ+0x30>)
10003526:	1dfb      	adds	r3, r7, #7
10003528:	781b      	ldrb	r3, [r3, #0]
1000352a:	1c1a      	adds	r2, r3, #0
1000352c:	231f      	movs	r3, #31
1000352e:	4013      	ands	r3, r2
10003530:	2201      	movs	r2, #1
10003532:	409a      	lsls	r2, r3
10003534:	23c0      	movs	r3, #192	; 0xc0
10003536:	005b      	lsls	r3, r3, #1
10003538:	50ca      	str	r2, [r1, r3]
  }
}
1000353a:	46bd      	mov	sp, r7
1000353c:	b002      	add	sp, #8
1000353e:	bd80      	pop	{r7, pc}
10003540:	e000e100 	.word	0xe000e100

10003544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003544:	b5b0      	push	{r4, r5, r7, lr}
10003546:	b082      	sub	sp, #8
10003548:	af00      	add	r7, sp, #0
1000354a:	1c02      	adds	r2, r0, #0
1000354c:	6039      	str	r1, [r7, #0]
1000354e:	1dfb      	adds	r3, r7, #7
10003550:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003552:	1dfb      	adds	r3, r7, #7
10003554:	781b      	ldrb	r3, [r3, #0]
10003556:	2b7f      	cmp	r3, #127	; 0x7f
10003558:	d827      	bhi.n	100035aa <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000355a:	4c2d      	ldr	r4, [pc, #180]	; (10003610 <__NVIC_SetPriority+0xcc>)
1000355c:	1dfb      	adds	r3, r7, #7
1000355e:	781b      	ldrb	r3, [r3, #0]
10003560:	b25b      	sxtb	r3, r3
10003562:	089b      	lsrs	r3, r3, #2
10003564:	492a      	ldr	r1, [pc, #168]	; (10003610 <__NVIC_SetPriority+0xcc>)
10003566:	1dfa      	adds	r2, r7, #7
10003568:	7812      	ldrb	r2, [r2, #0]
1000356a:	b252      	sxtb	r2, r2
1000356c:	0892      	lsrs	r2, r2, #2
1000356e:	32c0      	adds	r2, #192	; 0xc0
10003570:	0092      	lsls	r2, r2, #2
10003572:	5852      	ldr	r2, [r2, r1]
10003574:	1df9      	adds	r1, r7, #7
10003576:	7809      	ldrb	r1, [r1, #0]
10003578:	1c08      	adds	r0, r1, #0
1000357a:	2103      	movs	r1, #3
1000357c:	4001      	ands	r1, r0
1000357e:	00c9      	lsls	r1, r1, #3
10003580:	1c08      	adds	r0, r1, #0
10003582:	21ff      	movs	r1, #255	; 0xff
10003584:	4081      	lsls	r1, r0
10003586:	43c9      	mvns	r1, r1
10003588:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000358a:	683a      	ldr	r2, [r7, #0]
1000358c:	0192      	lsls	r2, r2, #6
1000358e:	20ff      	movs	r0, #255	; 0xff
10003590:	4002      	ands	r2, r0
10003592:	1df8      	adds	r0, r7, #7
10003594:	7800      	ldrb	r0, [r0, #0]
10003596:	1c05      	adds	r5, r0, #0
10003598:	2003      	movs	r0, #3
1000359a:	4028      	ands	r0, r5
1000359c:	00c0      	lsls	r0, r0, #3
1000359e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100035a0:	430a      	orrs	r2, r1
100035a2:	33c0      	adds	r3, #192	; 0xc0
100035a4:	009b      	lsls	r3, r3, #2
100035a6:	511a      	str	r2, [r3, r4]
100035a8:	e02e      	b.n	10003608 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100035aa:	4c1a      	ldr	r4, [pc, #104]	; (10003614 <__NVIC_SetPriority+0xd0>)
100035ac:	1dfb      	adds	r3, r7, #7
100035ae:	781b      	ldrb	r3, [r3, #0]
100035b0:	1c1a      	adds	r2, r3, #0
100035b2:	230f      	movs	r3, #15
100035b4:	4013      	ands	r3, r2
100035b6:	3b08      	subs	r3, #8
100035b8:	0899      	lsrs	r1, r3, #2
100035ba:	4a16      	ldr	r2, [pc, #88]	; (10003614 <__NVIC_SetPriority+0xd0>)
100035bc:	1dfb      	adds	r3, r7, #7
100035be:	781b      	ldrb	r3, [r3, #0]
100035c0:	1c18      	adds	r0, r3, #0
100035c2:	230f      	movs	r3, #15
100035c4:	4003      	ands	r3, r0
100035c6:	3b08      	subs	r3, #8
100035c8:	089b      	lsrs	r3, r3, #2
100035ca:	3306      	adds	r3, #6
100035cc:	009b      	lsls	r3, r3, #2
100035ce:	18d3      	adds	r3, r2, r3
100035d0:	685b      	ldr	r3, [r3, #4]
100035d2:	1dfa      	adds	r2, r7, #7
100035d4:	7812      	ldrb	r2, [r2, #0]
100035d6:	1c10      	adds	r0, r2, #0
100035d8:	2203      	movs	r2, #3
100035da:	4002      	ands	r2, r0
100035dc:	00d2      	lsls	r2, r2, #3
100035de:	1c10      	adds	r0, r2, #0
100035e0:	22ff      	movs	r2, #255	; 0xff
100035e2:	4082      	lsls	r2, r0
100035e4:	43d2      	mvns	r2, r2
100035e6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100035e8:	683b      	ldr	r3, [r7, #0]
100035ea:	019b      	lsls	r3, r3, #6
100035ec:	20ff      	movs	r0, #255	; 0xff
100035ee:	4003      	ands	r3, r0
100035f0:	1df8      	adds	r0, r7, #7
100035f2:	7800      	ldrb	r0, [r0, #0]
100035f4:	1c05      	adds	r5, r0, #0
100035f6:	2003      	movs	r0, #3
100035f8:	4028      	ands	r0, r5
100035fa:	00c0      	lsls	r0, r0, #3
100035fc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100035fe:	431a      	orrs	r2, r3
10003600:	1d8b      	adds	r3, r1, #6
10003602:	009b      	lsls	r3, r3, #2
10003604:	18e3      	adds	r3, r4, r3
10003606:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003608:	46bd      	mov	sp, r7
1000360a:	b002      	add	sp, #8
1000360c:	bdb0      	pop	{r4, r5, r7, pc}
1000360e:	46c0      	nop			; (mov r8, r8)
10003610:	e000e100 	.word	0xe000e100
10003614:	e000ed00 	.word	0xe000ed00

10003618 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
10003618:	b580      	push	{r7, lr}
1000361a:	b082      	sub	sp, #8
1000361c:	af00      	add	r7, sp, #0
1000361e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
10003620:	687b      	ldr	r3, [r7, #4]
10003622:	6859      	ldr	r1, [r3, #4]
10003624:	687b      	ldr	r3, [r7, #4]
10003626:	7f9a      	ldrb	r2, [r3, #30]
10003628:	687b      	ldr	r3, [r7, #4]
1000362a:	3308      	adds	r3, #8
1000362c:	1c08      	adds	r0, r1, #0
1000362e:	1c11      	adds	r1, r2, #0
10003630:	1c1a      	adds	r2, r3, #0
10003632:	f7fd fe9d 	bl	10001370 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
10003636:	687b      	ldr	r3, [r7, #4]
10003638:	6819      	ldr	r1, [r3, #0]
1000363a:	687b      	ldr	r3, [r7, #4]
1000363c:	7f1a      	ldrb	r2, [r3, #28]
1000363e:	687b      	ldr	r3, [r7, #4]
10003640:	3310      	adds	r3, #16
10003642:	1c08      	adds	r0, r1, #0
10003644:	1c11      	adds	r1, r2, #0
10003646:	1c1a      	adds	r2, r3, #0
10003648:	f7fe fb1a 	bl	10001c80 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
1000364c:	687b      	ldr	r3, [r7, #4]
1000364e:	681a      	ldr	r2, [r3, #0]
10003650:	687b      	ldr	r3, [r7, #4]
10003652:	7f5b      	ldrb	r3, [r3, #29]
10003654:	1c10      	adds	r0, r2, #0
10003656:	1c19      	adds	r1, r3, #0
10003658:	2201      	movs	r2, #1
1000365a:	f7fe fb3f 	bl	10001cdc <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
1000365e:	687b      	ldr	r3, [r7, #4]
10003660:	7e9a      	ldrb	r2, [r3, #26]
10003662:	687b      	ldr	r3, [r7, #4]
10003664:	7edb      	ldrb	r3, [r3, #27]
10003666:	1c19      	adds	r1, r3, #0
10003668:	b253      	sxtb	r3, r2
1000366a:	1c18      	adds	r0, r3, #0
1000366c:	f7ff ff6a 	bl	10003544 <__NVIC_SetPriority>
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
10003670:	687b      	ldr	r3, [r7, #4]
10003672:	7e9b      	ldrb	r3, [r3, #26]
10003674:	b2da      	uxtb	r2, r3
10003676:	687b      	ldr	r3, [r7, #4]
10003678:	8b1b      	ldrh	r3, [r3, #24]
1000367a:	1c10      	adds	r0, r2, #0
1000367c:	1c19      	adds	r1, r3, #0
1000367e:	f7fe f9df 	bl	10001a40 <XMC_SCU_SetInterruptControl>
#endif
  if (true == handle->enable_at_init)
10003682:	687b      	ldr	r3, [r7, #4]
10003684:	7fdb      	ldrb	r3, [r3, #31]
10003686:	2b00      	cmp	r3, #0
10003688:	d00b      	beq.n	100036a2 <PIN_INTERRUPT_Init+0x8a>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
1000368a:	687b      	ldr	r3, [r7, #4]
1000368c:	7e9b      	ldrb	r3, [r3, #26]
1000368e:	b25b      	sxtb	r3, r3
10003690:	1c18      	adds	r0, r3, #0
10003692:	f7ff ff3d 	bl	10003510 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
10003696:	687b      	ldr	r3, [r7, #4]
10003698:	7e9b      	ldrb	r3, [r3, #26]
1000369a:	b25b      	sxtb	r3, r3
1000369c:	1c18      	adds	r0, r3, #0
1000369e:	f7ff ff1d 	bl	100034dc <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
100036a2:	2300      	movs	r3, #0
}
100036a4:	1c18      	adds	r0, r3, #0
100036a6:	46bd      	mov	sp, r7
100036a8:	b002      	add	sp, #8
100036aa:	bd80      	pop	{r7, pc}

100036ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100036ac:	b580      	push	{r7, lr}
100036ae:	b082      	sub	sp, #8
100036b0:	af00      	add	r7, sp, #0
100036b2:	1c02      	adds	r2, r0, #0
100036b4:	1dfb      	adds	r3, r7, #7
100036b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100036b8:	1dfb      	adds	r3, r7, #7
100036ba:	781b      	ldrb	r3, [r3, #0]
100036bc:	2b7f      	cmp	r3, #127	; 0x7f
100036be:	d809      	bhi.n	100036d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
100036c0:	4b06      	ldr	r3, [pc, #24]	; (100036dc <__NVIC_EnableIRQ+0x30>)
100036c2:	1dfa      	adds	r2, r7, #7
100036c4:	7812      	ldrb	r2, [r2, #0]
100036c6:	1c11      	adds	r1, r2, #0
100036c8:	221f      	movs	r2, #31
100036ca:	400a      	ands	r2, r1
100036cc:	2101      	movs	r1, #1
100036ce:	4091      	lsls	r1, r2
100036d0:	1c0a      	adds	r2, r1, #0
100036d2:	601a      	str	r2, [r3, #0]
  }
}
100036d4:	46bd      	mov	sp, r7
100036d6:	b002      	add	sp, #8
100036d8:	bd80      	pop	{r7, pc}
100036da:	46c0      	nop			; (mov r8, r8)
100036dc:	e000e100 	.word	0xe000e100

100036e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100036e0:	b5b0      	push	{r4, r5, r7, lr}
100036e2:	b082      	sub	sp, #8
100036e4:	af00      	add	r7, sp, #0
100036e6:	1c02      	adds	r2, r0, #0
100036e8:	6039      	str	r1, [r7, #0]
100036ea:	1dfb      	adds	r3, r7, #7
100036ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100036ee:	1dfb      	adds	r3, r7, #7
100036f0:	781b      	ldrb	r3, [r3, #0]
100036f2:	2b7f      	cmp	r3, #127	; 0x7f
100036f4:	d827      	bhi.n	10003746 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100036f6:	4c2d      	ldr	r4, [pc, #180]	; (100037ac <__NVIC_SetPriority+0xcc>)
100036f8:	1dfb      	adds	r3, r7, #7
100036fa:	781b      	ldrb	r3, [r3, #0]
100036fc:	b25b      	sxtb	r3, r3
100036fe:	089b      	lsrs	r3, r3, #2
10003700:	492a      	ldr	r1, [pc, #168]	; (100037ac <__NVIC_SetPriority+0xcc>)
10003702:	1dfa      	adds	r2, r7, #7
10003704:	7812      	ldrb	r2, [r2, #0]
10003706:	b252      	sxtb	r2, r2
10003708:	0892      	lsrs	r2, r2, #2
1000370a:	32c0      	adds	r2, #192	; 0xc0
1000370c:	0092      	lsls	r2, r2, #2
1000370e:	5852      	ldr	r2, [r2, r1]
10003710:	1df9      	adds	r1, r7, #7
10003712:	7809      	ldrb	r1, [r1, #0]
10003714:	1c08      	adds	r0, r1, #0
10003716:	2103      	movs	r1, #3
10003718:	4001      	ands	r1, r0
1000371a:	00c9      	lsls	r1, r1, #3
1000371c:	1c08      	adds	r0, r1, #0
1000371e:	21ff      	movs	r1, #255	; 0xff
10003720:	4081      	lsls	r1, r0
10003722:	43c9      	mvns	r1, r1
10003724:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003726:	683a      	ldr	r2, [r7, #0]
10003728:	0192      	lsls	r2, r2, #6
1000372a:	20ff      	movs	r0, #255	; 0xff
1000372c:	4002      	ands	r2, r0
1000372e:	1df8      	adds	r0, r7, #7
10003730:	7800      	ldrb	r0, [r0, #0]
10003732:	1c05      	adds	r5, r0, #0
10003734:	2003      	movs	r0, #3
10003736:	4028      	ands	r0, r5
10003738:	00c0      	lsls	r0, r0, #3
1000373a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000373c:	430a      	orrs	r2, r1
1000373e:	33c0      	adds	r3, #192	; 0xc0
10003740:	009b      	lsls	r3, r3, #2
10003742:	511a      	str	r2, [r3, r4]
10003744:	e02e      	b.n	100037a4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003746:	4c1a      	ldr	r4, [pc, #104]	; (100037b0 <__NVIC_SetPriority+0xd0>)
10003748:	1dfb      	adds	r3, r7, #7
1000374a:	781b      	ldrb	r3, [r3, #0]
1000374c:	1c1a      	adds	r2, r3, #0
1000374e:	230f      	movs	r3, #15
10003750:	4013      	ands	r3, r2
10003752:	3b08      	subs	r3, #8
10003754:	0899      	lsrs	r1, r3, #2
10003756:	4a16      	ldr	r2, [pc, #88]	; (100037b0 <__NVIC_SetPriority+0xd0>)
10003758:	1dfb      	adds	r3, r7, #7
1000375a:	781b      	ldrb	r3, [r3, #0]
1000375c:	1c18      	adds	r0, r3, #0
1000375e:	230f      	movs	r3, #15
10003760:	4003      	ands	r3, r0
10003762:	3b08      	subs	r3, #8
10003764:	089b      	lsrs	r3, r3, #2
10003766:	3306      	adds	r3, #6
10003768:	009b      	lsls	r3, r3, #2
1000376a:	18d3      	adds	r3, r2, r3
1000376c:	685b      	ldr	r3, [r3, #4]
1000376e:	1dfa      	adds	r2, r7, #7
10003770:	7812      	ldrb	r2, [r2, #0]
10003772:	1c10      	adds	r0, r2, #0
10003774:	2203      	movs	r2, #3
10003776:	4002      	ands	r2, r0
10003778:	00d2      	lsls	r2, r2, #3
1000377a:	1c10      	adds	r0, r2, #0
1000377c:	22ff      	movs	r2, #255	; 0xff
1000377e:	4082      	lsls	r2, r0
10003780:	43d2      	mvns	r2, r2
10003782:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003784:	683b      	ldr	r3, [r7, #0]
10003786:	019b      	lsls	r3, r3, #6
10003788:	20ff      	movs	r0, #255	; 0xff
1000378a:	4003      	ands	r3, r0
1000378c:	1df8      	adds	r0, r7, #7
1000378e:	7800      	ldrb	r0, [r0, #0]
10003790:	1c05      	adds	r5, r0, #0
10003792:	2003      	movs	r0, #3
10003794:	4028      	ands	r0, r5
10003796:	00c0      	lsls	r0, r0, #3
10003798:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000379a:	431a      	orrs	r2, r3
1000379c:	1d8b      	adds	r3, r1, #6
1000379e:	009b      	lsls	r3, r3, #2
100037a0:	18e3      	adds	r3, r4, r3
100037a2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100037a4:	46bd      	mov	sp, r7
100037a6:	b002      	add	sp, #8
100037a8:	bdb0      	pop	{r4, r5, r7, pc}
100037aa:	46c0      	nop			; (mov r8, r8)
100037ac:	e000e100 	.word	0xe000e100
100037b0:	e000ed00 	.word	0xe000ed00

100037b4 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
100037b4:	b580      	push	{r7, lr}
100037b6:	b082      	sub	sp, #8
100037b8:	af00      	add	r7, sp, #0
100037ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
100037bc:	687b      	ldr	r3, [r7, #4]
100037be:	789b      	ldrb	r3, [r3, #2]
100037c0:	b25b      	sxtb	r3, r3
100037c2:	1c18      	adds	r0, r3, #0
100037c4:	f7ff ff72 	bl	100036ac <__NVIC_EnableIRQ>
}
100037c8:	46bd      	mov	sp, r7
100037ca:	b002      	add	sp, #8
100037cc:	bd80      	pop	{r7, pc}
100037ce:	46c0      	nop			; (mov r8, r8)

100037d0 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
100037d0:	b580      	push	{r7, lr}
100037d2:	b082      	sub	sp, #8
100037d4:	af00      	add	r7, sp, #0
100037d6:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
100037d8:	687b      	ldr	r3, [r7, #4]
100037da:	789a      	ldrb	r2, [r3, #2]
100037dc:	687b      	ldr	r3, [r7, #4]
100037de:	78db      	ldrb	r3, [r3, #3]
100037e0:	1c19      	adds	r1, r3, #0
100037e2:	b253      	sxtb	r3, r2
100037e4:	1c18      	adds	r0, r3, #0
100037e6:	f7ff ff7b 	bl	100036e0 <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
100037ea:	687b      	ldr	r3, [r7, #4]
100037ec:	789b      	ldrb	r3, [r3, #2]
100037ee:	b2da      	uxtb	r2, r3
100037f0:	687b      	ldr	r3, [r7, #4]
100037f2:	789b      	ldrb	r3, [r3, #2]
100037f4:	b25b      	sxtb	r3, r3
100037f6:	021b      	lsls	r3, r3, #8
100037f8:	b299      	uxth	r1, r3
100037fa:	687b      	ldr	r3, [r7, #4]
100037fc:	881b      	ldrh	r3, [r3, #0]
100037fe:	b29b      	uxth	r3, r3
10003800:	430b      	orrs	r3, r1
10003802:	b29b      	uxth	r3, r3
10003804:	b29b      	uxth	r3, r3
10003806:	1c10      	adds	r0, r2, #0
10003808:	1c19      	adds	r1, r3, #0
1000380a:	f7fe f919 	bl	10001a40 <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
1000380e:	687b      	ldr	r3, [r7, #4]
10003810:	791b      	ldrb	r3, [r3, #4]
10003812:	2b00      	cmp	r3, #0
10003814:	d003      	beq.n	1000381e <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
10003816:	687b      	ldr	r3, [r7, #4]
10003818:	1c18      	adds	r0, r3, #0
1000381a:	f7ff ffcb 	bl	100037b4 <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
1000381e:	2300      	movs	r3, #0
}
10003820:	1c18      	adds	r0, r3, #0
10003822:	46bd      	mov	sp, r7
10003824:	b002      	add	sp, #8
10003826:	bd80      	pop	{r7, pc}

10003828 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10003828:	b580      	push	{r7, lr}
1000382a:	b082      	sub	sp, #8
1000382c:	af00      	add	r7, sp, #0
1000382e:	1c02      	adds	r2, r0, #0
10003830:	1dfb      	adds	r3, r7, #7
10003832:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003834:	1dfb      	adds	r3, r7, #7
10003836:	781b      	ldrb	r3, [r3, #0]
10003838:	2b7f      	cmp	r3, #127	; 0x7f
1000383a:	d80a      	bhi.n	10003852 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
1000383c:	4906      	ldr	r1, [pc, #24]	; (10003858 <__NVIC_ClearPendingIRQ+0x30>)
1000383e:	1dfb      	adds	r3, r7, #7
10003840:	781b      	ldrb	r3, [r3, #0]
10003842:	1c1a      	adds	r2, r3, #0
10003844:	231f      	movs	r3, #31
10003846:	4013      	ands	r3, r2
10003848:	2201      	movs	r2, #1
1000384a:	409a      	lsls	r2, r3
1000384c:	23c0      	movs	r3, #192	; 0xc0
1000384e:	005b      	lsls	r3, r3, #1
10003850:	50ca      	str	r2, [r1, r3]
  }
}
10003852:	46bd      	mov	sp, r7
10003854:	b002      	add	sp, #8
10003856:	bd80      	pop	{r7, pc}
10003858:	e000e100 	.word	0xe000e100

1000385c <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
1000385c:	b580      	push	{r7, lr}
1000385e:	b082      	sub	sp, #8
10003860:	af00      	add	r7, sp, #0
10003862:	6078      	str	r0, [r7, #4]
10003864:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
10003866:	687b      	ldr	r3, [r7, #4]
10003868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000386a:	683b      	ldr	r3, [r7, #0]
1000386c:	431a      	orrs	r2, r3
1000386e:	687b      	ldr	r3, [r7, #4]
10003870:	641a      	str	r2, [r3, #64]	; 0x40
}
10003872:	46bd      	mov	sp, r7
10003874:	b002      	add	sp, #8
10003876:	bd80      	pop	{r7, pc}

10003878 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003878:	b580      	push	{r7, lr}
1000387a:	b082      	sub	sp, #8
1000387c:	af00      	add	r7, sp, #0
1000387e:	6078      	str	r0, [r7, #4]
10003880:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
10003882:	687b      	ldr	r3, [r7, #4]
10003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003886:	683a      	ldr	r2, [r7, #0]
10003888:	43d2      	mvns	r2, r2
1000388a:	401a      	ands	r2, r3
1000388c:	687b      	ldr	r3, [r7, #4]
1000388e:	641a      	str	r2, [r3, #64]	; 0x40
}
10003890:	46bd      	mov	sp, r7
10003892:	b002      	add	sp, #8
10003894:	bd80      	pop	{r7, pc}
10003896:	46c0      	nop			; (mov r8, r8)

10003898 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10003898:	b580      	push	{r7, lr}
1000389a:	b082      	sub	sp, #8
1000389c:	af00      	add	r7, sp, #0
1000389e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
100038a0:	687b      	ldr	r3, [r7, #4]
100038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100038a4:	b2db      	uxtb	r3, r3
100038a6:	227f      	movs	r2, #127	; 0x7f
100038a8:	4393      	bics	r3, r2
100038aa:	b2db      	uxtb	r3, r3
}
100038ac:	1c18      	adds	r0, r3, #0
100038ae:	46bd      	mov	sp, r7
100038b0:	b002      	add	sp, #8
100038b2:	bd80      	pop	{r7, pc}

100038b4 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
100038b4:	b580      	push	{r7, lr}
100038b6:	b082      	sub	sp, #8
100038b8:	af00      	add	r7, sp, #0
100038ba:	6078      	str	r0, [r7, #4]
100038bc:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
100038be:	683b      	ldr	r3, [r7, #0]
100038c0:	2280      	movs	r2, #128	; 0x80
100038c2:	0252      	lsls	r2, r2, #9
100038c4:	409a      	lsls	r2, r3
100038c6:	687b      	ldr	r3, [r7, #4]
100038c8:	669a      	str	r2, [r3, #104]	; 0x68
}
100038ca:	46bd      	mov	sp, r7
100038cc:	b002      	add	sp, #8
100038ce:	bd80      	pop	{r7, pc}

100038d0 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100038d0:	b580      	push	{r7, lr}
100038d2:	b082      	sub	sp, #8
100038d4:	af00      	add	r7, sp, #0
100038d6:	6078      	str	r0, [r7, #4]
100038d8:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
100038da:	687a      	ldr	r2, [r7, #4]
100038dc:	2384      	movs	r3, #132	; 0x84
100038de:	005b      	lsls	r3, r3, #1
100038e0:	58d2      	ldr	r2, [r2, r3]
100038e2:	683b      	ldr	r3, [r7, #0]
100038e4:	431a      	orrs	r2, r3
100038e6:	1c11      	adds	r1, r2, #0
100038e8:	687a      	ldr	r2, [r7, #4]
100038ea:	2384      	movs	r3, #132	; 0x84
100038ec:	005b      	lsls	r3, r3, #1
100038ee:	50d1      	str	r1, [r2, r3]
}
100038f0:	46bd      	mov	sp, r7
100038f2:	b002      	add	sp, #8
100038f4:	bd80      	pop	{r7, pc}
100038f6:	46c0      	nop			; (mov r8, r8)

100038f8 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
100038f8:	b580      	push	{r7, lr}
100038fa:	b082      	sub	sp, #8
100038fc:	af00      	add	r7, sp, #0
100038fe:	6078      	str	r0, [r7, #4]
10003900:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
10003902:	687a      	ldr	r2, [r7, #4]
10003904:	2384      	movs	r3, #132	; 0x84
10003906:	005b      	lsls	r3, r3, #1
10003908:	58d3      	ldr	r3, [r2, r3]
1000390a:	683a      	ldr	r2, [r7, #0]
1000390c:	43d2      	mvns	r2, r2
1000390e:	401a      	ands	r2, r3
10003910:	1c11      	adds	r1, r2, #0
10003912:	687a      	ldr	r2, [r7, #4]
10003914:	2384      	movs	r3, #132	; 0x84
10003916:	005b      	lsls	r3, r3, #1
10003918:	50d1      	str	r1, [r2, r3]
}
1000391a:	46bd      	mov	sp, r7
1000391c:	b002      	add	sp, #8
1000391e:	bd80      	pop	{r7, pc}

10003920 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
10003920:	b580      	push	{r7, lr}
10003922:	b082      	sub	sp, #8
10003924:	af00      	add	r7, sp, #0
10003926:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
10003928:	687a      	ldr	r2, [r7, #4]
1000392a:	238a      	movs	r3, #138	; 0x8a
1000392c:	005b      	lsls	r3, r3, #1
1000392e:	58d2      	ldr	r2, [r2, r3]
10003930:	2380      	movs	r3, #128	; 0x80
10003932:	015b      	lsls	r3, r3, #5
10003934:	4013      	ands	r3, r2
10003936:	1e5a      	subs	r2, r3, #1
10003938:	4193      	sbcs	r3, r2
1000393a:	b2db      	uxtb	r3, r3
}
1000393c:	1c18      	adds	r0, r3, #0
1000393e:	46bd      	mov	sp, r7
10003940:	b002      	add	sp, #8
10003942:	bd80      	pop	{r7, pc}

10003944 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
10003944:	b580      	push	{r7, lr}
10003946:	b082      	sub	sp, #8
10003948:	af00      	add	r7, sp, #0
1000394a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1000394c:	687a      	ldr	r2, [r7, #4]
1000394e:	238a      	movs	r3, #138	; 0x8a
10003950:	005b      	lsls	r3, r3, #1
10003952:	58d2      	ldr	r2, [r2, r3]
10003954:	2380      	movs	r3, #128	; 0x80
10003956:	011b      	lsls	r3, r3, #4
10003958:	4013      	ands	r3, r2
1000395a:	1e5a      	subs	r2, r3, #1
1000395c:	4193      	sbcs	r3, r2
1000395e:	b2db      	uxtb	r3, r3
}
10003960:	1c18      	adds	r0, r3, #0
10003962:	46bd      	mov	sp, r7
10003964:	b002      	add	sp, #8
10003966:	bd80      	pop	{r7, pc}

10003968 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003968:	b580      	push	{r7, lr}
1000396a:	b082      	sub	sp, #8
1000396c:	af00      	add	r7, sp, #0
1000396e:	6078      	str	r0, [r7, #4]
10003970:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
10003972:	687a      	ldr	r2, [r7, #4]
10003974:	2386      	movs	r3, #134	; 0x86
10003976:	005b      	lsls	r3, r3, #1
10003978:	58d2      	ldr	r2, [r2, r3]
1000397a:	683b      	ldr	r3, [r7, #0]
1000397c:	431a      	orrs	r2, r3
1000397e:	1c11      	adds	r1, r2, #0
10003980:	687a      	ldr	r2, [r7, #4]
10003982:	2386      	movs	r3, #134	; 0x86
10003984:	005b      	lsls	r3, r3, #1
10003986:	50d1      	str	r1, [r2, r3]
}
10003988:	46bd      	mov	sp, r7
1000398a:	b002      	add	sp, #8
1000398c:	bd80      	pop	{r7, pc}
1000398e:	46c0      	nop			; (mov r8, r8)

10003990 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10003990:	b580      	push	{r7, lr}
10003992:	b082      	sub	sp, #8
10003994:	af00      	add	r7, sp, #0
10003996:	6078      	str	r0, [r7, #4]
10003998:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
1000399a:	687a      	ldr	r2, [r7, #4]
1000399c:	2386      	movs	r3, #134	; 0x86
1000399e:	005b      	lsls	r3, r3, #1
100039a0:	58d3      	ldr	r3, [r2, r3]
100039a2:	683a      	ldr	r2, [r7, #0]
100039a4:	43d2      	mvns	r2, r2
100039a6:	401a      	ands	r2, r3
100039a8:	1c11      	adds	r1, r2, #0
100039aa:	687a      	ldr	r2, [r7, #4]
100039ac:	2386      	movs	r3, #134	; 0x86
100039ae:	005b      	lsls	r3, r3, #1
100039b0:	50d1      	str	r1, [r2, r3]
}
100039b2:	46bd      	mov	sp, r7
100039b4:	b002      	add	sp, #8
100039b6:	bd80      	pop	{r7, pc}

100039b8 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
100039b8:	b580      	push	{r7, lr}
100039ba:	b082      	sub	sp, #8
100039bc:	af00      	add	r7, sp, #0
100039be:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
100039c0:	687a      	ldr	r2, [r7, #4]
100039c2:	238c      	movs	r3, #140	; 0x8c
100039c4:	005b      	lsls	r3, r3, #1
100039c6:	2180      	movs	r1, #128	; 0x80
100039c8:	01c9      	lsls	r1, r1, #7
100039ca:	50d1      	str	r1, [r2, r3]
}
100039cc:	46bd      	mov	sp, r7
100039ce:	b002      	add	sp, #8
100039d0:	bd80      	pop	{r7, pc}
100039d2:	46c0      	nop			; (mov r8, r8)

100039d4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
100039d4:	b580      	push	{r7, lr}
100039d6:	b082      	sub	sp, #8
100039d8:	af00      	add	r7, sp, #0
100039da:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
100039dc:	687a      	ldr	r2, [r7, #4]
100039de:	238a      	movs	r3, #138	; 0x8a
100039e0:	005b      	lsls	r3, r3, #1
100039e2:	58d3      	ldr	r3, [r2, r3]
100039e4:	2208      	movs	r2, #8
100039e6:	4013      	ands	r3, r2
100039e8:	1e5a      	subs	r2, r3, #1
100039ea:	4193      	sbcs	r3, r2
100039ec:	b2db      	uxtb	r3, r3
}
100039ee:	1c18      	adds	r0, r3, #0
100039f0:	46bd      	mov	sp, r7
100039f2:	b002      	add	sp, #8
100039f4:	bd80      	pop	{r7, pc}
100039f6:	46c0      	nop			; (mov r8, r8)

100039f8 <XMC_I2C_CH_SetInterruptNodePointer>:
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_EnableEvent(), NVIC_SetPriority(), NVIC_EnableIRQ(), XMC_I2C_CH_SetInputSource()<br>
 */
__STATIC_INLINE void XMC_I2C_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                        const uint8_t service_request)
{
100039f8:	b580      	push	{r7, lr}
100039fa:	b082      	sub	sp, #8
100039fc:	af00      	add	r7, sp, #0
100039fe:	6078      	str	r0, [r7, #4]
10003a00:	1c0a      	adds	r2, r1, #0
10003a02:	1cfb      	adds	r3, r7, #3
10003a04:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, service_request);
10003a06:	1cfb      	adds	r3, r7, #3
10003a08:	781b      	ldrb	r3, [r3, #0]
10003a0a:	687a      	ldr	r2, [r7, #4]
10003a0c:	1c10      	adds	r0, r2, #0
10003a0e:	2110      	movs	r1, #16
10003a10:	1c1a      	adds	r2, r3, #0
10003a12:	f7fe febf 	bl	10002794 <XMC_USIC_CH_SetInterruptNodePointer>
}
10003a16:	46bd      	mov	sp, r7
10003a18:	b002      	add	sp, #8
10003a1a:	bd80      	pop	{r7, pc}

10003a1c <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
10003a1c:	b580      	push	{r7, lr}
10003a1e:	b082      	sub	sp, #8
10003a20:	af00      	add	r7, sp, #0
10003a22:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
10003a24:	687b      	ldr	r3, [r7, #4]
10003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
10003a28:	1c18      	adds	r0, r3, #0
10003a2a:	46bd      	mov	sp, r7
10003a2c:	b002      	add	sp, #8
10003a2e:	bd80      	pop	{r7, pc}

10003a30 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
10003a30:	b580      	push	{r7, lr}
10003a32:	b082      	sub	sp, #8
10003a34:	af00      	add	r7, sp, #0
10003a36:	6078      	str	r0, [r7, #4]
10003a38:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
10003a3a:	687b      	ldr	r3, [r7, #4]
10003a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10003a3e:	683b      	ldr	r3, [r7, #0]
10003a40:	431a      	orrs	r2, r3
10003a42:	687b      	ldr	r3, [r7, #4]
10003a44:	64da      	str	r2, [r3, #76]	; 0x4c
}
10003a46:	46bd      	mov	sp, r7
10003a48:	b002      	add	sp, #8
10003a4a:	bd80      	pop	{r7, pc}

10003a4c <I2C_MASTER_SetRXFIFOTriggerLimit>:
 *
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_SetRXFIFOTriggerLimit(I2C_MASTER_t * const handle, const uint32_t size,
		                                              const uint32_t limit)
{
10003a4c:	b580      	push	{r7, lr}
10003a4e:	b084      	sub	sp, #16
10003a50:	af00      	add	r7, sp, #0
10003a52:	60f8      	str	r0, [r7, #12]
10003a54:	60b9      	str	r1, [r7, #8]
10003a56:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SetRXFIFOTriggerLimit: invalid handle", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, (XMC_USIC_CH_FIFO_SIZE_t)size, limit);
10003a58:	68fb      	ldr	r3, [r7, #12]
10003a5a:	6819      	ldr	r1, [r3, #0]
10003a5c:	68bb      	ldr	r3, [r7, #8]
10003a5e:	b2da      	uxtb	r2, r3
10003a60:	687b      	ldr	r3, [r7, #4]
10003a62:	1c08      	adds	r0, r1, #0
10003a64:	1c11      	adds	r1, r2, #0
10003a66:	1c1a      	adds	r2, r3, #0
10003a68:	f7fe fe66 	bl	10002738 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
10003a6c:	46bd      	mov	sp, r7
10003a6e:	b004      	add	sp, #16
10003a70:	bd80      	pop	{r7, pc}
10003a72:	46c0      	nop			; (mov r8, r8)

10003a74 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
10003a74:	b580      	push	{r7, lr}
10003a76:	b082      	sub	sp, #8
10003a78:	af00      	add	r7, sp, #0
10003a7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
10003a7c:	687b      	ldr	r3, [r7, #4]
10003a7e:	681b      	ldr	r3, [r3, #0]
10003a80:	1c18      	adds	r0, r3, #0
10003a82:	f7ff ff4d 	bl	10003920 <XMC_USIC_CH_TXFIFO_IsFull>
10003a86:	1c03      	adds	r3, r0, #0
}
10003a88:	1c18      	adds	r0, r3, #0
10003a8a:	46bd      	mov	sp, r7
10003a8c:	b002      	add	sp, #8
10003a8e:	bd80      	pop	{r7, pc}

10003a90 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
10003a90:	b580      	push	{r7, lr}
10003a92:	b082      	sub	sp, #8
10003a94:	af00      	add	r7, sp, #0
10003a96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
10003a98:	687b      	ldr	r3, [r7, #4]
10003a9a:	681b      	ldr	r3, [r3, #0]
10003a9c:	1c18      	adds	r0, r3, #0
10003a9e:	f7ff ff99 	bl	100039d4 <XMC_USIC_CH_RXFIFO_IsEmpty>
10003aa2:	1c03      	adds	r3, r0, #0
}
10003aa4:	1c18      	adds	r0, r3, #0
10003aa6:	46bd      	mov	sp, r7
10003aa8:	b002      	add	sp, #8
10003aaa:	bd80      	pop	{r7, pc}

10003aac <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
10003aac:	b580      	push	{r7, lr}
10003aae:	b082      	sub	sp, #8
10003ab0:	af00      	add	r7, sp, #0
10003ab2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL))
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
10003ab4:	687b      	ldr	r3, [r7, #4]
10003ab6:	681b      	ldr	r3, [r3, #0]
10003ab8:	1c18      	adds	r0, r3, #0
10003aba:	f7fe fb85 	bl	100021c8 <XMC_I2C_CH_GetReceivedData>
10003abe:	1c03      	adds	r3, r0, #0
}
10003ac0:	1c18      	adds	r0, r3, #0
10003ac2:	46bd      	mov	sp, r7
10003ac4:	b002      	add	sp, #8
10003ac6:	bd80      	pop	{r7, pc}

10003ac8 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
10003ac8:	b580      	push	{r7, lr}
10003aca:	b082      	sub	sp, #8
10003acc:	af00      	add	r7, sp, #0
10003ace:	6078      	str	r0, [r7, #4]
10003ad0:	1c0a      	adds	r2, r1, #0
10003ad2:	1cfb      	adds	r3, r7, #3
10003ad4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
10003ad6:	687b      	ldr	r3, [r7, #4]
10003ad8:	681a      	ldr	r2, [r3, #0]
10003ada:	1cfb      	adds	r3, r7, #3
10003adc:	781b      	ldrb	r3, [r3, #0]
10003ade:	1c10      	adds	r0, r2, #0
10003ae0:	1c19      	adds	r1, r3, #0
10003ae2:	f7fe faef 	bl	100020c4 <XMC_I2C_CH_MasterTransmit>
}
10003ae6:	46bd      	mov	sp, r7
10003ae8:	b002      	add	sp, #8
10003aea:	bd80      	pop	{r7, pc}

10003aec <I2C_MASTER_EnableEvent>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_EnableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
10003aec:	b580      	push	{r7, lr}
10003aee:	b082      	sub	sp, #8
10003af0:	af00      	add	r7, sp, #0
10003af2:	6078      	str	r0, [r7, #4]
10003af4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_EnableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_EnableEvent(handle->channel, event);
10003af6:	687b      	ldr	r3, [r7, #4]
10003af8:	681a      	ldr	r2, [r3, #0]
10003afa:	683b      	ldr	r3, [r7, #0]
10003afc:	1c10      	adds	r0, r2, #0
10003afe:	1c19      	adds	r1, r3, #0
10003b00:	f7fe fb82 	bl	10002208 <XMC_I2C_CH_EnableEvent>
}
10003b04:	46bd      	mov	sp, r7
10003b06:	b002      	add	sp, #8
10003b08:	bd80      	pop	{r7, pc}
10003b0a:	46c0      	nop			; (mov r8, r8)

10003b0c <I2C_MASTER_DisableEvent>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void I2C_MASTER_DisableEvent(I2C_MASTER_t * const handle, uint32_t event)
{
10003b0c:	b580      	push	{r7, lr}
10003b0e:	b082      	sub	sp, #8
10003b10:	af00      	add	r7, sp, #0
10003b12:	6078      	str	r0, [r7, #4]
10003b14:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("I2C_MASTER_DisableEvent: invalid handle", (handle != NULL))
  XMC_I2C_CH_DisableEvent(handle->channel, event);
10003b16:	687b      	ldr	r3, [r7, #4]
10003b18:	681a      	ldr	r2, [r3, #0]
10003b1a:	683b      	ldr	r3, [r7, #0]
10003b1c:	1c10      	adds	r0, r2, #0
10003b1e:	1c19      	adds	r1, r3, #0
10003b20:	f7fe fb8e 	bl	10002240 <XMC_I2C_CH_DisableEvent>
}
10003b24:	46bd      	mov	sp, r7
10003b26:	b002      	add	sp, #8
10003b28:	bd80      	pop	{r7, pc}
10003b2a:	46c0      	nop			; (mov r8, r8)

10003b2c <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
10003b2c:	b580      	push	{r7, lr}
10003b2e:	b082      	sub	sp, #8
10003b30:	af00      	add	r7, sp, #0
10003b32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
10003b34:	687b      	ldr	r3, [r7, #4]
10003b36:	681b      	ldr	r3, [r3, #0]
10003b38:	1c18      	adds	r0, r3, #0
10003b3a:	f7fe faf1 	bl	10002120 <XMC_I2C_CH_MasterReceiveAck>
}
10003b3e:	46bd      	mov	sp, r7
10003b40:	b002      	add	sp, #8
10003b42:	bd80      	pop	{r7, pc}

10003b44 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
10003b44:	b580      	push	{r7, lr}
10003b46:	b082      	sub	sp, #8
10003b48:	af00      	add	r7, sp, #0
10003b4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL))
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
10003b4c:	687b      	ldr	r3, [r7, #4]
10003b4e:	681b      	ldr	r3, [r3, #0]
10003b50:	1c18      	adds	r0, r3, #0
10003b52:	f7fe fb0f 	bl	10002174 <XMC_I2C_CH_MasterReceiveNack>
}
10003b56:	46bd      	mov	sp, r7
10003b58:	b002      	add	sp, #8
10003b5a:	bd80      	pop	{r7, pc}

10003b5c <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
10003b5c:	b580      	push	{r7, lr}
10003b5e:	b082      	sub	sp, #8
10003b60:	af00      	add	r7, sp, #0
10003b62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
10003b64:	687b      	ldr	r3, [r7, #4]
10003b66:	681b      	ldr	r3, [r3, #0]
10003b68:	1c18      	adds	r0, r3, #0
10003b6a:	2110      	movs	r1, #16
10003b6c:	f7ff ff60 	bl	10003a30 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
10003b70:	687b      	ldr	r3, [r7, #4]
10003b72:	681b      	ldr	r3, [r3, #0]
10003b74:	1c18      	adds	r0, r3, #0
10003b76:	f7fe fa7b 	bl	10002070 <XMC_I2C_CH_MasterStop>
}
10003b7a:	46bd      	mov	sp, r7
10003b7c:	b002      	add	sp, #8
10003b7e:	bd80      	pop	{r7, pc}

10003b80 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
10003b80:	b580      	push	{r7, lr}
10003b82:	b084      	sub	sp, #16
10003b84:	af00      	add	r7, sp, #0
10003b86:	60f8      	str	r0, [r7, #12]
10003b88:	60b9      	str	r1, [r7, #8]
10003b8a:	1dfb      	adds	r3, r7, #7
10003b8c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
10003b8e:	68fb      	ldr	r3, [r7, #12]
10003b90:	681b      	ldr	r3, [r3, #0]
10003b92:	1c18      	adds	r0, r3, #0
10003b94:	2104      	movs	r1, #4
10003b96:	f7ff ff4b 	bl	10003a30 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
10003b9a:	68fb      	ldr	r3, [r7, #12]
10003b9c:	6819      	ldr	r1, [r3, #0]
10003b9e:	68bb      	ldr	r3, [r7, #8]
10003ba0:	b29a      	uxth	r2, r3
10003ba2:	1dfb      	adds	r3, r7, #7
10003ba4:	781b      	ldrb	r3, [r3, #0]
10003ba6:	1c08      	adds	r0, r1, #0
10003ba8:	1c11      	adds	r1, r2, #0
10003baa:	1c1a      	adds	r2, r3, #0
10003bac:	f7fe f9e0 	bl	10001f70 <XMC_I2C_CH_MasterStart>
}
10003bb0:	46bd      	mov	sp, r7
10003bb2:	b004      	add	sp, #16
10003bb4:	bd80      	pop	{r7, pc}
10003bb6:	46c0      	nop			; (mov r8, r8)

10003bb8 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
10003bb8:	b580      	push	{r7, lr}
10003bba:	b084      	sub	sp, #16
10003bbc:	af00      	add	r7, sp, #0
10003bbe:	60f8      	str	r0, [r7, #12]
10003bc0:	60b9      	str	r1, [r7, #8]
10003bc2:	1dfb      	adds	r3, r7, #7
10003bc4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL))
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
10003bc6:	68fb      	ldr	r3, [r7, #12]
10003bc8:	681b      	ldr	r3, [r3, #0]
10003bca:	1c18      	adds	r0, r3, #0
10003bcc:	2108      	movs	r1, #8
10003bce:	f7ff ff2f 	bl	10003a30 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
10003bd2:	68fb      	ldr	r3, [r7, #12]
10003bd4:	6819      	ldr	r1, [r3, #0]
10003bd6:	68bb      	ldr	r3, [r7, #8]
10003bd8:	b29a      	uxth	r2, r3
10003bda:	1dfb      	adds	r3, r7, #7
10003bdc:	781b      	ldrb	r3, [r3, #0]
10003bde:	1c08      	adds	r0, r1, #0
10003be0:	1c11      	adds	r1, r2, #0
10003be2:	1c1a      	adds	r2, r3, #0
10003be4:	f7fe fa04 	bl	10001ff0 <XMC_I2C_CH_MasterRepeatedStart>
}
10003be8:	46bd      	mov	sp, r7
10003bea:	b004      	add	sp, #16
10003bec:	bd80      	pop	{r7, pc}
10003bee:	46c0      	nop			; (mov r8, r8)

10003bf0 <calculate_minfifosize>:
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle);

#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1))
static uint32_t calculate_minfifosize(uint32_t a, uint32_t b)
{
10003bf0:	b580      	push	{r7, lr}
10003bf2:	b084      	sub	sp, #16
10003bf4:	af00      	add	r7, sp, #0
10003bf6:	6078      	str	r0, [r7, #4]
10003bf8:	6039      	str	r1, [r7, #0]
  uint32_t result;

  if (a < b)
10003bfa:	687a      	ldr	r2, [r7, #4]
10003bfc:	683b      	ldr	r3, [r7, #0]
10003bfe:	429a      	cmp	r2, r3
10003c00:	d202      	bcs.n	10003c08 <calculate_minfifosize+0x18>
  {
    result = a;
10003c02:	687b      	ldr	r3, [r7, #4]
10003c04:	60fb      	str	r3, [r7, #12]
10003c06:	e001      	b.n	10003c0c <calculate_minfifosize+0x1c>
  }
  else
  {
    result = b;
10003c08:	683b      	ldr	r3, [r7, #0]
10003c0a:	60fb      	str	r3, [r7, #12]
  }
  return (result);
10003c0c:	68fb      	ldr	r3, [r7, #12]
}
10003c0e:	1c18      	adds	r0, r3, #0
10003c10:	46bd      	mov	sp, r7
10003c12:	b004      	add	sp, #16
10003c14:	bd80      	pop	{r7, pc}
10003c16:	46c0      	nop			; (mov r8, r8)

10003c18 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
10003c18:	b580      	push	{r7, lr}
10003c1a:	b084      	sub	sp, #16
10003c1c:	af00      	add	r7, sp, #0
10003c1e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
10003c20:	687b      	ldr	r3, [r7, #4]
10003c22:	2b00      	cmp	r3, #0
10003c24:	d008      	beq.n	10003c38 <I2C_MASTER_Init+0x20>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
10003c26:	687b      	ldr	r3, [r7, #4]
10003c28:	685b      	ldr	r3, [r3, #4]
10003c2a:	685b      	ldr	r3, [r3, #4]
10003c2c:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
10003c2e:	230f      	movs	r3, #15
10003c30:	18fb      	adds	r3, r7, r3
10003c32:	2200      	movs	r2, #0
10003c34:	701a      	strb	r2, [r3, #0]
10003c36:	e003      	b.n	10003c40 <I2C_MASTER_Init+0x28>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
10003c38:	230f      	movs	r3, #15
10003c3a:	18fb      	adds	r3, r7, r3
10003c3c:	2201      	movs	r2, #1
10003c3e:	701a      	strb	r2, [r3, #0]
  }
  return (status);
10003c40:	230f      	movs	r3, #15
10003c42:	18fb      	adds	r3, r7, r3
10003c44:	781b      	ldrb	r3, [r3, #0]
}
10003c46:	1c18      	adds	r0, r3, #0
10003c48:	46bd      	mov	sp, r7
10003c4a:	b004      	add	sp, #16
10003c4c:	bd80      	pop	{r7, pc}
10003c4e:	46c0      	nop			; (mov r8, r8)

10003c50 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
10003c50:	b580      	push	{r7, lr}
10003c52:	b084      	sub	sp, #16
10003c54:	af00      	add	r7, sp, #0
10003c56:	6078      	str	r0, [r7, #4]
10003c58:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
10003c5a:	687b      	ldr	r3, [r7, #4]
10003c5c:	681b      	ldr	r3, [r3, #0]
10003c5e:	1c18      	adds	r0, r3, #0
10003c60:	f7ff fedc 	bl	10003a1c <XMC_I2C_CH_GetStatusFlag>
10003c64:	1c03      	adds	r3, r0, #0
10003c66:	60fb      	str	r3, [r7, #12]

  return (status & flagtype);
10003c68:	68fb      	ldr	r3, [r7, #12]
10003c6a:	683a      	ldr	r2, [r7, #0]
10003c6c:	4013      	ands	r3, r2
}
10003c6e:	1c18      	adds	r0, r3, #0
10003c70:	46bd      	mov	sp, r7
10003c72:	b004      	add	sp, #16
10003c74:	bd80      	pop	{r7, pc}
10003c76:	46c0      	nop			; (mov r8, r8)

10003c78 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
10003c78:	b580      	push	{r7, lr}
10003c7a:	b082      	sub	sp, #8
10003c7c:	af00      	add	r7, sp, #0
10003c7e:	6078      	str	r0, [r7, #4]
10003c80:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
10003c82:	687b      	ldr	r3, [r7, #4]
10003c84:	681a      	ldr	r2, [r3, #0]
10003c86:	683b      	ldr	r3, [r7, #0]
10003c88:	1c10      	adds	r0, r2, #0
10003c8a:	1c19      	adds	r1, r3, #0
10003c8c:	f7ff fed0 	bl	10003a30 <XMC_I2C_CH_ClearStatusFlag>
}
10003c90:	46bd      	mov	sp, r7
10003c92:	b002      	add	sp, #8
10003c94:	bd80      	pop	{r7, pc}
10003c96:	46c0      	nop			; (mov r8, r8)

10003c98 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
10003c98:	b5b0      	push	{r4, r5, r7, lr}
10003c9a:	b088      	sub	sp, #32
10003c9c:	af02      	add	r7, sp, #8
10003c9e:	60f8      	str	r0, [r7, #12]
10003ca0:	607a      	str	r2, [r7, #4]
10003ca2:	603b      	str	r3, [r7, #0]
10003ca4:	230b      	movs	r3, #11
10003ca6:	18fb      	adds	r3, r7, r3
10003ca8:	1c0a      	adds	r2, r1, #0
10003caa:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
10003cac:	2317      	movs	r3, #23
10003cae:	18fb      	adds	r3, r7, r3
10003cb0:	2202      	movs	r2, #2
10003cb2:	701a      	strb	r2, [r3, #0]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
10003cb4:	68fb      	ldr	r3, [r7, #12]
10003cb6:	685b      	ldr	r3, [r3, #4]
10003cb8:	2224      	movs	r2, #36	; 0x24
10003cba:	5c9b      	ldrb	r3, [r3, r2]
10003cbc:	2b00      	cmp	r3, #0
10003cbe:	d112      	bne.n	10003ce6 <I2C_MASTER_Transmit+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
10003cc0:	2317      	movs	r3, #23
10003cc2:	18fc      	adds	r4, r7, r3
10003cc4:	68f8      	ldr	r0, [r7, #12]
10003cc6:	230b      	movs	r3, #11
10003cc8:	18fb      	adds	r3, r7, r3
10003cca:	7819      	ldrb	r1, [r3, #0]
10003ccc:	687a      	ldr	r2, [r7, #4]
10003cce:	683d      	ldr	r5, [r7, #0]
10003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003cd2:	9300      	str	r3, [sp, #0]
10003cd4:	232c      	movs	r3, #44	; 0x2c
10003cd6:	18fb      	adds	r3, r7, r3
10003cd8:	781b      	ldrb	r3, [r3, #0]
10003cda:	9301      	str	r3, [sp, #4]
10003cdc:	1c2b      	adds	r3, r5, #0
10003cde:	f000 fba9 	bl	10004434 <I2C_MASTER_StartTransmitIRQ>
10003ce2:	1c03      	adds	r3, r0, #0
10003ce4:	7023      	strb	r3, [r4, #0]
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
#endif
  }

  return (status);
10003ce6:	2317      	movs	r3, #23
10003ce8:	18fb      	adds	r3, r7, r3
10003cea:	781b      	ldrb	r3, [r3, #0]
} /* end of function */
10003cec:	1c18      	adds	r0, r3, #0
10003cee:	46bd      	mov	sp, r7
10003cf0:	b006      	add	sp, #24
10003cf2:	bdb0      	pop	{r4, r5, r7, pc}

10003cf4 <I2C_MASTER_TransmitHandler>:
 *  @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 *  @return void
 */
void I2C_MASTER_TransmitHandler(I2C_MASTER_t * const handle)
{
10003cf4:	b580      	push	{r7, lr}
10003cf6:	b084      	sub	sp, #16
10003cf8:	af00      	add	r7, sp, #0
10003cfa:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
10003cfc:	687b      	ldr	r3, [r7, #4]
10003cfe:	689b      	ldr	r3, [r3, #8]
10003d00:	60bb      	str	r3, [r7, #8]
  fifo_min = 0U;
10003d02:	230f      	movs	r3, #15
10003d04:	18fb      	adds	r3, r7, r3
10003d06:	2200      	movs	r2, #0
10003d08:	701a      	strb	r2, [r3, #0]

  /* check if any error flag is set */
  if (I2C_MASTER_GetFlagStatus(handle, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED |
10003d0a:	687a      	ldr	r2, [r7, #4]
10003d0c:	23b1      	movs	r3, #177	; 0xb1
10003d0e:	005b      	lsls	r3, r3, #1
10003d10:	1c10      	adds	r0, r2, #0
10003d12:	1c19      	adds	r1, r3, #0
10003d14:	f7ff ff9c 	bl	10003c50 <I2C_MASTER_GetFlagStatus>
10003d18:	1e03      	subs	r3, r0, #0
10003d1a:	d014      	beq.n	10003d46 <I2C_MASTER_TransmitHandler+0x52>
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST |
                                        (uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR |
                    (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
  {
    /* Disable the transmit events */
    XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003d1c:	687b      	ldr	r3, [r7, #4]
10003d1e:	681a      	ldr	r2, [r3, #0]
10003d20:	2380      	movs	r3, #128	; 0x80
10003d22:	05db      	lsls	r3, r3, #23
10003d24:	1c10      	adds	r0, r2, #0
10003d26:	1c19      	adds	r1, r3, #0
10003d28:	f7ff fde6 	bl	100038f8 <XMC_USIC_CH_TXFIFO_DisableEvent>
    XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
10003d2c:	687b      	ldr	r3, [r7, #4]
10003d2e:	681a      	ldr	r2, [r3, #0]
10003d30:	2380      	movs	r3, #128	; 0x80
10003d32:	019b      	lsls	r3, r3, #6
10003d34:	1c10      	adds	r0, r2, #0
10003d36:	1c19      	adds	r1, r3, #0
10003d38:	f7ff fd9e 	bl	10003878 <XMC_USIC_CH_DisableEvent>

    I2C_MASTER_ProtocolHandler(handle);
10003d3c:	687b      	ldr	r3, [r7, #4]
10003d3e:	1c18      	adds	r0, r3, #0
10003d40:	f000 fdfe 	bl	10004940 <I2C_MASTER_ProtocolHandler>
10003d44:	e11f      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
  else
  {
/***********************************************************************************************************************
  Direction = Transmit, Tx FIFO enabled
***********************************************************************************************************************/
  if (ptr_runtime->direction == (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT)
10003d46:	68bb      	ldr	r3, [r7, #8]
10003d48:	699b      	ldr	r3, [r3, #24]
10003d4a:	2b00      	cmp	r3, #0
10003d4c:	d000      	beq.n	10003d50 <I2C_MASTER_TransmitHandler+0x5c>
10003d4e:	e08c      	b.n	10003e6a <I2C_MASTER_TransmitHandler+0x176>
  {
    if (handle->config->txFIFO_size > 0)
10003d50:	687b      	ldr	r3, [r7, #4]
10003d52:	685b      	ldr	r3, [r3, #4]
10003d54:	2226      	movs	r2, #38	; 0x26
10003d56:	5c9b      	ldrb	r3, [r3, r2]
10003d58:	2b00      	cmp	r3, #0
10003d5a:	d063      	beq.n	10003e24 <I2C_MASTER_TransmitHandler+0x130>
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003d5c:	68bb      	ldr	r3, [r7, #8]
10003d5e:	68da      	ldr	r2, [r3, #12]
10003d60:	68bb      	ldr	r3, [r7, #8]
10003d62:	689b      	ldr	r3, [r3, #8]
10003d64:	429a      	cmp	r2, r3
10003d66:	d234      	bcs.n	10003dd2 <I2C_MASTER_TransmitHandler+0xde>
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
10003d68:	687a      	ldr	r2, [r7, #4]
10003d6a:	2380      	movs	r3, #128	; 0x80
10003d6c:	05db      	lsls	r3, r3, #23
10003d6e:	1c10      	adds	r0, r2, #0
10003d70:	1c19      	adds	r1, r3, #0
10003d72:	f7ff fecb 	bl	10003b0c <I2C_MASTER_DisableEvent>
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003d76:	687b      	ldr	r3, [r7, #4]
10003d78:	681a      	ldr	r2, [r3, #0]
10003d7a:	2380      	movs	r3, #128	; 0x80
10003d7c:	05db      	lsls	r3, r3, #23
10003d7e:	1c10      	adds	r0, r2, #0
10003d80:	1c19      	adds	r1, r3, #0
10003d82:	f7ff fda5 	bl	100038d0 <XMC_USIC_CH_TXFIFO_EnableEvent>
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003d86:	e018      	b.n	10003dba <I2C_MASTER_TransmitHandler+0xc6>
        {
          /* transmit each byte till index reaches to the last byte */
          if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003d88:	68bb      	ldr	r3, [r7, #8]
10003d8a:	68da      	ldr	r2, [r3, #12]
10003d8c:	68bb      	ldr	r3, [r7, #8]
10003d8e:	689b      	ldr	r3, [r3, #8]
10003d90:	429a      	cmp	r2, r3
10003d92:	d210      	bcs.n	10003db6 <I2C_MASTER_TransmitHandler+0xc2>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, (uint8_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10003d94:	68bb      	ldr	r3, [r7, #8]
10003d96:	681a      	ldr	r2, [r3, #0]
10003d98:	68bb      	ldr	r3, [r7, #8]
10003d9a:	68db      	ldr	r3, [r3, #12]
10003d9c:	18d3      	adds	r3, r2, r3
10003d9e:	781b      	ldrb	r3, [r3, #0]
10003da0:	687a      	ldr	r2, [r7, #4]
10003da2:	1c10      	adds	r0, r2, #0
10003da4:	1c19      	adds	r1, r3, #0
10003da6:	f7ff fe8f 	bl	10003ac8 <I2C_MASTER_TransmitByte>
            ptr_runtime->tx_data_index++;
10003daa:	68bb      	ldr	r3, [r7, #8]
10003dac:	68db      	ldr	r3, [r3, #12]
10003dae:	1c5a      	adds	r2, r3, #1
10003db0:	68bb      	ldr	r3, [r7, #8]
10003db2:	60da      	str	r2, [r3, #12]
10003db4:	e001      	b.n	10003dba <I2C_MASTER_TransmitHandler+0xc6>
          }
          else
          {
            break;
10003db6:	46c0      	nop			; (mov r8, r8)
10003db8:	e0e5      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
      I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
      XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
        /*Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003dba:	687b      	ldr	r3, [r7, #4]
10003dbc:	1c18      	adds	r0, r3, #0
10003dbe:	f7ff fe59 	bl	10003a74 <I2C_MASTER_IsTXFIFOFull>
10003dc2:	1c03      	adds	r3, r0, #0
10003dc4:	1c1a      	adds	r2, r3, #0
10003dc6:	2301      	movs	r3, #1
10003dc8:	4053      	eors	r3, r2
10003dca:	b2db      	uxtb	r3, r3
10003dcc:	2b00      	cmp	r3, #0
10003dce:	d1db      	bne.n	10003d88 <I2C_MASTER_TransmitHandler+0x94>
10003dd0:	e0d9      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
        } /* end of while */
      }
      else
      {
        /* if index is reached to last byte and "bus acquired" flag is set to true, then issue Send Stop */
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003dd2:	687b      	ldr	r3, [r7, #4]
10003dd4:	681a      	ldr	r2, [r3, #0]
10003dd6:	2380      	movs	r3, #128	; 0x80
10003dd8:	05db      	lsls	r3, r3, #23
10003dda:	1c10      	adds	r0, r2, #0
10003ddc:	1c19      	adds	r1, r3, #0
10003dde:	f7ff fd8b 	bl	100038f8 <XMC_USIC_CH_TXFIFO_DisableEvent>
      NVIC_ClearPendingIRQ(handle->config->tx_irqn);
10003de2:	687b      	ldr	r3, [r7, #4]
10003de4:	685b      	ldr	r3, [r3, #4]
10003de6:	2228      	movs	r2, #40	; 0x28
10003de8:	5c9b      	ldrb	r3, [r3, r2]
10003dea:	b25b      	sxtb	r3, r3
10003dec:	1c18      	adds	r0, r3, #0
10003dee:	f7ff fd1b 	bl	10003828 <__NVIC_ClearPendingIRQ>

      /*make sure data is transmitted in FIFO*/
        while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
10003df2:	46c0      	nop			; (mov r8, r8)
10003df4:	687b      	ldr	r3, [r7, #4]
10003df6:	681b      	ldr	r3, [r3, #0]
10003df8:	1c18      	adds	r0, r3, #0
10003dfa:	f7ff fda3 	bl	10003944 <XMC_USIC_CH_TXFIFO_IsEmpty>
10003dfe:	1c03      	adds	r3, r0, #0
10003e00:	1c1a      	adds	r2, r3, #0
10003e02:	2301      	movs	r3, #1
10003e04:	4053      	eors	r3, r2
10003e06:	b2db      	uxtb	r3, r3
10003e08:	2b00      	cmp	r3, #0
10003e0a:	d1f3      	bne.n	10003df4 <I2C_MASTER_TransmitHandler+0x100>

          if (ptr_runtime->bus_acquired == true)
10003e0c:	68bb      	ldr	r3, [r7, #8]
10003e0e:	2228      	movs	r2, #40	; 0x28
10003e10:	5c9b      	ldrb	r3, [r3, r2]
10003e12:	b2db      	uxtb	r3, r3
10003e14:	2b00      	cmp	r3, #0
10003e16:	d100      	bne.n	10003e1a <I2C_MASTER_TransmitHandler+0x126>
10003e18:	e0b5      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
          {
            I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
10003e1a:	687b      	ldr	r3, [r7, #4]
10003e1c:	1c18      	adds	r0, r3, #0
10003e1e:	f000 f8b5 	bl	10003f8c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
10003e22:	e0b0      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
    Direction = transmit and Tx FIFO disabled
***********************************************************************************************************************/
    else
    {
      /* transmit each byte till the last byte */
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003e24:	68bb      	ldr	r3, [r7, #8]
10003e26:	68da      	ldr	r2, [r3, #12]
10003e28:	68bb      	ldr	r3, [r7, #8]
10003e2a:	689b      	ldr	r3, [r3, #8]
10003e2c:	429a      	cmp	r2, r3
10003e2e:	d210      	bcs.n	10003e52 <I2C_MASTER_TransmitHandler+0x15e>
      {
        I2C_MASTER_TransmitByte(handle, ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
10003e30:	68bb      	ldr	r3, [r7, #8]
10003e32:	681a      	ldr	r2, [r3, #0]
10003e34:	68bb      	ldr	r3, [r7, #8]
10003e36:	68db      	ldr	r3, [r3, #12]
10003e38:	18d3      	adds	r3, r2, r3
10003e3a:	781b      	ldrb	r3, [r3, #0]
10003e3c:	687a      	ldr	r2, [r7, #4]
10003e3e:	1c10      	adds	r0, r2, #0
10003e40:	1c19      	adds	r1, r3, #0
10003e42:	f7ff fe41 	bl	10003ac8 <I2C_MASTER_TransmitByte>
        ptr_runtime->tx_data_index++;
10003e46:	68bb      	ldr	r3, [r7, #8]
10003e48:	68db      	ldr	r3, [r3, #12]
10003e4a:	1c5a      	adds	r2, r3, #1
10003e4c:	68bb      	ldr	r3, [r7, #8]
10003e4e:	60da      	str	r2, [r3, #12]
10003e50:	e099      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
      }
      else
      {
        /* if index reaches last byte and bus_acquired flag is set to true, issue send stop */
        if (ptr_runtime->bus_acquired == true)
10003e52:	68bb      	ldr	r3, [r7, #8]
10003e54:	2228      	movs	r2, #40	; 0x28
10003e56:	5c9b      	ldrb	r3, [r3, r2]
10003e58:	b2db      	uxtb	r3, r3
10003e5a:	2b00      	cmp	r3, #0
10003e5c:	d100      	bne.n	10003e60 <I2C_MASTER_TransmitHandler+0x16c>
10003e5e:	e092      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
        {
          I2C_MASTER_lSendStop_JumpTo_TxCallback(handle);
10003e60:	687b      	ldr	r3, [r7, #4]
10003e62:	1c18      	adds	r0, r3, #0
10003e64:	f000 f892 	bl	10003f8c <I2C_MASTER_lSendStop_JumpTo_TxCallback>
10003e68:	e08d      	b.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
/***********************************************************************************************************************
  Direction = Receive, Tx, Rx FIFO enabled.
  Minimum FIFO value is calculated by comparing Tx FIFO and Rx FIFO size.
  If Rx FIFO is not enabled, default size of 2 is considered.
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
10003e6a:	687b      	ldr	r3, [r7, #4]
10003e6c:	685b      	ldr	r3, [r3, #4]
10003e6e:	2226      	movs	r2, #38	; 0x26
10003e70:	5c9b      	ldrb	r3, [r3, r2]
10003e72:	2b00      	cmp	r3, #0
10003e74:	d05f      	beq.n	10003f36 <I2C_MASTER_TransmitHandler+0x242>
    {
      if ((handle->config->rxFIFO_size > 0))
10003e76:	687b      	ldr	r3, [r7, #4]
10003e78:	685b      	ldr	r3, [r3, #4]
10003e7a:	2227      	movs	r2, #39	; 0x27
10003e7c:	5c9b      	ldrb	r3, [r3, r2]
10003e7e:	2b00      	cmp	r3, #0
10003e80:	d017      	beq.n	10003eb2 <I2C_MASTER_TransmitHandler+0x1be>
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003e82:	687b      	ldr	r3, [r7, #4]
10003e84:	685b      	ldr	r3, [r3, #4]
10003e86:	2226      	movs	r2, #38	; 0x26
10003e88:	5c9b      	ldrb	r3, [r3, r2]
10003e8a:	1c1a      	adds	r2, r3, #0
10003e8c:	2301      	movs	r3, #1
10003e8e:	4093      	lsls	r3, r2
10003e90:	1c19      	adds	r1, r3, #0
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
10003e92:	687b      	ldr	r3, [r7, #4]
10003e94:	685b      	ldr	r3, [r3, #4]
10003e96:	2227      	movs	r2, #39	; 0x27
10003e98:	5c9b      	ldrb	r3, [r3, r2]
***********************************************************************************************************************/
    if (handle->config->txFIFO_size > 0)
    {
      if ((handle->config->rxFIFO_size > 0))
      {
        fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10003e9a:	1c1a      	adds	r2, r3, #0
10003e9c:	2301      	movs	r3, #1
10003e9e:	4093      	lsls	r3, r2
10003ea0:	1c08      	adds	r0, r1, #0
10003ea2:	1c19      	adds	r1, r3, #0
10003ea4:	f7ff fea4 	bl	10003bf0 <calculate_minfifosize>
10003ea8:	1c02      	adds	r2, r0, #0
10003eaa:	230f      	movs	r3, #15
10003eac:	18fb      	adds	r3, r7, r3
10003eae:	701a      	strb	r2, [r3, #0]
10003eb0:	e003      	b.n	10003eba <I2C_MASTER_TransmitHandler+0x1c6>
                                              ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
      }
      else
      {
        /* if Rx FIFO is disabled, set minimum FIFO size as 2 */
        fifo_min = 2U;
10003eb2:	230f      	movs	r3, #15
10003eb4:	18fb      	adds	r3, r7, r3
10003eb6:	2202      	movs	r2, #2
10003eb8:	701a      	strb	r2, [r3, #0]
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
10003eba:	687b      	ldr	r3, [r7, #4]
10003ebc:	681a      	ldr	r2, [r3, #0]
10003ebe:	2380      	movs	r3, #128	; 0x80
10003ec0:	05db      	lsls	r3, r3, #23
10003ec2:	1c10      	adds	r0, r2, #0
10003ec4:	1c19      	adds	r1, r3, #0
10003ec6:	f7ff fd17 	bl	100038f8 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003eca:	e027      	b.n	10003f1c <I2C_MASTER_TransmitHandler+0x228>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10003ecc:	68bb      	ldr	r3, [r7, #8]
10003ece:	68da      	ldr	r2, [r3, #12]
10003ed0:	68bb      	ldr	r3, [r7, #8]
10003ed2:	689b      	ldr	r3, [r3, #8]
10003ed4:	429a      	cmp	r2, r3
10003ed6:	d220      	bcs.n	10003f1a <I2C_MASTER_TransmitHandler+0x226>
        {
          /* check for last byte and send_nack is set to true */
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003ed8:	68bb      	ldr	r3, [r7, #8]
10003eda:	68db      	ldr	r3, [r3, #12]
10003edc:	1c5a      	adds	r2, r3, #1
10003ede:	68bb      	ldr	r3, [r7, #8]
10003ee0:	689b      	ldr	r3, [r3, #8]
10003ee2:	429a      	cmp	r2, r3
10003ee4:	d108      	bne.n	10003ef8 <I2C_MASTER_TransmitHandler+0x204>
10003ee6:	68bb      	ldr	r3, [r7, #8]
10003ee8:	6a1b      	ldr	r3, [r3, #32]
10003eea:	2b01      	cmp	r3, #1
10003eec:	d104      	bne.n	10003ef8 <I2C_MASTER_TransmitHandler+0x204>
          {
            I2C_MASTER_ReceiveNACK(handle);
10003eee:	687b      	ldr	r3, [r7, #4]
10003ef0:	1c18      	adds	r0, r3, #0
10003ef2:	f7ff fe27 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
10003ef6:	e003      	b.n	10003f00 <I2C_MASTER_TransmitHandler+0x20c>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
10003ef8:	687b      	ldr	r3, [r7, #4]
10003efa:	1c18      	adds	r0, r3, #0
10003efc:	f7ff fe16 	bl	10003b2c <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10003f00:	68bb      	ldr	r3, [r7, #8]
10003f02:	68db      	ldr	r3, [r3, #12]
10003f04:	1c5a      	adds	r2, r3, #1
10003f06:	68bb      	ldr	r3, [r7, #8]
10003f08:	60da      	str	r2, [r3, #12]

          /*if index reaches fifo size - break*/
          if ((ptr_runtime->tx_data_index) >= fifo_min)
10003f0a:	68bb      	ldr	r3, [r7, #8]
10003f0c:	68da      	ldr	r2, [r3, #12]
10003f0e:	230f      	movs	r3, #15
10003f10:	18fb      	adds	r3, r7, r3
10003f12:	781b      	ldrb	r3, [r3, #0]
10003f14:	429a      	cmp	r2, r3
10003f16:	d301      	bcc.n	10003f1c <I2C_MASTER_TransmitHandler+0x228>
          {
            break;
10003f18:	e00c      	b.n	10003f34 <I2C_MASTER_TransmitHandler+0x240>
          }
        }
        else
        {
          break;
10003f1a:	e00b      	b.n	10003f34 <I2C_MASTER_TransmitHandler+0x240>
      }

      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /* fill the FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10003f1c:	687b      	ldr	r3, [r7, #4]
10003f1e:	1c18      	adds	r0, r3, #0
10003f20:	f7ff fda8 	bl	10003a74 <I2C_MASTER_IsTXFIFOFull>
10003f24:	1c03      	adds	r3, r0, #0
10003f26:	1c1a      	adds	r2, r3, #0
10003f28:	2301      	movs	r3, #1
10003f2a:	4053      	eors	r3, r2
10003f2c:	b2db      	uxtb	r3, r3
10003f2e:	2b00      	cmp	r3, #0
10003f30:	d1cc      	bne.n	10003ecc <I2C_MASTER_TransmitHandler+0x1d8>
10003f32:	e019      	b.n	10003f68 <I2C_MASTER_TransmitHandler+0x274>
10003f34:	e018      	b.n	10003f68 <I2C_MASTER_TransmitHandler+0x274>
   Direction = Receive, Tx FIFO disabled
 **********************************************************************************************************************/
    else
    {
      /* check for last byte and send_nack is set to true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10003f36:	68bb      	ldr	r3, [r7, #8]
10003f38:	68db      	ldr	r3, [r3, #12]
10003f3a:	1c5a      	adds	r2, r3, #1
10003f3c:	68bb      	ldr	r3, [r7, #8]
10003f3e:	689b      	ldr	r3, [r3, #8]
10003f40:	429a      	cmp	r2, r3
10003f42:	d108      	bne.n	10003f56 <I2C_MASTER_TransmitHandler+0x262>
10003f44:	68bb      	ldr	r3, [r7, #8]
10003f46:	6a1b      	ldr	r3, [r3, #32]
10003f48:	2b01      	cmp	r3, #1
10003f4a:	d104      	bne.n	10003f56 <I2C_MASTER_TransmitHandler+0x262>
      {
        I2C_MASTER_ReceiveNACK(handle);
10003f4c:	687b      	ldr	r3, [r7, #4]
10003f4e:	1c18      	adds	r0, r3, #0
10003f50:	f7ff fdf8 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
10003f54:	e003      	b.n	10003f5e <I2C_MASTER_TransmitHandler+0x26a>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
10003f56:	687b      	ldr	r3, [r7, #4]
10003f58:	1c18      	adds	r0, r3, #0
10003f5a:	f7ff fde7 	bl	10003b2c <I2C_MASTER_ReceiveACK>
      }
      ptr_runtime->tx_data_index++;
10003f5e:	68bb      	ldr	r3, [r7, #8]
10003f60:	68db      	ldr	r3, [r3, #12]
10003f62:	1c5a      	adds	r2, r3, #1
10003f64:	68bb      	ldr	r3, [r7, #8]
10003f66:	60da      	str	r2, [r3, #12]
    }

/***********************************************************************************************************************
   If last byte, then disable ACK event
 **********************************************************************************************************************/
     if (handle->runtime->tx_data_index == handle->runtime->tx_data_count)
10003f68:	687b      	ldr	r3, [r7, #4]
10003f6a:	689b      	ldr	r3, [r3, #8]
10003f6c:	68da      	ldr	r2, [r3, #12]
10003f6e:	687b      	ldr	r3, [r7, #4]
10003f70:	689b      	ldr	r3, [r3, #8]
10003f72:	689b      	ldr	r3, [r3, #8]
10003f74:	429a      	cmp	r2, r3
10003f76:	d106      	bne.n	10003f86 <I2C_MASTER_TransmitHandler+0x292>
     {
       I2C_MASTER_DisableEvent(handle,(uint32_t)XMC_I2C_CH_EVENT_ACK);
10003f78:	687a      	ldr	r2, [r7, #4]
10003f7a:	2380      	movs	r3, #128	; 0x80
10003f7c:	05db      	lsls	r3, r3, #23
10003f7e:	1c10      	adds	r0, r2, #0
10003f80:	1c19      	adds	r1, r3, #0
10003f82:	f7ff fdc3 	bl	10003b0c <I2C_MASTER_DisableEvent>
     }
  } /* end of else */
 } /* end of else */
}
10003f86:	46bd      	mov	sp, r7
10003f88:	b004      	add	sp, #16
10003f8a:	bd80      	pop	{r7, pc}

10003f8c <I2C_MASTER_lSendStop_JumpTo_TxCallback>:

/* Function to issue Send Stop command and jump to callback routine */
static void I2C_MASTER_lSendStop_JumpTo_TxCallback(I2C_MASTER_t *const handle)
{
10003f8c:	b580      	push	{r7, lr}
10003f8e:	b084      	sub	sp, #16
10003f90:	af00      	add	r7, sp, #0
10003f92:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10003f94:	687b      	ldr	r3, [r7, #4]
10003f96:	689b      	ldr	r3, [r3, #8]
10003f98:	60fb      	str	r3, [r7, #12]

  I2C_MASTER_DisableEvent(handle,((uint32_t)XMC_I2C_CH_EVENT_ACK ));
10003f9a:	687a      	ldr	r2, [r7, #4]
10003f9c:	2380      	movs	r3, #128	; 0x80
10003f9e:	05db      	lsls	r3, r3, #23
10003fa0:	1c10      	adds	r0, r2, #0
10003fa2:	1c19      	adds	r1, r3, #0
10003fa4:	f7ff fdb2 	bl	10003b0c <I2C_MASTER_DisableEvent>

  if (ptr_runtime->send_stop == true)
10003fa8:	68fb      	ldr	r3, [r7, #12]
10003faa:	69db      	ldr	r3, [r3, #28]
10003fac:	2b01      	cmp	r3, #1
10003fae:	d107      	bne.n	10003fc0 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x34>
  {
    ptr_runtime->bus_acquired = false;
10003fb0:	68fb      	ldr	r3, [r7, #12]
10003fb2:	2228      	movs	r2, #40	; 0x28
10003fb4:	2100      	movs	r1, #0
10003fb6:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStop(handle);
10003fb8:	687b      	ldr	r3, [r7, #4]
10003fba:	1c18      	adds	r0, r3, #0
10003fbc:	f7ff fdce 	bl	10003b5c <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003fc0:	46c0      	nop			; (mov r8, r8)
10003fc2:	687b      	ldr	r3, [r7, #4]
10003fc4:	681b      	ldr	r3, [r3, #0]
10003fc6:	1c18      	adds	r0, r3, #0
10003fc8:	f7ff fc66 	bl	10003898 <XMC_USIC_CH_GetTransmitBufferStatus>
10003fcc:	1e03      	subs	r3, r0, #0
10003fce:	2b80      	cmp	r3, #128	; 0x80
10003fd0:	d0f7      	beq.n	10003fc2 <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x36>

  /*All data is transmitted*/
  ptr_runtime->tx_busy = false;
10003fd2:	68fb      	ldr	r3, [r7, #12]
10003fd4:	2226      	movs	r2, #38	; 0x26
10003fd6:	2100      	movs	r1, #0
10003fd8:	5499      	strb	r1, [r3, r2]

  if (handle->config->tx_cbhandler != NULL)
10003fda:	687b      	ldr	r3, [r7, #4]
10003fdc:	685b      	ldr	r3, [r3, #4]
10003fde:	691b      	ldr	r3, [r3, #16]
10003fe0:	2b00      	cmp	r3, #0
10003fe2:	d003      	beq.n	10003fec <I2C_MASTER_lSendStop_JumpTo_TxCallback+0x60>
  {
    /*Execute the 'End of transmission' callback function*/
    handle->config->tx_cbhandler();
10003fe4:	687b      	ldr	r3, [r7, #4]
10003fe6:	685b      	ldr	r3, [r3, #4]
10003fe8:	691b      	ldr	r3, [r3, #16]
10003fea:	4798      	blx	r3
  }
}
10003fec:	46bd      	mov	sp, r7
10003fee:	b004      	add	sp, #16
10003ff0:	bd80      	pop	{r7, pc}
10003ff2:	46c0      	nop			; (mov r8, r8)

10003ff4 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
10003ff4:	b5b0      	push	{r4, r5, r7, lr}
10003ff6:	b08a      	sub	sp, #40	; 0x28
10003ff8:	af04      	add	r7, sp, #16
10003ffa:	60f8      	str	r0, [r7, #12]
10003ffc:	607a      	str	r2, [r7, #4]
10003ffe:	603b      	str	r3, [r7, #0]
10004000:	230b      	movs	r3, #11
10004002:	18fb      	adds	r3, r7, r3
10004004:	1c0a      	adds	r2, r1, #0
10004006:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
10004008:	2317      	movs	r3, #23
1000400a:	18fb      	adds	r3, r7, r3
1000400c:	2202      	movs	r2, #2
1000400e:	701a      	strb	r2, [r3, #0]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
10004010:	68fb      	ldr	r3, [r7, #12]
10004012:	685b      	ldr	r3, [r3, #4]
10004014:	2225      	movs	r2, #37	; 0x25
10004016:	5c9b      	ldrb	r3, [r3, r2]
10004018:	2b00      	cmp	r3, #0
1000401a:	d116      	bne.n	1000404a <I2C_MASTER_Receive+0x56>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
1000401c:	2317      	movs	r3, #23
1000401e:	18fc      	adds	r4, r7, r3
10004020:	68f8      	ldr	r0, [r7, #12]
10004022:	230b      	movs	r3, #11
10004024:	18fb      	adds	r3, r7, r3
10004026:	7819      	ldrb	r1, [r3, #0]
10004028:	687a      	ldr	r2, [r7, #4]
1000402a:	683d      	ldr	r5, [r7, #0]
1000402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000402e:	9300      	str	r3, [sp, #0]
10004030:	232c      	movs	r3, #44	; 0x2c
10004032:	18fb      	adds	r3, r7, r3
10004034:	781b      	ldrb	r3, [r3, #0]
10004036:	9301      	str	r3, [sp, #4]
10004038:	2330      	movs	r3, #48	; 0x30
1000403a:	18fb      	adds	r3, r7, r3
1000403c:	781b      	ldrb	r3, [r3, #0]
1000403e:	9302      	str	r3, [sp, #8]
10004040:	1c2b      	adds	r3, r5, #0
10004042:	f000 fa75 	bl	10004530 <I2C_MASTER_StartReceiveIRQ>
10004046:	1c03      	adds	r3, r0, #0
10004048:	7023      	strb	r3, [r4, #0]
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }

  return (status);
1000404a:	2317      	movs	r3, #23
1000404c:	18fb      	adds	r3, r7, r3
1000404e:	781b      	ldrb	r3, [r3, #0]
}
10004050:	1c18      	adds	r0, r3, #0
10004052:	46bd      	mov	sp, r7
10004054:	b006      	add	sp, #24
10004056:	bdb0      	pop	{r4, r5, r7, pc}

10004058 <I2C_MASTER_lReceive_FIFOData>:
/***********************************************************************************************************************
     Rx FIFO data
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_FIFOData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address,
                                     const uint32_t count)
{
10004058:	b580      	push	{r7, lr}
1000405a:	b086      	sub	sp, #24
1000405c:	af00      	add	r7, sp, #0
1000405e:	60f8      	str	r0, [r7, #12]
10004060:	607a      	str	r2, [r7, #4]
10004062:	603b      	str	r3, [r7, #0]
10004064:	230b      	movs	r3, #11
10004066:	18fb      	adds	r3, r7, r3
10004068:	1c0a      	adds	r2, r1, #0
1000406a:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
1000406c:	68fb      	ldr	r3, [r7, #12]
1000406e:	689b      	ldr	r3, [r3, #8]
10004070:	617b      	str	r3, [r7, #20]

  /*Clear the receive FIFO, configure the trigger lime
   * and enable the receive events*/
  XMC_USIC_CH_RXFIFO_Flush(handle->channel);
10004072:	68fb      	ldr	r3, [r7, #12]
10004074:	681b      	ldr	r3, [r3, #0]
10004076:	1c18      	adds	r0, r3, #0
10004078:	f7ff fc9e 	bl	100039b8 <XMC_USIC_CH_RXFIFO_Flush>

  /*Configure the FIFO trigger limit based on the required data size*/
  I2C_MASTER_lReconfigureRxFIFO(handle, count);
1000407c:	68fa      	ldr	r2, [r7, #12]
1000407e:	683b      	ldr	r3, [r7, #0]
10004080:	1c10      	adds	r0, r2, #0
10004082:	1c19      	adds	r1, r3, #0
10004084:	f000 fca4 	bl	100049d0 <I2C_MASTER_lReconfigureRxFIFO>

  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
10004088:	68fb      	ldr	r3, [r7, #12]
1000408a:	681a      	ldr	r2, [r3, #0]
1000408c:	23c0      	movs	r3, #192	; 0xc0
1000408e:	05db      	lsls	r3, r3, #23
10004090:	1c10      	adds	r0, r2, #0
10004092:	1c19      	adds	r1, r3, #0
10004094:	f7ff fc68 	bl	10003968 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
10004098:	230b      	movs	r3, #11
1000409a:	18fb      	adds	r3, r7, r3
1000409c:	781b      	ldrb	r3, [r3, #0]
1000409e:	2b00      	cmp	r3, #0
100040a0:	d100      	bne.n	100040a4 <I2C_MASTER_lReceive_FIFOData+0x4c>
100040a2:	e078      	b.n	10004196 <I2C_MASTER_lReceive_FIFOData+0x13e>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
100040a4:	68fb      	ldr	r3, [r7, #12]
100040a6:	685b      	ldr	r3, [r3, #4]
100040a8:	2224      	movs	r2, #36	; 0x24
100040aa:	5c9b      	ldrb	r3, [r3, r2]
100040ac:	2b01      	cmp	r3, #1
100040ae:	d015      	beq.n	100040dc <I2C_MASTER_lReceive_FIFOData+0x84>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
100040b0:	68fb      	ldr	r3, [r7, #12]
100040b2:	685b      	ldr	r3, [r3, #4]
100040b4:	2224      	movs	r2, #36	; 0x24
100040b6:	5c9b      	ldrb	r3, [r3, r2]
  XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
                                (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                           (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
100040b8:	2b02      	cmp	r3, #2
100040ba:	d00f      	beq.n	100040dc <I2C_MASTER_lReceive_FIFOData+0x84>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
100040bc:	68fa      	ldr	r2, [r7, #12]
100040be:	2380      	movs	r3, #128	; 0x80
100040c0:	05db      	lsls	r3, r3, #23
100040c2:	1c10      	adds	r0, r2, #0
100040c4:	1c19      	adds	r1, r3, #0
100040c6:	f7ff fd11 	bl	10003aec <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
100040ca:	68fb      	ldr	r3, [r7, #12]
100040cc:	6819      	ldr	r1, [r3, #0]
100040ce:	697b      	ldr	r3, [r7, #20]
100040d0:	2224      	movs	r2, #36	; 0x24
100040d2:	5c9b      	ldrb	r3, [r3, r2]
100040d4:	1c08      	adds	r0, r1, #0
100040d6:	1c19      	adds	r1, r3, #0
100040d8:	f7ff fc8e 	bl	100039f8 <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle,address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
100040dc:	68fa      	ldr	r2, [r7, #12]
100040de:	687b      	ldr	r3, [r7, #4]
100040e0:	1c10      	adds	r0, r2, #0
100040e2:	1c19      	adds	r1, r3, #0
100040e4:	2201      	movs	r2, #1
100040e6:	f000 f979 	bl	100043dc <I2C_MASTER_lSendStart_Or_RepeatedStart>
    I2C_MASTER_ReceiveACK(handle);
    }
    ptr_runtime->tx_data_index++;
    }
#endif
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
100040ea:	68fb      	ldr	r3, [r7, #12]
100040ec:	685b      	ldr	r3, [r3, #4]
100040ee:	2224      	movs	r2, #36	; 0x24
100040f0:	5c9b      	ldrb	r3, [r3, r2]
100040f2:	2b02      	cmp	r3, #2
100040f4:	d000      	beq.n	100040f8 <I2C_MASTER_lReceive_FIFOData+0xa0>
100040f6:	e0b2      	b.n	1000425e <I2C_MASTER_lReceive_FIFOData+0x206>
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
100040f8:	68fb      	ldr	r3, [r7, #12]
100040fa:	685b      	ldr	r3, [r3, #4]
100040fc:	2226      	movs	r2, #38	; 0x26
100040fe:	5c9b      	ldrb	r3, [r3, r2]
10004100:	2b00      	cmp	r3, #0
10004102:	d02e      	beq.n	10004162 <I2C_MASTER_lReceive_FIFOData+0x10a>
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
10004104:	e021      	b.n	1000414a <I2C_MASTER_lReceive_FIFOData+0xf2>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10004106:	697b      	ldr	r3, [r7, #20]
10004108:	68da      	ldr	r2, [r3, #12]
1000410a:	697b      	ldr	r3, [r7, #20]
1000410c:	689b      	ldr	r3, [r3, #8]
1000410e:	429a      	cmp	r2, r3
10004110:	d219      	bcs.n	10004146 <I2C_MASTER_lReceive_FIFOData+0xee>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10004112:	697b      	ldr	r3, [r7, #20]
10004114:	68db      	ldr	r3, [r3, #12]
10004116:	1c5a      	adds	r2, r3, #1
10004118:	697b      	ldr	r3, [r7, #20]
1000411a:	689b      	ldr	r3, [r3, #8]
1000411c:	429a      	cmp	r2, r3
1000411e:	d108      	bne.n	10004132 <I2C_MASTER_lReceive_FIFOData+0xda>
10004120:	697b      	ldr	r3, [r7, #20]
10004122:	6a1b      	ldr	r3, [r3, #32]
10004124:	2b01      	cmp	r3, #1
10004126:	d104      	bne.n	10004132 <I2C_MASTER_lReceive_FIFOData+0xda>
      {
          I2C_MASTER_ReceiveNACK(handle);
10004128:	68fb      	ldr	r3, [r7, #12]
1000412a:	1c18      	adds	r0, r3, #0
1000412c:	f7ff fd0a 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
10004130:	e003      	b.n	1000413a <I2C_MASTER_lReceive_FIFOData+0xe2>
      }
      else
        {
          I2C_MASTER_ReceiveACK(handle);
10004132:	68fb      	ldr	r3, [r7, #12]
10004134:	1c18      	adds	r0, r3, #0
10004136:	f7ff fcf9 	bl	10003b2c <I2C_MASTER_ReceiveACK>
        }
      ptr_runtime->tx_data_index++;
1000413a:	697b      	ldr	r3, [r7, #20]
1000413c:	68db      	ldr	r3, [r3, #12]
1000413e:	1c5a      	adds	r2, r3, #1
10004140:	697b      	ldr	r3, [r7, #20]
10004142:	60da      	str	r2, [r3, #12]
10004144:	e001      	b.n	1000414a <I2C_MASTER_lReceive_FIFOData+0xf2>
      }
      else
      {
        break;
10004146:	46c0      	nop			; (mov r8, r8)
10004148:	e089      	b.n	1000425e <I2C_MASTER_lReceive_FIFOData+0x206>
    if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)
    {
      if (handle->config->txFIFO_size != XMC_USIC_CH_FIFO_DISABLED)
      {
    /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000414a:	68fb      	ldr	r3, [r7, #12]
1000414c:	1c18      	adds	r0, r3, #0
1000414e:	f7ff fc91 	bl	10003a74 <I2C_MASTER_IsTXFIFOFull>
10004152:	1c03      	adds	r3, r0, #0
10004154:	1c1a      	adds	r2, r3, #0
10004156:	2301      	movs	r3, #1
10004158:	4053      	eors	r3, r2
1000415a:	b2db      	uxtb	r3, r3
1000415c:	2b00      	cmp	r3, #0
1000415e:	d1d2      	bne.n	10004106 <I2C_MASTER_lReceive_FIFOData+0xae>
10004160:	e07d      	b.n	1000425e <I2C_MASTER_lReceive_FIFOData+0x206>
    } /* end of while */
      }
      else
      {
        /* if it is last byte and send_nack true */
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10004162:	697b      	ldr	r3, [r7, #20]
10004164:	68db      	ldr	r3, [r3, #12]
10004166:	1c5a      	adds	r2, r3, #1
10004168:	697b      	ldr	r3, [r7, #20]
1000416a:	689b      	ldr	r3, [r3, #8]
1000416c:	429a      	cmp	r2, r3
1000416e:	d108      	bne.n	10004182 <I2C_MASTER_lReceive_FIFOData+0x12a>
10004170:	697b      	ldr	r3, [r7, #20]
10004172:	6a1b      	ldr	r3, [r3, #32]
10004174:	2b01      	cmp	r3, #1
10004176:	d104      	bne.n	10004182 <I2C_MASTER_lReceive_FIFOData+0x12a>
    {
      I2C_MASTER_ReceiveNACK(handle);
10004178:	68fb      	ldr	r3, [r7, #12]
1000417a:	1c18      	adds	r0, r3, #0
1000417c:	f7ff fce2 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
10004180:	e003      	b.n	1000418a <I2C_MASTER_lReceive_FIFOData+0x132>
    }
    else
    {
      I2C_MASTER_ReceiveACK(handle);
10004182:	68fb      	ldr	r3, [r7, #12]
10004184:	1c18      	adds	r0, r3, #0
10004186:	f7ff fcd1 	bl	10003b2c <I2C_MASTER_ReceiveACK>
    }
    ptr_runtime->tx_data_index++;
1000418a:	697b      	ldr	r3, [r7, #20]
1000418c:	68db      	ldr	r3, [r3, #12]
1000418e:	1c5a      	adds	r2, r3, #1
10004190:	697b      	ldr	r3, [r7, #20]
10004192:	60da      	str	r2, [r3, #12]
10004194:	e063      	b.n	1000425e <I2C_MASTER_lReceive_FIFOData+0x206>
    } /* end of if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT) */
  } /* end of if (send_start == true) */
  else
  {
    /* if Tx FIFO enabled */
    if (handle->config->txFIFO_size > 0)
10004196:	68fb      	ldr	r3, [r7, #12]
10004198:	685b      	ldr	r3, [r3, #4]
1000419a:	2226      	movs	r2, #38	; 0x26
1000419c:	5c9b      	ldrb	r3, [r3, r2]
1000419e:	2b00      	cmp	r3, #0
100041a0:	d036      	beq.n	10004210 <I2C_MASTER_lReceive_FIFOData+0x1b8>
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
100041a2:	68fb      	ldr	r3, [r7, #12]
100041a4:	681a      	ldr	r2, [r3, #0]
100041a6:	2380      	movs	r3, #128	; 0x80
100041a8:	05db      	lsls	r3, r3, #23
100041aa:	1c10      	adds	r0, r2, #0
100041ac:	1c19      	adds	r1, r3, #0
100041ae:	f7ff fba3 	bl	100038f8 <XMC_USIC_CH_TXFIFO_DisableEvent>
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100041b2:	e021      	b.n	100041f8 <I2C_MASTER_lReceive_FIFOData+0x1a0>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
100041b4:	697b      	ldr	r3, [r7, #20]
100041b6:	68da      	ldr	r2, [r3, #12]
100041b8:	697b      	ldr	r3, [r7, #20]
100041ba:	689b      	ldr	r3, [r3, #8]
100041bc:	429a      	cmp	r2, r3
100041be:	d219      	bcs.n	100041f4 <I2C_MASTER_lReceive_FIFOData+0x19c>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
100041c0:	697b      	ldr	r3, [r7, #20]
100041c2:	68db      	ldr	r3, [r3, #12]
100041c4:	1c5a      	adds	r2, r3, #1
100041c6:	697b      	ldr	r3, [r7, #20]
100041c8:	689b      	ldr	r3, [r3, #8]
100041ca:	429a      	cmp	r2, r3
100041cc:	d108      	bne.n	100041e0 <I2C_MASTER_lReceive_FIFOData+0x188>
               (ptr_runtime->send_nack == true))
100041ce:	697b      	ldr	r3, [r7, #20]
100041d0:	6a1b      	ldr	r3, [r3, #32]
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
100041d2:	2b01      	cmp	r3, #1
100041d4:	d104      	bne.n	100041e0 <I2C_MASTER_lReceive_FIFOData+0x188>
               (ptr_runtime->send_nack == true))
          {
            I2C_MASTER_ReceiveNACK(handle);
100041d6:	68fb      	ldr	r3, [r7, #12]
100041d8:	1c18      	adds	r0, r3, #0
100041da:	f7ff fcb3 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
100041de:	e003      	b.n	100041e8 <I2C_MASTER_lReceive_FIFOData+0x190>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
100041e0:	68fb      	ldr	r3, [r7, #12]
100041e2:	1c18      	adds	r0, r3, #0
100041e4:	f7ff fca2 	bl	10003b2c <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
100041e8:	697b      	ldr	r3, [r7, #20]
100041ea:	68db      	ldr	r3, [r3, #12]
100041ec:	1c5a      	adds	r2, r3, #1
100041ee:	697b      	ldr	r3, [r7, #20]
100041f0:	60da      	str	r2, [r3, #12]
100041f2:	e001      	b.n	100041f8 <I2C_MASTER_lReceive_FIFOData+0x1a0>
        }
        else
        {
          break;
100041f4:	46c0      	nop			; (mov r8, r8)
100041f6:	e032      	b.n	1000425e <I2C_MASTER_lReceive_FIFOData+0x206>
    if (handle->config->txFIFO_size > 0)
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,
                                     (uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100041f8:	68fb      	ldr	r3, [r7, #12]
100041fa:	1c18      	adds	r0, r3, #0
100041fc:	f7ff fc3a 	bl	10003a74 <I2C_MASTER_IsTXFIFOFull>
10004200:	1c03      	adds	r3, r0, #0
10004202:	1c1a      	adds	r2, r3, #0
10004204:	2301      	movs	r3, #1
10004206:	4053      	eors	r3, r2
10004208:	b2db      	uxtb	r3, r3
1000420a:	2b00      	cmp	r3, #0
1000420c:	d1d2      	bne.n	100041b4 <I2C_MASTER_lReceive_FIFOData+0x15c>
1000420e:	e026      	b.n	1000425e <I2C_MASTER_lReceive_FIFOData+0x206>
        }
      } /* end of while */
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10004210:	697b      	ldr	r3, [r7, #20]
10004212:	68da      	ldr	r2, [r3, #12]
10004214:	697b      	ldr	r3, [r7, #20]
10004216:	689b      	ldr	r3, [r3, #8]
10004218:	429a      	cmp	r2, r3
1000421a:	d220      	bcs.n	1000425e <I2C_MASTER_lReceive_FIFOData+0x206>
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
1000421c:	697b      	ldr	r3, [r7, #20]
1000421e:	68db      	ldr	r3, [r3, #12]
10004220:	1c5a      	adds	r2, r3, #1
10004222:	697b      	ldr	r3, [r7, #20]
10004224:	689b      	ldr	r3, [r3, #8]
10004226:	429a      	cmp	r2, r3
10004228:	d108      	bne.n	1000423c <I2C_MASTER_lReceive_FIFOData+0x1e4>
             (ptr_runtime->send_nack == true))
1000422a:	697b      	ldr	r3, [r7, #20]
1000422c:	6a1b      	ldr	r3, [r3, #32]
    }
    else  /* Tx FIFO disabled and Rx FIFO enabled */
    {
      if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
      {
        if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) &&
1000422e:	2b01      	cmp	r3, #1
10004230:	d104      	bne.n	1000423c <I2C_MASTER_lReceive_FIFOData+0x1e4>
             (ptr_runtime->send_nack == true))
        {
          I2C_MASTER_ReceiveNACK(handle);
10004232:	68fb      	ldr	r3, [r7, #12]
10004234:	1c18      	adds	r0, r3, #0
10004236:	f7ff fc85 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
1000423a:	e00b      	b.n	10004254 <I2C_MASTER_lReceive_FIFOData+0x1fc>
        }
        else
        {
          XMC_I2C_CH_ClearStatusFlag(handle->channel, ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED |
1000423c:	68fb      	ldr	r3, [r7, #12]
1000423e:	681a      	ldr	r2, [r3, #0]
10004240:	23f2      	movs	r3, #242	; 0xf2
10004242:	021b      	lsls	r3, r3, #8
10004244:	1c10      	adds	r0, r2, #0
10004246:	1c19      	adds	r1, r3, #0
10004248:	f7ff fbf2 	bl	10003a30 <XMC_I2C_CH_ClearStatusFlag>
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION|
                                              (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION |
                          (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
          I2C_MASTER_ReceiveACK(handle);
1000424c:	68fb      	ldr	r3, [r7, #12]
1000424e:	1c18      	adds	r0, r3, #0
10004250:	f7ff fc6c 	bl	10003b2c <I2C_MASTER_ReceiveACK>
        }
        ptr_runtime->tx_data_index++;
10004254:	697b      	ldr	r3, [r7, #20]
10004256:	68db      	ldr	r3, [r3, #12]
10004258:	1c5a      	adds	r2, r3, #1
1000425a:	697b      	ldr	r3, [r7, #20]
1000425c:	60da      	str	r2, [r3, #12]
      }
    } /* end of else */
   } /* end of  if(send_start == false) */
}
1000425e:	46bd      	mov	sp, r7
10004260:	b006      	add	sp, #24
10004262:	bd80      	pop	{r7, pc}

10004264 <I2C_MASTER_lReceive_StdData>:
/***********************************************************************************************************************
    Standard receive mode
***********************************************************************************************************************/
static void I2C_MASTER_lReceive_StdData(I2C_MASTER_t * const handle, bool send_start, const uint32_t address)
{
10004264:	b580      	push	{r7, lr}
10004266:	b086      	sub	sp, #24
10004268:	af00      	add	r7, sp, #0
1000426a:	60f8      	str	r0, [r7, #12]
1000426c:	607a      	str	r2, [r7, #4]
1000426e:	230b      	movs	r3, #11
10004270:	18fb      	adds	r3, r7, r3
10004272:	1c0a      	adds	r2, r1, #0
10004274:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
10004276:	68fb      	ldr	r3, [r7, #12]
10004278:	689b      	ldr	r3, [r3, #8]
1000427a:	617b      	str	r3, [r7, #20]

  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
1000427c:	68fb      	ldr	r3, [r7, #12]
1000427e:	681a      	ldr	r2, [r3, #0]
10004280:	23c0      	movs	r3, #192	; 0xc0
10004282:	021b      	lsls	r3, r3, #8
10004284:	1c10      	adds	r0, r2, #0
10004286:	1c19      	adds	r1, r3, #0
10004288:	f7ff fae8 	bl	1000385c <XMC_USIC_CH_EnableEvent>
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
1000428c:	230b      	movs	r3, #11
1000428e:	18fb      	adds	r3, r7, r3
10004290:	781b      	ldrb	r3, [r3, #0]
10004292:	2b00      	cmp	r3, #0
10004294:	d049      	beq.n	1000432a <I2C_MASTER_lReceive_StdData+0xc6>
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
10004296:	68fb      	ldr	r3, [r7, #12]
10004298:	685b      	ldr	r3, [r3, #4]
1000429a:	2224      	movs	r2, #36	; 0x24
1000429c:	5c9b      	ldrb	r3, [r3, r2]
1000429e:	2b01      	cmp	r3, #1
100042a0:	d015      	beq.n	100042ce <I2C_MASTER_lReceive_StdData+0x6a>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
100042a2:	68fb      	ldr	r3, [r7, #12]
100042a4:	685b      	ldr	r3, [r3, #4]
100042a6:	2224      	movs	r2, #36	; 0x24
100042a8:	5c9b      	ldrb	r3, [r3, r2]
  XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE |
                                                      (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));

  if (send_start == true)
  {
  if(!((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
100042aa:	2b02      	cmp	r3, #2
100042ac:	d00f      	beq.n	100042ce <I2C_MASTER_lReceive_StdData+0x6a>
     (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT)))
  {
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
100042ae:	68fa      	ldr	r2, [r7, #12]
100042b0:	2380      	movs	r3, #128	; 0x80
100042b2:	05db      	lsls	r3, r3, #23
100042b4:	1c10      	adds	r0, r2, #0
100042b6:	1c19      	adds	r1, r3, #0
100042b8:	f7ff fc18 	bl	10003aec <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
100042bc:	68fb      	ldr	r3, [r7, #12]
100042be:	6819      	ldr	r1, [r3, #0]
100042c0:	697b      	ldr	r3, [r7, #20]
100042c2:	2224      	movs	r2, #36	; 0x24
100042c4:	5c9b      	ldrb	r3, [r3, r2]
100042c6:	1c08      	adds	r0, r1, #0
100042c8:	1c19      	adds	r1, r3, #0
100042ca:	f7ff fb95 	bl	100039f8 <XMC_I2C_CH_SetInterruptNodePointer>
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);
100042ce:	68fa      	ldr	r2, [r7, #12]
100042d0:	687b      	ldr	r3, [r7, #4]
100042d2:	1c10      	adds	r0, r2, #0
100042d4:	1c19      	adds	r1, r3, #0
100042d6:	2201      	movs	r2, #1
100042d8:	f000 f880 	bl	100043dc <I2C_MASTER_lSendStart_Or_RepeatedStart>

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
100042dc:	68fb      	ldr	r3, [r7, #12]
100042de:	685b      	ldr	r3, [r3, #4]
100042e0:	2224      	movs	r2, #36	; 0x24
100042e2:	5c9b      	ldrb	r3, [r3, r2]
100042e4:	2b01      	cmp	r3, #1
100042e6:	d006      	beq.n	100042f6 <I2C_MASTER_lReceive_StdData+0x92>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
100042e8:	68fb      	ldr	r3, [r7, #12]
100042ea:	685b      	ldr	r3, [r3, #4]
100042ec:	2224      	movs	r2, #36	; 0x24
100042ee:	5c9b      	ldrb	r3, [r3, r2]
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
  }
    I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_READ);

    if ((handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA) ||
100042f0:	2b02      	cmp	r3, #2
100042f2:	d000      	beq.n	100042f6 <I2C_MASTER_lReceive_StdData+0x92>
100042f4:	e06e      	b.n	100043d4 <I2C_MASTER_lReceive_StdData+0x170>
        (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DIRECT))
  {
    if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
100042f6:	697b      	ldr	r3, [r7, #20]
100042f8:	68db      	ldr	r3, [r3, #12]
100042fa:	1c5a      	adds	r2, r3, #1
100042fc:	697b      	ldr	r3, [r7, #20]
100042fe:	689b      	ldr	r3, [r3, #8]
10004300:	429a      	cmp	r2, r3
10004302:	d108      	bne.n	10004316 <I2C_MASTER_lReceive_StdData+0xb2>
10004304:	697b      	ldr	r3, [r7, #20]
10004306:	6a1b      	ldr	r3, [r3, #32]
10004308:	2b01      	cmp	r3, #1
1000430a:	d104      	bne.n	10004316 <I2C_MASTER_lReceive_StdData+0xb2>
    {
        I2C_MASTER_ReceiveNACK(handle);
1000430c:	68fb      	ldr	r3, [r7, #12]
1000430e:	1c18      	adds	r0, r3, #0
10004310:	f7ff fc18 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
10004314:	e003      	b.n	1000431e <I2C_MASTER_lReceive_StdData+0xba>
    }
    else
    {
    I2C_MASTER_ReceiveACK(handle);
10004316:	68fb      	ldr	r3, [r7, #12]
10004318:	1c18      	adds	r0, r3, #0
1000431a:	f7ff fc07 	bl	10003b2c <I2C_MASTER_ReceiveACK>
      }
    ptr_runtime->tx_data_index++;
1000431e:	697b      	ldr	r3, [r7, #20]
10004320:	68db      	ldr	r3, [r3, #12]
10004322:	1c5a      	adds	r2, r3, #1
10004324:	697b      	ldr	r3, [r7, #20]
10004326:	60da      	str	r2, [r3, #12]
10004328:	e054      	b.n	100043d4 <I2C_MASTER_lReceive_StdData+0x170>
  else
  {
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is disabled
***********************************************************************************************************************/
    if (handle->config->txFIFO_size == 0)
1000432a:	68fb      	ldr	r3, [r7, #12]
1000432c:	685b      	ldr	r3, [r3, #4]
1000432e:	2226      	movs	r2, #38	; 0x26
10004330:	5c9b      	ldrb	r3, [r3, r2]
10004332:	2b00      	cmp	r3, #0
10004334:	d119      	bne.n	1000436a <I2C_MASTER_lReceive_StdData+0x106>
    {
      if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10004336:	697b      	ldr	r3, [r7, #20]
10004338:	68db      	ldr	r3, [r3, #12]
1000433a:	1c5a      	adds	r2, r3, #1
1000433c:	697b      	ldr	r3, [r7, #20]
1000433e:	689b      	ldr	r3, [r3, #8]
10004340:	429a      	cmp	r2, r3
10004342:	d108      	bne.n	10004356 <I2C_MASTER_lReceive_StdData+0xf2>
10004344:	697b      	ldr	r3, [r7, #20]
10004346:	6a1b      	ldr	r3, [r3, #32]
10004348:	2b01      	cmp	r3, #1
1000434a:	d104      	bne.n	10004356 <I2C_MASTER_lReceive_StdData+0xf2>
      {
        I2C_MASTER_ReceiveNACK(handle);
1000434c:	68fb      	ldr	r3, [r7, #12]
1000434e:	1c18      	adds	r0, r3, #0
10004350:	f7ff fbf8 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
10004354:	e003      	b.n	1000435e <I2C_MASTER_lReceive_StdData+0xfa>
      }
      else
      {
        I2C_MASTER_ReceiveACK(handle);
10004356:	68fb      	ldr	r3, [r7, #12]
10004358:	1c18      	adds	r0, r3, #0
1000435a:	f7ff fbe7 	bl	10003b2c <I2C_MASTER_ReceiveACK>
      }

      ptr_runtime->tx_data_index++;
1000435e:	697b      	ldr	r3, [r7, #20]
10004360:	68db      	ldr	r3, [r3, #12]
10004362:	1c5a      	adds	r2, r3, #1
10004364:	697b      	ldr	r3, [r7, #20]
10004366:	60da      	str	r2, [r3, #12]
10004368:	e034      	b.n	100043d4 <I2C_MASTER_lReceive_StdData+0x170>
/***********************************************************************************************************************
     send_start flag is set to false and Tx FIFO is enabled
***********************************************************************************************************************/
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
1000436a:	68fb      	ldr	r3, [r7, #12]
1000436c:	681a      	ldr	r2, [r3, #0]
1000436e:	2380      	movs	r3, #128	; 0x80
10004370:	05db      	lsls	r3, r3, #23
10004372:	1c10      	adds	r0, r2, #0
10004374:	1c19      	adds	r1, r3, #0
10004376:	f7ff fabf 	bl	100038f8 <XMC_USIC_CH_TXFIFO_DisableEvent>

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000437a:	e020      	b.n	100043be <I2C_MASTER_lReceive_StdData+0x15a>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
1000437c:	697b      	ldr	r3, [r7, #20]
1000437e:	68da      	ldr	r2, [r3, #12]
10004380:	697b      	ldr	r3, [r7, #20]
10004382:	689b      	ldr	r3, [r3, #8]
10004384:	429a      	cmp	r2, r3
10004386:	d219      	bcs.n	100043bc <I2C_MASTER_lReceive_StdData+0x158>
        {
          if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
10004388:	697b      	ldr	r3, [r7, #20]
1000438a:	68db      	ldr	r3, [r3, #12]
1000438c:	1c5a      	adds	r2, r3, #1
1000438e:	697b      	ldr	r3, [r7, #20]
10004390:	689b      	ldr	r3, [r3, #8]
10004392:	429a      	cmp	r2, r3
10004394:	d108      	bne.n	100043a8 <I2C_MASTER_lReceive_StdData+0x144>
10004396:	697b      	ldr	r3, [r7, #20]
10004398:	6a1b      	ldr	r3, [r3, #32]
1000439a:	2b01      	cmp	r3, #1
1000439c:	d104      	bne.n	100043a8 <I2C_MASTER_lReceive_StdData+0x144>
          {
            I2C_MASTER_ReceiveNACK(handle);
1000439e:	68fb      	ldr	r3, [r7, #12]
100043a0:	1c18      	adds	r0, r3, #0
100043a2:	f7ff fbcf 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
100043a6:	e003      	b.n	100043b0 <I2C_MASTER_lReceive_StdData+0x14c>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
100043a8:	68fb      	ldr	r3, [r7, #12]
100043aa:	1c18      	adds	r0, r3, #0
100043ac:	f7ff fbbe 	bl	10003b2c <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
100043b0:	697b      	ldr	r3, [r7, #20]
100043b2:	68db      	ldr	r3, [r3, #12]
100043b4:	1c5a      	adds	r2, r3, #1
100043b6:	697b      	ldr	r3, [r7, #20]
100043b8:	60da      	str	r2, [r3, #12]
100043ba:	e000      	b.n	100043be <I2C_MASTER_lReceive_StdData+0x15a>
        }
        else
        {
          break;
100043bc:	e00a      	b.n	100043d4 <I2C_MASTER_lReceive_StdData+0x170>
    else
    {
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);

      /*Fill the transmit FIFO */
      while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100043be:	68fb      	ldr	r3, [r7, #12]
100043c0:	1c18      	adds	r0, r3, #0
100043c2:	f7ff fb57 	bl	10003a74 <I2C_MASTER_IsTXFIFOFull>
100043c6:	1c03      	adds	r3, r0, #0
100043c8:	1c1a      	adds	r2, r3, #0
100043ca:	2301      	movs	r3, #1
100043cc:	4053      	eors	r3, r2
100043ce:	b2db      	uxtb	r3, r3
100043d0:	2b00      	cmp	r3, #0
100043d2:	d1d3      	bne.n	1000437c <I2C_MASTER_lReceive_StdData+0x118>
          break;
        }
      } /* end of while */
    } /* end of else */
  } /* end of else */
} /* end of function */
100043d4:	46bd      	mov	sp, r7
100043d6:	b006      	add	sp, #24
100043d8:	bd80      	pop	{r7, pc}
100043da:	46c0      	nop			; (mov r8, r8)

100043dc <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
100043dc:	b580      	push	{r7, lr}
100043de:	b084      	sub	sp, #16
100043e0:	af00      	add	r7, sp, #0
100043e2:	60f8      	str	r0, [r7, #12]
100043e4:	60b9      	str	r1, [r7, #8]
100043e6:	1dfb      	adds	r3, r7, #7
100043e8:	701a      	strb	r2, [r3, #0]
  if (handle->runtime->bus_acquired == true)
100043ea:	68fb      	ldr	r3, [r7, #12]
100043ec:	689b      	ldr	r3, [r3, #8]
100043ee:	2228      	movs	r2, #40	; 0x28
100043f0:	5c9b      	ldrb	r3, [r3, r2]
100043f2:	b2db      	uxtb	r3, r3
100043f4:	2b00      	cmp	r3, #0
100043f6:	d00a      	beq.n	1000440e <I2C_MASTER_lSendStart_Or_RepeatedStart+0x32>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
100043f8:	68bb      	ldr	r3, [r7, #8]
100043fa:	b29b      	uxth	r3, r3
100043fc:	1c19      	adds	r1, r3, #0
100043fe:	68fa      	ldr	r2, [r7, #12]
10004400:	1dfb      	adds	r3, r7, #7
10004402:	781b      	ldrb	r3, [r3, #0]
10004404:	1c10      	adds	r0, r2, #0
10004406:	1c1a      	adds	r2, r3, #0
10004408:	f7ff fbd6 	bl	10003bb8 <I2C_MASTER_SendRepeatedStart>
1000440c:	e00e      	b.n	1000442c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x50>
  }
  else
  {
    handle->runtime->bus_acquired = true;
1000440e:	68fb      	ldr	r3, [r7, #12]
10004410:	689b      	ldr	r3, [r3, #8]
10004412:	2228      	movs	r2, #40	; 0x28
10004414:	2101      	movs	r1, #1
10004416:	5499      	strb	r1, [r3, r2]
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
10004418:	68bb      	ldr	r3, [r7, #8]
1000441a:	b29b      	uxth	r3, r3
1000441c:	1c19      	adds	r1, r3, #0
1000441e:	68fa      	ldr	r2, [r7, #12]
10004420:	1dfb      	adds	r3, r7, #7
10004422:	781b      	ldrb	r3, [r3, #0]
10004424:	1c10      	adds	r0, r2, #0
10004426:	1c1a      	adds	r2, r3, #0
10004428:	f7ff fbaa 	bl	10003b80 <I2C_MASTER_SendStart>
  }
}
1000442c:	46bd      	mov	sp, r7
1000442e:	b004      	add	sp, #16
10004430:	bd80      	pop	{r7, pc}
10004432:	46c0      	nop			; (mov r8, r8)

10004434 <I2C_MASTER_StartTransmitIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartTransmitIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                                uint8_t *data, const uint32_t size, bool send_stop)
{
10004434:	b580      	push	{r7, lr}
10004436:	b086      	sub	sp, #24
10004438:	af00      	add	r7, sp, #0
1000443a:	60f8      	str	r0, [r7, #12]
1000443c:	607a      	str	r2, [r7, #4]
1000443e:	603b      	str	r3, [r7, #0]
10004440:	230b      	movs	r3, #11
10004442:	18fb      	adds	r3, r7, r3
10004444:	1c0a      	adds	r2, r1, #0
10004446:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
10004448:	2317      	movs	r3, #23
1000444a:	18fb      	adds	r3, r7, r3
1000444c:	2202      	movs	r2, #2
1000444e:	701a      	strb	r2, [r3, #0]
  ptr_runtime = handle->runtime;
10004450:	68fb      	ldr	r3, [r7, #12]
10004452:	689b      	ldr	r3, [r3, #8]
10004454:	613b      	str	r3, [r7, #16]

  /* If send_stop is set to TRUE, bus_acquired flag is set to FALSE.
   If send_start is set to FALSE and bus_acquired is set to FALSE then API will return an error. */
  if (((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U))
10004456:	230b      	movs	r3, #11
10004458:	18fb      	adds	r3, r7, r3
1000445a:	781b      	ldrb	r3, [r3, #0]
1000445c:	2201      	movs	r2, #1
1000445e:	4053      	eors	r3, r2
10004460:	b2db      	uxtb	r3, r3
10004462:	2b00      	cmp	r3, #0
10004464:	d009      	beq.n	1000447a <I2C_MASTER_StartTransmitIRQ+0x46>
10004466:	68fb      	ldr	r3, [r7, #12]
10004468:	689b      	ldr	r3, [r3, #8]
1000446a:	2228      	movs	r2, #40	; 0x28
1000446c:	5c9b      	ldrb	r3, [r3, r2]
1000446e:	b2db      	uxtb	r3, r3
10004470:	2201      	movs	r2, #1
10004472:	4053      	eors	r3, r2
10004474:	b2db      	uxtb	r3, r3
10004476:	2b00      	cmp	r3, #0
10004478:	d105      	bne.n	10004486 <I2C_MASTER_StartTransmitIRQ+0x52>
1000447a:	683b      	ldr	r3, [r7, #0]
1000447c:	2b00      	cmp	r3, #0
1000447e:	d002      	beq.n	10004486 <I2C_MASTER_StartTransmitIRQ+0x52>
10004480:	6a3b      	ldr	r3, [r7, #32]
10004482:	2b00      	cmp	r3, #0
10004484:	d104      	bne.n	10004490 <I2C_MASTER_StartTransmitIRQ+0x5c>
  {
  status = I2C_MASTER_STATUS_FAILURE;
10004486:	2317      	movs	r3, #23
10004488:	18fb      	adds	r3, r7, r3
1000448a:	2201      	movs	r2, #1
1000448c:	701a      	strb	r2, [r3, #0]
1000448e:	e047      	b.n	10004520 <I2C_MASTER_StartTransmitIRQ+0xec>
  }
  else
  {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_TRANSMIT;
10004490:	693b      	ldr	r3, [r7, #16]
10004492:	2200      	movs	r2, #0
10004494:	619a      	str	r2, [r3, #24]

    if (ptr_runtime->tx_busy == false)
10004496:	693b      	ldr	r3, [r7, #16]
10004498:	2226      	movs	r2, #38	; 0x26
1000449a:	5c9b      	ldrb	r3, [r3, r2]
1000449c:	b2db      	uxtb	r3, r3
1000449e:	2201      	movs	r2, #1
100044a0:	4053      	eors	r3, r2
100044a2:	b2db      	uxtb	r3, r3
100044a4:	2b00      	cmp	r3, #0
100044a6:	d03b      	beq.n	10004520 <I2C_MASTER_StartTransmitIRQ+0xec>
    {
    /*If there is no transmission in progress, obtain the address of data, size of data*/
    ptr_runtime->tx_data = data;
100044a8:	693b      	ldr	r3, [r7, #16]
100044aa:	683a      	ldr	r2, [r7, #0]
100044ac:	601a      	str	r2, [r3, #0]
    ptr_runtime->tx_data_count = size;
100044ae:	693b      	ldr	r3, [r7, #16]
100044b0:	6a3a      	ldr	r2, [r7, #32]
100044b2:	609a      	str	r2, [r3, #8]

    /*Initialize to first index and set the busy flag*/
    ptr_runtime->tx_data_index = 0U;
100044b4:	693b      	ldr	r3, [r7, #16]
100044b6:	2200      	movs	r2, #0
100044b8:	60da      	str	r2, [r3, #12]
    ptr_runtime->tx_busy = true;
100044ba:	693b      	ldr	r3, [r7, #16]
100044bc:	2226      	movs	r2, #38	; 0x26
100044be:	2101      	movs	r1, #1
100044c0:	5499      	strb	r1, [r3, r2]
    ptr_runtime->send_stop = send_stop;
100044c2:	2324      	movs	r3, #36	; 0x24
100044c4:	18fb      	adds	r3, r7, r3
100044c6:	781a      	ldrb	r2, [r3, #0]
100044c8:	693b      	ldr	r3, [r7, #16]
100044ca:	61da      	str	r2, [r3, #28]

    /* Enable ACK event */
    I2C_MASTER_EnableEvent(handle, (uint32_t)XMC_I2C_CH_EVENT_ACK);
100044cc:	68fa      	ldr	r2, [r7, #12]
100044ce:	2380      	movs	r3, #128	; 0x80
100044d0:	05db      	lsls	r3, r3, #23
100044d2:	1c10      	adds	r0, r2, #0
100044d4:	1c19      	adds	r1, r3, #0
100044d6:	f7ff fb09 	bl	10003aec <I2C_MASTER_EnableEvent>
    XMC_I2C_CH_SetInterruptNodePointer(handle->channel,ptr_runtime->tx_ack_sr);
100044da:	68fb      	ldr	r3, [r7, #12]
100044dc:	6819      	ldr	r1, [r3, #0]
100044de:	693b      	ldr	r3, [r7, #16]
100044e0:	2224      	movs	r2, #36	; 0x24
100044e2:	5c9b      	ldrb	r3, [r3, r2]
100044e4:	1c08      	adds	r0, r1, #0
100044e6:	1c19      	adds	r1, r3, #0
100044e8:	f7ff fa86 	bl	100039f8 <XMC_I2C_CH_SetInterruptNodePointer>

    if (send_start == true)
100044ec:	230b      	movs	r3, #11
100044ee:	18fb      	adds	r3, r7, r3
100044f0:	781b      	ldrb	r3, [r3, #0]
100044f2:	2b00      	cmp	r3, #0
100044f4:	d007      	beq.n	10004506 <I2C_MASTER_StartTransmitIRQ+0xd2>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, address, (XMC_I2C_CH_CMD_t)XMC_I2C_CH_CMD_WRITE);
100044f6:	68fa      	ldr	r2, [r7, #12]
100044f8:	687b      	ldr	r3, [r7, #4]
100044fa:	1c10      	adds	r0, r2, #0
100044fc:	1c19      	adds	r1, r3, #0
100044fe:	2200      	movs	r2, #0
10004500:	f7ff ff6c 	bl	100043dc <I2C_MASTER_lSendStart_Or_RepeatedStart>
10004504:	e008      	b.n	10004518 <I2C_MASTER_StartTransmitIRQ+0xe4>
    }
    else
    {
      /*Trigger the Ack interrupt*/
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)ptr_runtime->tx_ack_sr);
10004506:	68fb      	ldr	r3, [r7, #12]
10004508:	6819      	ldr	r1, [r3, #0]
1000450a:	693b      	ldr	r3, [r7, #16]
1000450c:	2224      	movs	r2, #36	; 0x24
1000450e:	5c9b      	ldrb	r3, [r3, r2]
10004510:	1c08      	adds	r0, r1, #0
10004512:	1c19      	adds	r1, r3, #0
10004514:	f7ff f9ce 	bl	100038b4 <XMC_USIC_CH_TriggerServiceRequest>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
10004518:	2317      	movs	r3, #23
1000451a:	18fb      	adds	r3, r7, r3
1000451c:	2200      	movs	r2, #0
1000451e:	701a      	strb	r2, [r3, #0]
  }
  }
  return (status);
10004520:	2317      	movs	r3, #23
10004522:	18fb      	adds	r3, r7, r3
10004524:	781b      	ldrb	r3, [r3, #0]
}
10004526:	1c18      	adds	r0, r3, #0
10004528:	46bd      	mov	sp, r7
1000452a:	b006      	add	sp, #24
1000452c:	bd80      	pop	{r7, pc}
1000452e:	46c0      	nop			; (mov r8, r8)

10004530 <I2C_MASTER_StartReceiveIRQ>:
#endif

#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
I2C_MASTER_STATUS_t I2C_MASTER_StartReceiveIRQ(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                               uint8_t * data, const uint32_t count, bool send_stop, bool send_nack)
{
10004530:	b580      	push	{r7, lr}
10004532:	b086      	sub	sp, #24
10004534:	af00      	add	r7, sp, #0
10004536:	60f8      	str	r0, [r7, #12]
10004538:	607a      	str	r2, [r7, #4]
1000453a:	603b      	str	r3, [r7, #0]
1000453c:	230b      	movs	r3, #11
1000453e:	18fb      	adds	r3, r7, r3
10004540:	1c0a      	adds	r2, r1, #0
10004542:	701a      	strb	r2, [r3, #0]
  I2C_MASTER_STATUS_t status;
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  status = I2C_MASTER_STATUS_BUSY;
10004544:	2317      	movs	r3, #23
10004546:	18fb      	adds	r3, r7, r3
10004548:	2202      	movs	r2, #2
1000454a:	701a      	strb	r2, [r3, #0]
  ptr_runtime = handle->runtime;
1000454c:	68fb      	ldr	r3, [r7, #12]
1000454e:	689b      	ldr	r3, [r3, #8]
10004550:	613b      	str	r3, [r7, #16]

  if (((handle == NULL) || ((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) ||
10004552:	68fb      	ldr	r3, [r7, #12]
10004554:	2b00      	cmp	r3, #0
10004556:	d017      	beq.n	10004588 <I2C_MASTER_StartReceiveIRQ+0x58>
10004558:	230b      	movs	r3, #11
1000455a:	18fb      	adds	r3, r7, r3
1000455c:	781b      	ldrb	r3, [r3, #0]
1000455e:	2201      	movs	r2, #1
10004560:	4053      	eors	r3, r2
10004562:	b2db      	uxtb	r3, r3
10004564:	2b00      	cmp	r3, #0
10004566:	d009      	beq.n	1000457c <I2C_MASTER_StartReceiveIRQ+0x4c>
10004568:	68fb      	ldr	r3, [r7, #12]
1000456a:	689b      	ldr	r3, [r3, #8]
1000456c:	2228      	movs	r2, #40	; 0x28
1000456e:	5c9b      	ldrb	r3, [r3, r2]
10004570:	b2db      	uxtb	r3, r3
10004572:	2201      	movs	r2, #1
10004574:	4053      	eors	r3, r2
10004576:	b2db      	uxtb	r3, r3
10004578:	2b00      	cmp	r3, #0
1000457a:	d105      	bne.n	10004588 <I2C_MASTER_StartReceiveIRQ+0x58>
1000457c:	683b      	ldr	r3, [r7, #0]
1000457e:	2b00      	cmp	r3, #0
10004580:	d002      	beq.n	10004588 <I2C_MASTER_StartReceiveIRQ+0x58>
10004582:	6a3b      	ldr	r3, [r7, #32]
10004584:	2b00      	cmp	r3, #0
10004586:	d104      	bne.n	10004592 <I2C_MASTER_StartReceiveIRQ+0x62>
     (count == 0U)))
  {
    status = I2C_MASTER_STATUS_FAILURE;
10004588:	2317      	movs	r3, #23
1000458a:	18fb      	adds	r3, r7, r3
1000458c:	2201      	movs	r2, #1
1000458e:	701a      	strb	r2, [r3, #0]
10004590:	e04c      	b.n	1000462c <I2C_MASTER_StartReceiveIRQ+0xfc>
  }
  else
  {
    if (ptr_runtime->rx_busy == false)
10004592:	693b      	ldr	r3, [r7, #16]
10004594:	2227      	movs	r2, #39	; 0x27
10004596:	5c9b      	ldrb	r3, [r3, r2]
10004598:	b2db      	uxtb	r3, r3
1000459a:	2201      	movs	r2, #1
1000459c:	4053      	eors	r3, r2
1000459e:	b2db      	uxtb	r3, r3
100045a0:	2b00      	cmp	r3, #0
100045a2:	d043      	beq.n	1000462c <I2C_MASTER_StartReceiveIRQ+0xfc>
    {
    ptr_runtime->direction = (uint32_t)I2C_MASTER_DIRECTION_RECEIVE;
100045a4:	693b      	ldr	r3, [r7, #16]
100045a6:	2201      	movs	r2, #1
100045a8:	619a      	str	r2, [r3, #24]

      /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received*/
    ptr_runtime->rx_data = data;
100045aa:	693b      	ldr	r3, [r7, #16]
100045ac:	683a      	ldr	r2, [r7, #0]
100045ae:	605a      	str	r2, [r3, #4]
    ptr_runtime->rx_data_count = count;
100045b0:	693b      	ldr	r3, [r7, #16]
100045b2:	6a3a      	ldr	r2, [r7, #32]
100045b4:	611a      	str	r2, [r3, #16]
    ptr_runtime->tx_data = data;
100045b6:	693b      	ldr	r3, [r7, #16]
100045b8:	683a      	ldr	r2, [r7, #0]
100045ba:	601a      	str	r2, [r3, #0]
    ptr_runtime->tx_data_count = count;
100045bc:	693b      	ldr	r3, [r7, #16]
100045be:	6a3a      	ldr	r2, [r7, #32]
100045c0:	609a      	str	r2, [r3, #8]
    ptr_runtime->tx_busy = true;
100045c2:	693b      	ldr	r3, [r7, #16]
100045c4:	2226      	movs	r2, #38	; 0x26
100045c6:	2101      	movs	r1, #1
100045c8:	5499      	strb	r1, [r3, r2]
    ptr_runtime->rx_busy = true;
100045ca:	693b      	ldr	r3, [r7, #16]
100045cc:	2227      	movs	r2, #39	; 0x27
100045ce:	2101      	movs	r1, #1
100045d0:	5499      	strb	r1, [r3, r2]
    ptr_runtime->send_stop = send_stop;
100045d2:	2324      	movs	r3, #36	; 0x24
100045d4:	18fb      	adds	r3, r7, r3
100045d6:	781a      	ldrb	r2, [r3, #0]
100045d8:	693b      	ldr	r3, [r7, #16]
100045da:	61da      	str	r2, [r3, #28]
    ptr_runtime->send_nack = send_nack;
100045dc:	2328      	movs	r3, #40	; 0x28
100045de:	18fb      	adds	r3, r7, r3
100045e0:	781a      	ldrb	r2, [r3, #0]
100045e2:	693b      	ldr	r3, [r7, #16]
100045e4:	621a      	str	r2, [r3, #32]
    ptr_runtime->rx_data_index = 0U;
100045e6:	693b      	ldr	r3, [r7, #16]
100045e8:	2200      	movs	r2, #0
100045ea:	615a      	str	r2, [r3, #20]
    ptr_runtime->tx_data_index = 0U;
100045ec:	693b      	ldr	r3, [r7, #16]
100045ee:	2200      	movs	r2, #0
100045f0:	60da      	str	r2, [r3, #12]

    if (handle->config->rxFIFO_size > 0)
100045f2:	68fb      	ldr	r3, [r7, #12]
100045f4:	685b      	ldr	r3, [r3, #4]
100045f6:	2227      	movs	r2, #39	; 0x27
100045f8:	5c9b      	ldrb	r3, [r3, r2]
100045fa:	2b00      	cmp	r3, #0
100045fc:	d008      	beq.n	10004610 <I2C_MASTER_StartReceiveIRQ+0xe0>
    {
      I2C_MASTER_lReceive_FIFOData(handle, send_start, address, count);
100045fe:	68f8      	ldr	r0, [r7, #12]
10004600:	230b      	movs	r3, #11
10004602:	18fb      	adds	r3, r7, r3
10004604:	7819      	ldrb	r1, [r3, #0]
10004606:	687a      	ldr	r2, [r7, #4]
10004608:	6a3b      	ldr	r3, [r7, #32]
1000460a:	f7ff fd25 	bl	10004058 <I2C_MASTER_lReceive_FIFOData>
1000460e:	e009      	b.n	10004624 <I2C_MASTER_StartReceiveIRQ+0xf4>
    }
    else
    {
      I2C_MASTER_lReceive_StdData(handle, send_start, address);
10004610:	68f9      	ldr	r1, [r7, #12]
10004612:	230b      	movs	r3, #11
10004614:	18fb      	adds	r3, r7, r3
10004616:	781a      	ldrb	r2, [r3, #0]
10004618:	687b      	ldr	r3, [r7, #4]
1000461a:	1c08      	adds	r0, r1, #0
1000461c:	1c11      	adds	r1, r2, #0
1000461e:	1c1a      	adds	r2, r3, #0
10004620:	f7ff fe20 	bl	10004264 <I2C_MASTER_lReceive_StdData>
    }
    status = I2C_MASTER_STATUS_SUCCESS;
10004624:	2317      	movs	r3, #23
10004626:	18fb      	adds	r3, r7, r3
10004628:	2200      	movs	r2, #0
1000462a:	701a      	strb	r2, [r3, #0]
  }
  }
  return (status);
1000462c:	2317      	movs	r3, #23
1000462e:	18fb      	adds	r3, r7, r3
10004630:	781b      	ldrb	r3, [r3, #0]
}
10004632:	1c18      	adds	r0, r3, #0
10004634:	46bd      	mov	sp, r7
10004636:	b006      	add	sp, #24
10004638:	bd80      	pop	{r7, pc}
1000463a:	46c0      	nop			; (mov r8, r8)

1000463c <I2C_MASTER_ReceiveHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ReceiveHandler(I2C_MASTER_t * const handle)
{
1000463c:	b590      	push	{r4, r7, lr}
1000463e:	b085      	sub	sp, #20
10004640:	af00      	add	r7, sp, #0
10004642:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;
  uint8_t fifo_lindex;
  uint8_t fifo_min;

  ptr_runtime = handle->runtime;
10004644:	687b      	ldr	r3, [r7, #4]
10004646:	689b      	ldr	r3, [r3, #8]
10004648:	60bb      	str	r3, [r7, #8]
  fifo_lindex = 0U;
1000464a:	230f      	movs	r3, #15
1000464c:	18fb      	adds	r3, r7, r3
1000464e:	2200      	movs	r2, #0
10004650:	701a      	strb	r2, [r3, #0]

  if (ptr_runtime->rx_busy == true)
10004652:	68bb      	ldr	r3, [r7, #8]
10004654:	2227      	movs	r2, #39	; 0x27
10004656:	5c9b      	ldrb	r3, [r3, r2]
10004658:	b2db      	uxtb	r3, r3
1000465a:	2b00      	cmp	r3, #0
1000465c:	d100      	bne.n	10004660 <I2C_MASTER_ReceiveHandler+0x24>
1000465e:	e132      	b.n	100048c6 <I2C_MASTER_ReceiveHandler+0x28a>
  {
    if (handle->config->rxFIFO_size > 0)
10004660:	687b      	ldr	r3, [r7, #4]
10004662:	685b      	ldr	r3, [r3, #4]
10004664:	2227      	movs	r2, #39	; 0x27
10004666:	5c9b      	ldrb	r3, [r3, r2]
10004668:	2b00      	cmp	r3, #0
1000466a:	d100      	bne.n	1000466e <I2C_MASTER_ReceiveHandler+0x32>
1000466c:	e0e3      	b.n	10004836 <I2C_MASTER_ReceiveHandler+0x1fa>
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
1000466e:	e022      	b.n	100046b6 <I2C_MASTER_ReceiveHandler+0x7a>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10004670:	68bb      	ldr	r3, [r7, #8]
10004672:	685a      	ldr	r2, [r3, #4]
10004674:	68bb      	ldr	r3, [r7, #8]
10004676:	695b      	ldr	r3, [r3, #20]
10004678:	18d4      	adds	r4, r2, r3
1000467a:	687b      	ldr	r3, [r7, #4]
1000467c:	1c18      	adds	r0, r3, #0
1000467e:	f7ff fa15 	bl	10003aac <I2C_MASTER_GetReceivedByte>
10004682:	1c03      	adds	r3, r0, #0
10004684:	7023      	strb	r3, [r4, #0]
        ptr_runtime->rx_data_index++;
10004686:	68bb      	ldr	r3, [r7, #8]
10004688:	695b      	ldr	r3, [r3, #20]
1000468a:	1c5a      	adds	r2, r3, #1
1000468c:	68bb      	ldr	r3, [r7, #8]
1000468e:	615a      	str	r2, [r3, #20]

        if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
10004690:	68bb      	ldr	r3, [r7, #8]
10004692:	695a      	ldr	r2, [r3, #20]
10004694:	68bb      	ldr	r3, [r7, #8]
10004696:	691b      	ldr	r3, [r3, #16]
10004698:	429a      	cmp	r2, r3
1000469a:	d10c      	bne.n	100046b6 <I2C_MASTER_ReceiveHandler+0x7a>
        {
          /*Reception complete*/
          ptr_runtime->rx_busy = false;
1000469c:	68bb      	ldr	r3, [r7, #8]
1000469e:	2227      	movs	r2, #39	; 0x27
100046a0:	2100      	movs	r1, #0
100046a2:	5499      	strb	r1, [r3, r2]

            /*Disable both standard receive and alternative receive FIFO events*/
            XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
100046a4:	687b      	ldr	r3, [r7, #4]
100046a6:	681a      	ldr	r2, [r3, #0]
100046a8:	23c0      	movs	r3, #192	; 0xc0
100046aa:	05db      	lsls	r3, r3, #23
100046ac:	1c10      	adds	r0, r2, #0
100046ae:	1c19      	adds	r1, r3, #0
100046b0:	f7ff f96e 	bl	10003990 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                          (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                                     (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

          break;
100046b4:	e00a      	b.n	100046cc <I2C_MASTER_ReceiveHandler+0x90>
    if (handle->config->rxFIFO_size > 0)
    {
      /*****************************************************************************************************************
       Rx FIFO enabled
      *****************************************************************************************************************/
      while (I2C_MASTER_IsRXFIFOEmpty(handle) == false)
100046b6:	687b      	ldr	r3, [r7, #4]
100046b8:	1c18      	adds	r0, r3, #0
100046ba:	f7ff f9e9 	bl	10003a90 <I2C_MASTER_IsRXFIFOEmpty>
100046be:	1c03      	adds	r3, r0, #0
100046c0:	1c1a      	adds	r2, r3, #0
100046c2:	2301      	movs	r3, #1
100046c4:	4053      	eors	r3, r2
100046c6:	b2db      	uxtb	r3, r3
100046c8:	2b00      	cmp	r3, #0
100046ca:	d1d1      	bne.n	10004670 <I2C_MASTER_ReceiveHandler+0x34>
          break;
        }
      } /* end of while(I2C_MASTER_IsRXFIFOEmpty(handle) == false)*/

      /*Set the trigger limit if data still to be received*/
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
100046cc:	68bb      	ldr	r3, [r7, #8]
100046ce:	695a      	ldr	r2, [r3, #20]
100046d0:	68bb      	ldr	r3, [r7, #8]
100046d2:	691b      	ldr	r3, [r3, #16]
100046d4:	429a      	cmp	r2, r3
100046d6:	d300      	bcc.n	100046da <I2C_MASTER_ReceiveHandler+0x9e>
100046d8:	e08c      	b.n	100047f4 <I2C_MASTER_ReceiveHandler+0x1b8>
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
100046da:	68bb      	ldr	r3, [r7, #8]
100046dc:	691a      	ldr	r2, [r3, #16]
100046de:	68bb      	ldr	r3, [r7, #8]
100046e0:	695b      	ldr	r3, [r3, #20]
100046e2:	1ad3      	subs	r3, r2, r3
100046e4:	687a      	ldr	r2, [r7, #4]
100046e6:	1c10      	adds	r0, r2, #0
100046e8:	1c19      	adds	r1, r3, #0
100046ea:	f000 f971 	bl	100049d0 <I2C_MASTER_lReconfigureRxFIFO>

        if ((handle->config->txFIFO_size > 0))
100046ee:	687b      	ldr	r3, [r7, #4]
100046f0:	685b      	ldr	r3, [r3, #4]
100046f2:	2226      	movs	r2, #38	; 0x26
100046f4:	5c9b      	ldrb	r3, [r3, r2]
100046f6:	2b00      	cmp	r3, #0
100046f8:	d017      	beq.n	1000472a <I2C_MASTER_ReceiveHandler+0xee>
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
100046fa:	687b      	ldr	r3, [r7, #4]
100046fc:	685b      	ldr	r3, [r3, #4]
100046fe:	2226      	movs	r2, #38	; 0x26
10004700:	5c9b      	ldrb	r3, [r3, r2]
10004702:	1c1a      	adds	r2, r3, #0
10004704:	2301      	movs	r3, #1
10004706:	4093      	lsls	r3, r2
10004708:	1c19      	adds	r1, r3, #0
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
1000470a:	687b      	ldr	r3, [r7, #4]
1000470c:	685b      	ldr	r3, [r3, #4]
1000470e:	2227      	movs	r2, #39	; 0x27
10004710:	5c9b      	ldrb	r3, [r3, r2]
      {
        I2C_MASTER_lReconfigureRxFIFO(handle,(uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));

        if ((handle->config->txFIFO_size > 0))
        {
          fifo_min = (uint8_t)calculate_minfifosize(((uint32_t)1 << (uint32_t)handle->config->txFIFO_size),
10004712:	1c1a      	adds	r2, r3, #0
10004714:	2301      	movs	r3, #1
10004716:	4093      	lsls	r3, r2
10004718:	1c08      	adds	r0, r1, #0
1000471a:	1c19      	adds	r1, r3, #0
1000471c:	f7ff fa68 	bl	10003bf0 <calculate_minfifosize>
10004720:	1c02      	adds	r2, r0, #0
10004722:	230e      	movs	r3, #14
10004724:	18fb      	adds	r3, r7, r3
10004726:	701a      	strb	r2, [r3, #0]
10004728:	e003      	b.n	10004732 <I2C_MASTER_ReceiveHandler+0xf6>
                                                    ((uint32_t)1 << (uint32_t)handle->config->rxFIFO_size));
       }
       else
       {
          fifo_min = 2U;
1000472a:	230e      	movs	r3, #14
1000472c:	18fb      	adds	r3, r7, r3
1000472e:	2202      	movs	r2, #2
10004730:	701a      	strb	r2, [r3, #0]
       }
       /****************************************************************************************************************
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
10004732:	687b      	ldr	r3, [r7, #4]
10004734:	685b      	ldr	r3, [r3, #4]
10004736:	2226      	movs	r2, #38	; 0x26
10004738:	5c9b      	ldrb	r3, [r3, r2]
1000473a:	2b00      	cmp	r3, #0
1000473c:	d041      	beq.n	100047c2 <I2C_MASTER_ReceiveHandler+0x186>
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
1000473e:	e033      	b.n	100047a8 <I2C_MASTER_ReceiveHandler+0x16c>
          {
            if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10004740:	68bb      	ldr	r3, [r7, #8]
10004742:	68da      	ldr	r2, [r3, #12]
10004744:	68bb      	ldr	r3, [r7, #8]
10004746:	689b      	ldr	r3, [r3, #8]
10004748:	429a      	cmp	r2, r3
1000474a:	d22c      	bcs.n	100047a6 <I2C_MASTER_ReceiveHandler+0x16a>
            {
              if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
1000474c:	68bb      	ldr	r3, [r7, #8]
1000474e:	68db      	ldr	r3, [r3, #12]
10004750:	1c5a      	adds	r2, r3, #1
10004752:	68bb      	ldr	r3, [r7, #8]
10004754:	689b      	ldr	r3, [r3, #8]
10004756:	429a      	cmp	r2, r3
10004758:	d108      	bne.n	1000476c <I2C_MASTER_ReceiveHandler+0x130>
1000475a:	68bb      	ldr	r3, [r7, #8]
1000475c:	6a1b      	ldr	r3, [r3, #32]
1000475e:	2b01      	cmp	r3, #1
10004760:	d104      	bne.n	1000476c <I2C_MASTER_ReceiveHandler+0x130>
              {
                I2C_MASTER_ReceiveNACK(handle);
10004762:	687b      	ldr	r3, [r7, #4]
10004764:	1c18      	adds	r0, r3, #0
10004766:	f7ff f9ed 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
1000476a:	e003      	b.n	10004774 <I2C_MASTER_ReceiveHandler+0x138>
              }
              else
              {
                I2C_MASTER_ReceiveACK(handle);
1000476c:	687b      	ldr	r3, [r7, #4]
1000476e:	1c18      	adds	r0, r3, #0
10004770:	f7ff f9dc 	bl	10003b2c <I2C_MASTER_ReceiveACK>
              }
              ptr_runtime->tx_data_index++;
10004774:	68bb      	ldr	r3, [r7, #8]
10004776:	68db      	ldr	r3, [r3, #12]
10004778:	1c5a      	adds	r2, r3, #1
1000477a:	68bb      	ldr	r3, [r7, #8]
1000477c:	60da      	str	r2, [r3, #12]

              /* if fifo size- break */
              if ((++fifo_lindex) >= fifo_min)
1000477e:	230f      	movs	r3, #15
10004780:	18fb      	adds	r3, r7, r3
10004782:	220f      	movs	r2, #15
10004784:	18ba      	adds	r2, r7, r2
10004786:	7812      	ldrb	r2, [r2, #0]
10004788:	3201      	adds	r2, #1
1000478a:	701a      	strb	r2, [r3, #0]
1000478c:	230f      	movs	r3, #15
1000478e:	18fa      	adds	r2, r7, r3
10004790:	230e      	movs	r3, #14
10004792:	18fb      	adds	r3, r7, r3
10004794:	7812      	ldrb	r2, [r2, #0]
10004796:	781b      	ldrb	r3, [r3, #0]
10004798:	429a      	cmp	r2, r3
1000479a:	d305      	bcc.n	100047a8 <I2C_MASTER_ReceiveHandler+0x16c>
              {
                fifo_lindex = 0U;
1000479c:	230f      	movs	r3, #15
1000479e:	18fb      	adds	r3, r7, r3
100047a0:	2200      	movs	r2, #0
100047a2:	701a      	strb	r2, [r3, #0]
                break;
100047a4:	e00c      	b.n	100047c0 <I2C_MASTER_ReceiveHandler+0x184>
              }
            }/* end of if(handle->runtime->tx_data_index < handle->runtime->tx_data_count) */
            else
            {
              break;
100047a6:	e00b      	b.n	100047c0 <I2C_MASTER_ReceiveHandler+0x184>
         Rx and Tx FIFO enabled
        ***************************************************************************************************************/
        if (handle->config->txFIFO_size > 0)
        {
          /*Fill the transmit FIFO */
          while (I2C_MASTER_IsTXFIFOFull(handle) == false)
100047a8:	687b      	ldr	r3, [r7, #4]
100047aa:	1c18      	adds	r0, r3, #0
100047ac:	f7ff f962 	bl	10003a74 <I2C_MASTER_IsTXFIFOFull>
100047b0:	1c03      	adds	r3, r0, #0
100047b2:	1c1a      	adds	r2, r3, #0
100047b4:	2301      	movs	r3, #1
100047b6:	4053      	eors	r3, r2
100047b8:	b2db      	uxtb	r3, r3
100047ba:	2b00      	cmp	r3, #0
100047bc:	d1c0      	bne.n	10004740 <I2C_MASTER_ReceiveHandler+0x104>
100047be:	e019      	b.n	100047f4 <I2C_MASTER_ReceiveHandler+0x1b8>
100047c0:	e018      	b.n	100047f4 <I2C_MASTER_ReceiveHandler+0x1b8>
       /****************************************************************************************************************
          Rx FIFO is enabled, Tx FIFO disabled
       ****************************************************************************************************************/
       else
       {
         if (((ptr_runtime->tx_data_index + 1U) == ptr_runtime->tx_data_count) && (ptr_runtime->send_nack == true))
100047c2:	68bb      	ldr	r3, [r7, #8]
100047c4:	68db      	ldr	r3, [r3, #12]
100047c6:	1c5a      	adds	r2, r3, #1
100047c8:	68bb      	ldr	r3, [r7, #8]
100047ca:	689b      	ldr	r3, [r3, #8]
100047cc:	429a      	cmp	r2, r3
100047ce:	d108      	bne.n	100047e2 <I2C_MASTER_ReceiveHandler+0x1a6>
100047d0:	68bb      	ldr	r3, [r7, #8]
100047d2:	6a1b      	ldr	r3, [r3, #32]
100047d4:	2b01      	cmp	r3, #1
100047d6:	d104      	bne.n	100047e2 <I2C_MASTER_ReceiveHandler+0x1a6>
         {
           I2C_MASTER_ReceiveNACK(handle);
100047d8:	687b      	ldr	r3, [r7, #4]
100047da:	1c18      	adds	r0, r3, #0
100047dc:	f7ff f9b2 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
100047e0:	e003      	b.n	100047ea <I2C_MASTER_ReceiveHandler+0x1ae>
         }
         else
         {
           I2C_MASTER_ReceiveACK(handle);
100047e2:	687b      	ldr	r3, [r7, #4]
100047e4:	1c18      	adds	r0, r3, #0
100047e6:	f7ff f9a1 	bl	10003b2c <I2C_MASTER_ReceiveACK>
         }

         ptr_runtime->tx_data_index++;
100047ea:	68bb      	ldr	r3, [r7, #8]
100047ec:	68db      	ldr	r3, [r3, #12]
100047ee:	1c5a      	adds	r2, r3, #1
100047f0:	68bb      	ldr	r3, [r7, #8]
100047f2:	60da      	str	r2, [r3, #12]
       }
     } /* end of if(ptr_runtime->rx_data_index < ptr_runtime->rx_data_count) */
/***********************************************************************************************************************
     if last byte to receive then disable receive events and jump to callback routine
***********************************************************************************************************************/
     if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
100047f4:	68bb      	ldr	r3, [r7, #8]
100047f6:	695a      	ldr	r2, [r3, #20]
100047f8:	68bb      	ldr	r3, [r7, #8]
100047fa:	691b      	ldr	r3, [r3, #16]
100047fc:	429a      	cmp	r2, r3
100047fe:	d162      	bne.n	100048c6 <I2C_MASTER_ReceiveHandler+0x28a>
     {
       /*Clear both standard receive and alternative receive FIFO events*/
       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
10004800:	687b      	ldr	r3, [r7, #4]
10004802:	681a      	ldr	r2, [r3, #0]
10004804:	23c0      	movs	r3, #192	; 0xc0
10004806:	05db      	lsls	r3, r3, #23
10004808:	1c10      	adds	r0, r2, #0
1000480a:	1c19      	adds	r1, r3, #0
1000480c:	f7ff f8c0 	bl	10003990 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));

       /*Disable both standard receive and alternative receive events*/
       XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
10004810:	687b      	ldr	r3, [r7, #4]
10004812:	681a      	ldr	r2, [r3, #0]
10004814:	23c0      	movs	r3, #192	; 0xc0
10004816:	021b      	lsls	r3, r3, #8
10004818:	1c10      	adds	r0, r2, #0
1000481a:	1c19      	adds	r1, r3, #0
1000481c:	f7ff f82c 	bl	10003878 <XMC_USIC_CH_DisableEvent>
                                                            (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

       if (ptr_runtime->bus_acquired == true)
10004820:	68bb      	ldr	r3, [r7, #8]
10004822:	2228      	movs	r2, #40	; 0x28
10004824:	5c9b      	ldrb	r3, [r3, r2]
10004826:	b2db      	uxtb	r3, r3
10004828:	2b00      	cmp	r3, #0
1000482a:	d04c      	beq.n	100048c6 <I2C_MASTER_ReceiveHandler+0x28a>
       {
         I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
1000482c:	687b      	ldr	r3, [r7, #4]
1000482e:	1c18      	adds	r0, r3, #0
10004830:	f000 f84c 	bl	100048cc <I2C_MASTER_lSendStop_JumpTo_RxCallback>
10004834:	e047      	b.n	100048c6 <I2C_MASTER_ReceiveHandler+0x28a>
/***********************************************************************************************************************
     Rx FIFO disabled
***********************************************************************************************************************/
    else
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)I2C_MASTER_GetReceivedByte(handle);
10004836:	68bb      	ldr	r3, [r7, #8]
10004838:	685a      	ldr	r2, [r3, #4]
1000483a:	68bb      	ldr	r3, [r7, #8]
1000483c:	695b      	ldr	r3, [r3, #20]
1000483e:	18d4      	adds	r4, r2, r3
10004840:	687b      	ldr	r3, [r7, #4]
10004842:	1c18      	adds	r0, r3, #0
10004844:	f7ff f932 	bl	10003aac <I2C_MASTER_GetReceivedByte>
10004848:	1c03      	adds	r3, r0, #0
1000484a:	7023      	strb	r3, [r4, #0]
      ptr_runtime->rx_data_index++;
1000484c:	68bb      	ldr	r3, [r7, #8]
1000484e:	695b      	ldr	r3, [r3, #20]
10004850:	1c5a      	adds	r2, r3, #1
10004852:	68bb      	ldr	r3, [r7, #8]
10004854:	615a      	str	r2, [r3, #20]

      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
10004856:	68bb      	ldr	r3, [r7, #8]
10004858:	695a      	ldr	r2, [r3, #20]
1000485a:	68bb      	ldr	r3, [r7, #8]
1000485c:	691b      	ldr	r3, [r3, #16]
1000485e:	429a      	cmp	r2, r3
10004860:	d21f      	bcs.n	100048a2 <I2C_MASTER_ReceiveHandler+0x266>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
10004862:	68bb      	ldr	r3, [r7, #8]
10004864:	68da      	ldr	r2, [r3, #12]
10004866:	68bb      	ldr	r3, [r7, #8]
10004868:	689b      	ldr	r3, [r3, #8]
1000486a:	429a      	cmp	r2, r3
1000486c:	d22b      	bcs.n	100048c6 <I2C_MASTER_ReceiveHandler+0x28a>
        {
          /* if receive byte is end of byte and send_nack is true, send to receive Nack otherwise Ack*/
          if (((ptr_runtime->tx_data_index) == (ptr_runtime->tx_data_count - 1U)) && (ptr_runtime->send_nack == true))
1000486e:	68bb      	ldr	r3, [r7, #8]
10004870:	68da      	ldr	r2, [r3, #12]
10004872:	68bb      	ldr	r3, [r7, #8]
10004874:	689b      	ldr	r3, [r3, #8]
10004876:	3b01      	subs	r3, #1
10004878:	429a      	cmp	r2, r3
1000487a:	d108      	bne.n	1000488e <I2C_MASTER_ReceiveHandler+0x252>
1000487c:	68bb      	ldr	r3, [r7, #8]
1000487e:	6a1b      	ldr	r3, [r3, #32]
10004880:	2b01      	cmp	r3, #1
10004882:	d104      	bne.n	1000488e <I2C_MASTER_ReceiveHandler+0x252>
          {
            I2C_MASTER_ReceiveNACK(handle);
10004884:	687b      	ldr	r3, [r7, #4]
10004886:	1c18      	adds	r0, r3, #0
10004888:	f7ff f95c 	bl	10003b44 <I2C_MASTER_ReceiveNACK>
1000488c:	e003      	b.n	10004896 <I2C_MASTER_ReceiveHandler+0x25a>
          }
          else
          {
            I2C_MASTER_ReceiveACK(handle);
1000488e:	687b      	ldr	r3, [r7, #4]
10004890:	1c18      	adds	r0, r3, #0
10004892:	f7ff f94b 	bl	10003b2c <I2C_MASTER_ReceiveACK>
          }
          ptr_runtime->tx_data_index++;
10004896:	68bb      	ldr	r3, [r7, #8]
10004898:	68db      	ldr	r3, [r3, #12]
1000489a:	1c5a      	adds	r2, r3, #1
1000489c:	68bb      	ldr	r3, [r7, #8]
1000489e:	60da      	str	r2, [r3, #12]
100048a0:	e011      	b.n	100048c6 <I2C_MASTER_ReceiveHandler+0x28a>
        }
      }
      else
      {
        /*Disable both standard receive and alternative receive events*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE |
100048a2:	687b      	ldr	r3, [r7, #4]
100048a4:	681a      	ldr	r2, [r3, #0]
100048a6:	23c0      	movs	r3, #192	; 0xc0
100048a8:	021b      	lsls	r3, r3, #8
100048aa:	1c10      	adds	r0, r2, #0
100048ac:	1c19      	adds	r1, r3, #0
100048ae:	f7fe ffe3 	bl	10003878 <XMC_USIC_CH_DisableEvent>
                                                             (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));
        if (ptr_runtime->bus_acquired == true)
100048b2:	68bb      	ldr	r3, [r7, #8]
100048b4:	2228      	movs	r2, #40	; 0x28
100048b6:	5c9b      	ldrb	r3, [r3, r2]
100048b8:	b2db      	uxtb	r3, r3
100048ba:	2b00      	cmp	r3, #0
100048bc:	d003      	beq.n	100048c6 <I2C_MASTER_ReceiveHandler+0x28a>
        {
          I2C_MASTER_lSendStop_JumpTo_RxCallback(handle);
100048be:	687b      	ldr	r3, [r7, #4]
100048c0:	1c18      	adds	r0, r3, #0
100048c2:	f000 f803 	bl	100048cc <I2C_MASTER_lSendStop_JumpTo_RxCallback>
        }
      }
    }
  } /* end of  if(ptr_runtime->rx_busy == true)*/
}
100048c6:	46bd      	mov	sp, r7
100048c8:	b005      	add	sp, #20
100048ca:	bd90      	pop	{r4, r7, pc}

100048cc <I2C_MASTER_lSendStop_JumpTo_RxCallback>:

/* Function to issue Send Stop command and jump to receive callback routine */
static void I2C_MASTER_lSendStop_JumpTo_RxCallback(I2C_MASTER_t *const handle)
{
100048cc:	b580      	push	{r7, lr}
100048ce:	b084      	sub	sp, #16
100048d0:	af00      	add	r7, sp, #0
100048d2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_RUNTIME_t * ptr_runtime;

  ptr_runtime = handle->runtime;
100048d4:	687b      	ldr	r3, [r7, #4]
100048d6:	689b      	ldr	r3, [r3, #8]
100048d8:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->send_stop == true)
100048da:	68fb      	ldr	r3, [r7, #12]
100048dc:	69db      	ldr	r3, [r3, #28]
100048de:	2b01      	cmp	r3, #1
100048e0:	d110      	bne.n	10004904 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x38>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
100048e2:	46c0      	nop			; (mov r8, r8)
100048e4:	687b      	ldr	r3, [r7, #4]
100048e6:	681b      	ldr	r3, [r3, #0]
100048e8:	1c18      	adds	r0, r3, #0
100048ea:	f7fe ffd5 	bl	10003898 <XMC_USIC_CH_GetTransmitBufferStatus>
100048ee:	1e03      	subs	r3, r0, #0
100048f0:	2b80      	cmp	r3, #128	; 0x80
100048f2:	d0f7      	beq.n	100048e4 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x18>

    ptr_runtime->bus_acquired = false;
100048f4:	68fb      	ldr	r3, [r7, #12]
100048f6:	2228      	movs	r2, #40	; 0x28
100048f8:	2100      	movs	r1, #0
100048fa:	5499      	strb	r1, [r3, r2]

    I2C_MASTER_SendStop(handle);
100048fc:	687b      	ldr	r3, [r7, #4]
100048fe:	1c18      	adds	r0, r3, #0
10004900:	f7ff f92c 	bl	10003b5c <I2C_MASTER_SendStop>
  }

  while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10004904:	46c0      	nop			; (mov r8, r8)
10004906:	687b      	ldr	r3, [r7, #4]
10004908:	681b      	ldr	r3, [r3, #0]
1000490a:	1c18      	adds	r0, r3, #0
1000490c:	f7fe ffc4 	bl	10003898 <XMC_USIC_CH_GetTransmitBufferStatus>
10004910:	1e03      	subs	r3, r0, #0
10004912:	2b80      	cmp	r3, #128	; 0x80
10004914:	d0f7      	beq.n	10004906 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x3a>

  /* Reception complete */
  ptr_runtime->rx_busy = false;
10004916:	68fb      	ldr	r3, [r7, #12]
10004918:	2227      	movs	r2, #39	; 0x27
1000491a:	2100      	movs	r1, #0
1000491c:	5499      	strb	r1, [r3, r2]
  ptr_runtime->tx_busy = false;
1000491e:	68fb      	ldr	r3, [r7, #12]
10004920:	2226      	movs	r2, #38	; 0x26
10004922:	2100      	movs	r1, #0
10004924:	5499      	strb	r1, [r3, r2]

  if (handle->config->rx_cbhandler != NULL)
10004926:	687b      	ldr	r3, [r7, #4]
10004928:	685b      	ldr	r3, [r3, #4]
1000492a:	695b      	ldr	r3, [r3, #20]
1000492c:	2b00      	cmp	r3, #0
1000492e:	d003      	beq.n	10004938 <I2C_MASTER_lSendStop_JumpTo_RxCallback+0x6c>
  {
    /*Execute the 'End of reception' callback function*/
    handle->config->rx_cbhandler();
10004930:	687b      	ldr	r3, [r7, #4]
10004932:	685b      	ldr	r3, [r3, #4]
10004934:	695b      	ldr	r3, [r3, #20]
10004936:	4798      	blx	r3
  }
}
10004938:	46bd      	mov	sp, r7
1000493a:	b004      	add	sp, #16
1000493c:	bd80      	pop	{r7, pc}
1000493e:	46c0      	nop			; (mov r8, r8)

10004940 <I2C_MASTER_ProtocolHandler>:
 * @param  handle I2C_MASTER APP handle pointer of type I2C_MASTER_t*
 *
 * @return void
 */
void I2C_MASTER_ProtocolHandler(I2C_MASTER_t * const handle)
{
10004940:	b580      	push	{r7, lr}
10004942:	b084      	sub	sp, #16
10004944:	af00      	add	r7, sp, #0
10004946:	6078      	str	r0, [r7, #4]
  uint32_t psr_status;

  psr_status = XMC_I2C_CH_GetStatusFlag(handle->channel);
10004948:	687b      	ldr	r3, [r7, #4]
1000494a:	681b      	ldr	r3, [r3, #0]
1000494c:	1c18      	adds	r0, r3, #0
1000494e:	f7ff f865 	bl	10003a1c <XMC_I2C_CH_GetStatusFlag>
10004952:	1c03      	adds	r3, r0, #0
10004954:	60fb      	str	r3, [r7, #12]

  /* Check for nack event */
  if ((handle->config->nack_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
10004956:	687b      	ldr	r3, [r7, #4]
10004958:	685b      	ldr	r3, [r3, #4]
1000495a:	699b      	ldr	r3, [r3, #24]
1000495c:	2b00      	cmp	r3, #0
1000495e:	d00c      	beq.n	1000497a <I2C_MASTER_ProtocolHandler+0x3a>
10004960:	68fb      	ldr	r3, [r7, #12]
10004962:	2220      	movs	r2, #32
10004964:	4013      	ands	r3, r2
10004966:	d008      	beq.n	1000497a <I2C_MASTER_ProtocolHandler+0x3a>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
10004968:	687b      	ldr	r3, [r7, #4]
1000496a:	1c18      	adds	r0, r3, #0
1000496c:	2120      	movs	r1, #32
1000496e:	f7ff f983 	bl	10003c78 <I2C_MASTER_ClearFlag>
    handle->config->nack_cbhandler();
10004972:	687b      	ldr	r3, [r7, #4]
10004974:	685b      	ldr	r3, [r3, #4]
10004976:	699b      	ldr	r3, [r3, #24]
10004978:	4798      	blx	r3
  }

  /* Check for arbitration lost */
  if ((handle->config->arbitration_cbhandler != NULL) && (psr_status & (uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST))
1000497a:	687b      	ldr	r3, [r7, #4]
1000497c:	685b      	ldr	r3, [r3, #4]
1000497e:	69db      	ldr	r3, [r3, #28]
10004980:	2b00      	cmp	r3, #0
10004982:	d00c      	beq.n	1000499e <I2C_MASTER_ProtocolHandler+0x5e>
10004984:	68fb      	ldr	r3, [r7, #12]
10004986:	2240      	movs	r2, #64	; 0x40
10004988:	4013      	ands	r3, r2
1000498a:	d008      	beq.n	1000499e <I2C_MASTER_ProtocolHandler+0x5e>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ARBITRATION_LOST);
1000498c:	687b      	ldr	r3, [r7, #4]
1000498e:	1c18      	adds	r0, r3, #0
10004990:	2140      	movs	r1, #64	; 0x40
10004992:	f7ff f971 	bl	10003c78 <I2C_MASTER_ClearFlag>
    handle->config->arbitration_cbhandler();
10004996:	687b      	ldr	r3, [r7, #4]
10004998:	685b      	ldr	r3, [r3, #4]
1000499a:	69db      	ldr	r3, [r3, #28]
1000499c:	4798      	blx	r3
  }

  /* Check for error detected */
  if ((handle->config->error_cbhandler != NULL) && (psr_status & ((uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR | (uint32_t)XMC_I2C_CH_STATUS_FLAG_WRONG_TDF_CODE_FOUND)))
1000499e:	687b      	ldr	r3, [r7, #4]
100049a0:	685b      	ldr	r3, [r3, #4]
100049a2:	6a1b      	ldr	r3, [r3, #32]
100049a4:	2b00      	cmp	r3, #0
100049a6:	d00f      	beq.n	100049c8 <I2C_MASTER_ProtocolHandler+0x88>
100049a8:	68fa      	ldr	r2, [r7, #12]
100049aa:	2381      	movs	r3, #129	; 0x81
100049ac:	005b      	lsls	r3, r3, #1
100049ae:	4013      	ands	r3, r2
100049b0:	d00a      	beq.n	100049c8 <I2C_MASTER_ProtocolHandler+0x88>
  {
    I2C_MASTER_ClearFlag(handle,(uint32_t)XMC_I2C_CH_STATUS_FLAG_ERROR);
100049b2:	687a      	ldr	r2, [r7, #4]
100049b4:	2380      	movs	r3, #128	; 0x80
100049b6:	005b      	lsls	r3, r3, #1
100049b8:	1c10      	adds	r0, r2, #0
100049ba:	1c19      	adds	r1, r3, #0
100049bc:	f7ff f95c 	bl	10003c78 <I2C_MASTER_ClearFlag>
    handle->config->error_cbhandler();
100049c0:	687b      	ldr	r3, [r7, #4]
100049c2:	685b      	ldr	r3, [r3, #4]
100049c4:	6a1b      	ldr	r3, [r3, #32]
100049c6:	4798      	blx	r3
  }
}
100049c8:	46bd      	mov	sp, r7
100049ca:	b004      	add	sp, #16
100049cc:	bd80      	pop	{r7, pc}
100049ce:	46c0      	nop			; (mov r8, r8)

100049d0 <I2C_MASTER_lReconfigureRxFIFO>:
 *
 * @return void.
 */

static void I2C_MASTER_lReconfigureRxFIFO(const I2C_MASTER_t * const handle, uint32_t data_size)
{
100049d0:	b580      	push	{r7, lr}
100049d2:	b086      	sub	sp, #24
100049d4:	af00      	add	r7, sp, #0
100049d6:	6078      	str	r0, [r7, #4]
100049d8:	6039      	str	r1, [r7, #0]
  uint32_t minfifo_value;
  uint8_t tx_fifo_size;
  uint8_t rx_fifo_size;
  uint8_t fifo_limit;

  rx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->rxFIFO_size);
100049da:	687b      	ldr	r3, [r7, #4]
100049dc:	685b      	ldr	r3, [r3, #4]
100049de:	2227      	movs	r2, #39	; 0x27
100049e0:	5c9b      	ldrb	r3, [r3, r2]
100049e2:	1c1a      	adds	r2, r3, #0
100049e4:	2301      	movs	r3, #1
100049e6:	4093      	lsls	r3, r2
100049e8:	1c1a      	adds	r2, r3, #0
100049ea:	2316      	movs	r3, #22
100049ec:	18fb      	adds	r3, r7, r3
100049ee:	701a      	strb	r2, [r3, #0]

  if ((handle->config->txFIFO_size > 0))
100049f0:	687b      	ldr	r3, [r7, #4]
100049f2:	685b      	ldr	r3, [r3, #4]
100049f4:	2226      	movs	r2, #38	; 0x26
100049f6:	5c9b      	ldrb	r3, [r3, r2]
100049f8:	2b00      	cmp	r3, #0
100049fa:	d00b      	beq.n	10004a14 <I2C_MASTER_lReconfigureRxFIFO+0x44>
  {
    tx_fifo_size = (uint8_t)((uint8_t)1 << handle->config->txFIFO_size);
100049fc:	687b      	ldr	r3, [r7, #4]
100049fe:	685b      	ldr	r3, [r3, #4]
10004a00:	2226      	movs	r2, #38	; 0x26
10004a02:	5c9b      	ldrb	r3, [r3, r2]
10004a04:	1c1a      	adds	r2, r3, #0
10004a06:	2301      	movs	r3, #1
10004a08:	4093      	lsls	r3, r2
10004a0a:	1c1a      	adds	r2, r3, #0
10004a0c:	2317      	movs	r3, #23
10004a0e:	18fb      	adds	r3, r7, r3
10004a10:	701a      	strb	r2, [r3, #0]
10004a12:	e003      	b.n	10004a1c <I2C_MASTER_lReconfigureRxFIFO+0x4c>
  }
  else
  {
    tx_fifo_size = 1U;
10004a14:	2317      	movs	r3, #23
10004a16:	18fb      	adds	r3, r7, r3
10004a18:	2201      	movs	r2, #1
10004a1a:	701a      	strb	r2, [r3, #0]
  }

  minfifo_value = (uint32_t)(calculate_minfifosize((uint32_t)tx_fifo_size, (uint32_t)rx_fifo_size));
10004a1c:	2317      	movs	r3, #23
10004a1e:	18fb      	adds	r3, r7, r3
10004a20:	781a      	ldrb	r2, [r3, #0]
10004a22:	2316      	movs	r3, #22
10004a24:	18fb      	adds	r3, r7, r3
10004a26:	781b      	ldrb	r3, [r3, #0]
10004a28:	1c10      	adds	r0, r2, #0
10004a2a:	1c19      	adds	r1, r3, #0
10004a2c:	f7ff f8e0 	bl	10003bf0 <calculate_minfifosize>
10004a30:	1c03      	adds	r3, r0, #0
10004a32:	613b      	str	r3, [r7, #16]

  fifo_limit = (uint8_t)(calculate_minfifosize(data_size, minfifo_value));
10004a34:	683a      	ldr	r2, [r7, #0]
10004a36:	693b      	ldr	r3, [r7, #16]
10004a38:	1c10      	adds	r0, r2, #0
10004a3a:	1c19      	adds	r1, r3, #0
10004a3c:	f7ff f8d8 	bl	10003bf0 <calculate_minfifosize>
10004a40:	1c02      	adds	r2, r0, #0
10004a42:	230f      	movs	r3, #15
10004a44:	18fb      	adds	r3, r7, r3
10004a46:	701a      	strb	r2, [r3, #0]

  /* Set the limit value */
  I2C_MASTER_SetRXFIFOTriggerLimit((I2C_MASTER_t *)handle, handle->config->rxFIFO_size, ((uint32_t)fifo_limit - 1U));
10004a48:	687b      	ldr	r3, [r7, #4]
10004a4a:	685b      	ldr	r3, [r3, #4]
10004a4c:	2227      	movs	r2, #39	; 0x27
10004a4e:	5c9b      	ldrb	r3, [r3, r2]
10004a50:	1c19      	adds	r1, r3, #0
10004a52:	230f      	movs	r3, #15
10004a54:	18fb      	adds	r3, r7, r3
10004a56:	781b      	ldrb	r3, [r3, #0]
10004a58:	3b01      	subs	r3, #1
10004a5a:	687a      	ldr	r2, [r7, #4]
10004a5c:	1c10      	adds	r0, r2, #0
10004a5e:	1c1a      	adds	r2, r3, #0
10004a60:	f7fe fff4 	bl	10003a4c <I2C_MASTER_SetRXFIFOTriggerLimit>
}
10004a64:	46bd      	mov	sp, r7
10004a66:	b006      	add	sp, #24
10004a68:	bd80      	pop	{r7, pc}
10004a6a:	46c0      	nop			; (mov r8, r8)

10004a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004a6c:	b580      	push	{r7, lr}
10004a6e:	b082      	sub	sp, #8
10004a70:	af00      	add	r7, sp, #0
10004a72:	1c02      	adds	r2, r0, #0
10004a74:	1dfb      	adds	r3, r7, #7
10004a76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004a78:	1dfb      	adds	r3, r7, #7
10004a7a:	781b      	ldrb	r3, [r3, #0]
10004a7c:	2b7f      	cmp	r3, #127	; 0x7f
10004a7e:	d809      	bhi.n	10004a94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10004a80:	4b06      	ldr	r3, [pc, #24]	; (10004a9c <__NVIC_EnableIRQ+0x30>)
10004a82:	1dfa      	adds	r2, r7, #7
10004a84:	7812      	ldrb	r2, [r2, #0]
10004a86:	1c11      	adds	r1, r2, #0
10004a88:	221f      	movs	r2, #31
10004a8a:	400a      	ands	r2, r1
10004a8c:	2101      	movs	r1, #1
10004a8e:	4091      	lsls	r1, r2
10004a90:	1c0a      	adds	r2, r1, #0
10004a92:	601a      	str	r2, [r3, #0]
  }
}
10004a94:	46bd      	mov	sp, r7
10004a96:	b002      	add	sp, #8
10004a98:	bd80      	pop	{r7, pc}
10004a9a:	46c0      	nop			; (mov r8, r8)
10004a9c:	e000e100 	.word	0xe000e100

10004aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004aa0:	b5b0      	push	{r4, r5, r7, lr}
10004aa2:	b082      	sub	sp, #8
10004aa4:	af00      	add	r7, sp, #0
10004aa6:	1c02      	adds	r2, r0, #0
10004aa8:	6039      	str	r1, [r7, #0]
10004aaa:	1dfb      	adds	r3, r7, #7
10004aac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004aae:	1dfb      	adds	r3, r7, #7
10004ab0:	781b      	ldrb	r3, [r3, #0]
10004ab2:	2b7f      	cmp	r3, #127	; 0x7f
10004ab4:	d827      	bhi.n	10004b06 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004ab6:	4c2d      	ldr	r4, [pc, #180]	; (10004b6c <__NVIC_SetPriority+0xcc>)
10004ab8:	1dfb      	adds	r3, r7, #7
10004aba:	781b      	ldrb	r3, [r3, #0]
10004abc:	b25b      	sxtb	r3, r3
10004abe:	089b      	lsrs	r3, r3, #2
10004ac0:	492a      	ldr	r1, [pc, #168]	; (10004b6c <__NVIC_SetPriority+0xcc>)
10004ac2:	1dfa      	adds	r2, r7, #7
10004ac4:	7812      	ldrb	r2, [r2, #0]
10004ac6:	b252      	sxtb	r2, r2
10004ac8:	0892      	lsrs	r2, r2, #2
10004aca:	32c0      	adds	r2, #192	; 0xc0
10004acc:	0092      	lsls	r2, r2, #2
10004ace:	5852      	ldr	r2, [r2, r1]
10004ad0:	1df9      	adds	r1, r7, #7
10004ad2:	7809      	ldrb	r1, [r1, #0]
10004ad4:	1c08      	adds	r0, r1, #0
10004ad6:	2103      	movs	r1, #3
10004ad8:	4001      	ands	r1, r0
10004ada:	00c9      	lsls	r1, r1, #3
10004adc:	1c08      	adds	r0, r1, #0
10004ade:	21ff      	movs	r1, #255	; 0xff
10004ae0:	4081      	lsls	r1, r0
10004ae2:	43c9      	mvns	r1, r1
10004ae4:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004ae6:	683a      	ldr	r2, [r7, #0]
10004ae8:	0192      	lsls	r2, r2, #6
10004aea:	20ff      	movs	r0, #255	; 0xff
10004aec:	4002      	ands	r2, r0
10004aee:	1df8      	adds	r0, r7, #7
10004af0:	7800      	ldrb	r0, [r0, #0]
10004af2:	1c05      	adds	r5, r0, #0
10004af4:	2003      	movs	r0, #3
10004af6:	4028      	ands	r0, r5
10004af8:	00c0      	lsls	r0, r0, #3
10004afa:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004afc:	430a      	orrs	r2, r1
10004afe:	33c0      	adds	r3, #192	; 0xc0
10004b00:	009b      	lsls	r3, r3, #2
10004b02:	511a      	str	r2, [r3, r4]
10004b04:	e02e      	b.n	10004b64 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004b06:	4c1a      	ldr	r4, [pc, #104]	; (10004b70 <__NVIC_SetPriority+0xd0>)
10004b08:	1dfb      	adds	r3, r7, #7
10004b0a:	781b      	ldrb	r3, [r3, #0]
10004b0c:	1c1a      	adds	r2, r3, #0
10004b0e:	230f      	movs	r3, #15
10004b10:	4013      	ands	r3, r2
10004b12:	3b08      	subs	r3, #8
10004b14:	0899      	lsrs	r1, r3, #2
10004b16:	4a16      	ldr	r2, [pc, #88]	; (10004b70 <__NVIC_SetPriority+0xd0>)
10004b18:	1dfb      	adds	r3, r7, #7
10004b1a:	781b      	ldrb	r3, [r3, #0]
10004b1c:	1c18      	adds	r0, r3, #0
10004b1e:	230f      	movs	r3, #15
10004b20:	4003      	ands	r3, r0
10004b22:	3b08      	subs	r3, #8
10004b24:	089b      	lsrs	r3, r3, #2
10004b26:	3306      	adds	r3, #6
10004b28:	009b      	lsls	r3, r3, #2
10004b2a:	18d3      	adds	r3, r2, r3
10004b2c:	685b      	ldr	r3, [r3, #4]
10004b2e:	1dfa      	adds	r2, r7, #7
10004b30:	7812      	ldrb	r2, [r2, #0]
10004b32:	1c10      	adds	r0, r2, #0
10004b34:	2203      	movs	r2, #3
10004b36:	4002      	ands	r2, r0
10004b38:	00d2      	lsls	r2, r2, #3
10004b3a:	1c10      	adds	r0, r2, #0
10004b3c:	22ff      	movs	r2, #255	; 0xff
10004b3e:	4082      	lsls	r2, r0
10004b40:	43d2      	mvns	r2, r2
10004b42:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004b44:	683b      	ldr	r3, [r7, #0]
10004b46:	019b      	lsls	r3, r3, #6
10004b48:	20ff      	movs	r0, #255	; 0xff
10004b4a:	4003      	ands	r3, r0
10004b4c:	1df8      	adds	r0, r7, #7
10004b4e:	7800      	ldrb	r0, [r0, #0]
10004b50:	1c05      	adds	r5, r0, #0
10004b52:	2003      	movs	r0, #3
10004b54:	4028      	ands	r0, r5
10004b56:	00c0      	lsls	r0, r0, #3
10004b58:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004b5a:	431a      	orrs	r2, r3
10004b5c:	1d8b      	adds	r3, r1, #6
10004b5e:	009b      	lsls	r3, r3, #2
10004b60:	18e3      	adds	r3, r4, r3
10004b62:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004b64:	46bd      	mov	sp, r7
10004b66:	b002      	add	sp, #8
10004b68:	bdb0      	pop	{r4, r5, r7, pc}
10004b6a:	46c0      	nop			; (mov r8, r8)
10004b6c:	e000e100 	.word	0xe000e100
10004b70:	e000ed00 	.word	0xe000ed00

10004b74 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10004b74:	b580      	push	{r7, lr}
10004b76:	b082      	sub	sp, #8
10004b78:	af00      	add	r7, sp, #0
10004b7a:	6078      	str	r0, [r7, #4]
10004b7c:	1c08      	adds	r0, r1, #0
10004b7e:	1c11      	adds	r1, r2, #0
10004b80:	1cfb      	adds	r3, r7, #3
10004b82:	1c02      	adds	r2, r0, #0
10004b84:	701a      	strb	r2, [r3, #0]
10004b86:	1cbb      	adds	r3, r7, #2
10004b88:	1c0a      	adds	r2, r1, #0
10004b8a:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10004b8c:	1cfb      	adds	r3, r7, #3
10004b8e:	7818      	ldrb	r0, [r3, #0]
10004b90:	1cfb      	adds	r3, r7, #3
10004b92:	781b      	ldrb	r3, [r3, #0]
10004b94:	687a      	ldr	r2, [r7, #4]
10004b96:	3306      	adds	r3, #6
10004b98:	009b      	lsls	r3, r3, #2
10004b9a:	18d3      	adds	r3, r2, r3
10004b9c:	685b      	ldr	r3, [r3, #4]
10004b9e:	2207      	movs	r2, #7
10004ba0:	4393      	bics	r3, r2
10004ba2:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10004ba4:	1cbb      	adds	r3, r7, #2
10004ba6:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10004ba8:	431a      	orrs	r2, r3
10004baa:	6879      	ldr	r1, [r7, #4]
10004bac:	1d83      	adds	r3, r0, #6
10004bae:	009b      	lsls	r3, r3, #2
10004bb0:	18cb      	adds	r3, r1, r3
10004bb2:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10004bb4:	46bd      	mov	sp, r7
10004bb6:	b002      	add	sp, #8
10004bb8:	bd80      	pop	{r7, pc}
10004bba:	46c0      	nop			; (mov r8, r8)

10004bbc <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10004bbc:	b580      	push	{r7, lr}
10004bbe:	b082      	sub	sp, #8
10004bc0:	af00      	add	r7, sp, #0
10004bc2:	6078      	str	r0, [r7, #4]
10004bc4:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
10004bc6:	687a      	ldr	r2, [r7, #4]
10004bc8:	2384      	movs	r3, #132	; 0x84
10004bca:	005b      	lsls	r3, r3, #1
10004bcc:	58d2      	ldr	r2, [r2, r3]
10004bce:	683b      	ldr	r3, [r7, #0]
10004bd0:	431a      	orrs	r2, r3
10004bd2:	1c11      	adds	r1, r2, #0
10004bd4:	687a      	ldr	r2, [r7, #4]
10004bd6:	2384      	movs	r3, #132	; 0x84
10004bd8:	005b      	lsls	r3, r3, #1
10004bda:	50d1      	str	r1, [r2, r3]
}
10004bdc:	46bd      	mov	sp, r7
10004bde:	b002      	add	sp, #8
10004be0:	bd80      	pop	{r7, pc}
10004be2:	46c0      	nop			; (mov r8, r8)

10004be4 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10004be4:	b580      	push	{r7, lr}
10004be6:	b082      	sub	sp, #8
10004be8:	af00      	add	r7, sp, #0
10004bea:	6078      	str	r0, [r7, #4]
10004bec:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
10004bee:	687a      	ldr	r2, [r7, #4]
10004bf0:	2386      	movs	r3, #134	; 0x86
10004bf2:	005b      	lsls	r3, r3, #1
10004bf4:	58d2      	ldr	r2, [r2, r3]
10004bf6:	683b      	ldr	r3, [r7, #0]
10004bf8:	431a      	orrs	r2, r3
10004bfa:	1c11      	adds	r1, r2, #0
10004bfc:	687a      	ldr	r2, [r7, #4]
10004bfe:	2386      	movs	r3, #134	; 0x86
10004c00:	005b      	lsls	r3, r3, #1
10004c02:	50d1      	str	r1, [r2, r3]
}
10004c04:	46bd      	mov	sp, r7
10004c06:	b002      	add	sp, #8
10004c08:	bd80      	pop	{r7, pc}
10004c0a:	46c0      	nop			; (mov r8, r8)

10004c0c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
10004c0c:	b580      	push	{r7, lr}
10004c0e:	b082      	sub	sp, #8
10004c10:	af00      	add	r7, sp, #0
10004c12:	6078      	str	r0, [r7, #4]
10004c14:	1c0a      	adds	r2, r1, #0
10004c16:	1cfb      	adds	r3, r7, #3
10004c18:	701a      	strb	r2, [r3, #0]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
10004c1a:	687b      	ldr	r3, [r7, #4]
10004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004c1e:	220f      	movs	r2, #15
10004c20:	4393      	bics	r3, r2
10004c22:	1c1a      	adds	r2, r3, #0
10004c24:	1cfb      	adds	r3, r7, #3
10004c26:	781b      	ldrb	r3, [r3, #0]
10004c28:	431a      	orrs	r2, r3
10004c2a:	687b      	ldr	r3, [r7, #4]
10004c2c:	641a      	str	r2, [r3, #64]	; 0x40
}
10004c2e:	46bd      	mov	sp, r7
10004c30:	b002      	add	sp, #8
10004c32:	bd80      	pop	{r7, pc}

10004c34 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
10004c34:	b580      	push	{r7, lr}
10004c36:	b082      	sub	sp, #8
10004c38:	af00      	add	r7, sp, #0
10004c3a:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
10004c3c:	687b      	ldr	r3, [r7, #4]
10004c3e:	1c18      	adds	r0, r3, #0
10004c40:	2104      	movs	r1, #4
10004c42:	f7ff ffe3 	bl	10004c0c <XMC_USIC_CH_SetMode>
}
10004c46:	46bd      	mov	sp, r7
10004c48:	b002      	add	sp, #8
10004c4a:	bd80      	pop	{r7, pc}

10004c4c <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(200000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
10004c4c:	b580      	push	{r7, lr}
10004c4e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)0, XMC_GPIO_MODE_INPUT_TRISTATE);
10004c50:	4b06      	ldr	r3, [pc, #24]	; (10004c6c <I2C_MASTER_0_disable_io+0x20>)
10004c52:	1c18      	adds	r0, r3, #0
10004c54:	2100      	movs	r1, #0
10004c56:	2200      	movs	r2, #0
10004c58:	f7fd f862 	bl	10001d20 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, XMC_GPIO_MODE_INPUT_TRISTATE);
10004c5c:	4b03      	ldr	r3, [pc, #12]	; (10004c6c <I2C_MASTER_0_disable_io+0x20>)
10004c5e:	1c18      	adds	r0, r3, #0
10004c60:	2101      	movs	r1, #1
10004c62:	2200      	movs	r2, #0
10004c64:	f7fd f85c 	bl	10001d20 <XMC_GPIO_SetMode>
}
10004c68:	46bd      	mov	sp, r7
10004c6a:	bd80      	pop	{r7, pc}
10004c6c:	40040000 	.word	0x40040000

10004c70 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
10004c70:	b580      	push	{r7, lr}
10004c72:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)0, I2C_MASTER_0_sda_pin_config.mode);
10004c74:	23e4      	movs	r3, #228	; 0xe4
10004c76:	4a07      	ldr	r2, [pc, #28]	; (10004c94 <I2C_MASTER_0_enable_io+0x24>)
10004c78:	1c10      	adds	r0, r2, #0
10004c7a:	2100      	movs	r1, #0
10004c7c:	1c1a      	adds	r2, r3, #0
10004c7e:	f7fd f84f 	bl	10001d20 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, I2C_MASTER_0_scl_pin_config.mode);
10004c82:	23e0      	movs	r3, #224	; 0xe0
10004c84:	4a03      	ldr	r2, [pc, #12]	; (10004c94 <I2C_MASTER_0_enable_io+0x24>)
10004c86:	1c10      	adds	r0, r2, #0
10004c88:	2101      	movs	r1, #1
10004c8a:	1c1a      	adds	r2, r3, #0
10004c8c:	f7fd f848 	bl	10001d20 <XMC_GPIO_SetMode>
}
10004c90:	46bd      	mov	sp, r7
10004c92:	bd80      	pop	{r7, pc}
10004c94:	40040000 	.word	0x40040000

10004c98 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
10004c98:	b580      	push	{r7, lr}
10004c9a:	b082      	sub	sp, #8
10004c9c:	af00      	add	r7, sp, #0
 
  const uint32_t tx_fifo_events = (uint32_t)(0);
10004c9e:	2300      	movs	r3, #0
10004ca0:	607b      	str	r3, [r7, #4]
  const uint32_t rx_fifo_events = (uint32_t)(XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE | XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
10004ca2:	23c0      	movs	r3, #192	; 0xc0
10004ca4:	05db      	lsls	r3, r3, #23
10004ca6:	603b      	str	r3, [r7, #0]
  XMC_I2C_CH_Init(XMC_I2C1_CH1, &I2C_MASTER_0_channel_config);
10004ca8:	4a41      	ldr	r2, [pc, #260]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004caa:	4b42      	ldr	r3, [pc, #264]	; (10004db4 <I2C_MASTER_0_init+0x11c>)
10004cac:	1c10      	adds	r0, r2, #0
10004cae:	1c19      	adds	r1, r3, #0
10004cb0:	f7fd f8c0 	bl	10001e34 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX0, 0);
10004cb4:	4b3e      	ldr	r3, [pc, #248]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004cb6:	1c18      	adds	r0, r3, #0
10004cb8:	2100      	movs	r1, #0
10004cba:	2200      	movs	r2, #0
10004cbc:	f7ff ff5a 	bl	10004b74 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX1, 0);
10004cc0:	4b3b      	ldr	r3, [pc, #236]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004cc2:	1c18      	adds	r0, r3, #0
10004cc4:	2101      	movs	r1, #1
10004cc6:	2200      	movs	r2, #0
10004cc8:	f7ff ff54 	bl	10004b74 <XMC_USIC_CH_SetInputSource>

  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX3, 0U);
10004ccc:	4b38      	ldr	r3, [pc, #224]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004cce:	1c18      	adds	r0, r3, #0
10004cd0:	2103      	movs	r1, #3
10004cd2:	2200      	movs	r2, #0
10004cd4:	f7ff ff4e 	bl	10004b74 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX4, 0U);
10004cd8:	4b35      	ldr	r3, [pc, #212]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004cda:	1c18      	adds	r0, r3, #0
10004cdc:	2104      	movs	r1, #4
10004cde:	2200      	movs	r2, #0
10004ce0:	f7ff ff48 	bl	10004b74 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C1_CH1, XMC_USIC_CH_INPUT_DX5, 0U);
10004ce4:	4b32      	ldr	r3, [pc, #200]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004ce6:	1c18      	adds	r0, r3, #0
10004ce8:	2105      	movs	r1, #5
10004cea:	2200      	movs	r2, #0
10004cec:	f7ff ff42 	bl	10004b74 <XMC_USIC_CH_SetInputSource>
  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C1_CH1,
10004cf0:	4b2f      	ldr	r3, [pc, #188]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004cf2:	1c18      	adds	r0, r3, #0
10004cf4:	2110      	movs	r1, #16
10004cf6:	2204      	movs	r2, #4
10004cf8:	2301      	movs	r3, #1
10004cfa:	f7fd fcbd 	bl	10002678 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
10004cfe:	4b2c      	ldr	r3, [pc, #176]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d00:	1c18      	adds	r0, r3, #0
10004d02:	2110      	movs	r1, #16
10004d04:	2201      	movs	r2, #1
10004d06:	f7fd fd65 	bl	100027d4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             ((uint32_t)1));
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_I2C1_CH1, tx_fifo_events);
10004d0a:	4a29      	ldr	r2, [pc, #164]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d0c:	687b      	ldr	r3, [r7, #4]
10004d0e:	1c10      	adds	r0, r2, #0
10004d10:	1c19      	adds	r1, r3, #0
10004d12:	f7ff ff53 	bl	10004bbc <XMC_USIC_CH_TXFIFO_EnableEvent>
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C1_CH1,
10004d16:	4b26      	ldr	r3, [pc, #152]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d18:	1c18      	adds	r0, r3, #0
10004d1a:	2100      	movs	r1, #0
10004d1c:	2204      	movs	r2, #4
10004d1e:	230f      	movs	r3, #15
10004d20:	f7fd fcd8 	bl	100026d4 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
10004d24:	4b22      	ldr	r3, [pc, #136]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d26:	1c18      	adds	r0, r3, #0
10004d28:	2110      	movs	r1, #16
10004d2a:	2200      	movs	r2, #0
10004d2c:	f7fd fd76 	bl	1000281c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_I2C1_CH1,
10004d30:	4b1f      	ldr	r3, [pc, #124]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d32:	1c18      	adds	r0, r3, #0
10004d34:	2113      	movs	r1, #19
10004d36:	2200      	movs	r2, #0
10004d38:	f7fd fd70 	bl	1000281c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                               XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                              ((uint32_t)0x0));
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_I2C1_CH1, rx_fifo_events);
10004d3c:	4a1c      	ldr	r2, [pc, #112]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d3e:	683b      	ldr	r3, [r7, #0]
10004d40:	1c10      	adds	r0, r2, #0
10004d42:	1c19      	adds	r1, r3, #0
10004d44:	f7ff ff4e 	bl	10004be4 <XMC_USIC_CH_RXFIFO_EnableEvent>
  XMC_USIC_CH_SetInterruptNodePointer(XMC_I2C1_CH1,
10004d48:	4b19      	ldr	r3, [pc, #100]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d4a:	1c18      	adds	r0, r3, #0
10004d4c:	2110      	movs	r1, #16
10004d4e:	2201      	movs	r2, #1
10004d50:	f7fd fd20 	bl	10002794 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                       ((uint32_t)1));
  XMC_I2C_CH_Start(XMC_I2C1_CH1);
10004d54:	4b16      	ldr	r3, [pc, #88]	; (10004db0 <I2C_MASTER_0_init+0x118>)
10004d56:	1c18      	adds	r0, r3, #0
10004d58:	f7ff ff6c 	bl	10004c34 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)0, &I2C_MASTER_0_sda_pin_config);
10004d5c:	4a16      	ldr	r2, [pc, #88]	; (10004db8 <I2C_MASTER_0_init+0x120>)
10004d5e:	4b17      	ldr	r3, [pc, #92]	; (10004dbc <I2C_MASTER_0_init+0x124>)
10004d60:	1c10      	adds	r0, r2, #0
10004d62:	2100      	movs	r1, #0
10004d64:	1c1a      	adds	r2, r3, #0
10004d66:	f7fc fb03 	bl	10001370 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)1, &I2C_MASTER_0_scl_pin_config);
10004d6a:	4a13      	ldr	r2, [pc, #76]	; (10004db8 <I2C_MASTER_0_init+0x120>)
10004d6c:	4b14      	ldr	r3, [pc, #80]	; (10004dc0 <I2C_MASTER_0_init+0x128>)
10004d6e:	1c10      	adds	r0, r2, #0
10004d70:	2101      	movs	r1, #1
10004d72:	1c1a      	adds	r2, r3, #0
10004d74:	f7fc fafc 	bl	10001370 <XMC_GPIO_Init>

  NVIC_SetPriority((IRQn_Type)10, 3);
10004d78:	200a      	movs	r0, #10
10004d7a:	2103      	movs	r1, #3
10004d7c:	f7ff fe90 	bl	10004aa0 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(10, XMC_SCU_IRQCTRL_USIC1_SR1_IRQ10);
10004d80:	4b10      	ldr	r3, [pc, #64]	; (10004dc4 <I2C_MASTER_0_init+0x12c>)
10004d82:	200a      	movs	r0, #10
10004d84:	1c19      	adds	r1, r3, #0
10004d86:	f7fc fe5b 	bl	10001a40 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)10);
10004d8a:	200a      	movs	r0, #10
10004d8c:	f7ff fe6e 	bl	10004a6c <__NVIC_EnableIRQ>
  NVIC_SetPriority((IRQn_Type)9, 3);
10004d90:	2009      	movs	r0, #9
10004d92:	2103      	movs	r1, #3
10004d94:	f7ff fe84 	bl	10004aa0 <__NVIC_SetPriority>
  XMC_SCU_SetInterruptControl(9, XMC_SCU_IRQCTRL_USIC1_SR0_IRQ9);
10004d98:	4b0b      	ldr	r3, [pc, #44]	; (10004dc8 <I2C_MASTER_0_init+0x130>)
10004d9a:	2009      	movs	r0, #9
10004d9c:	1c19      	adds	r1, r3, #0
10004d9e:	f7fc fe4f 	bl	10001a40 <XMC_SCU_SetInterruptControl>
  NVIC_EnableIRQ((IRQn_Type)9);}
10004da2:	2009      	movs	r0, #9
10004da4:	f7ff fe62 	bl	10004a6c <__NVIC_EnableIRQ>
10004da8:	46bd      	mov	sp, r7
10004daa:	b002      	add	sp, #8
10004dac:	bd80      	pop	{r7, pc}
10004dae:	46c0      	nop			; (mov r8, r8)
10004db0:	48004200 	.word	0x48004200
10004db4:	1000c2cc 	.word	0x1000c2cc
10004db8:	40040000 	.word	0x40040000
10004dbc:	1000c2bc 	.word	0x1000c2bc
10004dc0:	1000c2c4 	.word	0x1000c2c4
10004dc4:	00000a01 	.word	0x00000a01
10004dc8:	00000901 	.word	0x00000901

10004dcc <IRQ10_Handler>:
/*Transmit ISR*/
void I2C_MASTER_0_TX_HANDLER()
{
10004dcc:	b580      	push	{r7, lr}
10004dce:	af00      	add	r7, sp, #0
  I2C_MASTER_TransmitHandler(&I2C_MASTER_0);
10004dd0:	4b02      	ldr	r3, [pc, #8]	; (10004ddc <IRQ10_Handler+0x10>)
10004dd2:	1c18      	adds	r0, r3, #0
10004dd4:	f7fe ff8e 	bl	10003cf4 <I2C_MASTER_TransmitHandler>
}
10004dd8:	46bd      	mov	sp, r7
10004dda:	bd80      	pop	{r7, pc}
10004ddc:	200005ec 	.word	0x200005ec

10004de0 <IRQ9_Handler>:
/*Receive ISR*/
void I2C_MASTER_0_RX_HANDLER()
{
10004de0:	b580      	push	{r7, lr}
10004de2:	af00      	add	r7, sp, #0
  I2C_MASTER_ReceiveHandler(&I2C_MASTER_0);
10004de4:	4b02      	ldr	r3, [pc, #8]	; (10004df0 <IRQ9_Handler+0x10>)
10004de6:	1c18      	adds	r0, r3, #0
10004de8:	f7ff fc28 	bl	1000463c <I2C_MASTER_ReceiveHandler>
}
10004dec:	46bd      	mov	sp, r7
10004dee:	bd80      	pop	{r7, pc}
10004df0:	200005ec 	.word	0x200005ec

10004df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004df4:	b580      	push	{r7, lr}
10004df6:	b082      	sub	sp, #8
10004df8:	af00      	add	r7, sp, #0
10004dfa:	1c02      	adds	r2, r0, #0
10004dfc:	1dfb      	adds	r3, r7, #7
10004dfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004e00:	1dfb      	adds	r3, r7, #7
10004e02:	781b      	ldrb	r3, [r3, #0]
10004e04:	2b7f      	cmp	r3, #127	; 0x7f
10004e06:	d809      	bhi.n	10004e1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10004e08:	4b06      	ldr	r3, [pc, #24]	; (10004e24 <__NVIC_EnableIRQ+0x30>)
10004e0a:	1dfa      	adds	r2, r7, #7
10004e0c:	7812      	ldrb	r2, [r2, #0]
10004e0e:	1c11      	adds	r1, r2, #0
10004e10:	221f      	movs	r2, #31
10004e12:	400a      	ands	r2, r1
10004e14:	2101      	movs	r1, #1
10004e16:	4091      	lsls	r1, r2
10004e18:	1c0a      	adds	r2, r1, #0
10004e1a:	601a      	str	r2, [r3, #0]
  }
}
10004e1c:	46bd      	mov	sp, r7
10004e1e:	b002      	add	sp, #8
10004e20:	bd80      	pop	{r7, pc}
10004e22:	46c0      	nop			; (mov r8, r8)
10004e24:	e000e100 	.word	0xe000e100

10004e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004e28:	b5b0      	push	{r4, r5, r7, lr}
10004e2a:	b082      	sub	sp, #8
10004e2c:	af00      	add	r7, sp, #0
10004e2e:	1c02      	adds	r2, r0, #0
10004e30:	6039      	str	r1, [r7, #0]
10004e32:	1dfb      	adds	r3, r7, #7
10004e34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004e36:	1dfb      	adds	r3, r7, #7
10004e38:	781b      	ldrb	r3, [r3, #0]
10004e3a:	2b7f      	cmp	r3, #127	; 0x7f
10004e3c:	d827      	bhi.n	10004e8e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004e3e:	4c2d      	ldr	r4, [pc, #180]	; (10004ef4 <__NVIC_SetPriority+0xcc>)
10004e40:	1dfb      	adds	r3, r7, #7
10004e42:	781b      	ldrb	r3, [r3, #0]
10004e44:	b25b      	sxtb	r3, r3
10004e46:	089b      	lsrs	r3, r3, #2
10004e48:	492a      	ldr	r1, [pc, #168]	; (10004ef4 <__NVIC_SetPriority+0xcc>)
10004e4a:	1dfa      	adds	r2, r7, #7
10004e4c:	7812      	ldrb	r2, [r2, #0]
10004e4e:	b252      	sxtb	r2, r2
10004e50:	0892      	lsrs	r2, r2, #2
10004e52:	32c0      	adds	r2, #192	; 0xc0
10004e54:	0092      	lsls	r2, r2, #2
10004e56:	5852      	ldr	r2, [r2, r1]
10004e58:	1df9      	adds	r1, r7, #7
10004e5a:	7809      	ldrb	r1, [r1, #0]
10004e5c:	1c08      	adds	r0, r1, #0
10004e5e:	2103      	movs	r1, #3
10004e60:	4001      	ands	r1, r0
10004e62:	00c9      	lsls	r1, r1, #3
10004e64:	1c08      	adds	r0, r1, #0
10004e66:	21ff      	movs	r1, #255	; 0xff
10004e68:	4081      	lsls	r1, r0
10004e6a:	43c9      	mvns	r1, r1
10004e6c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004e6e:	683a      	ldr	r2, [r7, #0]
10004e70:	0192      	lsls	r2, r2, #6
10004e72:	20ff      	movs	r0, #255	; 0xff
10004e74:	4002      	ands	r2, r0
10004e76:	1df8      	adds	r0, r7, #7
10004e78:	7800      	ldrb	r0, [r0, #0]
10004e7a:	1c05      	adds	r5, r0, #0
10004e7c:	2003      	movs	r0, #3
10004e7e:	4028      	ands	r0, r5
10004e80:	00c0      	lsls	r0, r0, #3
10004e82:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004e84:	430a      	orrs	r2, r1
10004e86:	33c0      	adds	r3, #192	; 0xc0
10004e88:	009b      	lsls	r3, r3, #2
10004e8a:	511a      	str	r2, [r3, r4]
10004e8c:	e02e      	b.n	10004eec <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004e8e:	4c1a      	ldr	r4, [pc, #104]	; (10004ef8 <__NVIC_SetPriority+0xd0>)
10004e90:	1dfb      	adds	r3, r7, #7
10004e92:	781b      	ldrb	r3, [r3, #0]
10004e94:	1c1a      	adds	r2, r3, #0
10004e96:	230f      	movs	r3, #15
10004e98:	4013      	ands	r3, r2
10004e9a:	3b08      	subs	r3, #8
10004e9c:	0899      	lsrs	r1, r3, #2
10004e9e:	4a16      	ldr	r2, [pc, #88]	; (10004ef8 <__NVIC_SetPriority+0xd0>)
10004ea0:	1dfb      	adds	r3, r7, #7
10004ea2:	781b      	ldrb	r3, [r3, #0]
10004ea4:	1c18      	adds	r0, r3, #0
10004ea6:	230f      	movs	r3, #15
10004ea8:	4003      	ands	r3, r0
10004eaa:	3b08      	subs	r3, #8
10004eac:	089b      	lsrs	r3, r3, #2
10004eae:	3306      	adds	r3, #6
10004eb0:	009b      	lsls	r3, r3, #2
10004eb2:	18d3      	adds	r3, r2, r3
10004eb4:	685b      	ldr	r3, [r3, #4]
10004eb6:	1dfa      	adds	r2, r7, #7
10004eb8:	7812      	ldrb	r2, [r2, #0]
10004eba:	1c10      	adds	r0, r2, #0
10004ebc:	2203      	movs	r2, #3
10004ebe:	4002      	ands	r2, r0
10004ec0:	00d2      	lsls	r2, r2, #3
10004ec2:	1c10      	adds	r0, r2, #0
10004ec4:	22ff      	movs	r2, #255	; 0xff
10004ec6:	4082      	lsls	r2, r0
10004ec8:	43d2      	mvns	r2, r2
10004eca:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004ecc:	683b      	ldr	r3, [r7, #0]
10004ece:	019b      	lsls	r3, r3, #6
10004ed0:	20ff      	movs	r0, #255	; 0xff
10004ed2:	4003      	ands	r3, r0
10004ed4:	1df8      	adds	r0, r7, #7
10004ed6:	7800      	ldrb	r0, [r0, #0]
10004ed8:	1c05      	adds	r5, r0, #0
10004eda:	2003      	movs	r0, #3
10004edc:	4028      	ands	r0, r5
10004ede:	00c0      	lsls	r0, r0, #3
10004ee0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004ee2:	431a      	orrs	r2, r3
10004ee4:	1d8b      	adds	r3, r1, #6
10004ee6:	009b      	lsls	r3, r3, #2
10004ee8:	18e3      	adds	r3, r4, r3
10004eea:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004eec:	46bd      	mov	sp, r7
10004eee:	b002      	add	sp, #8
10004ef0:	bdb0      	pop	{r4, r5, r7, pc}
10004ef2:	46c0      	nop			; (mov r8, r8)
10004ef4:	e000e100 	.word	0xe000e100
10004ef8:	e000ed00 	.word	0xe000ed00

10004efc <GLOBAL_SCU_XMC1_Init>:

/*  Function to configure SCU Interrupts based on  user configuration.
 * 
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_XMC1_t*const handle)
{
10004efc:	b580      	push	{r7, lr}
10004efe:	b084      	sub	sp, #16
10004f00:	af00      	add	r7, sp, #0
10004f02:	6078      	str	r0, [r7, #4]
  GLOBAL_SCU_XMC1_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
10004f04:	687b      	ldr	r3, [r7, #4]
10004f06:	791b      	ldrb	r3, [r3, #4]
10004f08:	2201      	movs	r2, #1
10004f0a:	4053      	eors	r3, r2
10004f0c:	b2db      	uxtb	r3, r3
10004f0e:	2b00      	cmp	r3, #0
10004f10:	d044      	beq.n	10004f9c <GLOBAL_SCU_XMC1_Init+0xa0>
  {
    NVIC_SetPriority((IRQn_Type)0U,(uint32_t)handle->config->priority[0]);
10004f12:	687b      	ldr	r3, [r7, #4]
10004f14:	681b      	ldr	r3, [r3, #0]
10004f16:	781b      	ldrb	r3, [r3, #0]
10004f18:	2000      	movs	r0, #0
10004f1a:	1c19      	adds	r1, r3, #0
10004f1c:	f7ff ff84 	bl	10004e28 <__NVIC_SetPriority>
  	NVIC_SetPriority((IRQn_Type)1U,(uint32_t)handle->config->priority[1]);
10004f20:	687b      	ldr	r3, [r7, #4]
10004f22:	681b      	ldr	r3, [r3, #0]
10004f24:	785b      	ldrb	r3, [r3, #1]
10004f26:	2001      	movs	r0, #1
10004f28:	1c19      	adds	r1, r3, #0
10004f2a:	f7ff ff7d 	bl	10004e28 <__NVIC_SetPriority>
  	NVIC_SetPriority((IRQn_Type)2U,(uint32_t)handle->config->priority[2]);
10004f2e:	687b      	ldr	r3, [r7, #4]
10004f30:	681b      	ldr	r3, [r3, #0]
10004f32:	789b      	ldrb	r3, [r3, #2]
10004f34:	2002      	movs	r0, #2
10004f36:	1c19      	adds	r1, r3, #0
10004f38:	f7ff ff76 	bl	10004e28 <__NVIC_SetPriority>

  	/* enable the IRQ0 */
  	if (handle->config->enable_at_init[0] == true)
10004f3c:	687b      	ldr	r3, [r7, #4]
10004f3e:	681b      	ldr	r3, [r3, #0]
10004f40:	78db      	ldrb	r3, [r3, #3]
10004f42:	2b00      	cmp	r3, #0
10004f44:	d006      	beq.n	10004f54 <GLOBAL_SCU_XMC1_Init+0x58>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(0, XMC_SCU_IRQCTRL_SCU_SR0_IRQ0);
10004f46:	2000      	movs	r0, #0
10004f48:	2100      	movs	r1, #0
10004f4a:	f7fc fd79 	bl	10001a40 <XMC_SCU_SetInterruptControl>
#endif
  	  NVIC_EnableIRQ((IRQn_Type)0U);
10004f4e:	2000      	movs	r0, #0
10004f50:	f7ff ff50 	bl	10004df4 <__NVIC_EnableIRQ>
  	}
  	/* enable the IRQ1 */
  	if (handle->config->enable_at_init[1] == true)
10004f54:	687b      	ldr	r3, [r7, #4]
10004f56:	681b      	ldr	r3, [r3, #0]
10004f58:	791b      	ldrb	r3, [r3, #4]
10004f5a:	2b00      	cmp	r3, #0
10004f5c:	d008      	beq.n	10004f70 <GLOBAL_SCU_XMC1_Init+0x74>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(1, XMC_SCU_IRQCTRL_SCU_SR1_IRQ1);
10004f5e:	2380      	movs	r3, #128	; 0x80
10004f60:	005b      	lsls	r3, r3, #1
10004f62:	2001      	movs	r0, #1
10004f64:	1c19      	adds	r1, r3, #0
10004f66:	f7fc fd6b 	bl	10001a40 <XMC_SCU_SetInterruptControl>
#endif
  	  NVIC_EnableIRQ((IRQn_Type)1U);
10004f6a:	2001      	movs	r0, #1
10004f6c:	f7ff ff42 	bl	10004df4 <__NVIC_EnableIRQ>
  	}
  	/* enable the IRQ2 */
  	if (handle->config->enable_at_init[2] == true)
10004f70:	687b      	ldr	r3, [r7, #4]
10004f72:	681b      	ldr	r3, [r3, #0]
10004f74:	795b      	ldrb	r3, [r3, #5]
10004f76:	2b00      	cmp	r3, #0
10004f78:	d008      	beq.n	10004f8c <GLOBAL_SCU_XMC1_Init+0x90>
  	{
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(2, XMC_SCU_IRQCTRL_SCU_SR2_IRQ2);
10004f7a:	2380      	movs	r3, #128	; 0x80
10004f7c:	009b      	lsls	r3, r3, #2
10004f7e:	2002      	movs	r0, #2
10004f80:	1c19      	adds	r1, r3, #0
10004f82:	f7fc fd5d 	bl	10001a40 <XMC_SCU_SetInterruptControl>
#endif
      NVIC_EnableIRQ((IRQn_Type)2U);
10004f86:	2002      	movs	r0, #2
10004f88:	f7ff ff34 	bl	10004df4 <__NVIC_EnableIRQ>
  	}
	handle->initialized = true;
10004f8c:	687b      	ldr	r3, [r7, #4]
10004f8e:	2201      	movs	r2, #1
10004f90:	711a      	strb	r2, [r3, #4]
    initstatus = GLOBAL_SCU_XMC1_STATUS_SUCCESS;
10004f92:	230f      	movs	r3, #15
10004f94:	18fb      	adds	r3, r7, r3
10004f96:	2200      	movs	r2, #0
10004f98:	701a      	strb	r2, [r3, #0]
10004f9a:	e003      	b.n	10004fa4 <GLOBAL_SCU_XMC1_Init+0xa8>
  }
  else
  {
    initstatus = GLOBAL_SCU_XMC1_STATUS_FAILURE;
10004f9c:	230f      	movs	r3, #15
10004f9e:	18fb      	adds	r3, r7, r3
10004fa0:	2201      	movs	r2, #1
10004fa2:	701a      	strb	r2, [r3, #0]
  }
  	
  return (initstatus);
10004fa4:	230f      	movs	r3, #15
10004fa6:	18fb      	adds	r3, r7, r3
10004fa8:	781b      	ldrb	r3, [r3, #0]
}
10004faa:	1c18      	adds	r0, r3, #0
10004fac:	46bd      	mov	sp, r7
10004fae:	b004      	add	sp, #16
10004fb0:	bd80      	pop	{r7, pc}
10004fb2:	46c0      	nop			; (mov r8, r8)

10004fb4 <IRQ0_Handler>:
#else
/*
 * @brief  IRQ0 Interrupt Handler
 */
void IRQ0_Handler(void)
{
10004fb4:	b580      	push	{r7, lr}
10004fb6:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(0);
10004fb8:	2000      	movs	r0, #0
10004fba:	f7fc fcc3 	bl	10001944 <XMC_SCU_IRQHandler>
}
10004fbe:	46bd      	mov	sp, r7
10004fc0:	bd80      	pop	{r7, pc}
10004fc2:	46c0      	nop			; (mov r8, r8)

10004fc4 <IRQ1_Handler>:

/*  IRQ1 Interrupt Handler.
 *
 */
void IRQ1_Handler(void)
{
10004fc4:	b580      	push	{r7, lr}
10004fc6:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(1);
10004fc8:	2001      	movs	r0, #1
10004fca:	f7fc fcbb 	bl	10001944 <XMC_SCU_IRQHandler>
}
10004fce:	46bd      	mov	sp, r7
10004fd0:	bd80      	pop	{r7, pc}
10004fd2:	46c0      	nop			; (mov r8, r8)

10004fd4 <IRQ2_Handler>:

/*  IRQ2 Interrupt Handler.
 *
 */
void IRQ2_Handler(void)
{
10004fd4:	b580      	push	{r7, lr}
10004fd6:	af00      	add	r7, sp, #0
  XMC_SCU_IRQHandler(2);
10004fd8:	2002      	movs	r0, #2
10004fda:	f7fc fcb3 	bl	10001944 <XMC_SCU_IRQHandler>
}
10004fde:	46bd      	mov	sp, r7
10004fe0:	bd80      	pop	{r7, pc}
10004fe2:	46c0      	nop			; (mov r8, r8)

10004fe4 <GLOBAL_SCU_XMC1_RegisterCallback>:
/*
 * @brief  Function to register callback event
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_RegisterCallback(const GLOBAL_SCU_XMC1_EVENT_t event,
                                                          const GLOBAL_SCU_XMC1_EVENT_HANDLER_t handler)
{
10004fe4:	b5b0      	push	{r4, r5, r7, lr}
10004fe6:	b086      	sub	sp, #24
10004fe8:	af00      	add	r7, sp, #0
10004fea:	60b8      	str	r0, [r7, #8]
10004fec:	60f9      	str	r1, [r7, #12]
10004fee:	607a      	str	r2, [r7, #4]
  GLOBAL_SCU_XMC1_STATUS_t status;

  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: Invalid event", (GLOBAL_SCU_XMC1_CHECK_EVENT(event)));
  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: NULL Handle", (handler != NULL));
  
  status = (GLOBAL_SCU_XMC1_STATUS_t)XMC_SCU_INTERRUPT_SetEventHandler(event, handler);
10004ff0:	2317      	movs	r3, #23
10004ff2:	18fd      	adds	r5, r7, r3
10004ff4:	68bb      	ldr	r3, [r7, #8]
10004ff6:	68fc      	ldr	r4, [r7, #12]
10004ff8:	687a      	ldr	r2, [r7, #4]
10004ffa:	1c18      	adds	r0, r3, #0
10004ffc:	1c21      	adds	r1, r4, #0
10004ffe:	f7fc fc59 	bl	100018b4 <XMC_SCU_INTERRUPT_SetEventHandler>
10005002:	1c03      	adds	r3, r0, #0
10005004:	702b      	strb	r3, [r5, #0]

  return (status);
10005006:	2317      	movs	r3, #23
10005008:	18fb      	adds	r3, r7, r3
1000500a:	781b      	ldrb	r3, [r3, #0]
}
1000500c:	1c18      	adds	r0, r3, #0
1000500e:	46bd      	mov	sp, r7
10005010:	b006      	add	sp, #24
10005012:	bdb0      	pop	{r4, r5, r7, pc}

10005014 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10005014:	b580      	push	{r7, lr}
10005016:	b082      	sub	sp, #8
10005018:	af00      	add	r7, sp, #0
1000501a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
1000501c:	687b      	ldr	r3, [r7, #4]
1000501e:	68db      	ldr	r3, [r3, #12]
10005020:	2280      	movs	r2, #128	; 0x80
10005022:	0052      	lsls	r2, r2, #1
10005024:	431a      	orrs	r2, r3
10005026:	687b      	ldr	r3, [r7, #4]
10005028:	60da      	str	r2, [r3, #12]
}
1000502a:	46bd      	mov	sp, r7
1000502c:	b002      	add	sp, #8
1000502e:	bd80      	pop	{r7, pc}

10005030 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10005030:	b580      	push	{r7, lr}
10005032:	b082      	sub	sp, #8
10005034:	af00      	add	r7, sp, #0
10005036:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10005038:	687b      	ldr	r3, [r7, #4]
1000503a:	7b5b      	ldrb	r3, [r3, #13]
1000503c:	2201      	movs	r2, #1
1000503e:	4053      	eors	r3, r2
10005040:	b2db      	uxtb	r3, r3
10005042:	2b00      	cmp	r3, #0
10005044:	d00f      	beq.n	10005066 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10005046:	687b      	ldr	r3, [r7, #4]
10005048:	689a      	ldr	r2, [r3, #8]
1000504a:	687b      	ldr	r3, [r7, #4]
1000504c:	7b1b      	ldrb	r3, [r3, #12]
1000504e:	1c10      	adds	r0, r2, #0
10005050:	1c19      	adds	r1, r3, #0
10005052:	f7fc fd71 	bl	10001b38 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10005056:	687b      	ldr	r3, [r7, #4]
10005058:	689b      	ldr	r3, [r3, #8]
1000505a:	1c18      	adds	r0, r3, #0
1000505c:	f7ff ffda 	bl	10005014 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10005060:	687b      	ldr	r3, [r7, #4]
10005062:	2201      	movs	r2, #1
10005064:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
10005066:	2300      	movs	r3, #0
}
10005068:	1c18      	adds	r0, r3, #0
1000506a:	46bd      	mov	sp, r7
1000506c:	b002      	add	sp, #8
1000506e:	bd80      	pop	{r7, pc}

10005070 <XMC_FLASH_SetHardReadLevel>:
 * \par<b>Related APIs:</b><BR>
 * None 
 *
 */
__STATIC_INLINE void XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_t level)
{
10005070:	b580      	push	{r7, lr}
10005072:	b082      	sub	sp, #8
10005074:	af00      	add	r7, sp, #0
10005076:	1c02      	adds	r2, r0, #0
10005078:	1dfb      	adds	r3, r7, #7
1000507a:	701a      	strb	r2, [r3, #0]
  NVM->NVMCONF &= (uint16_t)(~(uint16_t)NVM_NVMCONF_HRLEV_Msk);
1000507c:	4a0b      	ldr	r2, [pc, #44]	; (100050ac <XMC_FLASH_SetHardReadLevel+0x3c>)
1000507e:	4b0b      	ldr	r3, [pc, #44]	; (100050ac <XMC_FLASH_SetHardReadLevel+0x3c>)
10005080:	891b      	ldrh	r3, [r3, #8]
10005082:	b29b      	uxth	r3, r3
10005084:	2106      	movs	r1, #6
10005086:	438b      	bics	r3, r1
10005088:	b29b      	uxth	r3, r3
1000508a:	8113      	strh	r3, [r2, #8]
  NVM->NVMCONF |= (uint16_t)(level<< (uint16_t)NVM_NVMCONF_HRLEV_Pos);
1000508c:	4907      	ldr	r1, [pc, #28]	; (100050ac <XMC_FLASH_SetHardReadLevel+0x3c>)
1000508e:	4b07      	ldr	r3, [pc, #28]	; (100050ac <XMC_FLASH_SetHardReadLevel+0x3c>)
10005090:	891b      	ldrh	r3, [r3, #8]
10005092:	b29a      	uxth	r2, r3
10005094:	1dfb      	adds	r3, r7, #7
10005096:	781b      	ldrb	r3, [r3, #0]
10005098:	b29b      	uxth	r3, r3
1000509a:	18db      	adds	r3, r3, r3
1000509c:	b29b      	uxth	r3, r3
1000509e:	4313      	orrs	r3, r2
100050a0:	b29b      	uxth	r3, r3
100050a2:	810b      	strh	r3, [r1, #8]
}
100050a4:	46bd      	mov	sp, r7
100050a6:	b002      	add	sp, #8
100050a8:	bd80      	pop	{r7, pc}
100050aa:	46c0      	nop			; (mov r8, r8)
100050ac:	40050000 	.word	0x40050000

100050b0 <E_EEPROM_XMC1_Init>:
 * 
 * Description     : Driver Module Initialization function. This service shall initialize the Flash EEPROM Emulation 
 *                   module using the values provided by configuration set.
 */
E_EEPROM_XMC1_STATUS_t E_EEPROM_XMC1_Init(E_EEPROM_XMC1_t *const handle_ptr)
{
100050b0:	b580      	push	{r7, lr}
100050b2:	b086      	sub	sp, #24
100050b4:	af00      	add	r7, sp, #0
100050b6:	6078      	str	r0, [r7, #4]
  uint32_t marker_state;

  XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (handle_ptr != NULL))

  /* Check if the E_EEPROM_XMC1_Init API is called once*/
  if (handle_ptr->state != E_EEPROM_XMC1_STATUS_SUCCESS)
100050b8:	687b      	ldr	r3, [r7, #4]
100050ba:	7a1b      	ldrb	r3, [r3, #8]
100050bc:	2b00      	cmp	r3, #0
100050be:	d100      	bne.n	100050c2 <E_EEPROM_XMC1_Init+0x12>
100050c0:	e084      	b.n	100051cc <E_EEPROM_XMC1_Init+0x11c>
    }
    else
    #endif
    {
      /* Initialize the cache variables for the User defined Block configuration list */
      indx = 0U;
100050c2:	2300      	movs	r3, #0
100050c4:	617b      	str	r3, [r7, #20]
      do
      {
        E_EEPROM_XMC1_CACHE_t * block_ptr;
        block_ptr = &(handle_ptr->data_ptr->block_info[indx]);
100050c6:	687b      	ldr	r3, [r7, #4]
100050c8:	685a      	ldr	r2, [r3, #4]
100050ca:	697b      	ldr	r3, [r7, #20]
100050cc:	00db      	lsls	r3, r3, #3
100050ce:	18d3      	adds	r3, r2, r3
100050d0:	613b      	str	r3, [r7, #16]

        block_ptr->address = 0U;
100050d2:	693b      	ldr	r3, [r7, #16]
100050d4:	2200      	movs	r2, #0
100050d6:	601a      	str	r2, [r3, #0]
        block_ptr->status.consistent = 0U;
100050d8:	693b      	ldr	r3, [r7, #16]
100050da:	791a      	ldrb	r2, [r3, #4]
100050dc:	2102      	movs	r1, #2
100050de:	438a      	bics	r2, r1
100050e0:	711a      	strb	r2, [r3, #4]
        block_ptr->status.valid = 1U;
100050e2:	693b      	ldr	r3, [r7, #16]
100050e4:	791a      	ldrb	r2, [r3, #4]
100050e6:	2101      	movs	r1, #1
100050e8:	430a      	orrs	r2, r1
100050ea:	711a      	strb	r2, [r3, #4]
        block_ptr->status.copied = 0U;
100050ec:	693b      	ldr	r3, [r7, #16]
100050ee:	791a      	ldrb	r2, [r3, #4]
100050f0:	2104      	movs	r1, #4
100050f2:	438a      	bics	r2, r1
100050f4:	711a      	strb	r2, [r3, #4]
        block_ptr->status.crc = 0U;
100050f6:	693b      	ldr	r3, [r7, #16]
100050f8:	791a      	ldrb	r2, [r3, #4]
100050fa:	2108      	movs	r1, #8
100050fc:	438a      	bics	r2, r1
100050fe:	711a      	strb	r2, [r3, #4]
        indx++;
10005100:	697b      	ldr	r3, [r7, #20]
10005102:	3301      	adds	r3, #1
10005104:	617b      	str	r3, [r7, #20]
      } while (indx < handle_ptr->block_count);
10005106:	687b      	ldr	r3, [r7, #4]
10005108:	7a5b      	ldrb	r3, [r3, #9]
1000510a:	1e1a      	subs	r2, r3, #0
1000510c:	697b      	ldr	r3, [r7, #20]
1000510e:	429a      	cmp	r2, r3
10005110:	d8d9      	bhi.n	100050c6 <E_EEPROM_XMC1_Init+0x16>

      /********* Initialize all global variables *****************/
      handle_ptr->data_ptr->updated_cache_index = 0U;
10005112:	687b      	ldr	r3, [r7, #4]
10005114:	685a      	ldr	r2, [r3, #4]
10005116:	23c2      	movs	r3, #194	; 0xc2
10005118:	005b      	lsls	r3, r3, #1
1000511a:	2100      	movs	r1, #0
1000511c:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->cache_state = E_EEPROM_XMC1_CACHE_IDLE;
1000511e:	687b      	ldr	r3, [r7, #4]
10005120:	685a      	ldr	r2, [r3, #4]
10005122:	23c0      	movs	r3, #192	; 0xc0
10005124:	005b      	lsls	r3, r3, #1
10005126:	2100      	movs	r1, #0
10005128:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->gc_state = E_EEPROM_XMC1_GC_UNINT;
1000512a:	687b      	ldr	r3, [r7, #4]
1000512c:	685a      	ldr	r2, [r3, #4]
1000512e:	23ba      	movs	r3, #186	; 0xba
10005130:	005b      	lsls	r3, r3, #1
10005132:	2100      	movs	r1, #0
10005134:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->init_gc_state = 0U;
10005136:	687b      	ldr	r3, [r7, #4]
10005138:	685a      	ldr	r2, [r3, #4]
1000513a:	23bc      	movs	r3, #188	; 0xbc
1000513c:	005b      	lsls	r3, r3, #1
1000513e:	2100      	movs	r1, #0
10005140:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->gc_log_block_count = 0U;
10005142:	687b      	ldr	r3, [r7, #4]
10005144:	685a      	ldr	r2, [r3, #4]
10005146:	23be      	movs	r3, #190	; 0xbe
10005148:	005b      	lsls	r3, r3, #1
1000514a:	2100      	movs	r1, #0
1000514c:	50d1      	str	r1, [r2, r3]
      handle_ptr->data_ptr->crc_buffer = 0U;
1000514e:	687b      	ldr	r3, [r7, #4]
10005150:	685b      	ldr	r3, [r3, #4]
10005152:	2200      	movs	r2, #0
10005154:	66da      	str	r2, [r3, #108]	; 0x6c

      handle_ptr->data_ptr->written_block_counter = (uint32_t)0;
10005156:	687b      	ldr	r3, [r7, #4]
10005158:	685b      	ldr	r3, [r3, #4]
1000515a:	2200      	movs	r2, #0
1000515c:	659a      	str	r2, [r3, #88]	; 0x58
      handle_ptr->data_ptr->curr_bank_src_addr = 0U;
1000515e:	687b      	ldr	r3, [r7, #4]
10005160:	685b      	ldr	r3, [r3, #4]
10005162:	2200      	movs	r2, #0
10005164:	651a      	str	r2, [r3, #80]	; 0x50
      handle_ptr->data_ptr->gc_src_addr = 0U;
10005166:	687b      	ldr	r3, [r7, #4]
10005168:	685b      	ldr	r3, [r3, #4]
1000516a:	2200      	movs	r2, #0
1000516c:	641a      	str	r2, [r3, #64]	; 0x40
      handle_ptr->data_ptr->gc_dest_addr = 0U;
1000516e:	687b      	ldr	r3, [r7, #4]
10005170:	685b      	ldr	r3, [r3, #4]
10005172:	2200      	movs	r2, #0
10005174:	63da      	str	r2, [r3, #60]	; 0x3c
      handle_ptr->data_ptr->next_free_block_addr = 0U;
10005176:	687b      	ldr	r3, [r7, #4]
10005178:	685b      	ldr	r3, [r3, #4]
1000517a:	2200      	movs	r2, #0
1000517c:	64da      	str	r2, [r3, #76]	; 0x4c
      handle_ptr->data_ptr->gc_block_counter = (uint32_t)0;
1000517e:	687b      	ldr	r3, [r7, #4]
10005180:	685b      	ldr	r3, [r3, #4]
10005182:	2200      	movs	r2, #0
10005184:	655a      	str	r2, [r3, #84]	; 0x54
      handle_ptr->data_ptr->user_write_bytes_count = 0U;
10005186:	687b      	ldr	r3, [r7, #4]
10005188:	685a      	ldr	r2, [r3, #4]
1000518a:	23b8      	movs	r3, #184	; 0xb8
1000518c:	005b      	lsls	r3, r3, #1
1000518e:	2100      	movs	r1, #0
10005190:	50d1      	str	r1, [r2, r3]

      handle_ptr->data_ptr->current_bank = 0U;
10005192:	687b      	ldr	r3, [r7, #4]
10005194:	685b      	ldr	r3, [r3, #4]
10005196:	2200      	movs	r2, #0
10005198:	639a      	str	r2, [r3, #56]	; 0x38

      XMC_FLASH_SetHardReadLevel(XMC_FLASH_HARDREAD_LEVEL_WRITTEN);
1000519a:	2001      	movs	r0, #1
1000519c:	f7ff ff68 	bl	10005070 <XMC_FLASH_SetHardReadLevel>

      /* Read the marker blocks from flash and decide the MARKER STATES */
      marker_state = E_EEPROM_XMC1_lReadMarkerBlocks();
100051a0:	f000 fff4 	bl	1000618c <E_EEPROM_XMC1_lReadMarkerBlocks>
100051a4:	1c03      	adds	r3, r0, #0
100051a6:	60fb      	str	r3, [r7, #12]

      /*
       * Call INIT-GC state machine function to take decision on current MARKER STATE available.
       * Progress to GC state machine or PrepareDFLASH State machine after completing  the Cache update
       */
      E_EEPROM_XMC1_lInitGc(marker_state);
100051a8:	68fb      	ldr	r3, [r7, #12]
100051aa:	1c18      	adds	r0, r3, #0
100051ac:	f000 f8ae 	bl	1000530c <E_EEPROM_XMC1_lInitGc>

      /* If Initialization is done without any errors, set the INIT API called state into Initialized once */
      if (handle_ptr->data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
100051b0:	687b      	ldr	r3, [r7, #4]
100051b2:	685a      	ldr	r2, [r3, #4]
100051b4:	23ba      	movs	r3, #186	; 0xba
100051b6:	005b      	lsls	r3, r3, #1
100051b8:	58d3      	ldr	r3, [r2, r3]
100051ba:	2b0a      	cmp	r3, #10
100051bc:	d103      	bne.n	100051c6 <E_EEPROM_XMC1_Init+0x116>
      {
        handle_ptr->state = E_EEPROM_XMC1_STATUS_SUCCESS;
100051be:	687b      	ldr	r3, [r7, #4]
100051c0:	2200      	movs	r2, #0
100051c2:	721a      	strb	r2, [r3, #8]
100051c4:	e002      	b.n	100051cc <E_EEPROM_XMC1_Init+0x11c>
      }
      else
      {
        handle_ptr->state = E_EEPROM_XMC1_STATUS_FAILURE;
100051c6:	687b      	ldr	r3, [r7, #4]
100051c8:	2201      	movs	r2, #1
100051ca:	721a      	strb	r2, [r3, #8]
      }
    }
  }
  return (handle_ptr->state);
100051cc:	687b      	ldr	r3, [r7, #4]
100051ce:	7a1b      	ldrb	r3, [r3, #8]
}
100051d0:	1c18      	adds	r0, r3, #0
100051d2:	46bd      	mov	sp, r7
100051d4:	b006      	add	sp, #24
100051d6:	bd80      	pop	{r7, pc}

100051d8 <E_EEPROM_XMC1_Write>:
 * Return value   : E_EEPROM_XMC1_OPERATION_STATUS_t
 * 
 * Description    : This function shall write user data block into flash.
 */
E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Write(uint8_t block_number, uint8_t *data_buffer_ptr)
{
100051d8:	b580      	push	{r7, lr}
100051da:	b084      	sub	sp, #16
100051dc:	af00      	add	r7, sp, #0
100051de:	1c02      	adds	r2, r0, #0
100051e0:	6039      	str	r1, [r7, #0]
100051e2:	1dfb      	adds	r3, r7, #7
100051e4:	701a      	strb	r2, [r3, #0]
  E_EEPROM_XMC1_OPERATION_STATUS_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100051e6:	4b10      	ldr	r3, [pc, #64]	; (10005228 <E_EEPROM_XMC1_Write+0x50>)
100051e8:	685b      	ldr	r3, [r3, #4]
100051ea:	60bb      	str	r3, [r7, #8]
  
  XMC_ASSERT("E_EEPROM_XMC1_Write:Wrong Block Number", (E_EEPROM_XMC1_lGetUsrBlockIndex(block_number) !=
                                                        E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND))
  XMC_ASSERT("E_EEPROM_XMC1_Write:Invalid Buffer Pointer", (data_buffer_ptr != NULL))
  
  status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
100051ec:	230f      	movs	r3, #15
100051ee:	18fb      	adds	r3, r7, r3
100051f0:	2205      	movs	r2, #5
100051f2:	701a      	strb	r2, [r3, #0]

  /* Execute only if there is no previous pending request and the GC process is in IDLE state */
  if (data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE)
100051f4:	68ba      	ldr	r2, [r7, #8]
100051f6:	23ba      	movs	r3, #186	; 0xba
100051f8:	005b      	lsls	r3, r3, #1
100051fa:	58d3      	ldr	r3, [r2, r3]
100051fc:	2b0a      	cmp	r3, #10
100051fe:	d10b      	bne.n	10005218 <E_EEPROM_XMC1_Write+0x40>
  {
    /* Call local function to write the specified block of data into flash */
    status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lLocalWrite(block_number, data_buffer_ptr, 0U);
10005200:	1dfb      	adds	r3, r7, #7
10005202:	781a      	ldrb	r2, [r3, #0]
10005204:	683b      	ldr	r3, [r7, #0]
10005206:	1c10      	adds	r0, r2, #0
10005208:	1c19      	adds	r1, r3, #0
1000520a:	2200      	movs	r2, #0
1000520c:	f001 f908 	bl	10006420 <E_EEPROM_XMC1_lLocalWrite>
10005210:	1c02      	adds	r2, r0, #0
10005212:	230f      	movs	r3, #15
10005214:	18fb      	adds	r3, r7, r3
10005216:	701a      	strb	r2, [r3, #0]
  }

  return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
10005218:	230f      	movs	r3, #15
1000521a:	18fb      	adds	r3, r7, r3
1000521c:	781b      	ldrb	r3, [r3, #0]
}
1000521e:	1c18      	adds	r0, r3, #0
10005220:	46bd      	mov	sp, r7
10005222:	b004      	add	sp, #16
10005224:	bd80      	pop	{r7, pc}
10005226:	46c0      	nop			; (mov r8, r8)
10005228:	20000610 	.word	0x20000610

1000522c <E_EEPROM_XMC1_Read>:
 */
E_EEPROM_XMC1_OPERATION_STATUS_t E_EEPROM_XMC1_Read(uint8_t block_number,
                                                    uint32_t offset,
                                                    uint8_t *data_buffer_ptr,
                                                    uint32_t length)
{
1000522c:	b580      	push	{r7, lr}
1000522e:	b088      	sub	sp, #32
10005230:	af00      	add	r7, sp, #0
10005232:	60b9      	str	r1, [r7, #8]
10005234:	607a      	str	r2, [r7, #4]
10005236:	603b      	str	r3, [r7, #0]
10005238:	230f      	movs	r3, #15
1000523a:	18fb      	adds	r3, r7, r3
1000523c:	1c02      	adds	r2, r0, #0
1000523e:	701a      	strb	r2, [r3, #0]
  uint32_t block_size;
  uint32_t user_block_index;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_OPERATION_STATUS_t status;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005240:	4b31      	ldr	r3, [pc, #196]	; (10005308 <E_EEPROM_XMC1_Read+0xdc>)
10005242:	685b      	ldr	r3, [r3, #4]
10005244:	61bb      	str	r3, [r7, #24]
  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10005246:	230f      	movs	r3, #15
10005248:	18fb      	adds	r3, r7, r3
1000524a:	781b      	ldrb	r3, [r3, #0]
1000524c:	1c18      	adds	r0, r3, #0
1000524e:	f000 fef5 	bl	1000603c <E_EEPROM_XMC1_lGetUsrBlockIndex>
10005252:	1c03      	adds	r3, r0, #0
10005254:	617b      	str	r3, [r7, #20]
  block_size = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[user_block_index].size;
10005256:	4b2c      	ldr	r3, [pc, #176]	; (10005308 <E_EEPROM_XMC1_Read+0xdc>)
10005258:	681a      	ldr	r2, [r3, #0]
1000525a:	697b      	ldr	r3, [r7, #20]
1000525c:	00db      	lsls	r3, r3, #3
1000525e:	18d3      	adds	r3, r2, r3
10005260:	685b      	ldr	r3, [r3, #4]
10005262:	613b      	str	r3, [r7, #16]
  
  XMC_ASSERT("E_EEPROM_XMC1_Read:Wrong Block Number", (user_block_index  != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND))
  XMC_ASSERT("E_EEPROM_XMC1_Read:Invalid Buffer Pointer", (data_buffer_ptr != NULL))

  status = E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
10005264:	231f      	movs	r3, #31
10005266:	18fb      	adds	r3, r7, r3
10005268:	2205      	movs	r2, #5
1000526a:	701a      	strb	r2, [r3, #0]

  /*Execute only if GC process is in IDLE state */
  if ((data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE) && (((uint32_t)offset + length) <= block_size))
1000526c:	69ba      	ldr	r2, [r7, #24]
1000526e:	23ba      	movs	r3, #186	; 0xba
10005270:	005b      	lsls	r3, r3, #1
10005272:	58d3      	ldr	r3, [r2, r3]
10005274:	2b0a      	cmp	r3, #10
10005276:	d140      	bne.n	100052fa <E_EEPROM_XMC1_Read+0xce>
10005278:	68ba      	ldr	r2, [r7, #8]
1000527a:	683b      	ldr	r3, [r7, #0]
1000527c:	18d2      	adds	r2, r2, r3
1000527e:	693b      	ldr	r3, [r7, #16]
10005280:	429a      	cmp	r2, r3
10005282:	d83a      	bhi.n	100052fa <E_EEPROM_XMC1_Read+0xce>
  {
    if (data_ptr->block_info[user_block_index].status.valid == 0U) /* If cache says Inconsistent */
10005284:	69ba      	ldr	r2, [r7, #24]
10005286:	697b      	ldr	r3, [r7, #20]
10005288:	00db      	lsls	r3, r3, #3
1000528a:	18d3      	adds	r3, r2, r3
1000528c:	791b      	ldrb	r3, [r3, #4]
1000528e:	07db      	lsls	r3, r3, #31
10005290:	0fdb      	lsrs	r3, r3, #31
10005292:	b2db      	uxtb	r3, r3
10005294:	2b00      	cmp	r3, #0
10005296:	d104      	bne.n	100052a2 <E_EEPROM_XMC1_Read+0x76>
    {
      status = E_EEPROM_XMC1_OPERATION_STATUS_INVALID_BLOCK;
10005298:	231f      	movs	r3, #31
1000529a:	18fb      	adds	r3, r7, r3
1000529c:	2203      	movs	r2, #3
1000529e:	701a      	strb	r2, [r3, #0]
100052a0:	e02b      	b.n	100052fa <E_EEPROM_XMC1_Read+0xce>
    }
    else if (data_ptr->block_info[user_block_index].status.consistent == 0U) /* If cache says Invalid */
100052a2:	69ba      	ldr	r2, [r7, #24]
100052a4:	697b      	ldr	r3, [r7, #20]
100052a6:	00db      	lsls	r3, r3, #3
100052a8:	18d3      	adds	r3, r2, r3
100052aa:	791b      	ldrb	r3, [r3, #4]
100052ac:	079b      	lsls	r3, r3, #30
100052ae:	0fdb      	lsrs	r3, r3, #31
100052b0:	b2db      	uxtb	r3, r3
100052b2:	2b00      	cmp	r3, #0
100052b4:	d104      	bne.n	100052c0 <E_EEPROM_XMC1_Read+0x94>
    {
      status = E_EEPROM_XMC1_OPERATION_STATUS_INCONSISTENT_BLOCK;
100052b6:	231f      	movs	r3, #31
100052b8:	18fb      	adds	r3, r7, r3
100052ba:	2202      	movs	r2, #2
100052bc:	701a      	strb	r2, [r3, #0]
100052be:	e01c      	b.n	100052fa <E_EEPROM_XMC1_Read+0xce>
    }
    else
    {
      data_ptr->read_start_address = data_ptr->block_info[user_block_index].address;
100052c0:	69bb      	ldr	r3, [r7, #24]
100052c2:	697a      	ldr	r2, [r7, #20]
100052c4:	00d2      	lsls	r2, r2, #3
100052c6:	58d1      	ldr	r1, [r2, r3]
100052c8:	69ba      	ldr	r2, [r7, #24]
100052ca:	23c6      	movs	r3, #198	; 0xc6
100052cc:	005b      	lsls	r3, r3, #1
100052ce:	50d1      	str	r1, [r2, r3]
      status = (E_EEPROM_XMC1_OPERATION_STATUS_t)E_EEPROM_XMC1_lReadBlockContents(data_buffer_ptr , length , offset);
100052d0:	6879      	ldr	r1, [r7, #4]
100052d2:	683a      	ldr	r2, [r7, #0]
100052d4:	68bb      	ldr	r3, [r7, #8]
100052d6:	1c08      	adds	r0, r1, #0
100052d8:	1c11      	adds	r1, r2, #0
100052da:	1c1a      	adds	r2, r3, #0
100052dc:	f001 fb08 	bl	100068f0 <E_EEPROM_XMC1_lReadBlockContents>
100052e0:	1c02      	adds	r2, r0, #0
100052e2:	231f      	movs	r3, #31
100052e4:	18fb      	adds	r3, r7, r3
100052e6:	701a      	strb	r2, [r3, #0]

      if ((uint32_t)status != 0U)
100052e8:	231f      	movs	r3, #31
100052ea:	18fb      	adds	r3, r7, r3
100052ec:	781b      	ldrb	r3, [r3, #0]
100052ee:	2b00      	cmp	r3, #0
100052f0:	d003      	beq.n	100052fa <E_EEPROM_XMC1_Read+0xce>
      {
         status = E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
100052f2:	231f      	movs	r3, #31
100052f4:	18fb      	adds	r3, r7, r3
100052f6:	2201      	movs	r2, #1
100052f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return((E_EEPROM_XMC1_OPERATION_STATUS_t)status);
100052fa:	231f      	movs	r3, #31
100052fc:	18fb      	adds	r3, r7, r3
100052fe:	781b      	ldrb	r3, [r3, #0]
}
10005300:	1c18      	adds	r0, r3, #0
10005302:	46bd      	mov	sp, r7
10005304:	b008      	add	sp, #32
10005306:	bd80      	pop	{r7, pc}
10005308:	20000610 	.word	0x20000610

1000530c <E_EEPROM_XMC1_lInitGc>:
 * Description     : This function shall detect if there was any interruption in the ongoing running state
 *                   (Read/Write/GC). If yes, then this routine shall decide to run a state machine to bring back the 
 *                   emulation to normal state
 */
static void E_EEPROM_XMC1_lInitGc(const uint32_t marker_dirty_state)
{
1000530c:	b580      	push	{r7, lr}
1000530e:	b084      	sub	sp, #16
10005310:	af00      	add	r7, sp, #0
10005312:	6078      	str	r0, [r7, #4]
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005314:	4b25      	ldr	r3, [pc, #148]	; (100053ac <E_EEPROM_XMC1_lInitGc+0xa0>)
10005316:	685b      	ldr	r3, [r3, #4]
10005318:	60fb      	str	r3, [r7, #12]
  
  if ( marker_dirty_state == E_EEPROM_XMC1_BOTH_BANKS_INVALID )  /* If both Bank state markers are in dirty state */
1000531a:	687b      	ldr	r3, [r7, #4]
1000531c:	2b03      	cmp	r3, #3
1000531e:	d107      	bne.n	10005330 <E_EEPROM_XMC1_lInitGc+0x24>
  {
    data_ptr->init_gc_state = E_EEPROM_XMC1_MB_DIRTY;
10005320:	68fa      	ldr	r2, [r7, #12]
10005322:	23bc      	movs	r3, #188	; 0xbc
10005324:	005b      	lsls	r3, r3, #1
10005326:	21dd      	movs	r1, #221	; 0xdd
10005328:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitllegalStateMachine();
1000532a:	f000 f841 	bl	100053b0 <E_EEPROM_XMC1_lInitllegalStateMachine>
1000532e:	e039      	b.n	100053a4 <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else if ( marker_dirty_state == E_EEPROM_XMC1_BANK0_INVALID )  /* If Only Bank0 state marker is in dirty state */
10005330:	687b      	ldr	r3, [r7, #4]
10005332:	2b01      	cmp	r3, #1
10005334:	d118      	bne.n	10005368 <E_EEPROM_XMC1_lInitGc+0x5c>
  {
    data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_0F;
10005336:	68fa      	ldr	r2, [r7, #12]
10005338:	23bc      	movs	r3, #188	; 0xbc
1000533a:	005b      	lsls	r3, r3, #1
1000533c:	58d3      	ldr	r3, [r2, r3]
1000533e:	220f      	movs	r2, #15
10005340:	4013      	ands	r3, r2
10005342:	1c19      	adds	r1, r3, #0
10005344:	68fa      	ldr	r2, [r7, #12]
10005346:	23bc      	movs	r3, #188	; 0xbc
10005348:	005b      	lsls	r3, r3, #1
1000534a:	50d1      	str	r1, [r2, r3]
    data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_D0;
1000534c:	68fa      	ldr	r2, [r7, #12]
1000534e:	23bc      	movs	r3, #188	; 0xbc
10005350:	005b      	lsls	r3, r3, #1
10005352:	58d3      	ldr	r3, [r2, r3]
10005354:	22d0      	movs	r2, #208	; 0xd0
10005356:	431a      	orrs	r2, r3
10005358:	1c11      	adds	r1, r2, #0
1000535a:	68fa      	ldr	r2, [r7, #12]
1000535c:	23bc      	movs	r3, #188	; 0xbc
1000535e:	005b      	lsls	r3, r3, #1
10005360:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitDirtyStateMachine();
10005362:	f000 f841 	bl	100053e8 <E_EEPROM_XMC1_lInitDirtyStateMachine>
10005366:	e01d      	b.n	100053a4 <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else if ( marker_dirty_state == E_EEPROM_XMC1_BANK1_INVALID )  /* If Only Bank1 state marker is in dirty state */
10005368:	687b      	ldr	r3, [r7, #4]
1000536a:	2b02      	cmp	r3, #2
1000536c:	d118      	bne.n	100053a0 <E_EEPROM_XMC1_lInitGc+0x94>
  {
    data_ptr->init_gc_state &= E_EEPROM_XMC1_INIT_STATE_F0;
1000536e:	68fa      	ldr	r2, [r7, #12]
10005370:	23bc      	movs	r3, #188	; 0xbc
10005372:	005b      	lsls	r3, r3, #1
10005374:	58d3      	ldr	r3, [r2, r3]
10005376:	22f0      	movs	r2, #240	; 0xf0
10005378:	4013      	ands	r3, r2
1000537a:	1c19      	adds	r1, r3, #0
1000537c:	68fa      	ldr	r2, [r7, #12]
1000537e:	23bc      	movs	r3, #188	; 0xbc
10005380:	005b      	lsls	r3, r3, #1
10005382:	50d1      	str	r1, [r2, r3]
    data_ptr->init_gc_state |= E_EEPROM_XMC1_INIT_STATE_0D;
10005384:	68fa      	ldr	r2, [r7, #12]
10005386:	23bc      	movs	r3, #188	; 0xbc
10005388:	005b      	lsls	r3, r3, #1
1000538a:	58d3      	ldr	r3, [r2, r3]
1000538c:	220d      	movs	r2, #13
1000538e:	431a      	orrs	r2, r3
10005390:	1c11      	adds	r1, r2, #0
10005392:	68fa      	ldr	r2, [r7, #12]
10005394:	23bc      	movs	r3, #188	; 0xbc
10005396:	005b      	lsls	r3, r3, #1
10005398:	50d1      	str	r1, [r2, r3]
    E_EEPROM_XMC1_lInitDirtyStateMachine();
1000539a:	f000 f825 	bl	100053e8 <E_EEPROM_XMC1_lInitDirtyStateMachine>
1000539e:	e001      	b.n	100053a4 <E_EEPROM_XMC1_lInitGc+0x98>
  }
  else                                      /* If both Bank state markers have valid state */
  {
    E_EEPROM_XMC1_lInitNormalStateMachine();
100053a0:	f000 f876 	bl	10005490 <E_EEPROM_XMC1_lInitNormalStateMachine>
  }
}
100053a4:	46bd      	mov	sp, r7
100053a6:	b004      	add	sp, #16
100053a8:	bd80      	pop	{r7, pc}
100053aa:	46c0      	nop			; (mov r8, r8)
100053ac:	20000610 	.word	0x20000610

100053b0 <E_EEPROM_XMC1_lInitllegalStateMachine>:
 * Return value    : void
 *
 * Description     : This function shall erase all flash and start from fresh depending upon the user configuration
 */
static void E_EEPROM_XMC1_lInitllegalStateMachine(void)
{
100053b0:	b580      	push	{r7, lr}
100053b2:	b082      	sub	sp, #8
100053b4:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100053b6:	4b0b      	ldr	r3, [pc, #44]	; (100053e4 <E_EEPROM_XMC1_lInitllegalStateMachine+0x34>)
100053b8:	685b      	ldr	r3, [r3, #4]
100053ba:	607b      	str	r3, [r7, #4]
  
  /*
   * Any state apart from the normal states is considered as Illegal state. Next operation = Start Prepare DFlash
   * (Only if the configuration option Erase all is 1U) IF Configuration Option is 0U, Next Operation = Fail State
   */
  if (E_EEPROM_XMC1_HANDLE_PTR->erase_all_auto_recovery == 1U)
100053bc:	4b09      	ldr	r3, [pc, #36]	; (100053e4 <E_EEPROM_XMC1_lInitllegalStateMachine+0x34>)
100053be:	7a9b      	ldrb	r3, [r3, #10]
100053c0:	2b01      	cmp	r3, #1
100053c2:	d107      	bne.n	100053d4 <E_EEPROM_XMC1_lInitllegalStateMachine+0x24>
  {
    /* Change the current Bank to Bank0 */
    data_ptr->current_bank = 0U;
100053c4:	687b      	ldr	r3, [r7, #4]
100053c6:	2200      	movs	r2, #0
100053c8:	639a      	str	r2, [r3, #56]	; 0x38
    E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, 1U);
100053ca:	2001      	movs	r0, #1
100053cc:	2101      	movs	r1, #1
100053ce:	f000 f957 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
100053d2:	e004      	b.n	100053de <E_EEPROM_XMC1_lInitllegalStateMachine+0x2e>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100053d4:	687a      	ldr	r2, [r7, #4]
100053d6:	23ba      	movs	r3, #186	; 0xba
100053d8:	005b      	lsls	r3, r3, #1
100053da:	2109      	movs	r1, #9
100053dc:	50d1      	str	r1, [r2, r3]
  }
}
100053de:	46bd      	mov	sp, r7
100053e0:	b002      	add	sp, #8
100053e2:	bd80      	pop	{r7, pc}
100053e4:	20000610 	.word	0x20000610

100053e8 <E_EEPROM_XMC1_lInitDirtyStateMachine>:
 * Return value   : void
 *
 * Description    : This function shall address the dirty state recovery mechanism by erasing and rewriting states
 */
static void E_EEPROM_XMC1_lInitDirtyStateMachine(void)
{
100053e8:	b580      	push	{r7, lr}
100053ea:	b082      	sub	sp, #8
100053ec:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100053ee:	4b27      	ldr	r3, [pc, #156]	; (1000548c <E_EEPROM_XMC1_lInitDirtyStateMachine+0xa4>)
100053f0:	685b      	ldr	r3, [r3, #4]
100053f2:	607b      	str	r3, [r7, #4]
  switch (data_ptr->init_gc_state)
100053f4:	687a      	ldr	r2, [r7, #4]
100053f6:	23bc      	movs	r3, #188	; 0xbc
100053f8:	005b      	lsls	r3, r3, #1
100053fa:	58d3      	ldr	r3, [r2, r3]
100053fc:	2bad      	cmp	r3, #173	; 0xad
100053fe:	d01a      	beq.n	10005436 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x4e>
10005400:	d804      	bhi.n	1000540c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x24>
10005402:	2b0d      	cmp	r3, #13
10005404:	d029      	beq.n	1000545a <E_EEPROM_XMC1_lInitDirtyStateMachine+0x72>
10005406:	2b2d      	cmp	r3, #45	; 0x2d
10005408:	d007      	beq.n	1000541a <E_EEPROM_XMC1_lInitDirtyStateMachine+0x32>
1000540a:	e038      	b.n	1000547e <E_EEPROM_XMC1_lInitDirtyStateMachine+0x96>
1000540c:	2bd2      	cmp	r3, #210	; 0xd2
1000540e:	d00b      	beq.n	10005428 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x40>
10005410:	2bda      	cmp	r3, #218	; 0xda
10005412:	d019      	beq.n	10005448 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x60>
10005414:	2bd0      	cmp	r3, #208	; 0xd0
10005416:	d029      	beq.n	1000546c <E_EEPROM_XMC1_lInitDirtyStateMachine+0x84>
10005418:	e031      	b.n	1000547e <E_EEPROM_XMC1_lInitDirtyStateMachine+0x96>
  {
    case E_EEPROM_XMC1_INIT_STATE_2D:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E  */
      data_ptr->current_bank = 0U;
1000541a:	687b      	ldr	r3, [r7, #4]
1000541c:	2200      	movs	r2, #0
1000541e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : 2D -> 2F -> 2E */
      E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
10005420:	2030      	movs	r0, #48	; 0x30
10005422:	f000 f999 	bl	10005758 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>
      break;
10005426:	e02d      	b.n	10005484 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_D2:
      /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
      data_ptr->current_bank = 1U;
10005428:	687b      	ldr	r3, [r7, #4]
1000542a:	2201      	movs	r2, #1
1000542c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : D2 -> F2 -> E2 */
      E_EEPROM_XMC1_lErasedDirtyStateRecovery( E_EEPROM_XMC1_END_ERASE_OFFSET );
1000542e:	2030      	movs	r0, #48	; 0x30
10005430:	f000 f992 	bl	10005758 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>
      break;
10005434:	e026      	b.n	10005484 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_AD:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
      data_ptr->current_bank = 0U;
10005436:	687b      	ldr	r3, [r7, #4]
10005438:	2200      	movs	r2, #0
1000543a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : AD -> A0 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
1000543c:	2000      	movs	r0, #0
1000543e:	2107      	movs	r1, #7
10005440:	2201      	movs	r2, #1
10005442:	f000 f9c3 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
10005446:	e01d      	b.n	10005484 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_DA:
      /* Change the current Bank to Bank1  and recover from the dirty state to E2*/
      data_ptr->current_bank = 1U;
10005448:	687b      	ldr	r3, [r7, #4]
1000544a:	2201      	movs	r2, #1
1000544c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : DA -> 0A -> GC PROCESS -> E2 */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
1000544e:	2000      	movs	r0, #0
10005450:	2107      	movs	r1, #7
10005452:	2201      	movs	r2, #1
10005454:	f000 f9ba 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
10005458:	e014      	b.n	10005484 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_0D:
      /* Change the current Bank to Bank1 and recover from the dirty state to E2 */
      data_ptr->current_bank = 1U;
1000545a:	687b      	ldr	r3, [r7, #4]
1000545c:	2201      	movs	r2, #1
1000545e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : 0D -> 02 -> GC PROCESS -> E2 */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10005460:	2020      	movs	r0, #32
10005462:	2103      	movs	r1, #3
10005464:	2200      	movs	r2, #0
10005466:	f000 f9b1 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
1000546a:	e00b      	b.n	10005484 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    case E_EEPROM_XMC1_INIT_STATE_D0:
      /* Change the current Bank to Bank0 and recover from the dirty state to 2E */
      data_ptr->current_bank = 0U;
1000546c:	687b      	ldr	r3, [r7, #4]
1000546e:	2200      	movs	r2, #0
10005470:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10005472:	2020      	movs	r0, #32
10005474:	2103      	movs	r1, #3
10005476:	2200      	movs	r2, #0
10005478:	f000 f9a8 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
      E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
1000547c:	e002      	b.n	10005484 <E_EEPROM_XMC1_lInitDirtyStateMachine+0x9c>
    default:
      /* Any state apart from the normal states is considered as Illegal state */
      /* Transition states : Illegal -> PREPARE DFLASH -> 2E */
      E_EEPROM_XMC1_lInitllegalStateMachine();
1000547e:	f7ff ff97 	bl	100053b0 <E_EEPROM_XMC1_lInitllegalStateMachine>
      break;
10005482:	46c0      	nop			; (mov r8, r8)
  }
}
10005484:	46bd      	mov	sp, r7
10005486:	b002      	add	sp, #8
10005488:	bd80      	pop	{r7, pc}
1000548a:	46c0      	nop			; (mov r8, r8)
1000548c:	20000610 	.word	0x20000610

10005490 <E_EEPROM_XMC1_lInitNormalStateMachine>:
* Return value   : void
*
* Description    : Check which normal bank state machine process has executed.
*/
static void E_EEPROM_XMC1_lInitNormalStateMachine(void)
{
10005490:	b580      	push	{r7, lr}
10005492:	af00      	add	r7, sp, #0
  /* Check if the state matches with any of the normal marker states with active bank as bank-0*/
  if (E_EEPROM_XMC1_lInitBank0NormalStateMachine() == 0U)
10005494:	f000 f80e 	bl	100054b4 <E_EEPROM_XMC1_lInitBank0NormalStateMachine>
10005498:	1e03      	subs	r3, r0, #0
1000549a:	d109      	bne.n	100054b0 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
  {
    /* Check if the state matches with any of the normal marker states with active bank as bank-1*/
    if (E_EEPROM_XMC1_lInitBank1NormalStateMachine() == 0U)
1000549c:	f000 f856 	bl	1000554c <E_EEPROM_XMC1_lInitBank1NormalStateMachine>
100054a0:	1e03      	subs	r3, r0, #0
100054a2:	d105      	bne.n	100054b0 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
    {
      /* Check if the state matches with any other intermediate states from where a recover is possible  */
      if (E_EEPROM_XMC1_lInitOtherNormalStateMachine() == 0U)
100054a4:	f000 f89e 	bl	100055e4 <E_EEPROM_XMC1_lInitOtherNormalStateMachine>
100054a8:	1e03      	subs	r3, r0, #0
100054aa:	d101      	bne.n	100054b0 <E_EEPROM_XMC1_lInitNormalStateMachine+0x20>
      {
        /* If no matches found then go to illegal state and try to recover by erasing complete DFLASH */
        E_EEPROM_XMC1_lInitllegalStateMachine();
100054ac:	f7ff ff80 	bl	100053b0 <E_EEPROM_XMC1_lInitllegalStateMachine>
      }
    }
  }
}
100054b0:	46bd      	mov	sp, r7
100054b2:	bd80      	pop	{r7, pc}

100054b4 <E_EEPROM_XMC1_lInitBank0NormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute bank 0 state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitBank0NormalStateMachine(void)
{
100054b4:	b580      	push	{r7, lr}
100054b6:	b082      	sub	sp, #8
100054b8:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100054ba:	4b23      	ldr	r3, [pc, #140]	; (10005548 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x94>)
100054bc:	685b      	ldr	r3, [r3, #4]
100054be:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
100054c0:	2301      	movs	r3, #1
100054c2:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
100054c4:	683a      	ldr	r2, [r7, #0]
100054c6:	23bc      	movs	r3, #188	; 0xbc
100054c8:	005b      	lsls	r3, r3, #1
100054ca:	58d3      	ldr	r3, [r2, r3]
100054cc:	2b2e      	cmp	r3, #46	; 0x2e
100054ce:	d00a      	beq.n	100054e6 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x32>
100054d0:	d804      	bhi.n	100054dc <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x28>
100054d2:	2b20      	cmp	r3, #32
100054d4:	d01f      	beq.n	10005516 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x62>
100054d6:	2b2a      	cmp	r3, #42	; 0x2a
100054d8:	d00d      	beq.n	100054f6 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x42>
100054da:	e02c      	b.n	10005536 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x82>
100054dc:	2b2f      	cmp	r3, #47	; 0x2f
100054de:	d022      	beq.n	10005526 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x72>
100054e0:	2ba0      	cmp	r3, #160	; 0xa0
100054e2:	d010      	beq.n	10005506 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x52>
100054e4:	e027      	b.n	10005536 <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x82>
    /*
     * Normal Data write in Bank-0 interrupted (2E), Next step = Cache Update and get ready to accept new request
     * Transition states : Nothing
     */
    case E_EEPROM_XMC1_INIT_NORMAL1:
    data_ptr->current_bank = 0U;
100054e6:	683b      	ldr	r3, [r7, #0]
100054e8:	2200      	movs	r2, #0
100054ea:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE);
100054ec:	200a      	movs	r0, #10
100054ee:	2100      	movs	r1, #0
100054f0:	f000 f8c6 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100054f4:	e022      	b.n	1000553c <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Data copy from Bank0 to Bank1 interrupted (2A), Next step = Erasing Bank-1 and restart copy from Bank-0
     * Transition states : (2A) -> ERASE_BANK0 (2F) -> 2E -> GC_PROCESS (2A -> 0A -> 20 -> F2 -> E2)
     */
    case E_EEPROM_XMC1_INIT_DATA_COPY1:
      data_ptr->current_bank = 0U;
100054f6:	683b      	ldr	r3, [r7, #0]
100054f8:	2200      	movs	r2, #0
100054fa:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSET);
100054fc:	2004      	movs	r0, #4
100054fe:	2130      	movs	r1, #48	; 0x30
10005500:	f000 f8ee 	bl	100056e0 <E_EEPROM_XMC1_lInitGcDataCopyState>
      break;
10005504:	e01a      	b.n	1000553c <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after copy completion from Bank1 to Bank0 (A0),Next step = Writing Valid state into Bank-0
     * Transition states : (A0) -> (20) -> GC_PROCESS (2F -> 2E)
     */
    case E_EEPROM_XMC1_INIT_COPY_DONE1:
      data_ptr->current_bank = 0U;
10005506:	683b      	ldr	r3, [r7, #0]
10005508:	2200      	movs	r2, #0
1000550a:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC_STATE);
1000550c:	2007      	movs	r0, #7
1000550e:	2102      	movs	r1, #2
10005510:	f000 f8b6 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10005514:	e012      	b.n	1000553c <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after writing valid state to Bank0 (20), Next step = Erase of old redundant Bank-1 (2F)
     * Transition states : (20) -> (2F) -> GC_PROCESS (2E)
     */
    case E_EEPROM_XMC1_INIT_NEXT_VALID1:
      data_ptr->current_bank = 0U;
10005516:	683b      	ldr	r3, [r7, #0]
10005518:	2200      	movs	r2, #0
1000551a:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC_STATE);
1000551c:	2003      	movs	r0, #3
1000551e:	2102      	movs	r1, #2
10005520:	f000 f8ae 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10005524:	e00a      	b.n	1000553c <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    /*
     * Interrupted after erase of old bank completed(2F), Next step = Mark erased Bank-1 with Formated state(2E)
     * Transition states : (2F) -> GC_PROCESS (2E)
     */
    case E_EEPROM_XMC1_INIT_END_ERASE1:
      data_ptr->current_bank = 0U;
10005526:	683b      	ldr	r3, [r7, #0]
10005528:	2200      	movs	r2, #0
1000552a:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC_STATE);
1000552c:	2008      	movs	r0, #8
1000552e:	2102      	movs	r1, #2
10005530:	f000 f8a6 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10005534:	e002      	b.n	1000553c <E_EEPROM_XMC1_lInitBank0NormalStateMachine+0x88>
    
    default:
      state_found = 0U;
10005536:	2300      	movs	r3, #0
10005538:	607b      	str	r3, [r7, #4]
      break;
1000553a:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
1000553c:	687b      	ldr	r3, [r7, #4]
}
1000553e:	1c18      	adds	r0, r3, #0
10005540:	46bd      	mov	sp, r7
10005542:	b002      	add	sp, #8
10005544:	bd80      	pop	{r7, pc}
10005546:	46c0      	nop			; (mov r8, r8)
10005548:	20000610 	.word	0x20000610

1000554c <E_EEPROM_XMC1_lInitBank1NormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute bank 1 state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitBank1NormalStateMachine(void)
{
1000554c:	b580      	push	{r7, lr}
1000554e:	b082      	sub	sp, #8
10005550:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005552:	4b23      	ldr	r3, [pc, #140]	; (100055e0 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x94>)
10005554:	685b      	ldr	r3, [r3, #4]
10005556:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
10005558:	2301      	movs	r3, #1
1000555a:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
1000555c:	683a      	ldr	r2, [r7, #0]
1000555e:	23bc      	movs	r3, #188	; 0xbc
10005560:	005b      	lsls	r3, r3, #1
10005562:	58d3      	ldr	r3, [r2, r3]
10005564:	2ba2      	cmp	r3, #162	; 0xa2
10005566:	d012      	beq.n	1000558e <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x42>
10005568:	d804      	bhi.n	10005574 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x28>
1000556a:	2b02      	cmp	r3, #2
1000556c:	d01f      	beq.n	100055ae <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x62>
1000556e:	2b0a      	cmp	r3, #10
10005570:	d015      	beq.n	1000559e <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x52>
10005572:	e02c      	b.n	100055ce <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x82>
10005574:	2be2      	cmp	r3, #226	; 0xe2
10005576:	d002      	beq.n	1000557e <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x32>
10005578:	2bf2      	cmp	r3, #242	; 0xf2
1000557a:	d020      	beq.n	100055be <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x72>
1000557c:	e027      	b.n	100055ce <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x82>
    /*
     * Normal Data write in Bank-1 interrupted (E2), Next step = Cache Update and get ready to accept new request
     * Transition states : Nothing
     */
    case E_EEPROM_XMC1_INIT_NORMAL2:
      data_ptr->current_bank = 1U;
1000557e:	683b      	ldr	r3, [r7, #0]
10005580:	2201      	movs	r2, #1
10005582:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_IDLE, E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE);
10005584:	200a      	movs	r0, #10
10005586:	2100      	movs	r1, #0
10005588:	f000 f87a 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
1000558c:	e022      	b.n	100055d4 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Data copy from Bank1 to Bank0 interrupted (A2), Next step = Erasing Bank-0 and restart copy from Bank-1
     * Transition states : (A2) -> ERASE_BANK0 (F2) -> E2 -> GC_PROCESS (A2 -> A0 -> 20 -> 2F -> 2E)
     */
    case E_EEPROM_XMC1_INIT_DATA_COPY2:
      data_ptr->current_bank = 1U;
1000558e:	683b      	ldr	r3, [r7, #0]
10005590:	2201      	movs	r2, #1
10005592:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcDataCopyState( E_EEPROM_XMC1_GC_REQUESTED, E_EEPROM_XMC1_END_ERASE_OFFSET);
10005594:	2004      	movs	r0, #4
10005596:	2130      	movs	r1, #48	; 0x30
10005598:	f000 f8a2 	bl	100056e0 <E_EEPROM_XMC1_lInitGcDataCopyState>
      break;
1000559c:	e01a      	b.n	100055d4 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after copy completion from Bank0 to Bank1 (0A),Next step = Writing Valid state into Bank-1
     * Transition states : (0A) -> (02) -> GC_PROCESS (F2 -> E2)
     */
    case E_EEPROM_XMC1_INIT_COPY_DONE2:
      data_ptr->current_bank = 1U;
1000559e:	683b      	ldr	r3, [r7, #0]
100055a0:	2201      	movs	r2, #1
100055a2:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100055a4:	2007      	movs	r0, #7
100055a6:	2102      	movs	r1, #2
100055a8:	f000 f86a 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100055ac:	e012      	b.n	100055d4 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after writing valid state to Bank1 (02), Next step = Erase of old redundant Bank-0 (F2)
     * Transition states : (02) -> (F2) -> GC_PROCESS (E2)
     */
    case E_EEPROM_XMC1_INIT_NEXT_VALID2:
      data_ptr->current_bank = 1U;
100055ae:	683b      	ldr	r3, [r7, #0]
100055b0:	2201      	movs	r2, #1
100055b2:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100055b4:	2003      	movs	r0, #3
100055b6:	2102      	movs	r1, #2
100055b8:	f000 f862 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100055bc:	e00a      	b.n	100055d4 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    /*
     * Interrupted after erase of old bank completed(F2), Next step = Mark erased Bank-0 with Formated state(E2)
     * Transition states : (F2) -> GC_PROCESS (E2)
     */
    case E_EEPROM_XMC1_INIT_END_ERASE2:
      data_ptr->current_bank = 1U;
100055be:	683b      	ldr	r3, [r7, #0]
100055c0:	2201      	movs	r2, #1
100055c2:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_EXECUTE_GC_STATE);
100055c4:	2008      	movs	r0, #8
100055c6:	2102      	movs	r1, #2
100055c8:	f000 f85a 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
100055cc:	e002      	b.n	100055d4 <E_EEPROM_XMC1_lInitBank1NormalStateMachine+0x88>
    
    default:
      state_found = 0U;
100055ce:	2300      	movs	r3, #0
100055d0:	607b      	str	r3, [r7, #4]
      break;
100055d2:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
100055d4:	687b      	ldr	r3, [r7, #4]
}
100055d6:	1c18      	adds	r0, r3, #0
100055d8:	46bd      	mov	sp, r7
100055da:	b002      	add	sp, #8
100055dc:	bd80      	pop	{r7, pc}
100055de:	46c0      	nop			; (mov r8, r8)
100055e0:	20000610 	.word	0x20000610

100055e4 <E_EEPROM_XMC1_lInitOtherNormalStateMachine>:
* Return value    : uint32_t : ( 1= state_found / 0 = State not found )
*
* Description     : Execute other state machine process and return the found states.
*/
static uint32_t E_EEPROM_XMC1_lInitOtherNormalStateMachine(void)
{
100055e4:	b580      	push	{r7, lr}
100055e6:	b082      	sub	sp, #8
100055e8:	af00      	add	r7, sp, #0
  uint32_t state_found;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100055ea:	4b24      	ldr	r3, [pc, #144]	; (1000567c <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x98>)
100055ec:	685b      	ldr	r3, [r3, #4]
100055ee:	603b      	str	r3, [r7, #0]
  
  state_found = 1U;
100055f0:	2301      	movs	r3, #1
100055f2:	607b      	str	r3, [r7, #4]
  
  switch (data_ptr->init_gc_state)
100055f4:	683a      	ldr	r2, [r7, #0]
100055f6:	23bc      	movs	r3, #188	; 0xbc
100055f8:	005b      	lsls	r3, r3, #1
100055fa:	58d3      	ldr	r3, [r2, r3]
100055fc:	2bf0      	cmp	r3, #240	; 0xf0
100055fe:	d02c      	beq.n	1000565a <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x76>
10005600:	d804      	bhi.n	1000560c <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x28>
10005602:	2b0f      	cmp	r3, #15
10005604:	d020      	beq.n	10005648 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x64>
10005606:	2baf      	cmp	r3, #175	; 0xaf
10005608:	d00c      	beq.n	10005624 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x40>
1000560a:	e02f      	b.n	1000566c <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x88>
1000560c:	2bfa      	cmp	r3, #250	; 0xfa
1000560e:	d012      	beq.n	10005636 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x52>
10005610:	2bff      	cmp	r3, #255	; 0xff
10005612:	d12b      	bne.n	1000566c <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x88>
  {
    /* Interrupted after erase of both banks completed (FF), Next step = Start Prepare DFlash  */
    case E_EEPROM_XMC1_INIT_ALL_ERASED:
      /* Change the current Bank to Bank0 */
      data_ptr->current_bank = 0U;
10005614:	683b      	ldr	r3, [r7, #0]
10005616:	2200      	movs	r2, #0
10005618:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : FF ->  PREPARE_DFLASH (2F) -> 2E */
      E_EEPROM_XMC1_lInitGcNormalStates( E_EEPROM_XMC1_PREPFLASH_FF, E_EEPROM_XMC1_EXECUTE_PREP_FLASH);
1000561a:	2001      	movs	r0, #1
1000561c:	2101      	movs	r1, #1
1000561e:	f000 f82f 	bl	10005680 <E_EEPROM_XMC1_lInitGcNormalStates>
      break;
10005622:	e026      	b.n	10005672 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
     * Interrupted after erase of Bank1 during previous recovery(AF), Next step = Bank0 marker Page program (A0)
     * Transition states : AF -> A0 -> GC PROCESS -> 20 -> 2F -> 2E
     */
    case E_EEPROM_XMC1_INIT_STATE_AF:
      /* Change the current Bank to Bank1 */
      data_ptr->current_bank = 0U;
10005624:	683b      	ldr	r3, [r7, #0]
10005626:	2200      	movs	r2, #0
10005628:	639a      	str	r2, [r3, #56]	; 0x38
    
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
1000562a:	2000      	movs	r0, #0
1000562c:	2107      	movs	r1, #7
1000562e:	2201      	movs	r2, #1
10005630:	f000 f8cc 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
10005634:	e01d      	b.n	10005672 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    /*
     * Interrupted after erase of Bank0 during previous recovery(FA), Next step = Bank1 marker Page program (0A)
     * Transition states : FA -> 0A -> GC PROCESS -> 02 -> F2 -> E2
     */
    case E_EEPROM_XMC1_INIT_STATE_FA:
      data_ptr->current_bank = 1U;
10005636:	683b      	ldr	r3, [r7, #0]
10005638:	2201      	movs	r2, #1
1000563a:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_COPY_COMPLETED ,
1000563c:	2000      	movs	r0, #0
1000563e:	2107      	movs	r1, #7
10005640:	2201      	movs	r2, #1
10005642:	f000 f8c3 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_NEXT_BANK_VALID , 1U);
      break;
10005646:	e014      	b.n	10005672 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    /*
     * Interrupted after erase of Bank1 during previous recover(0F), Next step = Bank1 marker Page program (02)
     * Transition states : 0F -> 02 -> GC PROCESS -> F2 -> E2
     */
    case E_EEPROM_XMC1_INIT_STATE_0F:
      data_ptr->current_bank = 1U;
10005648:	683b      	ldr	r3, [r7, #0]
1000564a:	2201      	movs	r2, #1
1000564c:	639a      	str	r2, [r3, #56]	; 0x38
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
1000564e:	2020      	movs	r0, #32
10005650:	2103      	movs	r1, #3
10005652:	2200      	movs	r2, #0
10005654:	f000 f8ba 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
10005658:	e00b      	b.n	10005672 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
     * Interrupted after erase of Bank1 during previous recover(F0), Next step = Bank1 marker Page program (20)
     * Transition states : F0 -> 20 -> GC PROCESS -> 2F -> 2E
     */
    case E_EEPROM_XMC1_INIT_STATE_F0:
      /* Change the current Bank to Bank0 */
      data_ptr->current_bank = 0U;
1000565a:	683b      	ldr	r3, [r7, #0]
1000565c:	2200      	movs	r2, #0
1000565e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Transition states : D0 -> 20 -> GC PROCESS -> 2E */
      E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( E_EEPROM_XMC1_VALID_STATE ,
10005660:	2020      	movs	r0, #32
10005662:	2103      	movs	r1, #3
10005664:	2200      	movs	r2, #0
10005666:	f000 f8b1 	bl	100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>
                                                    E_EEPROM_XMC1_GC_ERASE_PREV_BANK , 0U);
      break;
1000566a:	e002      	b.n	10005672 <E_EEPROM_XMC1_lInitOtherNormalStateMachine+0x8e>
    
    default:
      state_found = 0U;
1000566c:	2300      	movs	r3, #0
1000566e:	607b      	str	r3, [r7, #4]
      break;
10005670:	46c0      	nop			; (mov r8, r8)
  }
  return (state_found);
10005672:	687b      	ldr	r3, [r7, #4]
}
10005674:	1c18      	adds	r0, r3, #0
10005676:	46bd      	mov	sp, r7
10005678:	b002      	add	sp, #8
1000567a:	bd80      	pop	{r7, pc}
1000567c:	20000610 	.word	0x20000610

10005680 <E_EEPROM_XMC1_lInitGcNormalStates>:
* Return value    : void
*
* Description     : Executes normal Garbage collection state machine sub process
*/
static void E_EEPROM_XMC1_lInitGcNormalStates(uint32_t current_state, uint32_t next_process)
{
10005680:	b580      	push	{r7, lr}
10005682:	b084      	sub	sp, #16
10005684:	af00      	add	r7, sp, #0
10005686:	6078      	str	r0, [r7, #4]
10005688:	6039      	str	r1, [r7, #0]
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000568a:	4b14      	ldr	r3, [pc, #80]	; (100056dc <E_EEPROM_XMC1_lInitGcNormalStates+0x5c>)
1000568c:	685b      	ldr	r3, [r3, #4]
1000568e:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005690:	f000 fd46 	bl	10006120 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  if (next_process == E_EEPROM_XMC1_EXECUTE_PREP_FLASH)
10005694:	683b      	ldr	r3, [r7, #0]
10005696:	2b01      	cmp	r3, #1
10005698:	d109      	bne.n	100056ae <E_EEPROM_XMC1_lInitGcNormalStates+0x2e>
  {
    /* Update the GC state*/
    data_ptr->gc_state = current_state;
1000569a:	68fa      	ldr	r2, [r7, #12]
1000569c:	23ba      	movs	r3, #186	; 0xba
1000569e:	005b      	lsls	r3, r3, #1
100056a0:	6879      	ldr	r1, [r7, #4]
100056a2:	50d1      	str	r1, [r2, r3]
    /* Start Prepare DFlash routine to build FEE base  */
    E_EEPROM_XMC1_lPrepareDFlash();
100056a4:	f000 fab0 	bl	10005c08 <E_EEPROM_XMC1_lPrepareDFlash>
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
100056a8:	f000 fb2e 	bl	10005d08 <E_EEPROM_XMC1_lUpdateCache>
100056ac:	e013      	b.n	100056d6 <E_EEPROM_XMC1_lInitGcNormalStates+0x56>
  }  
  else if (next_process == E_EEPROM_XMC1_EXECUTE_GC_STATE)
100056ae:	683b      	ldr	r3, [r7, #0]
100056b0:	2b02      	cmp	r3, #2
100056b2:	d109      	bne.n	100056c8 <E_EEPROM_XMC1_lInitGcNormalStates+0x48>
  {
    /* Update the GC state */
    data_ptr->gc_state = current_state;
100056b4:	68fa      	ldr	r2, [r7, #12]
100056b6:	23ba      	movs	r3, #186	; 0xba
100056b8:	005b      	lsls	r3, r3, #1
100056ba:	6879      	ldr	r1, [r7, #4]
100056bc:	50d1      	str	r1, [r2, r3]
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
100056be:	f000 fb23 	bl	10005d08 <E_EEPROM_XMC1_lUpdateCache>
    /* Start Garbage Collection */
    E_EEPROM_XMC1_lGarbageCollection();
100056c2:	f000 f8c3 	bl	1000584c <E_EEPROM_XMC1_lGarbageCollection>
100056c6:	e006      	b.n	100056d6 <E_EEPROM_XMC1_lInitGcNormalStates+0x56>
  }
  else /* if ( next_process == E_EEPROM_XMC1_EXECUTE_CACHE_UPDATE ) */
  {
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
100056c8:	f000 fb1e 	bl	10005d08 <E_EEPROM_XMC1_lUpdateCache>
    /* Update the GC state as Bank-0 Erase Completed state */
    data_ptr->gc_state = current_state;
100056cc:	68fa      	ldr	r2, [r7, #12]
100056ce:	23ba      	movs	r3, #186	; 0xba
100056d0:	005b      	lsls	r3, r3, #1
100056d2:	6879      	ldr	r1, [r7, #4]
100056d4:	50d1      	str	r1, [r2, r3]
  }
}
100056d6:	46bd      	mov	sp, r7
100056d8:	b004      	add	sp, #16
100056da:	bd80      	pop	{r7, pc}
100056dc:	20000610 	.word	0x20000610

100056e0 <E_EEPROM_XMC1_lInitGcDataCopyState>:
* Return value    : void
*
* Description     : Executes data copy state GC state machine sub process.
*/
static void E_EEPROM_XMC1_lInitGcDataCopyState(uint32_t current_state, uint32_t marker_offset)
{
100056e0:	b580      	push	{r7, lr}
100056e2:	b084      	sub	sp, #16
100056e4:	af00      	add	r7, sp, #0
100056e6:	6078      	str	r0, [r7, #4]
100056e8:	6039      	str	r1, [r7, #0]
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100056ea:	4b1a      	ldr	r3, [pc, #104]	; (10005754 <E_EEPROM_XMC1_lInitGcDataCopyState+0x74>)
100056ec:	685b      	ldr	r3, [r3, #4]
100056ee:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
100056f0:	f000 fd16 	bl	10006120 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Update the GC state as restart copy process */
  data_ptr->gc_state = current_state ;
100056f4:	68fa      	ldr	r2, [r7, #12]
100056f6:	23ba      	movs	r3, #186	; 0xba
100056f8:	005b      	lsls	r3, r3, #1
100056fa:	6879      	ldr	r1, [r7, #4]
100056fc:	50d1      	str	r1, [r2, r3]
  
  /* Update the RAM Cache Table with */
  E_EEPROM_XMC1_lUpdateCache();
100056fe:	f000 fb03 	bl	10005d08 <E_EEPROM_XMC1_lUpdateCache>
  
  /* Erase the previous redundant bank */
  status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10005702:	68fb      	ldr	r3, [r7, #12]
10005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005706:	1c18      	adds	r0, r3, #0
10005708:	f000 fe44 	bl	10006394 <E_EEPROM_XMC1_lEraseBank>
1000570c:	1c03      	adds	r3, r0, #0
1000570e:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
10005710:	68bb      	ldr	r3, [r7, #8]
10005712:	2b00      	cmp	r3, #0
10005714:	d116      	bne.n	10005744 <E_EEPROM_XMC1_lInitGcDataCopyState+0x64>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005716:	f000 fddb 	bl	100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    
    /* Write formatted state to the erased bank (2E)  */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
1000571a:	68fb      	ldr	r3, [r7, #12]
1000571c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
1000571e:	683b      	ldr	r3, [r7, #0]
10005720:	18d3      	adds	r3, r2, r3
10005722:	1c18      	adds	r0, r3, #0
10005724:	f000 fe60 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005728:	1c03      	adds	r3, r0, #0
1000572a:	60bb      	str	r3, [r7, #8]
    
    if (status == 0U)
1000572c:	68bb      	ldr	r3, [r7, #8]
1000572e:	2b00      	cmp	r3, #0
10005730:	d102      	bne.n	10005738 <E_EEPROM_XMC1_lInitGcDataCopyState+0x58>
    {
      /* Start Garbage Collection */
      E_EEPROM_XMC1_lGarbageCollection();
10005732:	f000 f88b 	bl	1000584c <E_EEPROM_XMC1_lGarbageCollection>
10005736:	e00a      	b.n	1000574e <E_EEPROM_XMC1_lInitGcDataCopyState+0x6e>
    }
    else
    {
      data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005738:	68fa      	ldr	r2, [r7, #12]
1000573a:	23ba      	movs	r3, #186	; 0xba
1000573c:	005b      	lsls	r3, r3, #1
1000573e:	2109      	movs	r1, #9
10005740:	50d1      	str	r1, [r2, r3]
10005742:	e004      	b.n	1000574e <E_EEPROM_XMC1_lInitGcDataCopyState+0x6e>
    }
    
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005744:	68fa      	ldr	r2, [r7, #12]
10005746:	23ba      	movs	r3, #186	; 0xba
10005748:	005b      	lsls	r3, r3, #1
1000574a:	2109      	movs	r1, #9
1000574c:	50d1      	str	r1, [r2, r3]
  }
  
}
1000574e:	46bd      	mov	sp, r7
10005750:	b004      	add	sp, #16
10005752:	bd80      	pop	{r7, pc}
10005754:	20000610 	.word	0x20000610

10005758 <E_EEPROM_XMC1_lErasedDirtyStateRecovery>:
 * Return value    : void
 *
 * Description     : Executes state machine sub process for erase dirty states to recover.
 */
static void E_EEPROM_XMC1_lErasedDirtyStateRecovery( uint32_t marker_offset)
{
10005758:	b580      	push	{r7, lr}
1000575a:	b084      	sub	sp, #16
1000575c:	af00      	add	r7, sp, #0
1000575e:	6078      	str	r0, [r7, #4]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005760:	4b19      	ldr	r3, [pc, #100]	; (100057c8 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x70>)
10005762:	685b      	ldr	r3, [r3, #4]
10005764:	60fb      	str	r3, [r7, #12]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005766:	f000 fcdb 	bl	10006120 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Erase the previous redundant bank */
  status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
1000576a:	68fb      	ldr	r3, [r7, #12]
1000576c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000576e:	1c18      	adds	r0, r3, #0
10005770:	f000 fe10 	bl	10006394 <E_EEPROM_XMC1_lEraseBank>
10005774:	1c03      	adds	r3, r0, #0
10005776:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
10005778:	68bb      	ldr	r3, [r7, #8]
1000577a:	2b00      	cmp	r3, #0
1000577c:	d11b      	bne.n	100057b6 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x5e>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
1000577e:	f000 fda7 	bl	100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    
    /* Write formatted state to the erased bank */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + marker_offset));
10005782:	68fb      	ldr	r3, [r7, #12]
10005784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005786:	687b      	ldr	r3, [r7, #4]
10005788:	18d3      	adds	r3, r2, r3
1000578a:	1c18      	adds	r0, r3, #0
1000578c:	f000 fe2c 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005790:	1c03      	adds	r3, r0, #0
10005792:	60bb      	str	r3, [r7, #8]
    if (status == 0U)
10005794:	68bb      	ldr	r3, [r7, #8]
10005796:	2b00      	cmp	r3, #0
10005798:	d107      	bne.n	100057aa <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x52>
    {
      /* Update the RAM Cache Table with the written blocks of data.*/
      E_EEPROM_XMC1_lUpdateCache();
1000579a:	f000 fab5 	bl	10005d08 <E_EEPROM_XMC1_lUpdateCache>
      
      data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
1000579e:	68fa      	ldr	r2, [r7, #12]
100057a0:	23ba      	movs	r3, #186	; 0xba
100057a2:	005b      	lsls	r3, r3, #1
100057a4:	210a      	movs	r1, #10
100057a6:	50d1      	str	r1, [r2, r3]
100057a8:	e00a      	b.n	100057c0 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x68>
    }
    else
    {
      data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100057aa:	68fa      	ldr	r2, [r7, #12]
100057ac:	23ba      	movs	r3, #186	; 0xba
100057ae:	005b      	lsls	r3, r3, #1
100057b0:	2109      	movs	r1, #9
100057b2:	50d1      	str	r1, [r2, r3]
100057b4:	e004      	b.n	100057c0 <E_EEPROM_XMC1_lErasedDirtyStateRecovery+0x68>
    }
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
100057b6:	68fa      	ldr	r2, [r7, #12]
100057b8:	23ba      	movs	r3, #186	; 0xba
100057ba:	005b      	lsls	r3, r3, #1
100057bc:	2109      	movs	r1, #9
100057be:	50d1      	str	r1, [r2, r3]
  }
}
100057c0:	46bd      	mov	sp, r7
100057c2:	b004      	add	sp, #16
100057c4:	bd80      	pop	{r7, pc}
100057c6:	46c0      	nop			; (mov r8, r8)
100057c8:	20000610 	.word	0x20000610

100057cc <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery>:
 * Description     : Recovers from any copy process dirty state.
 */
static void E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery( uint32_t current_state,
                                                          uint32_t next_state,
                                                          uint32_t page_addr_select)
{
100057cc:	b580      	push	{r7, lr}
100057ce:	b086      	sub	sp, #24
100057d0:	af00      	add	r7, sp, #0
100057d2:	60f8      	str	r0, [r7, #12]
100057d4:	60b9      	str	r1, [r7, #8]
100057d6:	607a      	str	r2, [r7, #4]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100057d8:	4b1b      	ldr	r3, [pc, #108]	; (10005848 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x7c>)
100057da:	685b      	ldr	r3, [r3, #4]
100057dc:	617b      	str	r3, [r7, #20]
  
  /* Update the Bank related global variables */
  E_EEPROM_XMC1_lUpdateCurrBankInfo();
100057de:	f000 fc9f 	bl	10006120 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
  
  /* Set the marker blocks with copy completed state */
  E_EEPROM_XMC1_lSetMarkerPageBuffer(current_state);
100057e2:	68fb      	ldr	r3, [r7, #12]
100057e4:	1c18      	adds	r0, r3, #0
100057e6:	f000 fd91 	bl	1000630c <E_EEPROM_XMC1_lSetMarkerPageBuffer>
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
100057ea:	f7fb fce3 	bl	100011b4 <XMC_FLASH_ClearStatus>
  
  /* Decide the bank from page_addr_select and Erase the marker page + Program with the current state + Verify */
  if (page_addr_select == 1U)
100057ee:	687b      	ldr	r3, [r7, #4]
100057f0:	2b01      	cmp	r3, #1
100057f2:	d108      	bne.n	10005806 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x3a>
  {
    E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_dest_addr, (uint32_t*)(void*)data_ptr->page_write_buffer);
100057f4:	697b      	ldr	r3, [r7, #20]
100057f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
100057f8:	697b      	ldr	r3, [r7, #20]
100057fa:	3370      	adds	r3, #112	; 0x70
100057fc:	1c10      	adds	r0, r2, #0
100057fe:	1c19      	adds	r1, r3, #0
10005800:	f001 f912 	bl	10006a28 <E_EEPROM_XMC1_lWriteSinglePage>
10005804:	e007      	b.n	10005816 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x4a>
  }
  else
  {
    E_EEPROM_XMC1_lWriteSinglePage(data_ptr->gc_src_addr, (uint32_t*)(void*)data_ptr->page_write_buffer);
10005806:	697b      	ldr	r3, [r7, #20]
10005808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000580a:	697b      	ldr	r3, [r7, #20]
1000580c:	3370      	adds	r3, #112	; 0x70
1000580e:	1c10      	adds	r0, r2, #0
10005810:	1c19      	adds	r1, r3, #0
10005812:	f001 f909 	bl	10006a28 <E_EEPROM_XMC1_lWriteSinglePage>
  }
  
  status = E_EEPROM_XMC1_lGetFlashStatus();
10005816:	f001 f921 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
1000581a:	1c03      	adds	r3, r0, #0
1000581c:	613b      	str	r3, [r7, #16]
  
  if (status == 0U)
1000581e:	693b      	ldr	r3, [r7, #16]
10005820:	2b00      	cmp	r3, #0
10005822:	d109      	bne.n	10005838 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x6c>
  {
    /* Update the GC state as write next bank valid */
    data_ptr->gc_state = next_state ;
10005824:	697a      	ldr	r2, [r7, #20]
10005826:	23ba      	movs	r3, #186	; 0xba
10005828:	005b      	lsls	r3, r3, #1
1000582a:	68b9      	ldr	r1, [r7, #8]
1000582c:	50d1      	str	r1, [r2, r3]
    /* Update the RAM Cache Table */
    E_EEPROM_XMC1_lUpdateCache();
1000582e:	f000 fa6b 	bl	10005d08 <E_EEPROM_XMC1_lUpdateCache>
    /* Start Garbage Collection */
    E_EEPROM_XMC1_lGarbageCollection();
10005832:	f000 f80b 	bl	1000584c <E_EEPROM_XMC1_lGarbageCollection>
10005836:	e004      	b.n	10005842 <E_EEPROM_XMC1_lCopyProcessDirtyStateRecovery+0x76>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005838:	697a      	ldr	r2, [r7, #20]
1000583a:	23ba      	movs	r3, #186	; 0xba
1000583c:	005b      	lsls	r3, r3, #1
1000583e:	2109      	movs	r1, #9
10005840:	50d1      	str	r1, [r2, r3]
  }
}
10005842:	46bd      	mov	sp, r7
10005844:	b006      	add	sp, #24
10005846:	bd80      	pop	{r7, pc}
10005848:	20000610 	.word	0x20000610

1000584c <E_EEPROM_XMC1_lGarbageCollection>:
 * Return value    : void
 *
 * Description     : This function execute's the garbage collection state machine.
 */
static void E_EEPROM_XMC1_lGarbageCollection(void)
{
1000584c:	b580      	push	{r7, lr}
1000584e:	b082      	sub	sp, #8
10005850:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005852:	4b24      	ldr	r3, [pc, #144]	; (100058e4 <E_EEPROM_XMC1_lGarbageCollection+0x98>)
10005854:	685b      	ldr	r3, [r3, #4]
10005856:	607b      	str	r3, [r7, #4]
  
  do
  {
    switch (data_ptr->gc_state)
10005858:	687a      	ldr	r2, [r7, #4]
1000585a:	23ba      	movs	r3, #186	; 0xba
1000585c:	005b      	lsls	r3, r3, #1
1000585e:	58d3      	ldr	r3, [r2, r3]
10005860:	2b08      	cmp	r3, #8
10005862:	d82c      	bhi.n	100058be <E_EEPROM_XMC1_lGarbageCollection+0x72>
10005864:	009a      	lsls	r2, r3, #2
10005866:	4b20      	ldr	r3, [pc, #128]	; (100058e8 <E_EEPROM_XMC1_lGarbageCollection+0x9c>)
10005868:	18d3      	adds	r3, r2, r3
1000586a:	681b      	ldr	r3, [r3, #0]
1000586c:	469f      	mov	pc, r3
    {
      case E_EEPROM_XMC1_GC_COPY_START:
        E_EEPROM_XMC1_lHandleGcStartCopy();
1000586e:	f000 f881 	bl	10005974 <E_EEPROM_XMC1_lHandleGcStartCopy>
        break;
10005872:	e027      	b.n	100058c4 <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_COPY_WRITE:
        E_EEPROM_XMC1_lHandleGcCopyWrite();
10005874:	f000 f8e8 	bl	10005a48 <E_EEPROM_XMC1_lHandleGcCopyWrite>
        break;
10005878:	e024      	b.n	100058c4 <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_READ_NXTBLOCK:
        XMC_FLASH_ClearStatus();
1000587a:	f7fb fc9b 	bl	100011b4 <XMC_FLASH_ClearStatus>
        E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr ,(uint32_t*)(void*)data_ptr->read_write_buffer);
1000587e:	687b      	ldr	r3, [r7, #4]
10005880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005882:	687b      	ldr	r3, [r7, #4]
10005884:	335c      	adds	r3, #92	; 0x5c
10005886:	1c10      	adds	r0, r2, #0
10005888:	1c19      	adds	r1, r3, #0
1000588a:	f001 f8bd 	bl	10006a08 <E_EEPROM_XMC1_lReadSingleBlock>
        data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
1000588e:	687a      	ldr	r2, [r7, #4]
10005890:	23ba      	movs	r3, #186	; 0xba
10005892:	005b      	lsls	r3, r3, #1
10005894:	2105      	movs	r1, #5
10005896:	50d1      	str	r1, [r2, r3]
        break;
10005898:	e014      	b.n	100058c4 <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_COPY_END:
        E_EEPROM_XMC1_lHandleGcEndOfCopy();
1000589a:	f000 f94b 	bl	10005b34 <E_EEPROM_XMC1_lHandleGcEndOfCopy>
        break;
1000589e:	e011      	b.n	100058c4 <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_NEXT_BANK_VALID:
        E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_NEXT_BANK_VALID, E_EEPROM_XMC1_GC_ERASE_PREV_BANK);
100058a0:	2007      	movs	r0, #7
100058a2:	2103      	movs	r1, #3
100058a4:	f000 f972 	bl	10005b8c <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
100058a8:	e00c      	b.n	100058c4 <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_ERASE_PREV_BANK:
        E_EEPROM_XMC1_lHandleGcOtherStates( E_EEPROM_XMC1_GC_ERASE_PREV_BANK, E_EEPROM_XMC1_GC_MARK_END_ERASE1);
100058aa:	2003      	movs	r0, #3
100058ac:	2108      	movs	r1, #8
100058ae:	f000 f96d 	bl	10005b8c <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
100058b2:	e007      	b.n	100058c4 <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      case E_EEPROM_XMC1_GC_MARK_END_ERASE1:
        E_EEPROM_XMC1_lHandleGcOtherStates(E_EEPROM_XMC1_GC_MARK_END_ERASE1, E_EEPROM_XMC1_GC_IDLE);
100058b4:	2008      	movs	r0, #8
100058b6:	210a      	movs	r1, #10
100058b8:	f000 f968 	bl	10005b8c <E_EEPROM_XMC1_lHandleGcOtherStates>
        break;
100058bc:	e002      	b.n	100058c4 <E_EEPROM_XMC1_lGarbageCollection+0x78>
      
      default:
        E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
100058be:	f000 f815 	bl	100058ec <E_EEPROM_XMC1_lHandleGcRequested>
      break;
100058c2:	46c0      	nop			; (mov r8, r8)
    }
    
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
100058c4:	687a      	ldr	r2, [r7, #4]
100058c6:	23ba      	movs	r3, #186	; 0xba
100058c8:	005b      	lsls	r3, r3, #1
100058ca:	58d3      	ldr	r3, [r2, r3]
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
100058cc:	2b0a      	cmp	r3, #10
100058ce:	d005      	beq.n	100058dc <E_EEPROM_XMC1_lGarbageCollection+0x90>
100058d0:	687a      	ldr	r2, [r7, #4]
100058d2:	23ba      	movs	r3, #186	; 0xba
100058d4:	005b      	lsls	r3, r3, #1
100058d6:	58d3      	ldr	r3, [r2, r3]
      default:
        E_EEPROM_XMC1_lHandleGcRequested(); /* E_EEPROM_XMC1_GC_REQUESTED state*/
      break;
    }
    
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
100058d8:	2b09      	cmp	r3, #9
100058da:	d1bd      	bne.n	10005858 <E_EEPROM_XMC1_lGarbageCollection+0xc>
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
}
100058dc:	46bd      	mov	sp, r7
100058de:	b002      	add	sp, #8
100058e0:	bd80      	pop	{r7, pc}
100058e2:	46c0      	nop			; (mov r8, r8)
100058e4:	20000610 	.word	0x20000610
100058e8:	1000c308 	.word	0x1000c308

100058ec <E_EEPROM_XMC1_lHandleGcRequested>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC REQUESTED state
 */
static void E_EEPROM_XMC1_lHandleGcRequested(void)
{
100058ec:	b580      	push	{r7, lr}
100058ee:	b084      	sub	sp, #16
100058f0:	af00      	add	r7, sp, #0
  uint32_t status;
  uint32_t block_count;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100058f2:	4b1f      	ldr	r3, [pc, #124]	; (10005970 <E_EEPROM_XMC1_lHandleGcRequested+0x84>)
100058f4:	685b      	ldr	r3, [r3, #4]
100058f6:	607b      	str	r3, [r7, #4]
  
  E_EEPROM_XMC1_lSetMarkerBlockBuffer();
100058f8:	f000 fcea 	bl	100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
  /* Write Copy start state to new bank  (2A) or (A2) */
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_BEGIN_OFFSET));
100058fc:	687b      	ldr	r3, [r7, #4]
100058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005900:	3310      	adds	r3, #16
10005902:	1c18      	adds	r0, r3, #0
10005904:	f000 fd70 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005908:	1c03      	adds	r3, r0, #0
1000590a:	603b      	str	r3, [r7, #0]
  if (status == 0U)
1000590c:	683b      	ldr	r3, [r7, #0]
1000590e:	2b00      	cmp	r3, #0
10005910:	d125      	bne.n	1000595e <E_EEPROM_XMC1_lHandleGcRequested+0x72>
  {
    /* Initialize the copied status for all the logical blocks */
    cache_ptr = data_ptr->block_info;
10005912:	687b      	ldr	r3, [r7, #4]
10005914:	60bb      	str	r3, [r7, #8]
    block_count = 0U;
10005916:	2300      	movs	r3, #0
10005918:	60fb      	str	r3, [r7, #12]
    do
    {
      cache_ptr->status.copied = 0U;
1000591a:	68bb      	ldr	r3, [r7, #8]
1000591c:	791a      	ldrb	r2, [r3, #4]
1000591e:	2104      	movs	r1, #4
10005920:	438a      	bics	r2, r1
10005922:	711a      	strb	r2, [r3, #4]
      block_count++;
10005924:	68fb      	ldr	r3, [r7, #12]
10005926:	3301      	adds	r3, #1
10005928:	60fb      	str	r3, [r7, #12]
      cache_ptr++;
1000592a:	68bb      	ldr	r3, [r7, #8]
1000592c:	3308      	adds	r3, #8
1000592e:	60bb      	str	r3, [r7, #8]
    } while (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count);
10005930:	4b0f      	ldr	r3, [pc, #60]	; (10005970 <E_EEPROM_XMC1_lHandleGcRequested+0x84>)
10005932:	7a5b      	ldrb	r3, [r3, #9]
10005934:	1e1a      	subs	r2, r3, #0
10005936:	68fb      	ldr	r3, [r7, #12]
10005938:	429a      	cmp	r2, r3
1000593a:	d1ee      	bne.n	1000591a <E_EEPROM_XMC1_lHandleGcRequested+0x2e>
    
    data_ptr->gc_log_block_count = 0U;
1000593c:	687a      	ldr	r2, [r7, #4]
1000593e:	23be      	movs	r3, #190	; 0xbe
10005940:	005b      	lsls	r3, r3, #1
10005942:	2100      	movs	r1, #0
10005944:	50d1      	str	r1, [r2, r3]
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
10005946:	687a      	ldr	r2, [r7, #4]
10005948:	23ba      	movs	r3, #186	; 0xba
1000594a:	005b      	lsls	r3, r3, #1
1000594c:	2101      	movs	r1, #1
1000594e:	50d1      	str	r1, [r2, r3]
    data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
10005950:	687b      	ldr	r3, [r7, #4]
10005952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005954:	1c5a      	adds	r2, r3, #1
10005956:	32ff      	adds	r2, #255	; 0xff
10005958:	687b      	ldr	r3, [r7, #4]
1000595a:	63da      	str	r2, [r3, #60]	; 0x3c
1000595c:	e004      	b.n	10005968 <E_EEPROM_XMC1_lHandleGcRequested+0x7c>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
1000595e:	687a      	ldr	r2, [r7, #4]
10005960:	23ba      	movs	r3, #186	; 0xba
10005962:	005b      	lsls	r3, r3, #1
10005964:	2109      	movs	r1, #9
10005966:	50d1      	str	r1, [r2, r3]
  }
}
10005968:	46bd      	mov	sp, r7
1000596a:	b004      	add	sp, #16
1000596c:	bd80      	pop	{r7, pc}
1000596e:	46c0      	nop			; (mov r8, r8)
10005970:	20000610 	.word	0x20000610

10005974 <E_EEPROM_XMC1_lHandleGcStartCopy>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC START COPY state
 */
static void E_EEPROM_XMC1_lHandleGcStartCopy(void)
{
10005974:	b580      	push	{r7, lr}
10005976:	b084      	sub	sp, #16
10005978:	af00      	add	r7, sp, #0
  uint32_t state_flag;
  uint32_t block_count;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
1000597a:	4b32      	ldr	r3, [pc, #200]	; (10005a44 <E_EEPROM_XMC1_lHandleGcStartCopy+0xd0>)
1000597c:	685b      	ldr	r3, [r3, #4]
1000597e:	603b      	str	r3, [r7, #0]
  
  state_flag = 0U;
10005980:	2300      	movs	r3, #0
10005982:	60fb      	str	r3, [r7, #12]
  /* initialize the copied status for all the logical blocks */
  block_count = data_ptr->gc_log_block_count;
10005984:	683a      	ldr	r2, [r7, #0]
10005986:	23be      	movs	r3, #190	; 0xbe
10005988:	005b      	lsls	r3, r3, #1
1000598a:	58d3      	ldr	r3, [r2, r3]
1000598c:	60bb      	str	r3, [r7, #8]
  cache_ptr = data_ptr->block_info + block_count;
1000598e:	68bb      	ldr	r3, [r7, #8]
10005990:	00db      	lsls	r3, r3, #3
10005992:	683a      	ldr	r2, [r7, #0]
10005994:	18d3      	adds	r3, r2, r3
10005996:	607b      	str	r3, [r7, #4]
  /*
   * Check all available blocks in cache table for Copy process. Condition breaks on either the current block is
   * consistent or all blocks check for consistency is finished
   */
  while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
10005998:	e01a      	b.n	100059d0 <E_EEPROM_XMC1_lHandleGcStartCopy+0x5c>
  {
    /* If block is consistent set state flag for copy enable*/
    if (((cache_ptr->address != 0U) && (cache_ptr->status.consistent == 1U)) && (cache_ptr->status.copied == 0U))
1000599a:	687b      	ldr	r3, [r7, #4]
1000599c:	681b      	ldr	r3, [r3, #0]
1000599e:	2b00      	cmp	r3, #0
100059a0:	d010      	beq.n	100059c4 <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
100059a2:	687b      	ldr	r3, [r7, #4]
100059a4:	791b      	ldrb	r3, [r3, #4]
100059a6:	2202      	movs	r2, #2
100059a8:	4013      	ands	r3, r2
100059aa:	b2db      	uxtb	r3, r3
100059ac:	2b00      	cmp	r3, #0
100059ae:	d009      	beq.n	100059c4 <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
100059b0:	687b      	ldr	r3, [r7, #4]
100059b2:	791b      	ldrb	r3, [r3, #4]
100059b4:	2204      	movs	r2, #4
100059b6:	4013      	ands	r3, r2
100059b8:	b2db      	uxtb	r3, r3
100059ba:	2b00      	cmp	r3, #0
100059bc:	d102      	bne.n	100059c4 <E_EEPROM_XMC1_lHandleGcStartCopy+0x50>
    {
      state_flag = 1U;
100059be:	2301      	movs	r3, #1
100059c0:	60fb      	str	r3, [r7, #12]
100059c2:	e005      	b.n	100059d0 <E_EEPROM_XMC1_lHandleGcStartCopy+0x5c>
    }
    /* If block is inconsistent ignore the block from copy and try next block*/
    else
    {
      block_count++;
100059c4:	68bb      	ldr	r3, [r7, #8]
100059c6:	3301      	adds	r3, #1
100059c8:	60bb      	str	r3, [r7, #8]
      cache_ptr++;
100059ca:	687b      	ldr	r3, [r7, #4]
100059cc:	3308      	adds	r3, #8
100059ce:	607b      	str	r3, [r7, #4]
  cache_ptr = data_ptr->block_info + block_count;
  /*
   * Check all available blocks in cache table for Copy process. Condition breaks on either the current block is
   * consistent or all blocks check for consistency is finished
   */
  while ((state_flag == 0U) && (block_count != E_EEPROM_XMC1_HANDLE_PTR->block_count))
100059d0:	68fb      	ldr	r3, [r7, #12]
100059d2:	2b00      	cmp	r3, #0
100059d4:	d105      	bne.n	100059e2 <E_EEPROM_XMC1_lHandleGcStartCopy+0x6e>
100059d6:	4b1b      	ldr	r3, [pc, #108]	; (10005a44 <E_EEPROM_XMC1_lHandleGcStartCopy+0xd0>)
100059d8:	7a5b      	ldrb	r3, [r3, #9]
100059da:	1e1a      	subs	r2, r3, #0
100059dc:	68bb      	ldr	r3, [r7, #8]
100059de:	429a      	cmp	r2, r3
100059e0:	d1db      	bne.n	1000599a <E_EEPROM_XMC1_lHandleGcStartCopy+0x26>
      cache_ptr++;
    }
  } /* end of while */
  
  /* If block is consistent */
  if (state_flag == 1U)
100059e2:	68fb      	ldr	r3, [r7, #12]
100059e4:	2b01      	cmp	r3, #1
100059e6:	d116      	bne.n	10005a16 <E_EEPROM_XMC1_lHandleGcStartCopy+0xa2>
  {
    data_ptr->gc_src_addr = cache_ptr->address;
100059e8:	687b      	ldr	r3, [r7, #4]
100059ea:	681a      	ldr	r2, [r3, #0]
100059ec:	683b      	ldr	r3, [r7, #0]
100059ee:	641a      	str	r2, [r3, #64]	; 0x40
    data_ptr->gc_block_counter = 0U;
100059f0:	683b      	ldr	r3, [r7, #0]
100059f2:	2200      	movs	r2, #0
100059f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Clear all error status flags before flash operation*/
    XMC_FLASH_ClearStatus();
100059f6:	f7fb fbdd 	bl	100011b4 <XMC_FLASH_ClearStatus>
    
    E_EEPROM_XMC1_lReadSingleBlock(data_ptr->gc_src_addr,(uint32_t*)(void*)data_ptr->read_write_buffer);
100059fa:	683b      	ldr	r3, [r7, #0]
100059fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
100059fe:	683b      	ldr	r3, [r7, #0]
10005a00:	335c      	adds	r3, #92	; 0x5c
10005a02:	1c10      	adds	r0, r2, #0
10005a04:	1c19      	adds	r1, r3, #0
10005a06:	f000 ffff 	bl	10006a08 <E_EEPROM_XMC1_lReadSingleBlock>
    
    /* Return value above is ignored as parameters passed from FEE are correct */
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_WRITE;
10005a0a:	683a      	ldr	r2, [r7, #0]
10005a0c:	23ba      	movs	r3, #186	; 0xba
10005a0e:	005b      	lsls	r3, r3, #1
10005a10:	2105      	movs	r1, #5
10005a12:	50d1      	str	r1, [r2, r3]
10005a14:	e00e      	b.n	10005a34 <E_EEPROM_XMC1_lHandleGcStartCopy+0xc0>
  }
  /* Finished copying all the logical blocks */
  else
  {
    /* Update the next free block pointer */
    data_ptr->next_free_block_addr = data_ptr->gc_dest_addr;
10005a16:	683b      	ldr	r3, [r7, #0]
10005a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005a1a:	683b      	ldr	r3, [r7, #0]
10005a1c:	64da      	str	r2, [r3, #76]	; 0x4c
    data_ptr->gc_src_addr = data_ptr->curr_bank_src_addr;
10005a1e:	683b      	ldr	r3, [r7, #0]
10005a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10005a22:	683b      	ldr	r3, [r7, #0]
10005a24:	641a      	str	r2, [r3, #64]	; 0x40
    E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005a26:	f000 fb7b 	bl	10006120 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
    data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_END;
10005a2a:	683a      	ldr	r2, [r7, #0]
10005a2c:	23ba      	movs	r3, #186	; 0xba
10005a2e:	005b      	lsls	r3, r3, #1
10005a30:	2106      	movs	r1, #6
10005a32:	50d1      	str	r1, [r2, r3]
  }
  data_ptr->gc_log_block_count = block_count;
10005a34:	683a      	ldr	r2, [r7, #0]
10005a36:	23be      	movs	r3, #190	; 0xbe
10005a38:	005b      	lsls	r3, r3, #1
10005a3a:	68b9      	ldr	r1, [r7, #8]
10005a3c:	50d1      	str	r1, [r2, r3]
}
10005a3e:	46bd      	mov	sp, r7
10005a40:	b004      	add	sp, #16
10005a42:	bd80      	pop	{r7, pc}
10005a44:	20000610 	.word	0x20000610

10005a48 <E_EEPROM_XMC1_lHandleGcCopyWrite>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC START COPY WRITE state.
 */
static void E_EEPROM_XMC1_lHandleGcCopyWrite(void)
{
10005a48:	b580      	push	{r7, lr}
10005a4a:	b086      	sub	sp, #24
10005a4c:	af00      	add	r7, sp, #0
  uint32_t block_count;
  uint32_t flash_physical_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005a4e:	4b38      	ldr	r3, [pc, #224]	; (10005b30 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xe8>)
10005a50:	685b      	ldr	r3, [r3, #4]
10005a52:	613b      	str	r3, [r7, #16]
  
  /* initialize the copied status for all the logical blocks */
  block_count = data_ptr->gc_log_block_count;
10005a54:	693a      	ldr	r2, [r7, #16]
10005a56:	23be      	movs	r3, #190	; 0xbe
10005a58:	005b      	lsls	r3, r3, #1
10005a5a:	58d3      	ldr	r3, [r2, r3]
10005a5c:	617b      	str	r3, [r7, #20]
  cache_ptr = data_ptr->block_info + block_count;
10005a5e:	697b      	ldr	r3, [r7, #20]
10005a60:	00db      	lsls	r3, r3, #3
10005a62:	693a      	ldr	r2, [r7, #16]
10005a64:	18d3      	adds	r3, r2, r3
10005a66:	60fb      	str	r3, [r7, #12]
  
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr));
10005a68:	693b      	ldr	r3, [r7, #16]
10005a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005a6c:	1c18      	adds	r0, r3, #0
10005a6e:	f000 fcbb 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005a72:	1c03      	adds	r3, r0, #0
10005a74:	60bb      	str	r3, [r7, #8]
  if (status == 0U)
10005a76:	68bb      	ldr	r3, [r7, #8]
10005a78:	2b00      	cmp	r3, #0
10005a7a:	d14b      	bne.n	10005b14 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xcc>
  {      
    (data_ptr->gc_block_counter)++;
10005a7c:	693b      	ldr	r3, [r7, #16]
10005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10005a80:	1c5a      	adds	r2, r3, #1
10005a82:	693b      	ldr	r3, [r7, #16]
10005a84:	655a      	str	r2, [r3, #84]	; 0x54
    size = (E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[block_count].size);
10005a86:	4b2a      	ldr	r3, [pc, #168]	; (10005b30 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xe8>)
10005a88:	681a      	ldr	r2, [r3, #0]
10005a8a:	697b      	ldr	r3, [r7, #20]
10005a8c:	00db      	lsls	r3, r3, #3
10005a8e:	18d3      	adds	r3, r2, r3
10005a90:	685b      	ldr	r3, [r3, #4]
10005a92:	607b      	str	r3, [r7, #4]
    flash_physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
10005a94:	687b      	ldr	r3, [r7, #4]
10005a96:	1c18      	adds	r0, r3, #0
10005a98:	f000 fb00 	bl	1000609c <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
10005a9c:	1c03      	adds	r3, r0, #0
10005a9e:	603b      	str	r3, [r7, #0]
    /* If all the blocks of the logical block are copied */
    if ((data_ptr->gc_block_counter == flash_physical_blocks) || (cache_ptr->status.valid == 0U))
10005aa0:	693b      	ldr	r3, [r7, #16]
10005aa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10005aa4:	683b      	ldr	r3, [r7, #0]
10005aa6:	429a      	cmp	r2, r3
10005aa8:	d006      	beq.n	10005ab8 <E_EEPROM_XMC1_lHandleGcCopyWrite+0x70>
10005aaa:	68fb      	ldr	r3, [r7, #12]
10005aac:	791b      	ldrb	r3, [r3, #4]
10005aae:	2201      	movs	r2, #1
10005ab0:	4013      	ands	r3, r2
10005ab2:	b2db      	uxtb	r3, r3
10005ab4:	2b00      	cmp	r3, #0
10005ab6:	d11b      	bne.n	10005af0 <E_EEPROM_XMC1_lHandleGcCopyWrite+0xa8>
    {
      cache_ptr->status.copied = 1U;
10005ab8:	68fb      	ldr	r3, [r7, #12]
10005aba:	791a      	ldrb	r2, [r3, #4]
10005abc:	2104      	movs	r1, #4
10005abe:	430a      	orrs	r2, r1
10005ac0:	711a      	strb	r2, [r3, #4]
      block_count++;
10005ac2:	697b      	ldr	r3, [r7, #20]
10005ac4:	3301      	adds	r3, #1
10005ac6:	617b      	str	r3, [r7, #20]
      data_ptr->gc_state = E_EEPROM_XMC1_GC_COPY_START;
10005ac8:	693a      	ldr	r2, [r7, #16]
10005aca:	23ba      	movs	r3, #186	; 0xba
10005acc:	005b      	lsls	r3, r3, #1
10005ace:	2101      	movs	r1, #1
10005ad0:	50d1      	str	r1, [r2, r3]
      data_ptr->gc_dest_addr += E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005ad2:	693b      	ldr	r3, [r7, #16]
10005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005ad6:	3310      	adds	r3, #16
10005ad8:	1c1a      	adds	r2, r3, #0
10005ada:	693b      	ldr	r3, [r7, #16]
10005adc:	63da      	str	r2, [r3, #60]	; 0x3c
      cache_ptr->address = data_ptr->gc_dest_addr - (E_EEPROM_XMC1_FLASH_BLOCK_SIZE * data_ptr->gc_block_counter);
10005ade:	693b      	ldr	r3, [r7, #16]
10005ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005ae2:	693b      	ldr	r3, [r7, #16]
10005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10005ae6:	011b      	lsls	r3, r3, #4
10005ae8:	1ad2      	subs	r2, r2, r3
10005aea:	68fb      	ldr	r3, [r7, #12]
10005aec:	601a      	str	r2, [r3, #0]
10005aee:	e016      	b.n	10005b1e <E_EEPROM_XMC1_lHandleGcCopyWrite+0xd6>
    }
    else
    {
      data_ptr->gc_src_addr = data_ptr->gc_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005af0:	693b      	ldr	r3, [r7, #16]
10005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005af4:	3310      	adds	r3, #16
10005af6:	1c1a      	adds	r2, r3, #0
10005af8:	693b      	ldr	r3, [r7, #16]
10005afa:	641a      	str	r2, [r3, #64]	; 0x40
      data_ptr->gc_dest_addr = data_ptr->gc_dest_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005afc:	693b      	ldr	r3, [r7, #16]
10005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005b00:	3310      	adds	r3, #16
10005b02:	1c1a      	adds	r2, r3, #0
10005b04:	693b      	ldr	r3, [r7, #16]
10005b06:	63da      	str	r2, [r3, #60]	; 0x3c
      data_ptr->gc_state = E_EEPROM_XMC1_GC_READ_NXTBLOCK;
10005b08:	693a      	ldr	r2, [r7, #16]
10005b0a:	23ba      	movs	r3, #186	; 0xba
10005b0c:	005b      	lsls	r3, r3, #1
10005b0e:	2102      	movs	r1, #2
10005b10:	50d1      	str	r1, [r2, r3]
10005b12:	e004      	b.n	10005b1e <E_EEPROM_XMC1_lHandleGcCopyWrite+0xd6>
    }
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005b14:	693a      	ldr	r2, [r7, #16]
10005b16:	23ba      	movs	r3, #186	; 0xba
10005b18:	005b      	lsls	r3, r3, #1
10005b1a:	2109      	movs	r1, #9
10005b1c:	50d1      	str	r1, [r2, r3]
  }
  data_ptr->gc_log_block_count = block_count;
10005b1e:	693a      	ldr	r2, [r7, #16]
10005b20:	23be      	movs	r3, #190	; 0xbe
10005b22:	005b      	lsls	r3, r3, #1
10005b24:	6979      	ldr	r1, [r7, #20]
10005b26:	50d1      	str	r1, [r2, r3]
}
10005b28:	46bd      	mov	sp, r7
10005b2a:	b006      	add	sp, #24
10005b2c:	bd80      	pop	{r7, pc}
10005b2e:	46c0      	nop			; (mov r8, r8)
10005b30:	20000610 	.word	0x20000610

10005b34 <E_EEPROM_XMC1_lHandleGcEndOfCopy>:
 * Return value    : void
 *
 * Description     : This function handles Garbage Collection GC END OF COPY state
 */
static void E_EEPROM_XMC1_lHandleGcEndOfCopy(void)
{
10005b34:	b580      	push	{r7, lr}
10005b36:	b082      	sub	sp, #8
10005b38:	af00      	add	r7, sp, #0
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005b3a:	4b13      	ldr	r3, [pc, #76]	; (10005b88 <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x54>)
10005b3c:	685b      	ldr	r3, [r3, #4]
10005b3e:	607b      	str	r3, [r7, #4]
  
  E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005b40:	f000 fbc6 	bl	100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
  /* Write Copy completed state to old bank (0A) or (A0) */
  status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_END_OF_COPY_OFFSET));
10005b44:	687b      	ldr	r3, [r7, #4]
10005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005b48:	3320      	adds	r3, #32
10005b4a:	1c18      	adds	r0, r3, #0
10005b4c:	f000 fc4c 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005b50:	1c03      	adds	r3, r0, #0
10005b52:	603b      	str	r3, [r7, #0]
  if (status == 0U)
10005b54:	683b      	ldr	r3, [r7, #0]
10005b56:	2b00      	cmp	r3, #0
10005b58:	d10d      	bne.n	10005b76 <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x42>
  {
    /* Update the current bank to next bank */
    data_ptr->current_bank = data_ptr->current_bank ^ 1U;
10005b5a:	687b      	ldr	r3, [r7, #4]
10005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005b5e:	2201      	movs	r2, #1
10005b60:	405a      	eors	r2, r3
10005b62:	687b      	ldr	r3, [r7, #4]
10005b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Update the Bank related global variables */
    E_EEPROM_XMC1_lUpdateCurrBankInfo();
10005b66:	f000 fadb 	bl	10006120 <E_EEPROM_XMC1_lUpdateCurrBankInfo>
    data_ptr->gc_state = E_EEPROM_XMC1_GC_NEXT_BANK_VALID;
10005b6a:	687a      	ldr	r2, [r7, #4]
10005b6c:	23ba      	movs	r3, #186	; 0xba
10005b6e:	005b      	lsls	r3, r3, #1
10005b70:	2107      	movs	r1, #7
10005b72:	50d1      	str	r1, [r2, r3]
10005b74:	e004      	b.n	10005b80 <E_EEPROM_XMC1_lHandleGcEndOfCopy+0x4c>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005b76:	687a      	ldr	r2, [r7, #4]
10005b78:	23ba      	movs	r3, #186	; 0xba
10005b7a:	005b      	lsls	r3, r3, #1
10005b7c:	2109      	movs	r1, #9
10005b7e:	50d1      	str	r1, [r2, r3]
  }
}
10005b80:	46bd      	mov	sp, r7
10005b82:	b002      	add	sp, #8
10005b84:	bd80      	pop	{r7, pc}
10005b86:	46c0      	nop			; (mov r8, r8)
10005b88:	20000610 	.word	0x20000610

10005b8c <E_EEPROM_XMC1_lHandleGcOtherStates>:
 *
 * Description     : This function handles Garbage Collection GC NEXT BANk VALID, ERASE PREV BANK and GC COMPLETED IDLE
 *                   state
*/
static void E_EEPROM_XMC1_lHandleGcOtherStates( uint32_t current_state, uint32_t next_state)
{
10005b8c:	b580      	push	{r7, lr}
10005b8e:	b084      	sub	sp, #16
10005b90:	af00      	add	r7, sp, #0
10005b92:	6078      	str	r0, [r7, #4]
10005b94:	6039      	str	r1, [r7, #0]
  uint32_t  status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005b96:	4b1b      	ldr	r3, [pc, #108]	; (10005c04 <E_EEPROM_XMC1_lHandleGcOtherStates+0x78>)
10005b98:	685b      	ldr	r3, [r3, #4]
10005b9a:	60bb      	str	r3, [r7, #8]
  
  if (current_state == E_EEPROM_XMC1_GC_NEXT_BANK_VALID)
10005b9c:	687b      	ldr	r3, [r7, #4]
10005b9e:	2b07      	cmp	r3, #7
10005ba0:	d109      	bne.n	10005bb6 <E_EEPROM_XMC1_lHandleGcOtherStates+0x2a>
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005ba2:	f000 fb95 	bl	100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    /* Write next bank to valid state  (02) or (20) */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_src_addr + E_EEPROM_XMC1_NEXT_VALID_OFFSET));
10005ba6:	68bb      	ldr	r3, [r7, #8]
10005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005baa:	1c18      	adds	r0, r3, #0
10005bac:	f000 fc1c 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005bb0:	1c03      	adds	r3, r0, #0
10005bb2:	60fb      	str	r3, [r7, #12]
10005bb4:	e014      	b.n	10005be0 <E_EEPROM_XMC1_lHandleGcOtherStates+0x54>
  }
  else if (current_state == E_EEPROM_XMC1_GC_ERASE_PREV_BANK)
10005bb6:	687b      	ldr	r3, [r7, #4]
10005bb8:	2b03      	cmp	r3, #3
10005bba:	d107      	bne.n	10005bcc <E_EEPROM_XMC1_lHandleGcOtherStates+0x40>
  {
    /* Erase the previous redundant bank (F2) or (2F) */
    status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10005bbc:	68bb      	ldr	r3, [r7, #8]
10005bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005bc0:	1c18      	adds	r0, r3, #0
10005bc2:	f000 fbe7 	bl	10006394 <E_EEPROM_XMC1_lEraseBank>
10005bc6:	1c03      	adds	r3, r0, #0
10005bc8:	60fb      	str	r3, [r7, #12]
10005bca:	e009      	b.n	10005be0 <E_EEPROM_XMC1_lHandleGcOtherStates+0x54>
  }
  else
  {
    E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005bcc:	f000 fb80 	bl	100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
    /* Write formatted state to the old erased bank (E2) or (2E) */
    status = E_EEPROM_XMC1_lGCWrite((uint32_t)(data_ptr->gc_dest_addr + E_EEPROM_XMC1_END_ERASE_OFFSET));
10005bd0:	68bb      	ldr	r3, [r7, #8]
10005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10005bd4:	3330      	adds	r3, #48	; 0x30
10005bd6:	1c18      	adds	r0, r3, #0
10005bd8:	f000 fc06 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005bdc:	1c03      	adds	r3, r0, #0
10005bde:	60fb      	str	r3, [r7, #12]
  }
  
  if (status == 0U)
10005be0:	68fb      	ldr	r3, [r7, #12]
10005be2:	2b00      	cmp	r3, #0
10005be4:	d105      	bne.n	10005bf2 <E_EEPROM_XMC1_lHandleGcOtherStates+0x66>
  {
    data_ptr->gc_state = next_state;
10005be6:	68ba      	ldr	r2, [r7, #8]
10005be8:	23ba      	movs	r3, #186	; 0xba
10005bea:	005b      	lsls	r3, r3, #1
10005bec:	6839      	ldr	r1, [r7, #0]
10005bee:	50d1      	str	r1, [r2, r3]
10005bf0:	e004      	b.n	10005bfc <E_EEPROM_XMC1_lHandleGcOtherStates+0x70>
  }
  else
  {
    data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005bf2:	68ba      	ldr	r2, [r7, #8]
10005bf4:	23ba      	movs	r3, #186	; 0xba
10005bf6:	005b      	lsls	r3, r3, #1
10005bf8:	2109      	movs	r1, #9
10005bfa:	50d1      	str	r1, [r2, r3]
  }
}
10005bfc:	46bd      	mov	sp, r7
10005bfe:	b004      	add	sp, #16
10005c00:	bd80      	pop	{r7, pc}
10005c02:	46c0      	nop			; (mov r8, r8)
10005c04:	20000610 	.word	0x20000610

10005c08 <E_EEPROM_XMC1_lPrepareDFlash>:
 * Return value   : void
 *
 * Description    : This function executes the prepare data flash to bring the state machine to default state (2E).
 */
static void E_EEPROM_XMC1_lPrepareDFlash(void)
{
10005c08:	b580      	push	{r7, lr}
10005c0a:	b082      	sub	sp, #8
10005c0c:	af00      	add	r7, sp, #0
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005c0e:	4b3b      	ldr	r3, [pc, #236]	; (10005cfc <E_EEPROM_XMC1_lPrepareDFlash+0xf4>)
10005c10:	685b      	ldr	r3, [r3, #4]
10005c12:	607b      	str	r3, [r7, #4]
  
  do
  {
    switch (data_ptr->gc_state)
10005c14:	687a      	ldr	r2, [r7, #4]
10005c16:	23ba      	movs	r3, #186	; 0xba
10005c18:	005b      	lsls	r3, r3, #1
10005c1a:	58d3      	ldr	r3, [r2, r3]
10005c1c:	2b04      	cmp	r3, #4
10005c1e:	d002      	beq.n	10005c26 <E_EEPROM_XMC1_lPrepareDFlash+0x1e>
10005c20:	2b05      	cmp	r3, #5
10005c22:	d01f      	beq.n	10005c64 <E_EEPROM_XMC1_lPrepareDFlash+0x5c>
10005c24:	e035      	b.n	10005c92 <E_EEPROM_XMC1_lPrepareDFlash+0x8a>
    {
      case E_EEPROM_XMC1_PREPFLASH_2F:
      
      /* Set the marker blocks with copy completed state */
      E_EEPROM_XMC1_lSetMarkerPageBuffer(E_EEPROM_XMC1_VALID_STATE);
10005c26:	2020      	movs	r0, #32
10005c28:	f000 fb70 	bl	1000630c <E_EEPROM_XMC1_lSetMarkerPageBuffer>
      
      /* Clear all error status flags before flash operation*/
      XMC_FLASH_ClearStatus();
10005c2c:	f7fb fac2 	bl	100011b4 <XMC_FLASH_ClearStatus>
      
      E_EEPROM_XMC1_lWriteSinglePage(E_EEPROM_XMC1_FLASH_BANK0_BASE , (uint32_t*)(void*)data_ptr->page_write_buffer);
10005c30:	687b      	ldr	r3, [r7, #4]
10005c32:	3370      	adds	r3, #112	; 0x70
10005c34:	4a32      	ldr	r2, [pc, #200]	; (10005d00 <E_EEPROM_XMC1_lPrepareDFlash+0xf8>)
10005c36:	1c10      	adds	r0, r2, #0
10005c38:	1c19      	adds	r1, r3, #0
10005c3a:	f000 fef5 	bl	10006a28 <E_EEPROM_XMC1_lWriteSinglePage>
      
      status = E_EEPROM_XMC1_lGetFlashStatus();
10005c3e:	f000 ff0d 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
10005c42:	1c03      	adds	r3, r0, #0
10005c44:	603b      	str	r3, [r7, #0]
      
      if (status == 0U)
10005c46:	683b      	ldr	r3, [r7, #0]
10005c48:	2b00      	cmp	r3, #0
10005c4a:	d105      	bne.n	10005c58 <E_EEPROM_XMC1_lPrepareDFlash+0x50>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
10005c4c:	687a      	ldr	r2, [r7, #4]
10005c4e:	23ba      	movs	r3, #186	; 0xba
10005c50:	005b      	lsls	r3, r3, #1
10005c52:	2105      	movs	r1, #5
10005c54:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
10005c56:	e042      	b.n	10005cde <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2E;
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005c58:	687a      	ldr	r2, [r7, #4]
10005c5a:	23ba      	movs	r3, #186	; 0xba
10005c5c:	005b      	lsls	r3, r3, #1
10005c5e:	2109      	movs	r1, #9
10005c60:	50d1      	str	r1, [r2, r3]
      }
      break;
10005c62:	e03c      	b.n	10005cde <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      
      case E_EEPROM_XMC1_PREPFLASH_2E:
        
      E_EEPROM_XMC1_lSetMarkerBlockBuffer();
10005c64:	f000 fb34 	bl	100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>
      
      /* Write Bank1 to formatted state  (2E) */
      status = E_EEPROM_XMC1_lGCWrite((uint32_t)E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_END_ERASE_OFFSET);
10005c68:	4b26      	ldr	r3, [pc, #152]	; (10005d04 <E_EEPROM_XMC1_lPrepareDFlash+0xfc>)
10005c6a:	1c18      	adds	r0, r3, #0
10005c6c:	f000 fbbc 	bl	100063e8 <E_EEPROM_XMC1_lGCWrite>
10005c70:	1c03      	adds	r3, r0, #0
10005c72:	603b      	str	r3, [r7, #0]
      
      if (status == 0U)
10005c74:	683b      	ldr	r3, [r7, #0]
10005c76:	2b00      	cmp	r3, #0
10005c78:	d105      	bne.n	10005c86 <E_EEPROM_XMC1_lPrepareDFlash+0x7e>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
10005c7a:	687a      	ldr	r2, [r7, #4]
10005c7c:	23ba      	movs	r3, #186	; 0xba
10005c7e:	005b      	lsls	r3, r3, #1
10005c80:	210a      	movs	r1, #10
10005c82:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
10005c84:	e02b      	b.n	10005cde <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_IDLE;
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005c86:	687a      	ldr	r2, [r7, #4]
10005c88:	23ba      	movs	r3, #186	; 0xba
10005c8a:	005b      	lsls	r3, r3, #1
10005c8c:	2109      	movs	r1, #9
10005c8e:	50d1      	str	r1, [r2, r3]
      }
      break;
10005c90:	e025      	b.n	10005cde <E_EEPROM_XMC1_lPrepareDFlash+0xd6>
      
      default:  /* gc_state : E_EEPROM_XMC1_PREPFLASH_FF*/
      
      /* Erase the previous redundant bank */
      status = E_EEPROM_XMC1_lEraseBank(data_ptr->curr_bank_end_addr);
10005c92:	687b      	ldr	r3, [r7, #4]
10005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10005c96:	1c18      	adds	r0, r3, #0
10005c98:	f000 fb7c 	bl	10006394 <E_EEPROM_XMC1_lEraseBank>
10005c9c:	1c03      	adds	r3, r0, #0
10005c9e:	603b      	str	r3, [r7, #0]
      
      /* Erase the previous redundant bank */
      if (status == 0U)
10005ca0:	683b      	ldr	r3, [r7, #0]
10005ca2:	2b00      	cmp	r3, #0
10005ca4:	d115      	bne.n	10005cd2 <E_EEPROM_XMC1_lPrepareDFlash+0xca>
      {
        status = E_EEPROM_XMC1_lEraseBank(data_ptr->prev_bank_end_addr);
10005ca6:	687b      	ldr	r3, [r7, #4]
10005ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005caa:	1c18      	adds	r0, r3, #0
10005cac:	f000 fb72 	bl	10006394 <E_EEPROM_XMC1_lEraseBank>
10005cb0:	1c03      	adds	r3, r0, #0
10005cb2:	603b      	str	r3, [r7, #0]
        
        if (status == 0U)
10005cb4:	683b      	ldr	r3, [r7, #0]
10005cb6:	2b00      	cmp	r3, #0
10005cb8:	d105      	bne.n	10005cc6 <E_EEPROM_XMC1_lPrepareDFlash+0xbe>
        {
          data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
10005cba:	687a      	ldr	r2, [r7, #4]
10005cbc:	23ba      	movs	r3, #186	; 0xba
10005cbe:	005b      	lsls	r3, r3, #1
10005cc0:	2104      	movs	r1, #4
10005cc2:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
10005cc4:	e00a      	b.n	10005cdc <E_EEPROM_XMC1_lPrepareDFlash+0xd4>
        {
          data_ptr->gc_state = E_EEPROM_XMC1_PREPFLASH_2F;
        }
        else
        {
          data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005cc6:	687a      	ldr	r2, [r7, #4]
10005cc8:	23ba      	movs	r3, #186	; 0xba
10005cca:	005b      	lsls	r3, r3, #1
10005ccc:	2109      	movs	r1, #9
10005cce:	50d1      	str	r1, [r2, r3]
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
10005cd0:	e004      	b.n	10005cdc <E_EEPROM_XMC1_lPrepareDFlash+0xd4>
          data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
        }
      }
      else
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
10005cd2:	687a      	ldr	r2, [r7, #4]
10005cd4:	23ba      	movs	r3, #186	; 0xba
10005cd6:	005b      	lsls	r3, r3, #1
10005cd8:	2109      	movs	r1, #9
10005cda:	50d1      	str	r1, [r2, r3]
      }
      break;
10005cdc:	46c0      	nop			; (mov r8, r8)
    }
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
10005cde:	687a      	ldr	r2, [r7, #4]
10005ce0:	23ba      	movs	r3, #186	; 0xba
10005ce2:	005b      	lsls	r3, r3, #1
10005ce4:	58d3      	ldr	r3, [r2, r3]
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
10005ce6:	2b0a      	cmp	r3, #10
10005ce8:	d005      	beq.n	10005cf6 <E_EEPROM_XMC1_lPrepareDFlash+0xee>
10005cea:	687a      	ldr	r2, [r7, #4]
10005cec:	23ba      	movs	r3, #186	; 0xba
10005cee:	005b      	lsls	r3, r3, #1
10005cf0:	58d3      	ldr	r3, [r2, r3]
      {
        data_ptr->gc_state = E_EEPROM_XMC1_GC_FAIL;
      }
      break;
    }
  } while ((data_ptr->gc_state != E_EEPROM_XMC1_GC_IDLE) &&
10005cf2:	2b09      	cmp	r3, #9
10005cf4:	d18e      	bne.n	10005c14 <E_EEPROM_XMC1_lPrepareDFlash+0xc>
  (data_ptr->gc_state != E_EEPROM_XMC1_GC_FAIL));
}
10005cf6:	46bd      	mov	sp, r7
10005cf8:	b002      	add	sp, #8
10005cfa:	bd80      	pop	{r7, pc}
10005cfc:	20000610 	.word	0x20000610
10005d00:	10032000 	.word	0x10032000
10005d04:	10032830 	.word	0x10032830

10005d08 <E_EEPROM_XMC1_lUpdateCache>:
 *
 * Description     : This utility function update's the cache table which contains the latest information about the
 *                   FLASH contents.
 */
static void E_EEPROM_XMC1_lUpdateCache(void)
{
10005d08:	b580      	push	{r7, lr}
10005d0a:	b084      	sub	sp, #16
10005d0c:	af00      	add	r7, sp, #0
  uint32_t end_addr;
  uint32_t read_status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005d0e:	4b39      	ldr	r3, [pc, #228]	; (10005df4 <E_EEPROM_XMC1_lUpdateCache+0xec>)
10005d10:	685b      	ldr	r3, [r3, #4]
10005d12:	607b      	str	r3, [r7, #4]
  
  /* Evaluate the end address of the bank to start reading blocks for cache update */
  if (data_ptr->current_bank == 0U)
10005d14:	687b      	ldr	r3, [r7, #4]
10005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10005d18:	2b00      	cmp	r3, #0
10005d1a:	d102      	bne.n	10005d22 <E_EEPROM_XMC1_lUpdateCache+0x1a>
  {
    end_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
10005d1c:	4b36      	ldr	r3, [pc, #216]	; (10005df8 <E_EEPROM_XMC1_lUpdateCache+0xf0>)
10005d1e:	60fb      	str	r3, [r7, #12]
10005d20:	e001      	b.n	10005d26 <E_EEPROM_XMC1_lUpdateCache+0x1e>
  }
  else
  {
    end_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE + E_EEPROM_XMC1_DATA_BLOCK_OFFSET;
10005d22:	4b36      	ldr	r3, [pc, #216]	; (10005dfc <E_EEPROM_XMC1_lUpdateCache+0xf4>)
10005d24:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the read number of blocks count variable and reset cache update index */
  data_ptr->written_block_counter = 0U;
10005d26:	687b      	ldr	r3, [r7, #4]
10005d28:	2200      	movs	r2, #0
10005d2a:	659a      	str	r2, [r3, #88]	; 0x58
  data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10005d2c:	687a      	ldr	r2, [r7, #4]
10005d2e:	23c2      	movs	r3, #194	; 0xc2
10005d30:	005b      	lsls	r3, r3, #1
10005d32:	21ff      	movs	r1, #255	; 0xff
10005d34:	50d1      	str	r1, [r2, r3]
  
  /* Start the Cache Update state machine */
  data_ptr->cache_state = E_EEPROM_XMC1_CACHE_EMPTY_BLOCK;
10005d36:	687a      	ldr	r2, [r7, #4]
10005d38:	23c0      	movs	r3, #192	; 0xc0
10005d3a:	005b      	lsls	r3, r3, #1
10005d3c:	2101      	movs	r1, #1
10005d3e:	50d1      	str	r1, [r2, r3]
  
  /* Point to starting address of last data block of the bank */
  data_ptr->curr_bank_src_addr += ( E_EEPROM_XMC1_FLASH_BANK_SIZE - E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
10005d40:	687b      	ldr	r3, [r7, #4]
10005d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10005d44:	22fe      	movs	r2, #254	; 0xfe
10005d46:	00d2      	lsls	r2, r2, #3
10005d48:	189a      	adds	r2, r3, r2
10005d4a:	687b      	ldr	r3, [r7, #4]
10005d4c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Search for the first entry of a non empty block inside the valid bank starting from bottom */
  do{
      read_status = E_EEPROM_XMC1_lCacheEmptyBlkEval(end_addr);
10005d4e:	68fb      	ldr	r3, [r7, #12]
10005d50:	1c18      	adds	r0, r3, #0
10005d52:	f000 f855 	bl	10005e00 <E_EEPROM_XMC1_lCacheEmptyBlkEval>
10005d56:	1c03      	adds	r3, r0, #0
10005d58:	60bb      	str	r3, [r7, #8]
  } while (data_ptr->cache_state == E_EEPROM_XMC1_CACHE_EMPTY_BLOCK);
10005d5a:	687a      	ldr	r2, [r7, #4]
10005d5c:	23c0      	movs	r3, #192	; 0xc0
10005d5e:	005b      	lsls	r3, r3, #1
10005d60:	58d3      	ldr	r3, [r2, r3]
10005d62:	2b01      	cmp	r3, #1
10005d64:	d0f3      	beq.n	10005d4e <E_EEPROM_XMC1_lUpdateCache+0x46>
  
   /* Update the next free block location only if it is not done by the previous function call  */
  if (data_ptr->next_free_block_addr == 0U)
10005d66:	687b      	ldr	r3, [r7, #4]
10005d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10005d6a:	2b00      	cmp	r3, #0
10005d6c:	d105      	bne.n	10005d7a <E_EEPROM_XMC1_lUpdateCache+0x72>
  {
    data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005d6e:	687b      	ldr	r3, [r7, #4]
10005d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10005d72:	3310      	adds	r3, #16
10005d74:	1c1a      	adds	r2, r3, #0
10005d76:	687b      	ldr	r3, [r7, #4]
10005d78:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  
  /* Execute the Cache update state machine until the Start address of bank is reached traversing from end of bank */
  while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
10005d7a:	e031      	b.n	10005de0 <E_EEPROM_XMC1_lUpdateCache+0xd8>
  {
    /* Check If the previous read had an ECC error or not */
    if (!(read_status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR))
10005d7c:	68bb      	ldr	r3, [r7, #8]
10005d7e:	2220      	movs	r2, #32
10005d80:	4013      	ands	r3, r2
10005d82:	d102      	bne.n	10005d8a <E_EEPROM_XMC1_lUpdateCache+0x82>
    {
      /* Evaluate the Block status since no error found */
      E_EEPROM_XMC1_lEvalBlockStatus();
10005d84:	f000 f89a 	bl	10005ebc <E_EEPROM_XMC1_lEvalBlockStatus>
10005d88:	e01b      	b.n	10005dc2 <E_EEPROM_XMC1_lUpdateCache+0xba>
    }
    else
    {
      /* If previous read block of the block had correct block number then mark the block as inconsistent */
      if ( data_ptr->updated_cache_index != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND )
10005d8a:	687a      	ldr	r2, [r7, #4]
10005d8c:	23c2      	movs	r3, #194	; 0xc2
10005d8e:	005b      	lsls	r3, r3, #1
10005d90:	58d3      	ldr	r3, [r2, r3]
10005d92:	2bff      	cmp	r3, #255	; 0xff
10005d94:	d00d      	beq.n	10005db2 <E_EEPROM_XMC1_lUpdateCache+0xaa>
      {
        /* Goto the cache table entry for the given block */
        cache_ptr = data_ptr->block_info;
10005d96:	687b      	ldr	r3, [r7, #4]
10005d98:	603b      	str	r3, [r7, #0]
        cache_ptr = cache_ptr + data_ptr->updated_cache_index;
10005d9a:	687a      	ldr	r2, [r7, #4]
10005d9c:	23c2      	movs	r3, #194	; 0xc2
10005d9e:	005b      	lsls	r3, r3, #1
10005da0:	58d3      	ldr	r3, [r2, r3]
10005da2:	00db      	lsls	r3, r3, #3
10005da4:	683a      	ldr	r2, [r7, #0]
10005da6:	18d3      	adds	r3, r2, r3
10005da8:	603b      	str	r3, [r7, #0]
        /* Since CacheUpdateIndex contains valid block the  previous read block must belong to this block */
        cache_ptr->address = E_EEPROM_XMC1_ALL_ONES;
10005daa:	683b      	ldr	r3, [r7, #0]
10005dac:	2201      	movs	r2, #1
10005dae:	4252      	negs	r2, r2
10005db0:	601a      	str	r2, [r3, #0]
      }
      /* Prepare for the next block */
      data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10005db2:	687a      	ldr	r2, [r7, #4]
10005db4:	23c2      	movs	r3, #194	; 0xc2
10005db6:	005b      	lsls	r3, r3, #1
10005db8:	21ff      	movs	r1, #255	; 0xff
10005dba:	50d1      	str	r1, [r2, r3]
      data_ptr->written_block_counter = 0U;
10005dbc:	687b      	ldr	r3, [r7, #4]
10005dbe:	2200      	movs	r2, #0
10005dc0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Check if all blocks have been read */
    if ( data_ptr->curr_bank_src_addr == end_addr )
10005dc2:	687b      	ldr	r3, [r7, #4]
10005dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10005dc6:	68fb      	ldr	r3, [r7, #12]
10005dc8:	429a      	cmp	r2, r3
10005dca:	d105      	bne.n	10005dd8 <E_EEPROM_XMC1_lUpdateCache+0xd0>
    {
      /* Goto the next state */
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
10005dcc:	687a      	ldr	r2, [r7, #4]
10005dce:	23c0      	movs	r3, #192	; 0xc0
10005dd0:	005b      	lsls	r3, r3, #1
10005dd2:	2104      	movs	r1, #4
10005dd4:	50d1      	str	r1, [r2, r3]
10005dd6:	e003      	b.n	10005de0 <E_EEPROM_XMC1_lUpdateCache+0xd8>
    }
    else
    {
      read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
10005dd8:	f000 f90c 	bl	10005ff4 <E_EEPROM_XMC1_lUpdateCacheBlockRead>
10005ddc:	1c03      	adds	r3, r0, #0
10005dde:	60bb      	str	r3, [r7, #8]
  {
    data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr) + E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
  }
  
  /* Execute the Cache update state machine until the Start address of bank is reached traversing from end of bank */
  while (data_ptr->cache_state != E_EEPROM_XMC1_CACHE_UPDATE_DONE)
10005de0:	687a      	ldr	r2, [r7, #4]
10005de2:	23c0      	movs	r3, #192	; 0xc0
10005de4:	005b      	lsls	r3, r3, #1
10005de6:	58d3      	ldr	r3, [r2, r3]
10005de8:	2b04      	cmp	r3, #4
10005dea:	d1c7      	bne.n	10005d7c <E_EEPROM_XMC1_lUpdateCache+0x74>
    else
    {
      read_status = E_EEPROM_XMC1_lUpdateCacheBlockRead();
    }
  }
}
10005dec:	46bd      	mov	sp, r7
10005dee:	b004      	add	sp, #16
10005df0:	bd80      	pop	{r7, pc}
10005df2:	46c0      	nop			; (mov r8, r8)
10005df4:	20000610 	.word	0x20000610
10005df8:	10032100 	.word	0x10032100
10005dfc:	10032900 	.word	0x10032900

10005e00 <E_EEPROM_XMC1_lCacheEmptyBlkEval>:
 *
 * Description     : This utility function  will search through the FLASH from the bottom of the bank until a
 *                   readable data block is found.
 */
static uint32_t E_EEPROM_XMC1_lCacheEmptyBlkEval(uint32_t end_addr)
{
10005e00:	b580      	push	{r7, lr}
10005e02:	b086      	sub	sp, #24
10005e04:	af00      	add	r7, sp, #0
10005e06:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t *read_word_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005e08:	4b2b      	ldr	r3, [pc, #172]	; (10005eb8 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xb8>)
10005e0a:	685b      	ldr	r3, [r3, #4]
10005e0c:	617b      	str	r3, [r7, #20]
  
  XMC_FLASH_ClearStatus();
10005e0e:	f7fb f9d1 	bl	100011b4 <XMC_FLASH_ClearStatus>
  
  /* Read the complete block */
  E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
10005e12:	697b      	ldr	r3, [r7, #20]
10005e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10005e16:	697b      	ldr	r3, [r7, #20]
10005e18:	335c      	adds	r3, #92	; 0x5c
10005e1a:	1c10      	adds	r0, r2, #0
10005e1c:	1c19      	adds	r1, r3, #0
10005e1e:	f000 fdf3 	bl	10006a08 <E_EEPROM_XMC1_lReadSingleBlock>
  
  status = E_EEPROM_XMC1_lGetFlashStatus();
10005e22:	f000 fe1b 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
10005e26:	1c03      	adds	r3, r0, #0
10005e28:	613b      	str	r3, [r7, #16]
  
  /* If ECC error exists because of any previous interruptions or power failures during Flash operation in progress*/
  if (status & (uint32_t)XMC_FLASH_STATUS_ECC2_READ_ERROR)
10005e2a:	693b      	ldr	r3, [r7, #16]
10005e2c:	2220      	movs	r2, #32
10005e2e:	4013      	ands	r3, r2
10005e30:	d01b      	beq.n	10005e6a <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x6a>
  {
    /* Update the free block location of the valid bank once and for ever until new write happens*/
    if (data_ptr->next_free_block_addr == 0U)
10005e32:	697b      	ldr	r3, [r7, #20]
10005e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10005e36:	2b00      	cmp	r3, #0
10005e38:	d105      	bne.n	10005e46 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x46>
    {
      data_ptr->next_free_block_addr = (data_ptr->curr_bank_src_addr + E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
10005e3a:	697b      	ldr	r3, [r7, #20]
10005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10005e3e:	3310      	adds	r3, #16
10005e40:	1c1a      	adds	r2, r3, #0
10005e42:	697b      	ldr	r3, [r7, #20]
10005e44:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* Check if all blocks have been read? If yes go to cache update complete state else move to the next block */
    if ( data_ptr->curr_bank_src_addr == end_addr )
10005e46:	697b      	ldr	r3, [r7, #20]
10005e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10005e4a:	687b      	ldr	r3, [r7, #4]
10005e4c:	429a      	cmp	r2, r3
10005e4e:	d105      	bne.n	10005e5c <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x5c>
    {
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
10005e50:	697a      	ldr	r2, [r7, #20]
10005e52:	23c0      	movs	r3, #192	; 0xc0
10005e54:	005b      	lsls	r3, r3, #1
10005e56:	2104      	movs	r1, #4
10005e58:	50d1      	str	r1, [r2, r3]
10005e5a:	e028      	b.n	10005eae <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
    else
    {
      data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005e5c:	697b      	ldr	r3, [r7, #20]
10005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10005e60:	3b10      	subs	r3, #16
10005e62:	1c1a      	adds	r2, r3, #0
10005e64:	697b      	ldr	r3, [r7, #20]
10005e66:	651a      	str	r2, [r3, #80]	; 0x50
10005e68:	e021      	b.n	10005eae <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
  }
  /* No ECC Error */
  else
  {
    read_word_ptr = ((uint32_t*)(void*)data_ptr->read_write_buffer);
10005e6a:	697b      	ldr	r3, [r7, #20]
10005e6c:	335c      	adds	r3, #92	; 0x5c
10005e6e:	60fb      	str	r3, [r7, #12]
    /* Check if the first word of the block is having some data written on it */
    if (*read_word_ptr != E_EEPROM_XMC1_ALL_ONES)
10005e70:	68fb      	ldr	r3, [r7, #12]
10005e72:	681b      	ldr	r3, [r3, #0]
10005e74:	3301      	adds	r3, #1
10005e76:	d00a      	beq.n	10005e8e <E_EEPROM_XMC1_lCacheEmptyBlkEval+0x8e>
    {
      /* Increment the data block count and go to the next block read state */
      data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
10005e78:	697b      	ldr	r3, [r7, #20]
10005e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10005e7c:	1c5a      	adds	r2, r3, #1
10005e7e:	697b      	ldr	r3, [r7, #20]
10005e80:	659a      	str	r2, [r3, #88]	; 0x58
      data_ptr->cache_state = E_EEPROM_XMC1_CACHE_NEXT_BLK;
10005e82:	697a      	ldr	r2, [r7, #20]
10005e84:	23c0      	movs	r3, #192	; 0xc0
10005e86:	005b      	lsls	r3, r3, #1
10005e88:	2102      	movs	r1, #2
10005e8a:	50d1      	str	r1, [r2, r3]
10005e8c:	e00f      	b.n	10005eae <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xae>
    }
    else
    {
      /* Check if all blocks have been read? If yes go to cache update complete state else move to next block */
      if ( data_ptr->curr_bank_src_addr == end_addr )
10005e8e:	697b      	ldr	r3, [r7, #20]
10005e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10005e92:	687b      	ldr	r3, [r7, #4]
10005e94:	429a      	cmp	r2, r3
10005e96:	d104      	bne.n	10005ea2 <E_EEPROM_XMC1_lCacheEmptyBlkEval+0xa2>
      {
        data_ptr->cache_state = E_EEPROM_XMC1_CACHE_UPDATE_DONE;
10005e98:	697a      	ldr	r2, [r7, #20]
10005e9a:	23c0      	movs	r3, #192	; 0xc0
10005e9c:	005b      	lsls	r3, r3, #1
10005e9e:	2104      	movs	r1, #4
10005ea0:	50d1      	str	r1, [r2, r3]
      }
      data_ptr->curr_bank_src_addr -= E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10005ea2:	697b      	ldr	r3, [r7, #20]
10005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10005ea6:	3b10      	subs	r3, #16
10005ea8:	1c1a      	adds	r2, r3, #0
10005eaa:	697b      	ldr	r3, [r7, #20]
10005eac:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  return (status);
10005eae:	693b      	ldr	r3, [r7, #16]
}
10005eb0:	1c18      	adds	r0, r3, #0
10005eb2:	46bd      	mov	sp, r7
10005eb4:	b006      	add	sp, #24
10005eb6:	bd80      	pop	{r7, pc}
10005eb8:	20000610 	.word	0x20000610

10005ebc <E_EEPROM_XMC1_lEvalBlockStatus>:
 *                    2) cache updated: inconsistent           
 *                    3) cache already updated (no actions done)   
 *                    4) cannot evaluate - requires more blocks to be read          
 */
static void E_EEPROM_XMC1_lEvalBlockStatus(void)
{
10005ebc:	b580      	push	{r7, lr}
10005ebe:	b088      	sub	sp, #32
10005ec0:	af00      	add	r7, sp, #0
  uint32_t physical_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_CACHE_t *cache_ptr;
  E_EEPROM_XMC1_BLOCK_HEADER_t *Ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005ec2:	4b4b      	ldr	r3, [pc, #300]	; (10005ff0 <E_EEPROM_XMC1_lEvalBlockStatus+0x134>)
10005ec4:	685b      	ldr	r3, [r3, #4]
10005ec6:	61fb      	str	r3, [r7, #28]
  Ptr = (E_EEPROM_XMC1_BLOCK_HEADER_t *)(void *)data_ptr->read_write_buffer;
10005ec8:	69fb      	ldr	r3, [r7, #28]
10005eca:	335c      	adds	r3, #92	; 0x5c
10005ecc:	61bb      	str	r3, [r7, #24]
  block_number = Ptr->block_number;
10005ece:	2317      	movs	r3, #23
10005ed0:	18fb      	adds	r3, r7, r3
10005ed2:	69ba      	ldr	r2, [r7, #24]
10005ed4:	7812      	ldrb	r2, [r2, #0]
10005ed6:	701a      	strb	r2, [r3, #0]
  status_byte = Ptr->status;
10005ed8:	69bb      	ldr	r3, [r7, #24]
10005eda:	785b      	ldrb	r3, [r3, #1]
10005edc:	613b      	str	r3, [r7, #16]
  
  cache_ptr = data_ptr->block_info;
10005ede:	69fb      	ldr	r3, [r7, #28]
10005ee0:	60fb      	str	r3, [r7, #12]
  
  /* Get the Index of the read block from the user configuration */
  indx = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10005ee2:	2317      	movs	r3, #23
10005ee4:	18fb      	adds	r3, r7, r3
10005ee6:	781b      	ldrb	r3, [r3, #0]
10005ee8:	1c18      	adds	r0, r3, #0
10005eea:	f000 f8a7 	bl	1000603c <E_EEPROM_XMC1_lGetUsrBlockIndex>
10005eee:	1c03      	adds	r3, r0, #0
10005ef0:	60bb      	str	r3, [r7, #8]
  
  /* If the block is found */
  if ( (indx != E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND) )
10005ef2:	68bb      	ldr	r3, [r7, #8]
10005ef4:	2bff      	cmp	r3, #255	; 0xff
10005ef6:	d100      	bne.n	10005efa <E_EEPROM_XMC1_lEvalBlockStatus+0x3e>
10005ef8:	e06f      	b.n	10005fda <E_EEPROM_XMC1_lEvalBlockStatus+0x11e>
  {
    /* Point to the cache table entry for the block to be evaluated */
    cache_ptr = cache_ptr + indx;
10005efa:	68bb      	ldr	r3, [r7, #8]
10005efc:	00db      	lsls	r3, r3, #3
10005efe:	68fa      	ldr	r2, [r7, #12]
10005f00:	18d3      	adds	r3, r2, r3
10005f02:	60fb      	str	r3, [r7, #12]
    
    /* Store Index of current block */
    data_ptr->updated_cache_index = indx;
10005f04:	69fa      	ldr	r2, [r7, #28]
10005f06:	23c2      	movs	r3, #194	; 0xc2
10005f08:	005b      	lsls	r3, r3, #1
10005f0a:	68b9      	ldr	r1, [r7, #8]
10005f0c:	50d1      	str	r1, [r2, r3]
    
    /* Check if cache table is updated for the given block : address = 0U => cache table not yet updated */
    if (cache_ptr->address == 0U)
10005f0e:	68fb      	ldr	r3, [r7, #12]
10005f10:	681b      	ldr	r3, [r3, #0]
10005f12:	2b00      	cmp	r3, #0
10005f14:	d158      	bne.n	10005fc8 <E_EEPROM_XMC1_lEvalBlockStatus+0x10c>
    {
      /* If the starting block of the block found */
      if ((status_byte & E_EEPROM_XMC1_START_BIT ) != 0U)
10005f16:	693b      	ldr	r3, [r7, #16]
10005f18:	2280      	movs	r2, #128	; 0x80
10005f1a:	4013      	ands	r3, r2
10005f1c:	d065      	beq.n	10005fea <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
      {
        /* Update the cache with block address */
        cache_ptr->address = data_ptr->curr_bank_src_addr;
10005f1e:	69fb      	ldr	r3, [r7, #28]
10005f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10005f22:	68fb      	ldr	r3, [r7, #12]
10005f24:	601a      	str	r2, [r3, #0]
        
        /* if the Valid bit for the logical block is set */
        if ((status_byte & (E_EEPROM_XMC1_VALID_BIT) ) != 0U)
10005f26:	693b      	ldr	r3, [r7, #16]
10005f28:	2240      	movs	r2, #64	; 0x40
10005f2a:	4013      	ands	r3, r2
10005f2c:	d014      	beq.n	10005f58 <E_EEPROM_XMC1_lEvalBlockStatus+0x9c>
        {
          cache_ptr->status.valid = 1U;
10005f2e:	68fb      	ldr	r3, [r7, #12]
10005f30:	791a      	ldrb	r2, [r3, #4]
10005f32:	2101      	movs	r1, #1
10005f34:	430a      	orrs	r2, r1
10005f36:	711a      	strb	r2, [r3, #4]
          
          /* if the CRC bit for the logical block is set */
          if ((status_byte & (E_EEPROM_XMC1_CRC_BIT) ) != 0U)
10005f38:	693b      	ldr	r3, [r7, #16]
10005f3a:	2210      	movs	r2, #16
10005f3c:	4013      	ands	r3, r2
10005f3e:	d005      	beq.n	10005f4c <E_EEPROM_XMC1_lEvalBlockStatus+0x90>
          {
            cache_ptr->status.crc = 1U;
10005f40:	68fb      	ldr	r3, [r7, #12]
10005f42:	791a      	ldrb	r2, [r3, #4]
10005f44:	2108      	movs	r1, #8
10005f46:	430a      	orrs	r2, r1
10005f48:	711a      	strb	r2, [r3, #4]
10005f4a:	e00a      	b.n	10005f62 <E_EEPROM_XMC1_lEvalBlockStatus+0xa6>
          }
          else
          {
            cache_ptr->status.crc = 0U;
10005f4c:	68fb      	ldr	r3, [r7, #12]
10005f4e:	791a      	ldrb	r2, [r3, #4]
10005f50:	2108      	movs	r1, #8
10005f52:	438a      	bics	r2, r1
10005f54:	711a      	strb	r2, [r3, #4]
10005f56:	e004      	b.n	10005f62 <E_EEPROM_XMC1_lEvalBlockStatus+0xa6>
          }
        }
        else
        {
          cache_ptr->status.valid = 0U;
10005f58:	68fb      	ldr	r3, [r7, #12]
10005f5a:	791a      	ldrb	r2, [r3, #4]
10005f5c:	2101      	movs	r1, #1
10005f5e:	438a      	bics	r2, r1
10005f60:	711a      	strb	r2, [r3, #4]
        }
        
        /* Check If number of Flash blocks used for this data block is same in size */
        size = (uint32_t)(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx].size);
10005f62:	4b23      	ldr	r3, [pc, #140]	; (10005ff0 <E_EEPROM_XMC1_lEvalBlockStatus+0x134>)
10005f64:	681a      	ldr	r2, [r3, #0]
10005f66:	68bb      	ldr	r3, [r7, #8]
10005f68:	00db      	lsls	r3, r3, #3
10005f6a:	18d3      	adds	r3, r2, r3
10005f6c:	685b      	ldr	r3, [r3, #4]
10005f6e:	607b      	str	r3, [r7, #4]
        physical_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(size);
10005f70:	687b      	ldr	r3, [r7, #4]
10005f72:	1c18      	adds	r0, r3, #0
10005f74:	f000 f892 	bl	1000609c <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
10005f78:	1c03      	adds	r3, r0, #0
10005f7a:	603b      	str	r3, [r7, #0]
        
        if ( data_ptr->written_block_counter == physical_blocks)
10005f7c:	69fb      	ldr	r3, [r7, #28]
10005f7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
10005f80:	683b      	ldr	r3, [r7, #0]
10005f82:	429a      	cmp	r2, r3
10005f84:	d105      	bne.n	10005f92 <E_EEPROM_XMC1_lEvalBlockStatus+0xd6>
        {
          cache_ptr->status.consistent = 1U;  /* EVALUATION RESULT : BLOCK CONSISTENT*/
10005f86:	68fb      	ldr	r3, [r7, #12]
10005f88:	791a      	ldrb	r2, [r3, #4]
10005f8a:	2102      	movs	r1, #2
10005f8c:	430a      	orrs	r2, r1
10005f8e:	711a      	strb	r2, [r3, #4]
10005f90:	e011      	b.n	10005fb6 <E_EEPROM_XMC1_lEvalBlockStatus+0xfa>
        }
        else
        {
          if (cache_ptr->status.valid == 1U)
10005f92:	68fb      	ldr	r3, [r7, #12]
10005f94:	791b      	ldrb	r3, [r3, #4]
10005f96:	2201      	movs	r2, #1
10005f98:	4013      	ands	r3, r2
10005f9a:	b2db      	uxtb	r3, r3
10005f9c:	2b00      	cmp	r3, #0
10005f9e:	d005      	beq.n	10005fac <E_EEPROM_XMC1_lEvalBlockStatus+0xf0>
          {
            cache_ptr->status.consistent = 0U;  /* EVALUATION RESULT : BLOCK INCONSISTENT */
10005fa0:	68fb      	ldr	r3, [r7, #12]
10005fa2:	791a      	ldrb	r2, [r3, #4]
10005fa4:	2102      	movs	r1, #2
10005fa6:	438a      	bics	r2, r1
10005fa8:	711a      	strb	r2, [r3, #4]
10005faa:	e004      	b.n	10005fb6 <E_EEPROM_XMC1_lEvalBlockStatus+0xfa>
          }
          else
          {
            cache_ptr->status.consistent = 1U; /* If the block is invalid, then mark : BLOCK INCONSISTENT */
10005fac:	68fb      	ldr	r3, [r7, #12]
10005fae:	791a      	ldrb	r2, [r3, #4]
10005fb0:	2102      	movs	r1, #2
10005fb2:	430a      	orrs	r2, r1
10005fb4:	711a      	strb	r2, [r3, #4]
          }
        }
        /* Initialize the Index, block block count for the next read */
        data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10005fb6:	69fa      	ldr	r2, [r7, #28]
10005fb8:	23c2      	movs	r3, #194	; 0xc2
10005fba:	005b      	lsls	r3, r3, #1
10005fbc:	21ff      	movs	r1, #255	; 0xff
10005fbe:	50d1      	str	r1, [r2, r3]
        data_ptr->written_block_counter = 0U;
10005fc0:	69fb      	ldr	r3, [r7, #28]
10005fc2:	2200      	movs	r2, #0
10005fc4:	659a      	str	r2, [r3, #88]	; 0x58
10005fc6:	e010      	b.n	10005fea <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
    {
      /*
       * EVALUATION RESULT : CACHE ALREADY UPDATED
       * If cache table is already updated for the block, no need to evaluate the block
       */
      data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10005fc8:	69fa      	ldr	r2, [r7, #28]
10005fca:	23c2      	movs	r3, #194	; 0xc2
10005fcc:	005b      	lsls	r3, r3, #1
10005fce:	21ff      	movs	r1, #255	; 0xff
10005fd0:	50d1      	str	r1, [r2, r3]
      data_ptr->written_block_counter = 0U;
10005fd2:	69fb      	ldr	r3, [r7, #28]
10005fd4:	2200      	movs	r2, #0
10005fd6:	659a      	str	r2, [r3, #88]	; 0x58
10005fd8:	e007      	b.n	10005fea <E_EEPROM_XMC1_lEvalBlockStatus+0x12e>
    }
  }
  else
  {    
    data_ptr->updated_cache_index = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
10005fda:	69fa      	ldr	r2, [r7, #28]
10005fdc:	23c2      	movs	r3, #194	; 0xc2
10005fde:	005b      	lsls	r3, r3, #1
10005fe0:	21ff      	movs	r1, #255	; 0xff
10005fe2:	50d1      	str	r1, [r2, r3]
    data_ptr->written_block_counter = 0U;
10005fe4:	69fb      	ldr	r3, [r7, #28]
10005fe6:	2200      	movs	r2, #0
10005fe8:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
10005fea:	46bd      	mov	sp, r7
10005fec:	b008      	add	sp, #32
10005fee:	bd80      	pop	{r7, pc}
10005ff0:	20000610 	.word	0x20000610

10005ff4 <E_EEPROM_XMC1_lUpdateCacheBlockRead>:
 * Return value   : uint32_t
 *
 * Description    : Utility function to read data block from flash for cache update function.
 */
static uint32_t E_EEPROM_XMC1_lUpdateCacheBlockRead(void)
{
10005ff4:	b580      	push	{r7, lr}
10005ff6:	b082      	sub	sp, #8
10005ff8:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10005ffa:	4b0f      	ldr	r3, [pc, #60]	; (10006038 <E_EEPROM_XMC1_lUpdateCacheBlockRead+0x44>)
10005ffc:	685b      	ldr	r3, [r3, #4]
10005ffe:	607b      	str	r3, [r7, #4]
  
  /* Set the Write Source pointer to the next block */
  data_ptr->curr_bank_src_addr = data_ptr->curr_bank_src_addr -  E_EEPROM_XMC1_FLASH_BLOCK_SIZE;
10006000:	687b      	ldr	r3, [r7, #4]
10006002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10006004:	3b10      	subs	r3, #16
10006006:	1c1a      	adds	r2, r3, #0
10006008:	687b      	ldr	r3, [r7, #4]
1000600a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
1000600c:	f7fb f8d2 	bl	100011b4 <XMC_FLASH_ClearStatus>
  
  E_EEPROM_XMC1_lReadSingleBlock(data_ptr->curr_bank_src_addr,  (uint32_t*)(void*)data_ptr->read_write_buffer);
10006010:	687b      	ldr	r3, [r7, #4]
10006012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10006014:	687b      	ldr	r3, [r7, #4]
10006016:	335c      	adds	r3, #92	; 0x5c
10006018:	1c10      	adds	r0, r2, #0
1000601a:	1c19      	adds	r1, r3, #0
1000601c:	f000 fcf4 	bl	10006a08 <E_EEPROM_XMC1_lReadSingleBlock>
  
  /* Increment number of read block counter  */
  data_ptr->written_block_counter = data_ptr->written_block_counter + 1U;
10006020:	687b      	ldr	r3, [r7, #4]
10006022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10006024:	1c5a      	adds	r2, r3, #1
10006026:	687b      	ldr	r3, [r7, #4]
10006028:	659a      	str	r2, [r3, #88]	; 0x58
  
  return (E_EEPROM_XMC1_lGetFlashStatus());
1000602a:	f000 fd17 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
1000602e:	1c03      	adds	r3, r0, #0
}
10006030:	1c18      	adds	r0, r3, #0
10006032:	46bd      	mov	sp, r7
10006034:	b002      	add	sp, #8
10006036:	bd80      	pop	{r7, pc}
10006038:	20000610 	.word	0x20000610

1000603c <E_EEPROM_XMC1_lGetUsrBlockIndex>:
 * Return value   : uint32_t : returns array index pointer of block configuration
 *
 * Description    : This utility function will return the Index (location) of the block in the user configuration.
 */
static uint32_t E_EEPROM_XMC1_lGetUsrBlockIndex(uint8_t block_number)
{
1000603c:	b580      	push	{r7, lr}
1000603e:	b084      	sub	sp, #16
10006040:	af00      	add	r7, sp, #0
10006042:	1c02      	adds	r2, r0, #0
10006044:	1dfb      	adds	r3, r7, #7
10006046:	701a      	strb	r2, [r3, #0]
  uint32_t indx;
  E_EEPROM_XMC1_BLOCK_t  *block_ptr;
  
  indx = 0U;
10006048:	2300      	movs	r3, #0
1000604a:	60fb      	str	r3, [r7, #12]
  block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
1000604c:	4b12      	ldr	r3, [pc, #72]	; (10006098 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
1000604e:	681a      	ldr	r2, [r3, #0]
10006050:	68fb      	ldr	r3, [r7, #12]
10006052:	00db      	lsls	r3, r3, #3
10006054:	18d3      	adds	r3, r2, r3
10006056:	60bb      	str	r3, [r7, #8]
  
  /* Check for max configured block count reached and block number is matched against the configured block numbers */
  while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_number) )
10006058:	e005      	b.n	10006066 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x2a>
  {
    indx++;
1000605a:	68fb      	ldr	r3, [r7, #12]
1000605c:	3301      	adds	r3, #1
1000605e:	60fb      	str	r3, [r7, #12]
    block_ptr++;
10006060:	68bb      	ldr	r3, [r7, #8]
10006062:	3308      	adds	r3, #8
10006064:	60bb      	str	r3, [r7, #8]
  
  indx = 0U;
  block_ptr = &(E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr[indx]);
  
  /* Check for max configured block count reached and block number is matched against the configured block numbers */
  while ( (indx < E_EEPROM_XMC1_HANDLE_PTR->block_count) && (block_ptr->block_number != block_number) )
10006066:	4b0c      	ldr	r3, [pc, #48]	; (10006098 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
10006068:	7a5b      	ldrb	r3, [r3, #9]
1000606a:	1e1a      	subs	r2, r3, #0
1000606c:	68fb      	ldr	r3, [r7, #12]
1000606e:	429a      	cmp	r2, r3
10006070:	d905      	bls.n	1000607e <E_EEPROM_XMC1_lGetUsrBlockIndex+0x42>
10006072:	68bb      	ldr	r3, [r7, #8]
10006074:	781b      	ldrb	r3, [r3, #0]
10006076:	1dfa      	adds	r2, r7, #7
10006078:	7812      	ldrb	r2, [r2, #0]
1000607a:	429a      	cmp	r2, r3
1000607c:	d1ed      	bne.n	1000605a <E_EEPROM_XMC1_lGetUsrBlockIndex+0x1e>
  {
    indx++;
    block_ptr++;
  }
  
  if ( indx == E_EEPROM_XMC1_HANDLE_PTR->block_count )
1000607e:	4b06      	ldr	r3, [pc, #24]	; (10006098 <E_EEPROM_XMC1_lGetUsrBlockIndex+0x5c>)
10006080:	7a5b      	ldrb	r3, [r3, #9]
10006082:	1e1a      	subs	r2, r3, #0
10006084:	68fb      	ldr	r3, [r7, #12]
10006086:	429a      	cmp	r2, r3
10006088:	d101      	bne.n	1000608e <E_EEPROM_XMC1_lGetUsrBlockIndex+0x52>
  {
    indx = E_EEPROM_XMC1_LOG_BLOCK_NOT_FOUND;
1000608a:	23ff      	movs	r3, #255	; 0xff
1000608c:	60fb      	str	r3, [r7, #12]
  }
  return (indx);
1000608e:	68fb      	ldr	r3, [r7, #12]
}
10006090:	1c18      	adds	r0, r3, #0
10006092:	46bd      	mov	sp, r7
10006094:	b004      	add	sp, #16
10006096:	bd80      	pop	{r7, pc}
10006098:	20000610 	.word	0x20000610

1000609c <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>:
 * Return value   : uint32_t - returns maximum physical flash blocks required to store the data.
 *
 * Description    : Calculates and return the number of FLASH blocks required for a user data block size.
 */
static uint32_t E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(uint32_t size)
{
1000609c:	b580      	push	{r7, lr}
1000609e:	b084      	sub	sp, #16
100060a0:	af00      	add	r7, sp, #0
100060a2:	6078      	str	r0, [r7, #4]
  uint32_t physical_blocks;

  physical_blocks = 1U;
100060a4:	2301      	movs	r3, #1
100060a6:	60fb      	str	r3, [r7, #12]
  /* If size is greater than the  */
  if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
100060a8:	687b      	ldr	r3, [r7, #4]
100060aa:	2b0c      	cmp	r3, #12
100060ac:	d90f      	bls.n	100060ce <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x32>
  {
    size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
100060ae:	687b      	ldr	r3, [r7, #4]
100060b0:	3b0c      	subs	r3, #12
100060b2:	607b      	str	r3, [r7, #4]
    physical_blocks++;
100060b4:	68fb      	ldr	r3, [r7, #12]
100060b6:	3301      	adds	r3, #1
100060b8:	60fb      	str	r3, [r7, #12]
    
    while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
100060ba:	e005      	b.n	100060c8 <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x2c>
    {
      physical_blocks++;
100060bc:	68fb      	ldr	r3, [r7, #12]
100060be:	3301      	adds	r3, #1
100060c0:	60fb      	str	r3, [r7, #12]
      size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
100060c2:	687b      	ldr	r3, [r7, #4]
100060c4:	3b0e      	subs	r3, #14
100060c6:	607b      	str	r3, [r7, #4]
  if ( size > E_EEPROM_XMC1_BLOCK1_DATA_SIZE )
  {
    size = size - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;
    physical_blocks++;
    
    while (size > E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
100060c8:	687b      	ldr	r3, [r7, #4]
100060ca:	2b0e      	cmp	r3, #14
100060cc:	d8f6      	bhi.n	100060bc <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks+0x20>
    {
      physical_blocks++;
      size = size - E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
    }
  }
  return(physical_blocks);
100060ce:	68fb      	ldr	r3, [r7, #12]
}
100060d0:	1c18      	adds	r0, r3, #0
100060d2:	46bd      	mov	sp, r7
100060d4:	b004      	add	sp, #16
100060d6:	bd80      	pop	{r7, pc}

100060d8 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>:
 * Return value    : uint32_t : Number of physical blocks left in the bank for writing data.
 *
 * Description     : This routine will calculate the number of empty DFLASH blocks remaining in the bank.
 */
static uint32_t E_EEPROM_XMC1_lGetFreeDFLASHBlocks(void)
{
100060d8:	b580      	push	{r7, lr}
100060da:	b084      	sub	sp, #16
100060dc:	af00      	add	r7, sp, #0
  uint32_t base_addr;
  uint32_t free_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100060de:	4b0d      	ldr	r3, [pc, #52]	; (10006114 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x3c>)
100060e0:	685b      	ldr	r3, [r3, #4]
100060e2:	60bb      	str	r3, [r7, #8]
  
  if (data_ptr->current_bank == 0U)
100060e4:	68bb      	ldr	r3, [r7, #8]
100060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100060e8:	2b00      	cmp	r3, #0
100060ea:	d102      	bne.n	100060f2 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x1a>
  {
    base_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
100060ec:	4b0a      	ldr	r3, [pc, #40]	; (10006118 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x40>)
100060ee:	60fb      	str	r3, [r7, #12]
100060f0:	e001      	b.n	100060f6 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x1e>
  }
  else
  {
    base_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
100060f2:	4b0a      	ldr	r3, [pc, #40]	; (1000611c <E_EEPROM_XMC1_lGetFreeDFLASHBlocks+0x44>)
100060f4:	60fb      	str	r3, [r7, #12]
  }
  free_blocks = (uint32_t)( ( (base_addr + E_EEPROM_XMC1_FLASH_BANK_SIZE) - (data_ptr->next_free_block_addr)  )
100060f6:	68bb      	ldr	r3, [r7, #8]
100060f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100060fa:	68fa      	ldr	r2, [r7, #12]
100060fc:	1ad3      	subs	r3, r2, r3
100060fe:	2280      	movs	r2, #128	; 0x80
10006100:	0112      	lsls	r2, r2, #4
10006102:	4694      	mov	ip, r2
10006104:	4463      	add	r3, ip
10006106:	091b      	lsrs	r3, r3, #4
10006108:	607b      	str	r3, [r7, #4]
                /  E_EEPROM_XMC1_FLASH_BLOCK_SIZE );
  return (free_blocks);
1000610a:	687b      	ldr	r3, [r7, #4]
}
1000610c:	1c18      	adds	r0, r3, #0
1000610e:	46bd      	mov	sp, r7
10006110:	b004      	add	sp, #16
10006112:	bd80      	pop	{r7, pc}
10006114:	20000610 	.word	0x20000610
10006118:	10032000 	.word	0x10032000
1000611c:	10032800 	.word	0x10032800

10006120 <E_EEPROM_XMC1_lUpdateCurrBankInfo>:
 * Return value    : void
 *
 * Description     : Updates global addresses to keep track of writing and reading operations respectively.
 */
static void E_EEPROM_XMC1_lUpdateCurrBankInfo(void)
{
10006120:	b580      	push	{r7, lr}
10006122:	b082      	sub	sp, #8
10006124:	af00      	add	r7, sp, #0
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006126:	4b14      	ldr	r3, [pc, #80]	; (10006178 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x58>)
10006128:	685b      	ldr	r3, [r3, #4]
1000612a:	607b      	str	r3, [r7, #4]
  
  if (data_ptr->current_bank == 0U)
1000612c:	687b      	ldr	r3, [r7, #4]
1000612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10006130:	2b00      	cmp	r3, #0
10006132:	d10f      	bne.n	10006154 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x34>
  {
    data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10006134:	687b      	ldr	r3, [r7, #4]
10006136:	4a11      	ldr	r2, [pc, #68]	; (1000617c <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
10006138:	651a      	str	r2, [r3, #80]	; 0x50
    data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
1000613a:	687b      	ldr	r3, [r7, #4]
1000613c:	4a0f      	ldr	r2, [pc, #60]	; (1000617c <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
1000613e:	641a      	str	r2, [r3, #64]	; 0x40
    data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
10006140:	687b      	ldr	r3, [r7, #4]
10006142:	4a0f      	ldr	r2, [pc, #60]	; (10006180 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
10006144:	63da      	str	r2, [r3, #60]	; 0x3c
    data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
10006146:	687b      	ldr	r3, [r7, #4]
10006148:	4a0e      	ldr	r2, [pc, #56]	; (10006184 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x64>)
1000614a:	645a      	str	r2, [r3, #68]	; 0x44
    data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
1000614c:	687b      	ldr	r3, [r7, #4]
1000614e:	4a0e      	ldr	r2, [pc, #56]	; (10006188 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x68>)
10006150:	649a      	str	r2, [r3, #72]	; 0x48
10006152:	e00e      	b.n	10006172 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x52>
  }
  else
  {
    data_ptr->curr_bank_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
10006154:	687b      	ldr	r3, [r7, #4]
10006156:	4a0a      	ldr	r2, [pc, #40]	; (10006180 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
10006158:	651a      	str	r2, [r3, #80]	; 0x50
    data_ptr->gc_src_addr = E_EEPROM_XMC1_FLASH_BANK1_BASE;
1000615a:	687b      	ldr	r3, [r7, #4]
1000615c:	4a08      	ldr	r2, [pc, #32]	; (10006180 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x60>)
1000615e:	641a      	str	r2, [r3, #64]	; 0x40
    data_ptr->gc_dest_addr = E_EEPROM_XMC1_FLASH_BANK0_BASE;
10006160:	687b      	ldr	r3, [r7, #4]
10006162:	4a06      	ldr	r2, [pc, #24]	; (1000617c <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x5c>)
10006164:	63da      	str	r2, [r3, #60]	; 0x3c
    data_ptr->curr_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK1_END;
10006166:	687b      	ldr	r3, [r7, #4]
10006168:	4a07      	ldr	r2, [pc, #28]	; (10006188 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x68>)
1000616a:	645a      	str	r2, [r3, #68]	; 0x44
    data_ptr->prev_bank_end_addr = E_EEPROM_XMC1_FLASH_BANK0_END;
1000616c:	687b      	ldr	r3, [r7, #4]
1000616e:	4a05      	ldr	r2, [pc, #20]	; (10006184 <E_EEPROM_XMC1_lUpdateCurrBankInfo+0x64>)
10006170:	649a      	str	r2, [r3, #72]	; 0x48
  }
}
10006172:	46bd      	mov	sp, r7
10006174:	b002      	add	sp, #8
10006176:	bd80      	pop	{r7, pc}
10006178:	20000610 	.word	0x20000610
1000617c:	10032000 	.word	0x10032000
10006180:	10032800 	.word	0x10032800
10006184:	100327ff 	.word	0x100327ff
10006188:	10032fff 	.word	0x10032fff

1000618c <E_EEPROM_XMC1_lReadMarkerBlocks>:
 * Return value    : uint32_t : marker_dirty_state
 *
 * Description     : This function will read the Block marker contents
 */
static uint32_t E_EEPROM_XMC1_lReadMarkerBlocks(void)
{
1000618c:	b580      	push	{r7, lr}
1000618e:	b088      	sub	sp, #32
10006190:	af00      	add	r7, sp, #0
  uint32_t state_marker_cnt;
  uint32_t temp_state_marker;
  uint32_t marker_dirty_state;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006192:	4b20      	ldr	r3, [pc, #128]	; (10006214 <E_EEPROM_XMC1_lReadMarkerBlocks+0x88>)
10006194:	685b      	ldr	r3, [r3, #4]
10006196:	613b      	str	r3, [r7, #16]
  
  /* Initialize Local variables */
  temp_bank_state = 0U;
10006198:	2300      	movs	r3, #0
1000619a:	61fb      	str	r3, [r7, #28]
  marker_dirty_state = 0U;
1000619c:	2300      	movs	r3, #0
1000619e:	617b      	str	r3, [r7, #20]
  state_marker_cnt = 0U;
100061a0:	2300      	movs	r3, #0
100061a2:	61bb      	str	r3, [r7, #24]
  do
  {
    /* Prepare the variables for state block update */
    temp_bank_state = (uint32_t)((uint32_t)temp_bank_state << (uint32_t)1U);
100061a4:	69fb      	ldr	r3, [r7, #28]
100061a6:	005b      	lsls	r3, r3, #1
100061a8:	61fb      	str	r3, [r7, #28]
    
    bank  = (uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS;
100061aa:	69bb      	ldr	r3, [r7, #24]
100061ac:	089b      	lsrs	r3, r3, #2
100061ae:	60fb      	str	r3, [r7, #12]
    block = (uint32_t)state_marker_cnt - ((uint32_t)bank << E_EEPROM_XMC1_TWO_BIT_POS);
100061b0:	68fb      	ldr	r3, [r7, #12]
100061b2:	009b      	lsls	r3, r3, #2
100061b4:	69ba      	ldr	r2, [r7, #24]
100061b6:	1ad3      	subs	r3, r2, r3
100061b8:	60bb      	str	r3, [r7, #8]
    
    /* Read the state block of bank*/
    temp_state_marker = E_EEPROM_XMC1_lReadVerifyMarker(bank , block);
100061ba:	68fa      	ldr	r2, [r7, #12]
100061bc:	68bb      	ldr	r3, [r7, #8]
100061be:	1c10      	adds	r0, r2, #0
100061c0:	1c19      	adds	r1, r3, #0
100061c2:	f000 f829 	bl	10006218 <E_EEPROM_XMC1_lReadVerifyMarker>
100061c6:	1c03      	adds	r3, r0, #0
100061c8:	607b      	str	r3, [r7, #4]
    
    if (temp_state_marker == E_EEPROM_XMC1_ALL_ONES)
100061ca:	687b      	ldr	r3, [r7, #4]
100061cc:	3301      	adds	r3, #1
100061ce:	d104      	bne.n	100061da <E_EEPROM_XMC1_lReadMarkerBlocks+0x4e>
    {
     temp_bank_state |= 1U;
100061d0:	69fb      	ldr	r3, [r7, #28]
100061d2:	2201      	movs	r2, #1
100061d4:	4313      	orrs	r3, r2
100061d6:	61fb      	str	r3, [r7, #28]
100061d8:	e00c      	b.n	100061f4 <E_EEPROM_XMC1_lReadMarkerBlocks+0x68>
    }
    else if (temp_state_marker == E_EEPROM_XMC1_ALL_ZEROS)
100061da:	687b      	ldr	r3, [r7, #4]
100061dc:	2b00      	cmp	r3, #0
100061de:	d009      	beq.n	100061f4 <E_EEPROM_XMC1_lReadMarkerBlocks+0x68>
    {
     temp_bank_state |= 0U;
    }
    else
    {
     indx = (uint32_t)((uint32_t)state_marker_cnt >> E_EEPROM_XMC1_TWO_BIT_POS);
100061e0:	69bb      	ldr	r3, [r7, #24]
100061e2:	089b      	lsrs	r3, r3, #2
100061e4:	603b      	str	r3, [r7, #0]
     marker_dirty_state |= (uint32_t)((uint32_t)1U << (uint32_t)indx);
100061e6:	683b      	ldr	r3, [r7, #0]
100061e8:	2201      	movs	r2, #1
100061ea:	409a      	lsls	r2, r3
100061ec:	1c13      	adds	r3, r2, #0
100061ee:	697a      	ldr	r2, [r7, #20]
100061f0:	4313      	orrs	r3, r2
100061f2:	617b      	str	r3, [r7, #20]
    }
    /* Update the counter "StateBlockCnt" */
    state_marker_cnt++;
100061f4:	69bb      	ldr	r3, [r7, #24]
100061f6:	3301      	adds	r3, #1
100061f8:	61bb      	str	r3, [r7, #24]
  } while (state_marker_cnt < E_EEPROM_XMC1_EIGHT_BYTES);
100061fa:	69bb      	ldr	r3, [r7, #24]
100061fc:	2b07      	cmp	r3, #7
100061fe:	d9d1      	bls.n	100061a4 <E_EEPROM_XMC1_lReadMarkerBlocks+0x18>
  
  /* Update Global variables */
  data_ptr->init_gc_state = temp_bank_state;
10006200:	693a      	ldr	r2, [r7, #16]
10006202:	23bc      	movs	r3, #188	; 0xbc
10006204:	005b      	lsls	r3, r3, #1
10006206:	69f9      	ldr	r1, [r7, #28]
10006208:	50d1      	str	r1, [r2, r3]
  
  return (marker_dirty_state);
1000620a:	697b      	ldr	r3, [r7, #20]
}
1000620c:	1c18      	adds	r0, r3, #0
1000620e:	46bd      	mov	sp, r7
10006210:	b008      	add	sp, #32
10006212:	bd80      	pop	{r7, pc}
10006214:	20000610 	.word	0x20000610

10006218 <E_EEPROM_XMC1_lReadVerifyMarker>:
 *                    E_EEPROM_XMC1_MB_DIRTY
 *
 * Description    : This function will verify the marker contents read out from state page.
 */
static uint32_t E_EEPROM_XMC1_lReadVerifyMarker(uint32_t bank, uint32_t block)
{
10006218:	b580      	push	{r7, lr}
1000621a:	b08a      	sub	sp, #40	; 0x28
1000621c:	af00      	add	r7, sp, #0
1000621e:	6078      	str	r0, [r7, #4]
10006220:	6039      	str	r1, [r7, #0]
  uint32_t zeros_counter;
  uint32_t marker_block_addr;
  uint32_t *marker_array_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006222:	4b29      	ldr	r3, [pc, #164]	; (100062c8 <E_EEPROM_XMC1_lReadVerifyMarker+0xb0>)
10006224:	685b      	ldr	r3, [r3, #4]
10006226:	617b      	str	r3, [r7, #20]
  
  ones_counter = 0U;
10006228:	2300      	movs	r3, #0
1000622a:	61fb      	str	r3, [r7, #28]
  zeros_counter = 0U;
1000622c:	2300      	movs	r3, #0
1000622e:	61bb      	str	r3, [r7, #24]
  marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
10006230:	697b      	ldr	r3, [r7, #20]
10006232:	335c      	adds	r3, #92	; 0x5c
10006234:	613b      	str	r3, [r7, #16]
  
  /* Calculate the Marker Block address from bank and Block size*/
  marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
                      ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
10006236:	687b      	ldr	r3, [r7, #4]
10006238:	4a24      	ldr	r2, [pc, #144]	; (100062cc <E_EEPROM_XMC1_lReadVerifyMarker+0xb4>)
1000623a:	4694      	mov	ip, r2
1000623c:	4463      	add	r3, ip
1000623e:	01da      	lsls	r2, r3, #7
10006240:	683b      	ldr	r3, [r7, #0]
10006242:	18d3      	adds	r3, r2, r3
  ones_counter = 0U;
  zeros_counter = 0U;
  marker_array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
  
  /* Calculate the Marker Block address from bank and Block size*/
  marker_block_addr = (E_EEPROM_XMC1_FLASH_BANK0_BASE +
10006244:	011b      	lsls	r3, r3, #4
10006246:	60fb      	str	r3, [r7, #12]
                      ((uint32_t)bank  * (uint32_t)E_EEPROM_XMC1_FLASH_BANK_SIZE)) +
                      ((uint32_t)block * (uint32_t)E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
10006248:	f7fa ffb4 	bl	100011b4 <XMC_FLASH_ClearStatus>
  
  /* Read one complete block of data (4 Words = 128 bit) from the targeted Marker Block */
  E_EEPROM_XMC1_lReadSingleBlock(marker_block_addr, (uint32_t*)(void*)marker_array_ptr);
1000624c:	68fa      	ldr	r2, [r7, #12]
1000624e:	693b      	ldr	r3, [r7, #16]
10006250:	1c10      	adds	r0, r2, #0
10006252:	1c19      	adds	r1, r3, #0
10006254:	f000 fbd8 	bl	10006a08 <E_EEPROM_XMC1_lReadSingleBlock>
  
  /* Check for any flash hardware errors*/
  if (E_EEPROM_XMC1_lGetFlashStatus())
10006258:	f000 fc00 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
1000625c:	1e03      	subs	r3, r0, #0
1000625e:	d002      	beq.n	10006266 <E_EEPROM_XMC1_lReadVerifyMarker+0x4e>
  {
    /* Any Hardware errors will result in Dirty state*/
    return_val = E_EEPROM_XMC1_MB_DIRTY;
10006260:	23dd      	movs	r3, #221	; 0xdd
10006262:	623b      	str	r3, [r7, #32]
10006264:	e02b      	b.n	100062be <E_EEPROM_XMC1_lReadVerifyMarker+0xa6>
  }
  else
  {
    for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
10006266:	2300      	movs	r3, #0
10006268:	627b      	str	r3, [r7, #36]	; 0x24
1000626a:	e016      	b.n	1000629a <E_EEPROM_XMC1_lReadVerifyMarker+0x82>
    {
      /* Check for the Marker field and verify Marker either 0 or 1*/
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ZEROS)
1000626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000626e:	009b      	lsls	r3, r3, #2
10006270:	693a      	ldr	r2, [r7, #16]
10006272:	18d3      	adds	r3, r2, r3
10006274:	681b      	ldr	r3, [r3, #0]
10006276:	2b00      	cmp	r3, #0
10006278:	d102      	bne.n	10006280 <E_EEPROM_XMC1_lReadVerifyMarker+0x68>
      {
        zeros_counter++;
1000627a:	69bb      	ldr	r3, [r7, #24]
1000627c:	3301      	adds	r3, #1
1000627e:	61bb      	str	r3, [r7, #24]
      }
      
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
10006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006282:	009b      	lsls	r3, r3, #2
10006284:	693a      	ldr	r2, [r7, #16]
10006286:	18d3      	adds	r3, r2, r3
10006288:	681b      	ldr	r3, [r3, #0]
1000628a:	3301      	adds	r3, #1
1000628c:	d102      	bne.n	10006294 <E_EEPROM_XMC1_lReadVerifyMarker+0x7c>
      {
        ones_counter++;
1000628e:	69fb      	ldr	r3, [r7, #28]
10006290:	3301      	adds	r3, #1
10006292:	61fb      	str	r3, [r7, #28]
    /* Any Hardware errors will result in Dirty state*/
    return_val = E_EEPROM_XMC1_MB_DIRTY;
  }
  else
  {
    for (indx = 0U ; indx <E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++)
10006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006296:	3301      	adds	r3, #1
10006298:	627b      	str	r3, [r7, #36]	; 0x24
1000629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000629c:	2b03      	cmp	r3, #3
1000629e:	d9e5      	bls.n	1000626c <E_EEPROM_XMC1_lReadVerifyMarker+0x54>
      if (*(marker_array_ptr + indx) == E_EEPROM_XMC1_ALL_ONES)
      {
        ones_counter++;
      }
    }
    if (ones_counter == E_EEPROM_XMC1_FOUR_BYTES)
100062a0:	69fb      	ldr	r3, [r7, #28]
100062a2:	2b04      	cmp	r3, #4
100062a4:	d103      	bne.n	100062ae <E_EEPROM_XMC1_lReadVerifyMarker+0x96>
    {
      return_val = E_EEPROM_XMC1_ALL_ONES;
100062a6:	2301      	movs	r3, #1
100062a8:	425b      	negs	r3, r3
100062aa:	623b      	str	r3, [r7, #32]
100062ac:	e007      	b.n	100062be <E_EEPROM_XMC1_lReadVerifyMarker+0xa6>
    }
    else if (zeros_counter == E_EEPROM_XMC1_FOUR_BYTES)
100062ae:	69bb      	ldr	r3, [r7, #24]
100062b0:	2b04      	cmp	r3, #4
100062b2:	d102      	bne.n	100062ba <E_EEPROM_XMC1_lReadVerifyMarker+0xa2>
    {
      return_val = E_EEPROM_XMC1_ALL_ZEROS;
100062b4:	2300      	movs	r3, #0
100062b6:	623b      	str	r3, [r7, #32]
100062b8:	e001      	b.n	100062be <E_EEPROM_XMC1_lReadVerifyMarker+0xa6>
    }
    else
    {
      return_val = E_EEPROM_XMC1_MB_DIRTY;
100062ba:	23dd      	movs	r3, #221	; 0xdd
100062bc:	623b      	str	r3, [r7, #32]
    }
  }
  return (return_val);
100062be:	6a3b      	ldr	r3, [r7, #32]
}
100062c0:	1c18      	adds	r0, r3, #0
100062c2:	46bd      	mov	sp, r7
100062c4:	b00a      	add	sp, #40	; 0x28
100062c6:	bd80      	pop	{r7, pc}
100062c8:	20000610 	.word	0x20000610
100062cc:	00020064 	.word	0x00020064

100062d0 <E_EEPROM_XMC1_lSetMarkerBlockBuffer>:
 * Return value    : void
 *
 * Description     : This function will update the write buffer for a particular bank marker state
 */
static void E_EEPROM_XMC1_lSetMarkerBlockBuffer(void)
{
100062d0:	b580      	push	{r7, lr}
100062d2:	b084      	sub	sp, #16
100062d4:	af00      	add	r7, sp, #0
  uint32_t *array_ptr;
  uint32_t indx;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100062d6:	4b0c      	ldr	r3, [pc, #48]	; (10006308 <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x38>)
100062d8:	685b      	ldr	r3, [r3, #4]
100062da:	60bb      	str	r3, [r7, #8]
  
  array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
100062dc:	68bb      	ldr	r3, [r7, #8]
100062de:	335c      	adds	r3, #92	; 0x5c
100062e0:	607b      	str	r3, [r7, #4]
  for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
100062e2:	2300      	movs	r3, #0
100062e4:	60fb      	str	r3, [r7, #12]
100062e6:	e008      	b.n	100062fa <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x2a>
  {
    array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
100062e8:	68fb      	ldr	r3, [r7, #12]
100062ea:	009b      	lsls	r3, r3, #2
100062ec:	687a      	ldr	r2, [r7, #4]
100062ee:	18d3      	adds	r3, r2, r3
100062f0:	2200      	movs	r2, #0
100062f2:	601a      	str	r2, [r3, #0]
  uint32_t indx;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
  
  array_ptr = (uint32_t*)(void*)data_ptr->read_write_buffer;
  for (indx = 0U ; indx < E_EEPROM_XMC1_FOUR_BYTES; indx++)
100062f4:	68fb      	ldr	r3, [r7, #12]
100062f6:	3301      	adds	r3, #1
100062f8:	60fb      	str	r3, [r7, #12]
100062fa:	68fb      	ldr	r3, [r7, #12]
100062fc:	2b03      	cmp	r3, #3
100062fe:	d9f3      	bls.n	100062e8 <E_EEPROM_XMC1_lSetMarkerBlockBuffer+0x18>
  {
    array_ptr[indx] = E_EEPROM_XMC1_ALL_ZEROS;
  }

}
10006300:	46bd      	mov	sp, r7
10006302:	b004      	add	sp, #16
10006304:	bd80      	pop	{r7, pc}
10006306:	46c0      	nop			; (mov r8, r8)
10006308:	20000610 	.word	0x20000610

1000630c <E_EEPROM_XMC1_lSetMarkerPageBuffer>:
 *                     ----------------------------------------------------------------------
 *                     ----------------------------------------------------------------------
 *                     BLOCK16-  (0xFFFFFFFF)  (0xFFFFFFFF)   (0xFFFFFFFF)   (0xFFFFFFFF)
 */
static void E_EEPROM_XMC1_lSetMarkerPageBuffer(uint32_t state)
{
1000630c:	b580      	push	{r7, lr}
1000630e:	b088      	sub	sp, #32
10006310:	af00      	add	r7, sp, #0
10006312:	6078      	str	r0, [r7, #4]
  uint32_t bit_mask;
  uint32_t word_data;
  uint32_t *array_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006314:	4b1e      	ldr	r3, [pc, #120]	; (10006390 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x84>)
10006316:	685b      	ldr	r3, [r3, #4]
10006318:	60fb      	str	r3, [r7, #12]
  
  array_ptr = (uint32_t*)(void*)data_ptr->page_write_buffer;
1000631a:	68fb      	ldr	r3, [r7, #12]
1000631c:	3370      	adds	r3, #112	; 0x70
1000631e:	613b      	str	r3, [r7, #16]
   * Depending upon the state received check the bit positions where a state marker has to be updated to
   * get the actual state. Fill the first four blocks of the page with the state marker information.
   */

  /* Fill the first rest 4 blocks of the page with marker data  */
  for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
10006320:	2300      	movs	r3, #0
10006322:	61bb      	str	r3, [r7, #24]
10006324:	e01e      	b.n	10006364 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x58>
  {
    if ( (state & (E_EEPROM_XMC1_MARKER_POSITION >> bit_mask )) == 0U )
10006326:	69bb      	ldr	r3, [r7, #24]
10006328:	2280      	movs	r2, #128	; 0x80
1000632a:	40da      	lsrs	r2, r3
1000632c:	1c13      	adds	r3, r2, #0
1000632e:	687a      	ldr	r2, [r7, #4]
10006330:	4013      	ands	r3, r2
10006332:	d102      	bne.n	1000633a <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x2e>
    {
       word_data = E_EEPROM_XMC1_ALL_ZEROS;
10006334:	2300      	movs	r3, #0
10006336:	617b      	str	r3, [r7, #20]
10006338:	e002      	b.n	10006340 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x34>
    }
    else
    {
       word_data = E_EEPROM_XMC1_ALL_ONES;
1000633a:	2301      	movs	r3, #1
1000633c:	425b      	negs	r3, r3
1000633e:	617b      	str	r3, [r7, #20]
    }
    for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
10006340:	2300      	movs	r3, #0
10006342:	61fb      	str	r3, [r7, #28]
10006344:	e008      	b.n	10006358 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x4c>
    {
       *array_ptr = word_data;
10006346:	693b      	ldr	r3, [r7, #16]
10006348:	697a      	ldr	r2, [r7, #20]
1000634a:	601a      	str	r2, [r3, #0]
       array_ptr++;
1000634c:	693b      	ldr	r3, [r7, #16]
1000634e:	3304      	adds	r3, #4
10006350:	613b      	str	r3, [r7, #16]
    }
    else
    {
       word_data = E_EEPROM_XMC1_ALL_ONES;
    }
    for ( indx = 0U; indx< E_EEPROM_XMC1_MAX_WORDS_IN_BLOCK ; indx++ )
10006352:	69fb      	ldr	r3, [r7, #28]
10006354:	3301      	adds	r3, #1
10006356:	61fb      	str	r3, [r7, #28]
10006358:	69fb      	ldr	r3, [r7, #28]
1000635a:	2b03      	cmp	r3, #3
1000635c:	d9f3      	bls.n	10006346 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x3a>
   * Depending upon the state received check the bit positions where a state marker has to be updated to
   * get the actual state. Fill the first four blocks of the page with the state marker information.
   */

  /* Fill the first rest 4 blocks of the page with marker data  */
  for (bit_mask = 0U;bit_mask < E_EEPROM_XMC1_MARKER_MAX_SHIFT;bit_mask++)
1000635e:	69bb      	ldr	r3, [r7, #24]
10006360:	3301      	adds	r3, #1
10006362:	61bb      	str	r3, [r7, #24]
10006364:	69bb      	ldr	r3, [r7, #24]
10006366:	2b03      	cmp	r3, #3
10006368:	d9dd      	bls.n	10006326 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x1a>
       array_ptr++;
    }

  }
  /* Fill the first rest 12 blocks of the page with all ones*/
  for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
1000636a:	2300      	movs	r3, #0
1000636c:	61fb      	str	r3, [r7, #28]
1000636e:	e009      	b.n	10006384 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x78>
  {
    *array_ptr = E_EEPROM_XMC1_ALL_ONES;
10006370:	693b      	ldr	r3, [r7, #16]
10006372:	2201      	movs	r2, #1
10006374:	4252      	negs	r2, r2
10006376:	601a      	str	r2, [r3, #0]
    array_ptr++;
10006378:	693b      	ldr	r3, [r7, #16]
1000637a:	3304      	adds	r3, #4
1000637c:	613b      	str	r3, [r7, #16]
       array_ptr++;
    }

  }
  /* Fill the first rest 12 blocks of the page with all ones*/
  for (indx = 0U;indx < E_EEPROM_XMC1_PAGE1_EXTRA_WORDS;indx++)
1000637e:	69fb      	ldr	r3, [r7, #28]
10006380:	3301      	adds	r3, #1
10006382:	61fb      	str	r3, [r7, #28]
10006384:	69fb      	ldr	r3, [r7, #28]
10006386:	2b2f      	cmp	r3, #47	; 0x2f
10006388:	d9f2      	bls.n	10006370 <E_EEPROM_XMC1_lSetMarkerPageBuffer+0x64>
  {
    *array_ptr = E_EEPROM_XMC1_ALL_ONES;
    array_ptr++;
  }

}
1000638a:	46bd      	mov	sp, r7
1000638c:	b008      	add	sp, #32
1000638e:	bd80      	pop	{r7, pc}
10006390:	20000610 	.word	0x20000610

10006394 <E_EEPROM_XMC1_lEraseBank>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Erases the particular bank
 */
static uint32_t E_EEPROM_XMC1_lEraseBank(uint32_t page_address)
{
10006394:	b580      	push	{r7, lr}
10006396:	b084      	sub	sp, #16
10006398:	af00      	add	r7, sp, #0
1000639a:	6078      	str	r0, [r7, #4]
  uint32_t indx;
  uint32_t status;
  /* Clear all error status flags before flash operation*/
  page_address = ((page_address) - E_EEPROM_XMC1_FLASH_PAGE_SIZE );
1000639c:	687b      	ldr	r3, [r7, #4]
1000639e:	3b01      	subs	r3, #1
100063a0:	3bff      	subs	r3, #255	; 0xff
100063a2:	607b      	str	r3, [r7, #4]
  page_address += 1U;
100063a4:	687b      	ldr	r3, [r7, #4]
100063a6:	3301      	adds	r3, #1
100063a8:	607b      	str	r3, [r7, #4]
  indx = 0U;
100063aa:	2300      	movs	r3, #0
100063ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    /* Clear all error status flags before flash operation*/
    XMC_FLASH_ClearStatus();
100063ae:	f7fa ff01 	bl	100011b4 <XMC_FLASH_ClearStatus>
    
    E_EEPROM_XMC1_lEraseSinglePage(page_address);
100063b2:	687b      	ldr	r3, [r7, #4]
100063b4:	1c18      	adds	r0, r3, #0
100063b6:	f000 fb45 	bl	10006a44 <E_EEPROM_XMC1_lEraseSinglePage>
    
    status = E_EEPROM_XMC1_lGetFlashStatus();
100063ba:	f000 fb4f 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
100063be:	1c03      	adds	r3, r0, #0
100063c0:	60bb      	str	r3, [r7, #8]
    
    page_address = page_address - (E_EEPROM_XMC1_FLASH_PAGE_SIZE );
100063c2:	687b      	ldr	r3, [r7, #4]
100063c4:	3b01      	subs	r3, #1
100063c6:	3bff      	subs	r3, #255	; 0xff
100063c8:	607b      	str	r3, [r7, #4]
    indx++;
100063ca:	68fb      	ldr	r3, [r7, #12]
100063cc:	3301      	adds	r3, #1
100063ce:	60fb      	str	r3, [r7, #12]
  } while ((indx <E_EEPROM_XMC1_BANK_PAGES) && (status == 0U));
100063d0:	68fb      	ldr	r3, [r7, #12]
100063d2:	2b07      	cmp	r3, #7
100063d4:	d802      	bhi.n	100063dc <E_EEPROM_XMC1_lEraseBank+0x48>
100063d6:	68bb      	ldr	r3, [r7, #8]
100063d8:	2b00      	cmp	r3, #0
100063da:	d0e8      	beq.n	100063ae <E_EEPROM_XMC1_lEraseBank+0x1a>
  
  return (status);
100063dc:	68bb      	ldr	r3, [r7, #8]
}
100063de:	1c18      	adds	r0, r3, #0
100063e0:	46bd      	mov	sp, r7
100063e2:	b004      	add	sp, #16
100063e4:	bd80      	pop	{r7, pc}
100063e6:	46c0      	nop			; (mov r8, r8)

100063e8 <E_EEPROM_XMC1_lGCWrite>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Local function to write data into specified location during GC operation
 */
static uint32_t E_EEPROM_XMC1_lGCWrite(uint32_t block_address)
{
100063e8:	b580      	push	{r7, lr}
100063ea:	b084      	sub	sp, #16
100063ec:	af00      	add	r7, sp, #0
100063ee:	6078      	str	r0, [r7, #4]
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100063f0:	4b0a      	ldr	r3, [pc, #40]	; (1000641c <E_EEPROM_XMC1_lGCWrite+0x34>)
100063f2:	685b      	ldr	r3, [r3, #4]
100063f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all error status flags before flash operation*/
  XMC_FLASH_ClearStatus();
100063f6:	f7fa fedd 	bl	100011b4 <XMC_FLASH_ClearStatus>
  
  /* Write a single block into flash*/
  E_EEPROM_XMC1_lWriteSingleBlock(block_address, (uint32_t*)(void*)data_ptr->read_write_buffer);
100063fa:	68fb      	ldr	r3, [r7, #12]
100063fc:	335c      	adds	r3, #92	; 0x5c
100063fe:	687a      	ldr	r2, [r7, #4]
10006400:	1c10      	adds	r0, r2, #0
10006402:	1c19      	adds	r1, r3, #0
10006404:	f000 faf0 	bl	100069e8 <E_EEPROM_XMC1_lWriteSingleBlock>
  status = E_EEPROM_XMC1_lGetFlashStatus();
10006408:	f000 fb28 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
1000640c:	1c03      	adds	r3, r0, #0
1000640e:	60bb      	str	r3, [r7, #8]
  return (status);
10006410:	68bb      	ldr	r3, [r7, #8]
}
10006412:	1c18      	adds	r0, r3, #0
10006414:	46bd      	mov	sp, r7
10006416:	b004      	add	sp, #16
10006418:	bd80      	pop	{r7, pc}
1000641a:	46c0      	nop			; (mov r8, r8)
1000641c:	20000610 	.word	0x20000610

10006420 <E_EEPROM_XMC1_lLocalWrite>:
 * Description     : Common local write function to do write block function or invalidate block.
 */
static uint32_t E_EEPROM_XMC1_lLocalWrite( uint8_t block_number,
                                           uint8_t* data_buffer_ptr,
                                           uint32_t invalidate)
{
10006420:	b580      	push	{r7, lr}
10006422:	b08c      	sub	sp, #48	; 0x30
10006424:	af00      	add	r7, sp, #0
10006426:	60b9      	str	r1, [r7, #8]
10006428:	607a      	str	r2, [r7, #4]
1000642a:	230f      	movs	r3, #15
1000642c:	18fb      	adds	r3, r7, r3
1000642e:	1c02      	adds	r2, r0, #0
10006430:	701a      	strb	r2, [r3, #0]
  uint32_t user_block_index;
  uint32_t remaining_blocks;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_BLOCK_t *block_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006432:	4b3b      	ldr	r3, [pc, #236]	; (10006520 <E_EEPROM_XMC1_lLocalWrite+0x100>)
10006434:	685b      	ldr	r3, [r3, #4]
10006436:	627b      	str	r3, [r7, #36]	; 0x24

  status = 0U;
10006438:	2300      	movs	r3, #0
1000643a:	62fb      	str	r3, [r7, #44]	; 0x2c
  perform_write = 0U;
1000643c:	2300      	movs	r3, #0
1000643e:	62bb      	str	r3, [r7, #40]	; 0x28
  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10006440:	230f      	movs	r3, #15
10006442:	18fb      	adds	r3, r7, r3
10006444:	781b      	ldrb	r3, [r3, #0]
10006446:	1c18      	adds	r0, r3, #0
10006448:	f7ff fdf8 	bl	1000603c <E_EEPROM_XMC1_lGetUsrBlockIndex>
1000644c:	1c03      	adds	r3, r0, #0
1000644e:	623b      	str	r3, [r7, #32]
  block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
10006450:	4b33      	ldr	r3, [pc, #204]	; (10006520 <E_EEPROM_XMC1_lLocalWrite+0x100>)
10006452:	681a      	ldr	r2, [r3, #0]
10006454:	6a3b      	ldr	r3, [r7, #32]
10006456:	00db      	lsls	r3, r3, #3
10006458:	18d3      	adds	r3, r2, r3
1000645a:	61fb      	str	r3, [r7, #28]
  
  flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
1000645c:	69fb      	ldr	r3, [r7, #28]
1000645e:	685b      	ldr	r3, [r3, #4]
10006460:	1c18      	adds	r0, r3, #0
10006462:	f7ff fe1b 	bl	1000609c <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
10006466:	1c03      	adds	r3, r0, #0
10006468:	61bb      	str	r3, [r7, #24]
  remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
1000646a:	f7ff fe35 	bl	100060d8 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>
1000646e:	1c03      	adds	r3, r0, #0
10006470:	617b      	str	r3, [r7, #20]
  
  if (remaining_blocks < flash_blocks)
10006472:	697a      	ldr	r2, [r7, #20]
10006474:	69bb      	ldr	r3, [r7, #24]
10006476:	429a      	cmp	r2, r3
10006478:	d228      	bcs.n	100064cc <E_EEPROM_XMC1_lLocalWrite+0xac>
  {
    /* Doesn't do Garbage collection if, GUI option garbage collection is disabled*/
    if (E_EEPROM_XMC1_HANDLE_PTR->garbage_collection == 1U)
1000647a:	4b29      	ldr	r3, [pc, #164]	; (10006520 <E_EEPROM_XMC1_lLocalWrite+0x100>)
1000647c:	7b1b      	ldrb	r3, [r3, #12]
1000647e:	2b01      	cmp	r3, #1
10006480:	d121      	bne.n	100064c6 <E_EEPROM_XMC1_lLocalWrite+0xa6>
    {
      /* Request for Garbage Collection and continue */
      data_ptr->gc_state = E_EEPROM_XMC1_GC_REQUESTED;
10006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006484:	23ba      	movs	r3, #186	; 0xba
10006486:	005b      	lsls	r3, r3, #1
10006488:	2104      	movs	r1, #4
1000648a:	50d1      	str	r1, [r2, r3]
      E_EEPROM_XMC1_lGarbageCollection();
1000648c:	f7ff f9de 	bl	1000584c <E_EEPROM_XMC1_lGarbageCollection>
      
      /*Check the size of the GC requested block to check if space is available in the new bank or not.*/
      flash_blocks = E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks(block_ptr->size);
10006490:	69fb      	ldr	r3, [r7, #28]
10006492:	685b      	ldr	r3, [r3, #4]
10006494:	1c18      	adds	r0, r3, #0
10006496:	f7ff fe01 	bl	1000609c <E_EEPROM_XMC1_lGetDFLASHPhysicalBlocks>
1000649a:	1c03      	adds	r3, r0, #0
1000649c:	61bb      	str	r3, [r7, #24]
      remaining_blocks = E_EEPROM_XMC1_lGetFreeDFLASHBlocks();
1000649e:	f7ff fe1b 	bl	100060d8 <E_EEPROM_XMC1_lGetFreeDFLASHBlocks>
100064a2:	1c03      	adds	r3, r0, #0
100064a4:	617b      	str	r3, [r7, #20]
      
      /* Check for GC overflows the complete space in the new bank, hence cant write the GC triggered block*/
      if ((remaining_blocks >= flash_blocks)&&(data_ptr->gc_state == E_EEPROM_XMC1_GC_IDLE))
100064a6:	697a      	ldr	r2, [r7, #20]
100064a8:	69bb      	ldr	r3, [r7, #24]
100064aa:	429a      	cmp	r2, r3
100064ac:	d308      	bcc.n	100064c0 <E_EEPROM_XMC1_lLocalWrite+0xa0>
100064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100064b0:	23ba      	movs	r3, #186	; 0xba
100064b2:	005b      	lsls	r3, r3, #1
100064b4:	58d3      	ldr	r3, [r2, r3]
100064b6:	2b0a      	cmp	r3, #10
100064b8:	d102      	bne.n	100064c0 <E_EEPROM_XMC1_lLocalWrite+0xa0>
      {
        perform_write = 1U;
100064ba:	2301      	movs	r3, #1
100064bc:	62bb      	str	r3, [r7, #40]	; 0x28
100064be:	e007      	b.n	100064d0 <E_EEPROM_XMC1_lLocalWrite+0xb0>
      }
      else
      {
        status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_NOT_ALLOWED;
100064c0:	2305      	movs	r3, #5
100064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
100064c4:	e004      	b.n	100064d0 <E_EEPROM_XMC1_lLocalWrite+0xb0>
      }
    }
    else
    {
      status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_MEMORY_BANK_FULL;
100064c6:	2306      	movs	r3, #6
100064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
100064ca:	e001      	b.n	100064d0 <E_EEPROM_XMC1_lLocalWrite+0xb0>
    }
  }
  else
  {
    perform_write = 1U;
100064cc:	2301      	movs	r3, #1
100064ce:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  /* Write operation Starts */
  if (perform_write == 1U)
100064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
100064d2:	2b01      	cmp	r3, #1
100064d4:	d11f      	bne.n	10006516 <E_EEPROM_XMC1_lLocalWrite+0xf6>
  {
    data_ptr->written_block_counter = 0U;
100064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100064d8:	2200      	movs	r2, #0
100064da:	659a      	str	r2, [r3, #88]	; 0x58
    if (invalidate == 1U)
100064dc:	687b      	ldr	r3, [r7, #4]
100064de:	2b01      	cmp	r3, #1
100064e0:	d10a      	bne.n	100064f8 <E_EEPROM_XMC1_lLocalWrite+0xd8>
    {
      status = E_EEPROM_XMC1_lHandleInvalidReq(block_number, user_block_index);
100064e2:	230f      	movs	r3, #15
100064e4:	18fb      	adds	r3, r7, r3
100064e6:	781a      	ldrb	r2, [r3, #0]
100064e8:	6a3b      	ldr	r3, [r7, #32]
100064ea:	1c10      	adds	r0, r2, #0
100064ec:	1c19      	adds	r1, r3, #0
100064ee:	f000 f8c9 	bl	10006684 <E_EEPROM_XMC1_lHandleInvalidReq>
100064f2:	1c03      	adds	r3, r0, #0
100064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
100064f6:	e009      	b.n	1000650c <E_EEPROM_XMC1_lLocalWrite+0xec>
    }
    else
    {
      status = E_EEPROM_XMC1_lHandleWriteReq(block_number, data_buffer_ptr);
100064f8:	230f      	movs	r3, #15
100064fa:	18fb      	adds	r3, r7, r3
100064fc:	781a      	ldrb	r2, [r3, #0]
100064fe:	68bb      	ldr	r3, [r7, #8]
10006500:	1c10      	adds	r0, r2, #0
10006502:	1c19      	adds	r1, r3, #0
10006504:	f000 f80e 	bl	10006524 <E_EEPROM_XMC1_lHandleWriteReq>
10006508:	1c03      	adds	r3, r0, #0
1000650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (status != 0U)
1000650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000650e:	2b00      	cmp	r3, #0
10006510:	d001      	beq.n	10006516 <E_EEPROM_XMC1_lLocalWrite+0xf6>
    {
       status = (uint32_t)E_EEPROM_XMC1_OPERATION_STATUS_FAILURE;
10006512:	2301      	movs	r3, #1
10006514:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  return (status);
10006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
10006518:	1c18      	adds	r0, r3, #0
1000651a:	46bd      	mov	sp, r7
1000651c:	b00c      	add	sp, #48	; 0x30
1000651e:	bd80      	pop	{r7, pc}
10006520:	20000610 	.word	0x20000610

10006524 <E_EEPROM_XMC1_lHandleWriteReq>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Handle function to write one complete data block into flash.
 */
static uint32_t E_EEPROM_XMC1_lHandleWriteReq(uint8_t block_number, uint8_t* data_buffer_ptr)
{
10006524:	b580      	push	{r7, lr}
10006526:	b088      	sub	sp, #32
10006528:	af00      	add	r7, sp, #0
1000652a:	1c02      	adds	r2, r0, #0
1000652c:	6039      	str	r1, [r7, #0]
1000652e:	1dfb      	adds	r3, r7, #7
10006530:	701a      	strb	r2, [r3, #0]
  uint32_t user_block_index;
  uint32_t status;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  E_EEPROM_XMC1_BLOCK_t *block_ptr;
  
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006532:	4b53      	ldr	r3, [pc, #332]	; (10006680 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
10006534:	685b      	ldr	r3, [r3, #4]
10006536:	61bb      	str	r3, [r7, #24]
  

  user_block_index = E_EEPROM_XMC1_lGetUsrBlockIndex(block_number);
10006538:	1dfb      	adds	r3, r7, #7
1000653a:	781b      	ldrb	r3, [r3, #0]
1000653c:	1c18      	adds	r0, r3, #0
1000653e:	f7ff fd7d 	bl	1000603c <E_EEPROM_XMC1_lGetUsrBlockIndex>
10006542:	1c03      	adds	r3, r0, #0
10006544:	617b      	str	r3, [r7, #20]
  block_ptr = E_EEPROM_XMC1_HANDLE_PTR->block_config_ptr + user_block_index;
10006546:	4b4e      	ldr	r3, [pc, #312]	; (10006680 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
10006548:	681a      	ldr	r2, [r3, #0]
1000654a:	697b      	ldr	r3, [r7, #20]
1000654c:	00db      	lsls	r3, r3, #3
1000654e:	18d3      	adds	r3, r2, r3
10006550:	613b      	str	r3, [r7, #16]
  block_size = block_ptr->size;
10006552:	693b      	ldr	r3, [r7, #16]
10006554:	685b      	ldr	r3, [r3, #4]
10006556:	60fb      	str	r3, [r7, #12]
  data_ptr->user_write_bytes_count = 0U;
10006558:	69ba      	ldr	r2, [r7, #24]
1000655a:	23b8      	movs	r3, #184	; 0xb8
1000655c:	005b      	lsls	r3, r3, #1
1000655e:	2100      	movs	r1, #0
10006560:	50d1      	str	r1, [r2, r3]
  data_ptr->user_write_state = E_EEPROM_XMC1_FIRST_BLOCK_WRITE;
10006562:	69ba      	ldr	r2, [r7, #24]
10006564:	23c4      	movs	r3, #196	; 0xc4
10006566:	005b      	lsls	r3, r3, #1
10006568:	2101      	movs	r1, #1
1000656a:	50d1      	str	r1, [r2, r3]
  status = 0U;
1000656c:	2300      	movs	r3, #0
1000656e:	61fb      	str	r3, [r7, #28]
  do
  {
    switch (data_ptr->user_write_state)
10006570:	69ba      	ldr	r2, [r7, #24]
10006572:	23c4      	movs	r3, #196	; 0xc4
10006574:	005b      	lsls	r3, r3, #1
10006576:	58d3      	ldr	r3, [r2, r3]
10006578:	2b02      	cmp	r3, #2
1000657a:	d002      	beq.n	10006582 <E_EEPROM_XMC1_lHandleWriteReq+0x5e>
1000657c:	2b03      	cmp	r3, #3
1000657e:	d012      	beq.n	100065a6 <E_EEPROM_XMC1_lHandleWriteReq+0x82>
10006580:	e04a      	b.n	10006618 <E_EEPROM_XMC1_lHandleWriteReq+0xf4>
    {
      case E_EEPROM_XMC1_NEXT_BLOCK_WRITE:
      status = E_EEPROM_XMC1_lWriteDataBlock();
10006582:	f000 f98f 	bl	100068a4 <E_EEPROM_XMC1_lWriteDataBlock>
10006586:	1c03      	adds	r3, r0, #0
10006588:	61fb      	str	r3, [r7, #28]
      if (status == (uint32_t)0U)
1000658a:	69fb      	ldr	r3, [r7, #28]
1000658c:	2b00      	cmp	r3, #0
1000658e:	d109      	bne.n	100065a4 <E_EEPROM_XMC1_lHandleWriteReq+0x80>
      {
        E_EEPROM_XMC1_lPopulateNextBlock(block_number,data_buffer_ptr,block_size);
10006590:	1dfb      	adds	r3, r7, #7
10006592:	7819      	ldrb	r1, [r3, #0]
10006594:	683a      	ldr	r2, [r7, #0]
10006596:	68fb      	ldr	r3, [r7, #12]
10006598:	1c08      	adds	r0, r1, #0
1000659a:	1c11      	adds	r1, r2, #0
1000659c:	1c1a      	adds	r2, r3, #0
1000659e:	f000 f929 	bl	100067f4 <E_EEPROM_XMC1_lPopulateNextBlock>
      }
      break;
100065a2:	e043      	b.n	1000662c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
100065a4:	e042      	b.n	1000662c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
      
      case E_EEPROM_XMC1_LAST_BLOCK_WRITE:
      status = E_EEPROM_XMC1_lWriteDataBlock();
100065a6:	f000 f97d 	bl	100068a4 <E_EEPROM_XMC1_lWriteDataBlock>
100065aa:	1c03      	adds	r3, r0, #0
100065ac:	61fb      	str	r3, [r7, #28]
      if (status == (uint32_t)0U)
100065ae:	69fb      	ldr	r3, [r7, #28]
100065b0:	2b00      	cmp	r3, #0
100065b2:	d130      	bne.n	10006616 <E_EEPROM_XMC1_lHandleWriteReq+0xf2>
      {
        /* Mark the block as inconsistent */
        data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
100065b4:	69bb      	ldr	r3, [r7, #24]
100065b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
100065b8:	69bb      	ldr	r3, [r7, #24]
100065ba:	697a      	ldr	r2, [r7, #20]
100065bc:	00d2      	lsls	r2, r2, #3
100065be:	50d1      	str	r1, [r2, r3]
        data_ptr->block_info[user_block_index].status.valid = 1U;
100065c0:	69ba      	ldr	r2, [r7, #24]
100065c2:	697b      	ldr	r3, [r7, #20]
100065c4:	00db      	lsls	r3, r3, #3
100065c6:	18d3      	adds	r3, r2, r3
100065c8:	791a      	ldrb	r2, [r3, #4]
100065ca:	2101      	movs	r1, #1
100065cc:	430a      	orrs	r2, r1
100065ce:	711a      	strb	r2, [r3, #4]
        data_ptr->block_info[user_block_index].status.consistent = 1U;
100065d0:	69ba      	ldr	r2, [r7, #24]
100065d2:	697b      	ldr	r3, [r7, #20]
100065d4:	00db      	lsls	r3, r3, #3
100065d6:	18d3      	adds	r3, r2, r3
100065d8:	791a      	ldrb	r2, [r3, #4]
100065da:	2102      	movs	r1, #2
100065dc:	430a      	orrs	r2, r1
100065de:	711a      	strb	r2, [r3, #4]
        if (E_EEPROM_XMC1_HANDLE_PTR->data_block_crc ==1U)
100065e0:	4b27      	ldr	r3, [pc, #156]	; (10006680 <E_EEPROM_XMC1_lHandleWriteReq+0x15c>)
100065e2:	7adb      	ldrb	r3, [r3, #11]
100065e4:	2b01      	cmp	r3, #1
100065e6:	d108      	bne.n	100065fa <E_EEPROM_XMC1_lHandleWriteReq+0xd6>
        {
          /* Updated Cache table Block Header status as CRC enabled block*/
          data_ptr->block_info[user_block_index].status.crc = 1U;
100065e8:	69ba      	ldr	r2, [r7, #24]
100065ea:	697b      	ldr	r3, [r7, #20]
100065ec:	00db      	lsls	r3, r3, #3
100065ee:	18d3      	adds	r3, r2, r3
100065f0:	791a      	ldrb	r2, [r3, #4]
100065f2:	2108      	movs	r1, #8
100065f4:	430a      	orrs	r2, r1
100065f6:	711a      	strb	r2, [r3, #4]
100065f8:	e007      	b.n	1000660a <E_EEPROM_XMC1_lHandleWriteReq+0xe6>
        }
        else
        {
          /* Updated Cache table Block Header status as CRC disabled block*/
          data_ptr->block_info[user_block_index].status.crc = 0U;
100065fa:	69ba      	ldr	r2, [r7, #24]
100065fc:	697b      	ldr	r3, [r7, #20]
100065fe:	00db      	lsls	r3, r3, #3
10006600:	18d3      	adds	r3, r2, r3
10006602:	791a      	ldrb	r2, [r3, #4]
10006604:	2108      	movs	r1, #8
10006606:	438a      	bics	r2, r1
10006608:	711a      	strb	r2, [r3, #4]
        }
        
        data_ptr->user_write_state = E_EEPROM_XMC1_BLOCK_WRITE_IDLE;
1000660a:	69ba      	ldr	r2, [r7, #24]
1000660c:	23c4      	movs	r3, #196	; 0xc4
1000660e:	005b      	lsls	r3, r3, #1
10006610:	2100      	movs	r1, #0
10006612:	50d1      	str	r1, [r2, r3]
      }
      break;
10006614:	e00a      	b.n	1000662c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
10006616:	e009      	b.n	1000662c <E_EEPROM_XMC1_lHandleWriteReq+0x108>
      
      default:
      E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_FIRST_BLOCK_WRITE*/
10006618:	1dfb      	adds	r3, r7, #7
1000661a:	7819      	ldrb	r1, [r3, #0]
1000661c:	683a      	ldr	r2, [r7, #0]
1000661e:	68fb      	ldr	r3, [r7, #12]
10006620:	1c08      	adds	r0, r1, #0
10006622:	1c11      	adds	r1, r2, #0
10006624:	1c1a      	adds	r2, r3, #0
10006626:	f000 f883 	bl	10006730 <E_EEPROM_XMC1_lPopulateFirstBlock>
      break;
1000662a:	46c0      	nop			; (mov r8, r8)
    }
  } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
1000662c:	69fb      	ldr	r3, [r7, #28]
1000662e:	2b00      	cmp	r3, #0
10006630:	d105      	bne.n	1000663e <E_EEPROM_XMC1_lHandleWriteReq+0x11a>
10006632:	69ba      	ldr	r2, [r7, #24]
10006634:	23c4      	movs	r3, #196	; 0xc4
10006636:	005b      	lsls	r3, r3, #1
10006638:	58d3      	ldr	r3, [r2, r3]
1000663a:	2b00      	cmp	r3, #0
1000663c:	d198      	bne.n	10006570 <E_EEPROM_XMC1_lHandleWriteReq+0x4c>
  
  data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
1000663e:	69bb      	ldr	r3, [r7, #24]
10006640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                                   (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
10006642:	69bb      	ldr	r3, [r7, #24]
10006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10006646:	011b      	lsls	r3, r3, #4
      E_EEPROM_XMC1_lPopulateFirstBlock(block_number,data_buffer_ptr,block_size); /* E_EEPROM_XMC1_FIRST_BLOCK_WRITE*/
      break;
    }
  } while ( (status == 0U) && (data_ptr->user_write_state != E_EEPROM_XMC1_BLOCK_WRITE_IDLE) );
  
  data_ptr->next_free_block_addr = (uint32_t)(data_ptr->next_free_block_addr +
10006648:	18d2      	adds	r2, r2, r3
1000664a:	69bb      	ldr	r3, [r7, #24]
1000664c:	64da      	str	r2, [r3, #76]	; 0x4c
                                   (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
  if (status != 0U)
1000664e:	69fb      	ldr	r3, [r7, #28]
10006650:	2b00      	cmp	r3, #0
10006652:	d00f      	beq.n	10006674 <E_EEPROM_XMC1_lHandleWriteReq+0x150>
  {
    data_ptr->block_info[user_block_index].status.valid = 1U;
10006654:	69ba      	ldr	r2, [r7, #24]
10006656:	697b      	ldr	r3, [r7, #20]
10006658:	00db      	lsls	r3, r3, #3
1000665a:	18d3      	adds	r3, r2, r3
1000665c:	791a      	ldrb	r2, [r3, #4]
1000665e:	2101      	movs	r1, #1
10006660:	430a      	orrs	r2, r1
10006662:	711a      	strb	r2, [r3, #4]
    data_ptr->block_info[user_block_index].status.consistent = 0U;
10006664:	69ba      	ldr	r2, [r7, #24]
10006666:	697b      	ldr	r3, [r7, #20]
10006668:	00db      	lsls	r3, r3, #3
1000666a:	18d3      	adds	r3, r2, r3
1000666c:	791a      	ldrb	r2, [r3, #4]
1000666e:	2102      	movs	r1, #2
10006670:	438a      	bics	r2, r1
10006672:	711a      	strb	r2, [r3, #4]
  }
  return (status);
10006674:	69fb      	ldr	r3, [r7, #28]
}
10006676:	1c18      	adds	r0, r3, #0
10006678:	46bd      	mov	sp, r7
1000667a:	b008      	add	sp, #32
1000667c:	bd80      	pop	{r7, pc}
1000667e:	46c0      	nop			; (mov r8, r8)
10006680:	20000610 	.word	0x20000610

10006684 <E_EEPROM_XMC1_lHandleInvalidReq>:
 * Return value    : uint32_t - Flash NVM_STATUS register value
 *
 * Description     : Write one block with all data element as 0xFF to invalidate a block.
 */
static uint32_t E_EEPROM_XMC1_lHandleInvalidReq(uint8_t block_number, uint32_t  user_block_index)
{
10006684:	b580      	push	{r7, lr}
10006686:	b086      	sub	sp, #24
10006688:	af00      	add	r7, sp, #0
1000668a:	1c02      	adds	r2, r0, #0
1000668c:	6039      	str	r1, [r7, #0]
1000668e:	1dfb      	adds	r3, r7, #7
10006690:	701a      	strb	r2, [r3, #0]
  uint32_t status;
  uint32_t data_byte_count;
  uint8_t* read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006692:	4b26      	ldr	r3, [pc, #152]	; (1000672c <E_EEPROM_XMC1_lHandleInvalidReq+0xa8>)
10006694:	685b      	ldr	r3, [r3, #4]
10006696:	613b      	str	r3, [r7, #16]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
10006698:	693b      	ldr	r3, [r7, #16]
1000669a:	335c      	adds	r3, #92	; 0x5c
1000669c:	60fb      	str	r3, [r7, #12]
  *read_write_buffer_ptr = block_number;
1000669e:	68fb      	ldr	r3, [r7, #12]
100066a0:	1dfa      	adds	r2, r7, #7
100066a2:	7812      	ldrb	r2, [r2, #0]
100066a4:	701a      	strb	r2, [r3, #0]
  *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
100066a6:	68fb      	ldr	r3, [r7, #12]
100066a8:	3301      	adds	r3, #1
100066aa:	2280      	movs	r2, #128	; 0x80
100066ac:	701a      	strb	r2, [r3, #0]
  
  
  for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;data_byte_count++)
100066ae:	2302      	movs	r3, #2
100066b0:	617b      	str	r3, [r7, #20]
100066b2:	e007      	b.n	100066c4 <E_EEPROM_XMC1_lHandleInvalidReq+0x40>
  {
    *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
100066b4:	68fa      	ldr	r2, [r7, #12]
100066b6:	697b      	ldr	r3, [r7, #20]
100066b8:	18d3      	adds	r3, r2, r3
100066ba:	22ff      	movs	r2, #255	; 0xff
100066bc:	701a      	strb	r2, [r3, #0]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
  *read_write_buffer_ptr = block_number;
  *(read_write_buffer_ptr + 1U) = (E_EEPROM_XMC1_START_BIT);
  
  
  for (data_byte_count = E_EEPROM_XMC1_TWO_BYTES;data_byte_count < E_EEPROM_XMC1_FLASH_BLOCK_SIZE;data_byte_count++)
100066be:	697b      	ldr	r3, [r7, #20]
100066c0:	3301      	adds	r3, #1
100066c2:	617b      	str	r3, [r7, #20]
100066c4:	697b      	ldr	r3, [r7, #20]
100066c6:	2b0f      	cmp	r3, #15
100066c8:	d9f4      	bls.n	100066b4 <E_EEPROM_XMC1_lHandleInvalidReq+0x30>
  {
    *((uint8_t *)(void *)(read_write_buffer_ptr + data_byte_count)) = E_EEPROM_XMC1_8BIT_ALL_ONE;
  }
  
  status = E_EEPROM_XMC1_lWriteDataBlock();
100066ca:	f000 f8eb 	bl	100068a4 <E_EEPROM_XMC1_lWriteDataBlock>
100066ce:	1c03      	adds	r3, r0, #0
100066d0:	60bb      	str	r3, [r7, #8]
  
  if (status == 0U)
100066d2:	68bb      	ldr	r3, [r7, #8]
100066d4:	2b00      	cmp	r3, #0
100066d6:	d10e      	bne.n	100066f6 <E_EEPROM_XMC1_lHandleInvalidReq+0x72>
  {
    data_ptr->block_info[user_block_index].status.consistent = 1U;
100066d8:	693a      	ldr	r2, [r7, #16]
100066da:	683b      	ldr	r3, [r7, #0]
100066dc:	00db      	lsls	r3, r3, #3
100066de:	18d3      	adds	r3, r2, r3
100066e0:	791a      	ldrb	r2, [r3, #4]
100066e2:	2102      	movs	r1, #2
100066e4:	430a      	orrs	r2, r1
100066e6:	711a      	strb	r2, [r3, #4]
    data_ptr->block_info[user_block_index].address = data_ptr->next_free_block_addr;
100066e8:	693b      	ldr	r3, [r7, #16]
100066ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
100066ec:	693b      	ldr	r3, [r7, #16]
100066ee:	683a      	ldr	r2, [r7, #0]
100066f0:	00d2      	lsls	r2, r2, #3
100066f2:	50d1      	str	r1, [r2, r3]
100066f4:	e007      	b.n	10006706 <E_EEPROM_XMC1_lHandleInvalidReq+0x82>
  }
  else
  {
    data_ptr->block_info[user_block_index].status.consistent = 0U;
100066f6:	693a      	ldr	r2, [r7, #16]
100066f8:	683b      	ldr	r3, [r7, #0]
100066fa:	00db      	lsls	r3, r3, #3
100066fc:	18d3      	adds	r3, r2, r3
100066fe:	791a      	ldrb	r2, [r3, #4]
10006700:	2102      	movs	r1, #2
10006702:	438a      	bics	r2, r1
10006704:	711a      	strb	r2, [r3, #4]
  }
  
  data_ptr->block_info[user_block_index].status.valid = 0U;
10006706:	693a      	ldr	r2, [r7, #16]
10006708:	683b      	ldr	r3, [r7, #0]
1000670a:	00db      	lsls	r3, r3, #3
1000670c:	18d3      	adds	r3, r2, r3
1000670e:	791a      	ldrb	r2, [r3, #4]
10006710:	2101      	movs	r1, #1
10006712:	438a      	bics	r2, r1
10006714:	711a      	strb	r2, [r3, #4]
  data_ptr->next_free_block_addr = (E_EEPROM_XMC1_FLASH_BLOCK_SIZE + (uint32_t)(data_ptr->next_free_block_addr));
10006716:	693b      	ldr	r3, [r7, #16]
10006718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000671a:	3310      	adds	r3, #16
1000671c:	1c1a      	adds	r2, r3, #0
1000671e:	693b      	ldr	r3, [r7, #16]
10006720:	64da      	str	r2, [r3, #76]	; 0x4c
  
  return (status);
10006722:	68bb      	ldr	r3, [r7, #8]
}
10006724:	1c18      	adds	r0, r3, #0
10006726:	46bd      	mov	sp, r7
10006728:	b006      	add	sp, #24
1000672a:	bd80      	pop	{r7, pc}
1000672c:	20000610 	.word	0x20000610

10006730 <E_EEPROM_XMC1_lPopulateFirstBlock>:
 * Description    : Populates the first block with data elements starting from the passed data buffer address.
 */
static void E_EEPROM_XMC1_lPopulateFirstBlock(uint8_t block_number,
                                              uint8_t* user_data_buffer_ptr,
                                              uint32_t block_size)
{
10006730:	b580      	push	{r7, lr}
10006732:	b08a      	sub	sp, #40	; 0x28
10006734:	af00      	add	r7, sp, #0
10006736:	60b9      	str	r1, [r7, #8]
10006738:	607a      	str	r2, [r7, #4]
1000673a:	230f      	movs	r3, #15
1000673c:	18fb      	adds	r3, r7, r3
1000673e:	1c02      	adds	r2, r0, #0
10006740:	701a      	strb	r2, [r3, #0]
  uint32_t crc_buffer;
  uint32_t data_byte_count;
  uint8_t* read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006742:	4b2a      	ldr	r3, [pc, #168]	; (100067ec <E_EEPROM_XMC1_lPopulateFirstBlock+0xbc>)
10006744:	685b      	ldr	r3, [r3, #4]
10006746:	623b      	str	r3, [r7, #32]
  read_write_buffer_ptr = data_ptr->read_write_buffer;
10006748:	6a3b      	ldr	r3, [r7, #32]
1000674a:	335c      	adds	r3, #92	; 0x5c
1000674c:	61fb      	str	r3, [r7, #28]
  data_ptr->user_write_state = E_EEPROM_XMC1_NEXT_BLOCK_WRITE;
1000674e:	6a3a      	ldr	r2, [r7, #32]
10006750:	23c4      	movs	r3, #196	; 0xc4
10006752:	005b      	lsls	r3, r3, #1
10006754:	2102      	movs	r1, #2
10006756:	50d1      	str	r1, [r2, r3]
    /* IF Block CRC is enabled then update the block Header with 16 bit CRC calculated from the data buffer*/
    CRC_SW_CalculateCRC(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr,user_data_buffer_ptr,block_size);
    crc_buffer = CRC_SW_GetCRCResult(E_EEPROM_XMC1_HANDLE_PTR->crc_handle_ptr);
    crc_bit = E_EEPROM_XMC1_CRC_BIT;
  #else
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
10006758:	4b25      	ldr	r3, [pc, #148]	; (100067f0 <E_EEPROM_XMC1_lPopulateFirstBlock+0xc0>)
1000675a:	61bb      	str	r3, [r7, #24]
    crc_bit = 0U;
1000675c:	2300      	movs	r3, #0
1000675e:	617b      	str	r3, [r7, #20]
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
10006760:	230f      	movs	r3, #15
10006762:	18fb      	adds	r3, r7, r3
10006764:	781a      	ldrb	r2, [r3, #0]
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
10006766:	697b      	ldr	r3, [r7, #20]
10006768:	21c0      	movs	r1, #192	; 0xc0
1000676a:	430b      	orrs	r3, r1
1000676c:	021b      	lsls	r3, r3, #8
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
    crc_bit = 0U;
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
1000676e:	431a      	orrs	r2, r3
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
                                                   crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
                                                   (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT));
10006770:	69bb      	ldr	r3, [r7, #24]
10006772:	041b      	lsls	r3, r3, #16
    crc_buffer = E_EEPROM_XMC1_DUMMY_CRC;
    crc_bit = 0U;
  #endif
  
  /* Populate header block with block number, status bits and CRC buffer. Hence 4 bytes shift for data byte Count*/
  *((uint32_t *)(void *)(read_write_buffer_ptr)) = (uint32_t)((block_number) |
10006774:	431a      	orrs	r2, r3
10006776:	69fb      	ldr	r3, [r7, #28]
10006778:	601a      	str	r2, [r3, #0]
                                                   (uint32_t)((E_EEPROM_XMC1_START_BIT | E_EEPROM_XMC1_VALID_BIT |
                                                   crc_bit) << E_EEPROM_XMC1_EIGHT_BIT_POS) |
                                                   (uint32_t)(crc_buffer << E_EEPROM_XMC1_CRC_SHIFT));
  data_byte_count = E_EEPROM_XMC1_FOUR_BYTES;
1000677a:	2304      	movs	r3, #4
1000677c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Add data to the write buffer from the user specified pointer */
  do
  {
    if (data_ptr->user_write_bytes_count < block_size  )
1000677e:	6a3a      	ldr	r2, [r7, #32]
10006780:	23b8      	movs	r3, #184	; 0xb8
10006782:	005b      	lsls	r3, r3, #1
10006784:	58d2      	ldr	r2, [r2, r3]
10006786:	687b      	ldr	r3, [r7, #4]
10006788:	429a      	cmp	r2, r3
1000678a:	d214      	bcs.n	100067b6 <E_EEPROM_XMC1_lPopulateFirstBlock+0x86>
    {
      *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_bytes_count);
1000678c:	69fa      	ldr	r2, [r7, #28]
1000678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006790:	18d3      	adds	r3, r2, r3
10006792:	6a39      	ldr	r1, [r7, #32]
10006794:	22b8      	movs	r2, #184	; 0xb8
10006796:	0052      	lsls	r2, r2, #1
10006798:	588a      	ldr	r2, [r1, r2]
1000679a:	68b9      	ldr	r1, [r7, #8]
1000679c:	188a      	adds	r2, r1, r2
1000679e:	7812      	ldrb	r2, [r2, #0]
100067a0:	701a      	strb	r2, [r3, #0]
       (data_ptr->user_write_bytes_count)++;
100067a2:	6a3a      	ldr	r2, [r7, #32]
100067a4:	23b8      	movs	r3, #184	; 0xb8
100067a6:	005b      	lsls	r3, r3, #1
100067a8:	58d3      	ldr	r3, [r2, r3]
100067aa:	1c59      	adds	r1, r3, #1
100067ac:	6a3a      	ldr	r2, [r7, #32]
100067ae:	23b8      	movs	r3, #184	; 0xb8
100067b0:	005b      	lsls	r3, r3, #1
100067b2:	50d1      	str	r1, [r2, r3]
100067b4:	e004      	b.n	100067c0 <E_EEPROM_XMC1_lPopulateFirstBlock+0x90>
    }
    else
    {
      *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
100067b6:	69fa      	ldr	r2, [r7, #28]
100067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100067ba:	18d3      	adds	r3, r2, r3
100067bc:	22ff      	movs	r2, #255	; 0xff
100067be:	701a      	strb	r2, [r3, #0]
    }
    data_byte_count++;
100067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100067c2:	3301      	adds	r3, #1
100067c4:	627b      	str	r3, [r7, #36]	; 0x24
    
  } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE); /* Check for block size overflow*/
100067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100067c8:	2b10      	cmp	r3, #16
100067ca:	d1d8      	bne.n	1000677e <E_EEPROM_XMC1_lPopulateFirstBlock+0x4e>

  if (data_ptr->user_write_bytes_count >= block_size)
100067cc:	6a3a      	ldr	r2, [r7, #32]
100067ce:	23b8      	movs	r3, #184	; 0xb8
100067d0:	005b      	lsls	r3, r3, #1
100067d2:	58d2      	ldr	r2, [r2, r3]
100067d4:	687b      	ldr	r3, [r7, #4]
100067d6:	429a      	cmp	r2, r3
100067d8:	d304      	bcc.n	100067e4 <E_EEPROM_XMC1_lPopulateFirstBlock+0xb4>
  {
    data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
100067da:	6a3a      	ldr	r2, [r7, #32]
100067dc:	23c4      	movs	r3, #196	; 0xc4
100067de:	005b      	lsls	r3, r3, #1
100067e0:	2103      	movs	r1, #3
100067e2:	50d1      	str	r1, [r2, r3]
  }
}
100067e4:	46bd      	mov	sp, r7
100067e6:	b00a      	add	sp, #40	; 0x28
100067e8:	bd80      	pop	{r7, pc}
100067ea:	46c0      	nop			; (mov r8, r8)
100067ec:	20000610 	.word	0x20000610
100067f0:	a5a50000 	.word	0xa5a50000

100067f4 <E_EEPROM_XMC1_lPopulateNextBlock>:
 * Description    : Populates the successive blocks with data elements starting from the passed data buffer address.
 */
static void E_EEPROM_XMC1_lPopulateNextBlock( uint8_t block_number ,
                                              uint8_t*  const user_data_buffer_ptr ,
                                              uint32_t block_size)
{
100067f4:	b580      	push	{r7, lr}
100067f6:	b088      	sub	sp, #32
100067f8:	af00      	add	r7, sp, #0
100067fa:	60b9      	str	r1, [r7, #8]
100067fc:	607a      	str	r2, [r7, #4]
100067fe:	230f      	movs	r3, #15
10006800:	18fb      	adds	r3, r7, r3
10006802:	1c02      	adds	r2, r0, #0
10006804:	701a      	strb	r2, [r3, #0]
  uint32_t  data_byte_count;
  uint8_t*  read_write_buffer_ptr;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006806:	4b26      	ldr	r3, [pc, #152]	; (100068a0 <E_EEPROM_XMC1_lPopulateNextBlock+0xac>)
10006808:	685b      	ldr	r3, [r3, #4]
1000680a:	61bb      	str	r3, [r7, #24]
  
  read_write_buffer_ptr = data_ptr->read_write_buffer;
1000680c:	69bb      	ldr	r3, [r7, #24]
1000680e:	335c      	adds	r3, #92	; 0x5c
10006810:	617b      	str	r3, [r7, #20]
  *(read_write_buffer_ptr) = block_number;
10006812:	697b      	ldr	r3, [r7, #20]
10006814:	220f      	movs	r2, #15
10006816:	18ba      	adds	r2, r7, r2
10006818:	7812      	ldrb	r2, [r2, #0]
1000681a:	701a      	strb	r2, [r3, #0]
  *(read_write_buffer_ptr + 1U) = E_EEPROM_XMC1_VALID_BIT;
1000681c:	697b      	ldr	r3, [r7, #20]
1000681e:	3301      	adds	r3, #1
10006820:	2240      	movs	r2, #64	; 0x40
10006822:	701a      	strb	r2, [r3, #0]
  data_byte_count = E_EEPROM_XMC1_TWO_BYTES;
10006824:	2302      	movs	r3, #2
10006826:	61fb      	str	r3, [r7, #28]
  
  /* Add data to the write buffer from the user specified pointer */
  do
  {
    if (data_ptr->user_write_bytes_count < block_size )
10006828:	69ba      	ldr	r2, [r7, #24]
1000682a:	23b8      	movs	r3, #184	; 0xb8
1000682c:	005b      	lsls	r3, r3, #1
1000682e:	58d2      	ldr	r2, [r2, r3]
10006830:	687b      	ldr	r3, [r7, #4]
10006832:	429a      	cmp	r2, r3
10006834:	d214      	bcs.n	10006860 <E_EEPROM_XMC1_lPopulateNextBlock+0x6c>
    {
      *(read_write_buffer_ptr + data_byte_count) = *(user_data_buffer_ptr + data_ptr->user_write_bytes_count);
10006836:	697a      	ldr	r2, [r7, #20]
10006838:	69fb      	ldr	r3, [r7, #28]
1000683a:	18d3      	adds	r3, r2, r3
1000683c:	69b9      	ldr	r1, [r7, #24]
1000683e:	22b8      	movs	r2, #184	; 0xb8
10006840:	0052      	lsls	r2, r2, #1
10006842:	588a      	ldr	r2, [r1, r2]
10006844:	68b9      	ldr	r1, [r7, #8]
10006846:	188a      	adds	r2, r1, r2
10006848:	7812      	ldrb	r2, [r2, #0]
1000684a:	701a      	strb	r2, [r3, #0]
      (data_ptr->user_write_bytes_count)++;
1000684c:	69ba      	ldr	r2, [r7, #24]
1000684e:	23b8      	movs	r3, #184	; 0xb8
10006850:	005b      	lsls	r3, r3, #1
10006852:	58d3      	ldr	r3, [r2, r3]
10006854:	1c59      	adds	r1, r3, #1
10006856:	69ba      	ldr	r2, [r7, #24]
10006858:	23b8      	movs	r3, #184	; 0xb8
1000685a:	005b      	lsls	r3, r3, #1
1000685c:	50d1      	str	r1, [r2, r3]
1000685e:	e009      	b.n	10006874 <E_EEPROM_XMC1_lPopulateNextBlock+0x80>
    }
    else
    {
      *(read_write_buffer_ptr + data_byte_count) = E_EEPROM_XMC1_8BIT_ALL_ONE;
10006860:	697a      	ldr	r2, [r7, #20]
10006862:	69fb      	ldr	r3, [r7, #28]
10006864:	18d3      	adds	r3, r2, r3
10006866:	22ff      	movs	r2, #255	; 0xff
10006868:	701a      	strb	r2, [r3, #0]
      data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
1000686a:	69ba      	ldr	r2, [r7, #24]
1000686c:	23c4      	movs	r3, #196	; 0xc4
1000686e:	005b      	lsls	r3, r3, #1
10006870:	2103      	movs	r1, #3
10006872:	50d1      	str	r1, [r2, r3]
    }
    data_byte_count++;
10006874:	69fb      	ldr	r3, [r7, #28]
10006876:	3301      	adds	r3, #1
10006878:	61fb      	str	r3, [r7, #28]

  } while ( data_byte_count != E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
1000687a:	69fb      	ldr	r3, [r7, #28]
1000687c:	2b10      	cmp	r3, #16
1000687e:	d1d3      	bne.n	10006828 <E_EEPROM_XMC1_lPopulateNextBlock+0x34>

  if (data_ptr->user_write_bytes_count >= block_size)
10006880:	69ba      	ldr	r2, [r7, #24]
10006882:	23b8      	movs	r3, #184	; 0xb8
10006884:	005b      	lsls	r3, r3, #1
10006886:	58d2      	ldr	r2, [r2, r3]
10006888:	687b      	ldr	r3, [r7, #4]
1000688a:	429a      	cmp	r2, r3
1000688c:	d304      	bcc.n	10006898 <E_EEPROM_XMC1_lPopulateNextBlock+0xa4>
  {
    data_ptr->user_write_state = E_EEPROM_XMC1_LAST_BLOCK_WRITE;
1000688e:	69ba      	ldr	r2, [r7, #24]
10006890:	23c4      	movs	r3, #196	; 0xc4
10006892:	005b      	lsls	r3, r3, #1
10006894:	2103      	movs	r1, #3
10006896:	50d1      	str	r1, [r2, r3]
  }
}
10006898:	46bd      	mov	sp, r7
1000689a:	b008      	add	sp, #32
1000689c:	bd80      	pop	{r7, pc}
1000689e:	46c0      	nop			; (mov r8, r8)
100068a0:	20000610 	.word	0x20000610

100068a4 <E_EEPROM_XMC1_lWriteDataBlock>:
 * Return value   : uint32_t - NVM_STATUS register value after read operation
 *
 * Description    : Writes single data block into flash
 */
static uint32_t E_EEPROM_XMC1_lWriteDataBlock(void)
{
100068a4:	b580      	push	{r7, lr}
100068a6:	b084      	sub	sp, #16
100068a8:	af00      	add	r7, sp, #0
  uint32_t status;
  uint32_t src_addr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
100068aa:	4b10      	ldr	r3, [pc, #64]	; (100068ec <E_EEPROM_XMC1_lWriteDataBlock+0x48>)
100068ac:	685b      	ldr	r3, [r3, #4]
100068ae:	60fb      	str	r3, [r7, #12]
  
  src_addr = (uint32_t)(data_ptr->next_free_block_addr +
100068b0:	68fb      	ldr	r3, [r7, #12]
100068b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
             (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
100068b4:	68fb      	ldr	r3, [r7, #12]
100068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100068b8:	011b      	lsls	r3, r3, #4
  uint32_t src_addr;
  E_EEPROM_XMC1_DATA_t *data_ptr;

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
  
  src_addr = (uint32_t)(data_ptr->next_free_block_addr +
100068ba:	18d3      	adds	r3, r2, r3
100068bc:	60bb      	str	r3, [r7, #8]
             (data_ptr->written_block_counter * E_EEPROM_XMC1_FLASH_BLOCK_SIZE));
  (data_ptr->written_block_counter)++;
100068be:	68fb      	ldr	r3, [r7, #12]
100068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100068c2:	1c5a      	adds	r2, r3, #1
100068c4:	68fb      	ldr	r3, [r7, #12]
100068c6:	659a      	str	r2, [r3, #88]	; 0x58

  XMC_FLASH_ClearStatus();
100068c8:	f7fa fc74 	bl	100011b4 <XMC_FLASH_ClearStatus>
  E_EEPROM_XMC1_lWriteSingleBlock(src_addr, (uint32_t*)(void*)data_ptr->read_write_buffer);
100068cc:	68fb      	ldr	r3, [r7, #12]
100068ce:	335c      	adds	r3, #92	; 0x5c
100068d0:	68ba      	ldr	r2, [r7, #8]
100068d2:	1c10      	adds	r0, r2, #0
100068d4:	1c19      	adds	r1, r3, #0
100068d6:	f000 f887 	bl	100069e8 <E_EEPROM_XMC1_lWriteSingleBlock>
  status = E_EEPROM_XMC1_lGetFlashStatus();
100068da:	f000 f8bf 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
100068de:	1c03      	adds	r3, r0, #0
100068e0:	607b      	str	r3, [r7, #4]
  
  return (status);
100068e2:	687b      	ldr	r3, [r7, #4]
}
100068e4:	1c18      	adds	r0, r3, #0
100068e6:	46bd      	mov	sp, r7
100068e8:	b004      	add	sp, #16
100068ea:	bd80      	pop	{r7, pc}
100068ec:	20000610 	.word	0x20000610

100068f0 <E_EEPROM_XMC1_lReadBlockContents>:
 *
 * Description     : Read data bytes starting from specified address (data_buffer_ptr + offset).
 *                   Read number of bytes as specified in the length parameter.
 */
static uint32_t E_EEPROM_XMC1_lReadBlockContents(uint8_t *const data_buffer_ptr, uint32_t length, uint32_t offset)
{
100068f0:	b580      	push	{r7, lr}
100068f2:	b08c      	sub	sp, #48	; 0x30
100068f4:	af00      	add	r7, sp, #0
100068f6:	60f8      	str	r0, [r7, #12]
100068f8:	60b9      	str	r1, [r7, #8]
100068fa:	607a      	str	r2, [r7, #4]
  uint32_t flash_address;
  uint32_t block_start_address;
  E_EEPROM_XMC1_DATA_t *data_ptr;
  uint32_t remaining_bytes_in_curr_block;
  
  indx = 0U;
100068fc:	2300      	movs	r3, #0
100068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  status = 0U;
10006900:	2300      	movs	r3, #0
10006902:	623b      	str	r3, [r7, #32]
  block_count = 0U;
10006904:	2300      	movs	r3, #0
10006906:	62bb      	str	r3, [r7, #40]	; 0x28

  data_ptr = (E_EEPROM_XMC1_DATA_t*)(void*)(E_EEPROM_XMC1_HANDLE_PTR->data_ptr);
10006908:	4b36      	ldr	r3, [pc, #216]	; (100069e4 <E_EEPROM_XMC1_lReadBlockContents+0xf4>)
1000690a:	685b      	ldr	r3, [r3, #4]
1000690c:	61fb      	str	r3, [r7, #28]
  block_start_address = data_ptr->read_start_address;
1000690e:	69fa      	ldr	r2, [r7, #28]
10006910:	23c6      	movs	r3, #198	; 0xc6
10006912:	005b      	lsls	r3, r3, #1
10006914:	58d3      	ldr	r3, [r2, r3]
10006916:	61bb      	str	r3, [r7, #24]
  
  if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first data block.  */
10006918:	687b      	ldr	r3, [r7, #4]
1000691a:	2b0b      	cmp	r3, #11
1000691c:	d913      	bls.n	10006946 <E_EEPROM_XMC1_lReadBlockContents+0x56>
  {
    block_count++;                        /* If not then increment block counter*/
1000691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006920:	3301      	adds	r3, #1
10006922:	62bb      	str	r3, [r7, #40]	; 0x28
    offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12 bytes)*/
10006924:	687b      	ldr	r3, [r7, #4]
10006926:	3b0c      	subs	r3, #12
10006928:	607b      	str	r3, [r7, #4]
    while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fit inside  */
1000692a:	e005      	b.n	10006938 <E_EEPROM_XMC1_lReadBlockContents+0x48>
    {
      block_count++;                        /* If not then increment block counter*/
1000692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000692e:	3301      	adds	r3, #1
10006930:	62bb      	str	r3, [r7, #40]	; 0x28
      offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14 bytes)*/
10006932:	687b      	ldr	r3, [r7, #4]
10006934:	3b0e      	subs	r3, #14
10006936:	607b      	str	r3, [r7, #4]
  
  if (offset >= E_EEPROM_XMC1_BLOCK1_DATA_SIZE)  /* Check if the offset does'nt fit in the first data block.  */
  {
    block_count++;                        /* If not then increment block counter*/
    offset = offset - E_EEPROM_XMC1_BLOCK1_DATA_SIZE;  /* subtract the data size of first block (12 bytes)*/
    while (offset >= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)   /* Check the exact block where the offset fit inside  */
10006938:	687b      	ldr	r3, [r7, #4]
1000693a:	2b0d      	cmp	r3, #13
1000693c:	d8f6      	bhi.n	1000692c <E_EEPROM_XMC1_lReadBlockContents+0x3c>
    {
      block_count++;                        /* If not then increment block counter*/
      offset = offset - E_EEPROM_XMC1_BLOCK2_DATA_SIZE; /* subtract the data size of next block (14 bytes)*/
    }
    offset += E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;
1000693e:	687b      	ldr	r3, [r7, #4]
10006940:	3302      	adds	r3, #2
10006942:	607b      	str	r3, [r7, #4]
10006944:	e002      	b.n	1000694c <E_EEPROM_XMC1_lReadBlockContents+0x5c>
  }
  else
  {
    offset += E_EEPROM_XMC1_BLOCK1_DATA_OFFSET;
10006946:	687b      	ldr	r3, [r7, #4]
10006948:	3304      	adds	r3, #4
1000694a:	607b      	str	r3, [r7, #4]
  }
  /* Remaining bytes in the block where Read offset is pointing*/
  remaining_bytes_in_curr_block = E_EEPROM_XMC1_FLASH_BLOCK_SIZE - offset;
1000694c:	687b      	ldr	r3, [r7, #4]
1000694e:	2210      	movs	r2, #16
10006950:	1ad3      	subs	r3, r2, r3
10006952:	627b      	str	r3, [r7, #36]	; 0x24
  
  do
  {
    /* Calculate the Flash address of the block to be read*/
    flash_address = block_start_address + ((uint32_t)block_count * E_EEPROM_XMC1_FLASH_BLOCK_SIZE);
10006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006956:	011a      	lsls	r2, r3, #4
10006958:	69bb      	ldr	r3, [r7, #24]
1000695a:	18d3      	adds	r3, r2, r3
1000695c:	617b      	str	r3, [r7, #20]

    XMC_FLASH_ClearStatus();
1000695e:	f7fa fc29 	bl	100011b4 <XMC_FLASH_ClearStatus>
    E_EEPROM_XMC1_lReadSingleBlock(flash_address,(uint32_t*)(void*)data_ptr->read_write_buffer);
10006962:	69fb      	ldr	r3, [r7, #28]
10006964:	335c      	adds	r3, #92	; 0x5c
10006966:	697a      	ldr	r2, [r7, #20]
10006968:	1c10      	adds	r0, r2, #0
1000696a:	1c19      	adds	r1, r3, #0
1000696c:	f000 f84c 	bl	10006a08 <E_EEPROM_XMC1_lReadSingleBlock>
    status = E_EEPROM_XMC1_lGetFlashStatus();
10006970:	f000 f874 	bl	10006a5c <E_EEPROM_XMC1_lGetFlashStatus>
10006974:	1c03      	adds	r3, r0, #0
10006976:	623b      	str	r3, [r7, #32]
    
    if (status != 0U)
10006978:	6a3b      	ldr	r3, [r7, #32]
1000697a:	2b00      	cmp	r3, #0
1000697c:	d000      	beq.n	10006980 <E_EEPROM_XMC1_lReadBlockContents+0x90>
    {
      break;
1000697e:	e02b      	b.n	100069d8 <E_EEPROM_XMC1_lReadBlockContents+0xe8>
    }
    /* Extract the data read from flash byte by byte and load into the user buffer*/
    do{
      
      *(data_buffer_ptr + indx) = *(data_ptr->read_write_buffer + offset);
10006980:	68fa      	ldr	r2, [r7, #12]
10006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006984:	18d3      	adds	r3, r2, r3
10006986:	69f9      	ldr	r1, [r7, #28]
10006988:	2058      	movs	r0, #88	; 0x58
1000698a:	687a      	ldr	r2, [r7, #4]
1000698c:	188a      	adds	r2, r1, r2
1000698e:	1812      	adds	r2, r2, r0
10006990:	7912      	ldrb	r2, [r2, #4]
10006992:	701a      	strb	r2, [r3, #0]
      indx++;
10006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006996:	3301      	adds	r3, #1
10006998:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset++;
1000699a:	687b      	ldr	r3, [r7, #4]
1000699c:	3301      	adds	r3, #1
1000699e:	607b      	str	r3, [r7, #4]
      length--;
100069a0:	68bb      	ldr	r3, [r7, #8]
100069a2:	3b01      	subs	r3, #1
100069a4:	60bb      	str	r3, [r7, #8]
      remaining_bytes_in_curr_block--;
100069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100069a8:	3b01      	subs	r3, #1
100069aa:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* check any of the length parameters reaches 0 */
    } while ( (remaining_bytes_in_curr_block) && (length) );
100069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100069ae:	2b00      	cmp	r3, #0
100069b0:	d002      	beq.n	100069b8 <E_EEPROM_XMC1_lReadBlockContents+0xc8>
100069b2:	68bb      	ldr	r3, [r7, #8]
100069b4:	2b00      	cmp	r3, #0
100069b6:	d1e3      	bne.n	10006980 <E_EEPROM_XMC1_lReadBlockContents+0x90>
    
    /* Check if the length of bytes pending to be read is within the range of available bytes in the block */
    if (length <= E_EEPROM_XMC1_BLOCK2_DATA_SIZE)
100069b8:	68bb      	ldr	r3, [r7, #8]
100069ba:	2b0e      	cmp	r3, #14
100069bc:	d802      	bhi.n	100069c4 <E_EEPROM_XMC1_lReadBlockContents+0xd4>
    {
      /* Force remaining bytes in current block to length remaining */
      remaining_bytes_in_curr_block = length;
100069be:	68bb      	ldr	r3, [r7, #8]
100069c0:	627b      	str	r3, [r7, #36]	; 0x24
100069c2:	e001      	b.n	100069c8 <E_EEPROM_XMC1_lReadBlockContents+0xd8>
    }
    else
    {
      /* Force remaining bytes to next block size(14)*/
      remaining_bytes_in_curr_block = E_EEPROM_XMC1_BLOCK2_DATA_SIZE;
100069c4:	230e      	movs	r3, #14
100069c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    offset = E_EEPROM_XMC1_BLOCK2_DATA_OFFSET;     /* Shift offset by 2 counts to avoid next block header */
100069c8:	2302      	movs	r3, #2
100069ca:	607b      	str	r3, [r7, #4]
    block_count++;                        /* Increment the block count to read next block */
100069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100069ce:	3301      	adds	r3, #1
100069d0:	62bb      	str	r3, [r7, #40]	; 0x28
    
  } while (length != 0U);
100069d2:	68bb      	ldr	r3, [r7, #8]
100069d4:	2b00      	cmp	r3, #0
100069d6:	d1bd      	bne.n	10006954 <E_EEPROM_XMC1_lReadBlockContents+0x64>
  
  return (status);
100069d8:	6a3b      	ldr	r3, [r7, #32]
}
100069da:	1c18      	adds	r0, r3, #0
100069dc:	46bd      	mov	sp, r7
100069de:	b00c      	add	sp, #48	; 0x30
100069e0:	bd80      	pop	{r7, pc}
100069e2:	46c0      	nop			; (mov r8, r8)
100069e4:	20000610 	.word	0x20000610

100069e8 <E_EEPROM_XMC1_lWriteSingleBlock>:
 * Return value    : void
 *
 * Description     : Performs single flash block(16 bytes) write operation
 */
static void E_EEPROM_XMC1_lWriteSingleBlock(uint32_t const address, const uint32_t *const data)
{
100069e8:	b580      	push	{r7, lr}
100069ea:	b082      	sub	sp, #8
100069ec:	af00      	add	r7, sp, #0
100069ee:	6078      	str	r0, [r7, #4]
100069f0:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_WriteSingleBlock(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_WriteBlocks( (uint32_t*)address, (uint32_t*)data , 1U , 1U);
100069f2:	687a      	ldr	r2, [r7, #4]
100069f4:	683b      	ldr	r3, [r7, #0]
100069f6:	1c10      	adds	r0, r2, #0
100069f8:	1c19      	adds	r1, r3, #0
100069fa:	2201      	movs	r2, #1
100069fc:	2301      	movs	r3, #1
100069fe:	f7fa fc03 	bl	10001208 <XMC_FLASH_WriteBlocks>
  }
}
10006a02:	46bd      	mov	sp, r7
10006a04:	b002      	add	sp, #8
10006a06:	bd80      	pop	{r7, pc}

10006a08 <E_EEPROM_XMC1_lReadSingleBlock>:
 * Return value    : void
 *
 * Description     : Performs single flash block(16 bytes) read operation
 */
static void E_EEPROM_XMC1_lReadSingleBlock(uint32_t const address, uint32_t *const data)
{
10006a08:	b580      	push	{r7, lr}
10006a0a:	b082      	sub	sp, #8
10006a0c:	af00      	add	r7, sp, #0
10006a0e:	6078      	str	r0, [r7, #4]
10006a10:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_ReadSingleBlock(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_ReadBlocks( (uint32_t*)address , (uint32_t*)data , 1U);
10006a12:	687a      	ldr	r2, [r7, #4]
10006a14:	683b      	ldr	r3, [r7, #0]
10006a16:	1c10      	adds	r0, r2, #0
10006a18:	1c19      	adds	r1, r3, #0
10006a1a:	2201      	movs	r2, #1
10006a1c:	f7fa fc74 	bl	10001308 <XMC_FLASH_ReadBlocks>
  }
}
10006a20:	46bd      	mov	sp, r7
10006a22:	b002      	add	sp, #8
10006a24:	bd80      	pop	{r7, pc}
10006a26:	46c0      	nop			; (mov r8, r8)

10006a28 <E_EEPROM_XMC1_lWriteSinglePage>:
 * Return value    : void
 *
 * Description     : Performs single flash page(256 bytes) write operation
 */
static void E_EEPROM_XMC1_lWriteSinglePage(uint32_t const address, const uint32_t *const data)
{
10006a28:	b580      	push	{r7, lr}
10006a2a:	b082      	sub	sp, #8
10006a2c:	af00      	add	r7, sp, #0
10006a2e:	6078      	str	r0, [r7, #4]
10006a30:	6039      	str	r1, [r7, #0]
    E_EEPROM_XMC1_TEST_HOOK_WriteSinglePage(address,data);
  }
  else
  #endif
  {
    XMC_FLASH_ProgramPage( (uint32_t*)address , (uint32_t*)data);
10006a32:	687a      	ldr	r2, [r7, #4]
10006a34:	683b      	ldr	r3, [r7, #0]
10006a36:	1c10      	adds	r0, r2, #0
10006a38:	1c19      	adds	r1, r3, #0
10006a3a:	f7fa fc8b 	bl	10001354 <XMC_FLASH_ProgramPage>
  }
}
10006a3e:	46bd      	mov	sp, r7
10006a40:	b002      	add	sp, #8
10006a42:	bd80      	pop	{r7, pc}

10006a44 <E_EEPROM_XMC1_lEraseSinglePage>:
 * Return value    : void
 *
 * Description     : Erases single flash page(256 bytes)
 */
static void E_EEPROM_XMC1_lEraseSinglePage(uint32_t const address)
{
10006a44:	b580      	push	{r7, lr}
10006a46:	b082      	sub	sp, #8
10006a48:	af00      	add	r7, sp, #0
10006a4a:	6078      	str	r0, [r7, #4]
    E_EEPROM_XMC1_TEST_HOOK_EraseSinglePage(address);
  }
  else
  #endif
  {
    XMC_FLASH_ErasePages( (uint32_t*)address , 1U);
10006a4c:	687b      	ldr	r3, [r7, #4]
10006a4e:	1c18      	adds	r0, r3, #0
10006a50:	2101      	movs	r1, #1
10006a52:	f7fa fc37 	bl	100012c4 <XMC_FLASH_ErasePages>
  }
}
10006a56:	46bd      	mov	sp, r7
10006a58:	b002      	add	sp, #8
10006a5a:	bd80      	pop	{r7, pc}

10006a5c <E_EEPROM_XMC1_lGetFlashStatus>:
 * Return value    : uint32_t  - Flash NVM_STATUS register value
 *
 * Description     : Reads the flash status from hardware to check whether any error exist or not.
 */
static uint32_t E_EEPROM_XMC1_lGetFlashStatus(void)
{
10006a5c:	b580      	push	{r7, lr}
10006a5e:	b082      	sub	sp, #8
10006a60:	af00      	add	r7, sp, #0
    status = E_EEPROM_XMC1_TEST_HOOK_GetFlashStatus();
  }
  else
  #endif
  {
    status = XMC_FLASH_GetStatus();
10006a62:	f7fa fbb7 	bl	100011d4 <XMC_FLASH_GetStatus>
10006a66:	1c03      	adds	r3, r0, #0
10006a68:	607b      	str	r3, [r7, #4]
  }
  return (status);
10006a6a:	687b      	ldr	r3, [r7, #4]
}
10006a6c:	1c18      	adds	r0, r3, #0
10006a6e:	46bd      	mov	sp, r7
10006a70:	b002      	add	sp, #8
10006a72:	bd80      	pop	{r7, pc}

10006a74 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10006a74:	b580      	push	{r7, lr}
10006a76:	b082      	sub	sp, #8
10006a78:	af00      	add	r7, sp, #0
10006a7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10006a7c:	687b      	ldr	r3, [r7, #4]
10006a7e:	6819      	ldr	r1, [r3, #0]
10006a80:	687b      	ldr	r3, [r7, #4]
10006a82:	7b1a      	ldrb	r2, [r3, #12]
10006a84:	687b      	ldr	r3, [r7, #4]
10006a86:	3304      	adds	r3, #4
10006a88:	1c08      	adds	r0, r1, #0
10006a8a:	1c11      	adds	r1, r2, #0
10006a8c:	1c1a      	adds	r2, r3, #0
10006a8e:	f7fa fc6f 	bl	10001370 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10006a92:	687b      	ldr	r3, [r7, #4]
10006a94:	6819      	ldr	r1, [r3, #0]
10006a96:	687b      	ldr	r3, [r7, #4]
10006a98:	7b1a      	ldrb	r2, [r3, #12]
10006a9a:	687b      	ldr	r3, [r7, #4]
10006a9c:	7b5b      	ldrb	r3, [r3, #13]
10006a9e:	1c08      	adds	r0, r1, #0
10006aa0:	1c11      	adds	r1, r2, #0
10006aa2:	1c1a      	adds	r2, r3, #0
10006aa4:	f7fb f984 	bl	10001db0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10006aa8:	2300      	movs	r3, #0
}
10006aaa:	1c18      	adds	r0, r3, #0
10006aac:	46bd      	mov	sp, r7
10006aae:	b002      	add	sp, #8
10006ab0:	bd80      	pop	{r7, pc}
10006ab2:	46c0      	nop			; (mov r8, r8)

10006ab4 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10006ab4:	b580      	push	{r7, lr}
10006ab6:	af00      	add	r7, sp, #0

}
10006ab8:	46bd      	mov	sp, r7
10006aba:	bd80      	pop	{r7, pc}

10006abc <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
10006abc:	b580      	push	{r7, lr}
10006abe:	b084      	sub	sp, #16
10006ac0:	af00      	add	r7, sp, #0
10006ac2:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10006ac4:	230f      	movs	r3, #15
10006ac6:	18fb      	adds	r3, r7, r3
10006ac8:	2200      	movs	r2, #0
10006aca:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10006acc:	230e      	movs	r3, #14
10006ace:	18fb      	adds	r3, r7, r3
10006ad0:	2200      	movs	r2, #0
10006ad2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
10006ad4:	230d      	movs	r3, #13
10006ad6:	18fb      	adds	r3, r7, r3
10006ad8:	2200      	movs	r2, #0
10006ada:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
10006adc:	230c      	movs	r3, #12
10006ade:	18fb      	adds	r3, r7, r3
10006ae0:	2200      	movs	r2, #0
10006ae2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
10006ae4:	230b      	movs	r3, #11
10006ae6:	18fb      	adds	r3, r7, r3
10006ae8:	2200      	movs	r2, #0
10006aea:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
10006aec:	687b      	ldr	r3, [r7, #4]
10006aee:	781b      	ldrb	r3, [r3, #0]
10006af0:	2201      	movs	r2, #1
10006af2:	4053      	eors	r3, r2
10006af4:	b2db      	uxtb	r3, r3
10006af6:	2b00      	cmp	r3, #0
10006af8:	d01b      	beq.n	10006b32 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
10006afa:	230e      	movs	r3, #14
10006afc:	18fa      	adds	r2, r7, r3
10006afe:	230d      	movs	r3, #13
10006b00:	18fb      	adds	r3, r7, r3
10006b02:	7812      	ldrb	r2, [r2, #0]
10006b04:	781b      	ldrb	r3, [r3, #0]
10006b06:	4313      	orrs	r3, r2
10006b08:	b2da      	uxtb	r2, r3
10006b0a:	230c      	movs	r3, #12
10006b0c:	18fb      	adds	r3, r7, r3
10006b0e:	781b      	ldrb	r3, [r3, #0]
10006b10:	4313      	orrs	r3, r2
10006b12:	b2d9      	uxtb	r1, r3
10006b14:	230f      	movs	r3, #15
10006b16:	18fb      	adds	r3, r7, r3
10006b18:	220b      	movs	r2, #11
10006b1a:	18ba      	adds	r2, r7, r2
10006b1c:	7812      	ldrb	r2, [r2, #0]
10006b1e:	430a      	orrs	r2, r1
10006b20:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10006b22:	230f      	movs	r3, #15
10006b24:	18fb      	adds	r3, r7, r3
10006b26:	781b      	ldrb	r3, [r3, #0]
10006b28:	2b00      	cmp	r3, #0
10006b2a:	d102      	bne.n	10006b32 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
10006b2c:	687b      	ldr	r3, [r7, #4]
10006b2e:	2201      	movs	r2, #1
10006b30:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10006b32:	230f      	movs	r3, #15
10006b34:	18fb      	adds	r3, r7, r3
10006b36:	781b      	ldrb	r3, [r3, #0]
}
10006b38:	1c18      	adds	r0, r3, #0
10006b3a:	46bd      	mov	sp, r7
10006b3c:	b004      	add	sp, #16
10006b3e:	bd80      	pop	{r7, pc}

10006b40 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10006b40:	b590      	push	{r4, r7, lr}
10006b42:	b085      	sub	sp, #20
10006b44:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10006b46:	1c3b      	adds	r3, r7, #0
10006b48:	4a05      	ldr	r2, [pc, #20]	; (10006b60 <SystemCoreClockSetup+0x20>)
10006b4a:	ca13      	ldmia	r2!, {r0, r1, r4}
10006b4c:	c313      	stmia	r3!, {r0, r1, r4}
10006b4e:	6812      	ldr	r2, [r2, #0]
10006b50:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10006b52:	1c3b      	adds	r3, r7, #0
10006b54:	1c18      	adds	r0, r3, #0
10006b56:	f7fa fd49 	bl	100015ec <XMC_SCU_CLOCK_Init>
}
10006b5a:	46bd      	mov	sp, r7
10006b5c:	b005      	add	sp, #20
10006b5e:	bd90      	pop	{r4, r7, pc}
10006b60:	1000c41c 	.word	0x1000c41c

10006b64 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10006b64:	b590      	push	{r4, r7, lr}
10006b66:	b083      	sub	sp, #12
10006b68:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10006b6a:	1dfb      	adds	r3, r7, #7
10006b6c:	2200      	movs	r2, #0
10006b6e:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10006b70:	1dfc      	adds	r4, r7, #7
10006b72:	4b6e      	ldr	r3, [pc, #440]	; (10006d2c <DAVE_Init+0x1c8>)
10006b74:	1c18      	adds	r0, r3, #0
10006b76:	f7ff ffa1 	bl	10006abc <CLOCK_XMC1_Init>
10006b7a:	1c03      	adds	r3, r0, #0
10006b7c:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10006b7e:	1dfb      	adds	r3, r7, #7
10006b80:	781b      	ldrb	r3, [r3, #0]
10006b82:	2b00      	cmp	r3, #0
10006b84:	d106      	bne.n	10006b94 <DAVE_Init+0x30>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
10006b86:	1dfc      	adds	r4, r7, #7
10006b88:	4b69      	ldr	r3, [pc, #420]	; (10006d30 <DAVE_Init+0x1cc>)
10006b8a:	1c18      	adds	r0, r3, #0
10006b8c:	f7fb ffea 	bl	10002b64 <UART_Init>
10006b90:	1c03      	adds	r3, r0, #0
10006b92:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006b94:	1dfb      	adds	r3, r7, #7
10006b96:	781b      	ldrb	r3, [r3, #0]
10006b98:	2b00      	cmp	r3, #0
10006b9a:	d106      	bne.n	10006baa <DAVE_Init+0x46>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
10006b9c:	1dfc      	adds	r4, r7, #7
10006b9e:	4b65      	ldr	r3, [pc, #404]	; (10006d34 <DAVE_Init+0x1d0>)
10006ba0:	1c18      	adds	r0, r3, #0
10006ba2:	f7ff ff67 	bl	10006a74 <DIGITAL_IO_Init>
10006ba6:	1c03      	adds	r3, r0, #0
10006ba8:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006baa:	1dfb      	adds	r3, r7, #7
10006bac:	781b      	ldrb	r3, [r3, #0]
10006bae:	2b00      	cmp	r3, #0
10006bb0:	d106      	bne.n	10006bc0 <DAVE_Init+0x5c>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED2); 
10006bb2:	1dfc      	adds	r4, r7, #7
10006bb4:	4b60      	ldr	r3, [pc, #384]	; (10006d38 <DAVE_Init+0x1d4>)
10006bb6:	1c18      	adds	r0, r3, #0
10006bb8:	f7ff ff5c 	bl	10006a74 <DIGITAL_IO_Init>
10006bbc:	1c03      	adds	r3, r0, #0
10006bbe:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006bc0:	1dfb      	adds	r3, r7, #7
10006bc2:	781b      	ldrb	r3, [r3, #0]
10006bc4:	2b00      	cmp	r3, #0
10006bc6:	d106      	bne.n	10006bd6 <DAVE_Init+0x72>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
10006bc8:	1dfc      	adds	r4, r7, #7
10006bca:	4b5c      	ldr	r3, [pc, #368]	; (10006d3c <DAVE_Init+0x1d8>)
10006bcc:	1c18      	adds	r0, r3, #0
10006bce:	f7fd f823 	bl	10003c18 <I2C_MASTER_Init>
10006bd2:	1c03      	adds	r3, r0, #0
10006bd4:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006bd6:	1dfb      	adds	r3, r7, #7
10006bd8:	781b      	ldrb	r3, [r3, #0]
10006bda:	2b00      	cmp	r3, #0
10006bdc:	d106      	bne.n	10006bec <DAVE_Init+0x88>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
10006bde:	1dfc      	adds	r4, r7, #7
10006be0:	4b57      	ldr	r3, [pc, #348]	; (10006d40 <DAVE_Init+0x1dc>)
10006be2:	1c18      	adds	r0, r3, #0
10006be4:	f7fb fe80 	bl	100028e8 <WATCHDOG_Init>
10006be8:	1c03      	adds	r3, r0, #0
10006bea:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006bec:	1dfb      	adds	r3, r7, #7
10006bee:	781b      	ldrb	r3, [r3, #0]
10006bf0:	2b00      	cmp	r3, #0
10006bf2:	d106      	bne.n	10006c02 <DAVE_Init+0x9e>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
10006bf4:	1dfc      	adds	r4, r7, #7
10006bf6:	4b53      	ldr	r3, [pc, #332]	; (10006d44 <DAVE_Init+0x1e0>)
10006bf8:	1c18      	adds	r0, r3, #0
10006bfa:	f7fc fde9 	bl	100037d0 <INTERRUPT_Init>
10006bfe:	1c03      	adds	r3, r0, #0
10006c00:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c02:	1dfb      	adds	r3, r7, #7
10006c04:	781b      	ldrb	r3, [r3, #0]
10006c06:	2b00      	cmp	r3, #0
10006c08:	d106      	bne.n	10006c18 <DAVE_Init+0xb4>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
10006c0a:	1dfc      	adds	r4, r7, #7
10006c0c:	4b4e      	ldr	r3, [pc, #312]	; (10006d48 <DAVE_Init+0x1e4>)
10006c0e:	1c18      	adds	r0, r3, #0
10006c10:	f7fc fbd0 	bl	100033b4 <TIMER_Init>
10006c14:	1c03      	adds	r3, r0, #0
10006c16:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c18:	1dfb      	adds	r3, r7, #7
10006c1a:	781b      	ldrb	r3, [r3, #0]
10006c1c:	2b00      	cmp	r3, #0
10006c1e:	d106      	bne.n	10006c2e <DAVE_Init+0xca>
  {
	 /**  Initialization of E_EEPROM_XMC1 APP instance E_EEPROM_XMC1_0 */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC1_Init(&E_EEPROM_XMC1_0); 
10006c20:	1dfc      	adds	r4, r7, #7
10006c22:	4b4a      	ldr	r3, [pc, #296]	; (10006d4c <DAVE_Init+0x1e8>)
10006c24:	1c18      	adds	r0, r3, #0
10006c26:	f7fe fa43 	bl	100050b0 <E_EEPROM_XMC1_Init>
10006c2a:	1c03      	adds	r3, r0, #0
10006c2c:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c2e:	1dfb      	adds	r3, r7, #7
10006c30:	781b      	ldrb	r3, [r3, #0]
10006c32:	2b00      	cmp	r3, #0
10006c34:	d106      	bne.n	10006c44 <DAVE_Init+0xe0>
  {
	 /**  Initialization of DIGITAL_IO APP instance PARTIDA */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PARTIDA); 
10006c36:	1dfc      	adds	r4, r7, #7
10006c38:	4b45      	ldr	r3, [pc, #276]	; (10006d50 <DAVE_Init+0x1ec>)
10006c3a:	1c18      	adds	r0, r3, #0
10006c3c:	f7ff ff1a 	bl	10006a74 <DIGITAL_IO_Init>
10006c40:	1c03      	adds	r3, r0, #0
10006c42:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c44:	1dfb      	adds	r3, r7, #7
10006c46:	781b      	ldrb	r3, [r3, #0]
10006c48:	2b00      	cmp	r3, #0
10006c4a:	d106      	bne.n	10006c5a <DAVE_Init+0xf6>
  {
	 /**  Initialization of DIGITAL_IO APP instance REVERSAO */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&REVERSAO); 
10006c4c:	1dfc      	adds	r4, r7, #7
10006c4e:	4b41      	ldr	r3, [pc, #260]	; (10006d54 <DAVE_Init+0x1f0>)
10006c50:	1c18      	adds	r0, r3, #0
10006c52:	f7ff ff0f 	bl	10006a74 <DIGITAL_IO_Init>
10006c56:	1c03      	adds	r3, r0, #0
10006c58:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c5a:	1dfb      	adds	r3, r7, #7
10006c5c:	781b      	ldrb	r3, [r3, #0]
10006c5e:	2b00      	cmp	r3, #0
10006c60:	d106      	bne.n	10006c70 <DAVE_Init+0x10c>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CONF_10 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CONF_10); 
10006c62:	1dfc      	adds	r4, r7, #7
10006c64:	4b3c      	ldr	r3, [pc, #240]	; (10006d58 <DAVE_Init+0x1f4>)
10006c66:	1c18      	adds	r0, r3, #0
10006c68:	f7ff ff04 	bl	10006a74 <DIGITAL_IO_Init>
10006c6c:	1c03      	adds	r3, r0, #0
10006c6e:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c70:	1dfb      	adds	r3, r7, #7
10006c72:	781b      	ldrb	r3, [r3, #0]
10006c74:	2b00      	cmp	r3, #0
10006c76:	d106      	bne.n	10006c86 <DAVE_Init+0x122>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CONF_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CONF_5); 
10006c78:	1dfc      	adds	r4, r7, #7
10006c7a:	4b38      	ldr	r3, [pc, #224]	; (10006d5c <DAVE_Init+0x1f8>)
10006c7c:	1c18      	adds	r0, r3, #0
10006c7e:	f7ff fef9 	bl	10006a74 <DIGITAL_IO_Init>
10006c82:	1c03      	adds	r3, r0, #0
10006c84:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c86:	1dfb      	adds	r3, r7, #7
10006c88:	781b      	ldrb	r3, [r3, #0]
10006c8a:	2b00      	cmp	r3, #0
10006c8c:	d106      	bne.n	10006c9c <DAVE_Init+0x138>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CONF_15 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CONF_15); 
10006c8e:	1dfc      	adds	r4, r7, #7
10006c90:	4b33      	ldr	r3, [pc, #204]	; (10006d60 <DAVE_Init+0x1fc>)
10006c92:	1c18      	adds	r0, r3, #0
10006c94:	f7ff feee 	bl	10006a74 <DIGITAL_IO_Init>
10006c98:	1c03      	adds	r3, r0, #0
10006c9a:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006c9c:	1dfb      	adds	r3, r7, #7
10006c9e:	781b      	ldrb	r3, [r3, #0]
10006ca0:	2b00      	cmp	r3, #0
10006ca2:	d106      	bne.n	10006cb2 <DAVE_Init+0x14e>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CONF_MIN_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CONF_MIN_0); 
10006ca4:	1dfc      	adds	r4, r7, #7
10006ca6:	4b2f      	ldr	r3, [pc, #188]	; (10006d64 <DAVE_Init+0x200>)
10006ca8:	1c18      	adds	r0, r3, #0
10006caa:	f7ff fee3 	bl	10006a74 <DIGITAL_IO_Init>
10006cae:	1c03      	adds	r3, r0, #0
10006cb0:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006cb2:	1dfb      	adds	r3, r7, #7
10006cb4:	781b      	ldrb	r3, [r3, #0]
10006cb6:	2b00      	cmp	r3, #0
10006cb8:	d106      	bne.n	10006cc8 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_CONF_MIN_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_CONF_MIN_5); 
10006cba:	1dfc      	adds	r4, r7, #7
10006cbc:	4b2a      	ldr	r3, [pc, #168]	; (10006d68 <DAVE_Init+0x204>)
10006cbe:	1c18      	adds	r0, r3, #0
10006cc0:	f7ff fed8 	bl	10006a74 <DIGITAL_IO_Init>
10006cc4:	1c03      	adds	r3, r0, #0
10006cc6:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006cc8:	1dfb      	adds	r3, r7, #7
10006cca:	781b      	ldrb	r3, [r3, #0]
10006ccc:	2b00      	cmp	r3, #0
10006cce:	d106      	bne.n	10006cde <DAVE_Init+0x17a>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ANG_MAX */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ANG_MAX); 
10006cd0:	1dfc      	adds	r4, r7, #7
10006cd2:	4b26      	ldr	r3, [pc, #152]	; (10006d6c <DAVE_Init+0x208>)
10006cd4:	1c18      	adds	r0, r3, #0
10006cd6:	f7fc fc9f 	bl	10003618 <PIN_INTERRUPT_Init>
10006cda:	1c03      	adds	r3, r0, #0
10006cdc:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006cde:	1dfb      	adds	r3, r7, #7
10006ce0:	781b      	ldrb	r3, [r3, #0]
10006ce2:	2b00      	cmp	r3, #0
10006ce4:	d106      	bne.n	10006cf4 <DAVE_Init+0x190>
  {
	 /**  Initialization of DIGITAL_IO APP instance BOT_AUTO */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BOT_AUTO); 
10006ce6:	1dfc      	adds	r4, r7, #7
10006ce8:	4b21      	ldr	r3, [pc, #132]	; (10006d70 <DAVE_Init+0x20c>)
10006cea:	1c18      	adds	r0, r3, #0
10006cec:	f7ff fec2 	bl	10006a74 <DIGITAL_IO_Init>
10006cf0:	1c03      	adds	r3, r0, #0
10006cf2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006cf4:	1dfb      	adds	r3, r7, #7
10006cf6:	781b      	ldrb	r3, [r3, #0]
10006cf8:	2b00      	cmp	r3, #0
10006cfa:	d106      	bne.n	10006d0a <DAVE_Init+0x1a6>
  {
	 /**  Initialization of DIGITAL_IO APP instance BOT_MANUAL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BOT_MANUAL); 
10006cfc:	1dfc      	adds	r4, r7, #7
10006cfe:	4b1d      	ldr	r3, [pc, #116]	; (10006d74 <DAVE_Init+0x210>)
10006d00:	1c18      	adds	r0, r3, #0
10006d02:	f7ff feb7 	bl	10006a74 <DIGITAL_IO_Init>
10006d06:	1c03      	adds	r3, r0, #0
10006d08:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10006d0a:	1dfb      	adds	r3, r7, #7
10006d0c:	781b      	ldrb	r3, [r3, #0]
10006d0e:	2b00      	cmp	r3, #0
10006d10:	d106      	bne.n	10006d20 <DAVE_Init+0x1bc>
  {
	 /**  Initialization of DIGITAL_IO APP instance BOT_MIN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BOT_MIN); 
10006d12:	1dfc      	adds	r4, r7, #7
10006d14:	4b18      	ldr	r3, [pc, #96]	; (10006d78 <DAVE_Init+0x214>)
10006d16:	1c18      	adds	r0, r3, #0
10006d18:	f7ff feac 	bl	10006a74 <DIGITAL_IO_Init>
10006d1c:	1c03      	adds	r3, r0, #0
10006d1e:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10006d20:	1dfb      	adds	r3, r7, #7
10006d22:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10006d24:	1c18      	adds	r0, r3, #0
10006d26:	46bd      	mov	sp, r7
10006d28:	b003      	add	sp, #12
10006d2a:	bd90      	pop	{r4, r7, pc}
10006d2c:	200007c0 	.word	0x200007c0
10006d30:	20000584 	.word	0x20000584
10006d34:	1000c35c 	.word	0x1000c35c
10006d38:	1000c36c 	.word	0x1000c36c
10006d3c:	200005ec 	.word	0x200005ec
10006d40:	20000574 	.word	0x20000574
10006d44:	1000c2b4 	.word	0x1000c2b4
10006d48:	20000598 	.word	0x20000598
10006d4c:	20000610 	.word	0x20000610
10006d50:	1000c37c 	.word	0x1000c37c
10006d54:	1000c38c 	.word	0x1000c38c
10006d58:	1000c39c 	.word	0x1000c39c
10006d5c:	1000c3ac 	.word	0x1000c3ac
10006d60:	1000c3bc 	.word	0x1000c3bc
10006d64:	1000c3cc 	.word	0x1000c3cc
10006d68:	1000c3dc 	.word	0x1000c3dc
10006d6c:	1000c294 	.word	0x1000c294
10006d70:	1000c3ec 	.word	0x1000c3ec
10006d74:	1000c3fc 	.word	0x1000c3fc
10006d78:	1000c40c 	.word	0x1000c40c

10006d7c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10006d7c:	b580      	push	{r7, lr}
10006d7e:	b082      	sub	sp, #8
10006d80:	af00      	add	r7, sp, #0
10006d82:	6078      	str	r0, [r7, #4]
10006d84:	1c0a      	adds	r2, r1, #0
10006d86:	1cfb      	adds	r3, r7, #3
10006d88:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10006d8a:	1cfb      	adds	r3, r7, #3
10006d8c:	781b      	ldrb	r3, [r3, #0]
10006d8e:	2201      	movs	r2, #1
10006d90:	409a      	lsls	r2, r3
10006d92:	687b      	ldr	r3, [r7, #4]
10006d94:	605a      	str	r2, [r3, #4]
}
10006d96:	46bd      	mov	sp, r7
10006d98:	b002      	add	sp, #8
10006d9a:	bd80      	pop	{r7, pc}

10006d9c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10006d9c:	b580      	push	{r7, lr}
10006d9e:	b082      	sub	sp, #8
10006da0:	af00      	add	r7, sp, #0
10006da2:	6078      	str	r0, [r7, #4]
10006da4:	1c0a      	adds	r2, r1, #0
10006da6:	1cfb      	adds	r3, r7, #3
10006da8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10006daa:	1cfb      	adds	r3, r7, #3
10006dac:	781b      	ldrb	r3, [r3, #0]
10006dae:	2280      	movs	r2, #128	; 0x80
10006db0:	0252      	lsls	r2, r2, #9
10006db2:	409a      	lsls	r2, r3
10006db4:	687b      	ldr	r3, [r7, #4]
10006db6:	605a      	str	r2, [r3, #4]
}
10006db8:	46bd      	mov	sp, r7
10006dba:	b002      	add	sp, #8
10006dbc:	bd80      	pop	{r7, pc}
10006dbe:	46c0      	nop			; (mov r8, r8)

10006dc0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10006dc0:	b580      	push	{r7, lr}
10006dc2:	b082      	sub	sp, #8
10006dc4:	af00      	add	r7, sp, #0
10006dc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10006dc8:	687b      	ldr	r3, [r7, #4]
10006dca:	681a      	ldr	r2, [r3, #0]
10006dcc:	687b      	ldr	r3, [r7, #4]
10006dce:	7b1b      	ldrb	r3, [r3, #12]
10006dd0:	1c10      	adds	r0, r2, #0
10006dd2:	1c19      	adds	r1, r3, #0
10006dd4:	f7ff ffd2 	bl	10006d7c <XMC_GPIO_SetOutputHigh>
}
10006dd8:	46bd      	mov	sp, r7
10006dda:	b002      	add	sp, #8
10006ddc:	bd80      	pop	{r7, pc}
10006dde:	46c0      	nop			; (mov r8, r8)

10006de0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10006de0:	b580      	push	{r7, lr}
10006de2:	b082      	sub	sp, #8
10006de4:	af00      	add	r7, sp, #0
10006de6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10006de8:	687b      	ldr	r3, [r7, #4]
10006dea:	681a      	ldr	r2, [r3, #0]
10006dec:	687b      	ldr	r3, [r7, #4]
10006dee:	7b1b      	ldrb	r3, [r3, #12]
10006df0:	1c10      	adds	r0, r2, #0
10006df2:	1c19      	adds	r1, r3, #0
10006df4:	f7ff ffd2 	bl	10006d9c <XMC_GPIO_SetOutputLow>
}
10006df8:	46bd      	mov	sp, r7
10006dfa:	b002      	add	sp, #8
10006dfc:	bd80      	pop	{r7, pc}
10006dfe:	46c0      	nop			; (mov r8, r8)

10006e00 <ActionInit>:

//********************************************************************************************************************************************
//***********************************************************== CONTROL MOTOR INIT ==*************************************************************
//********************************************************************************************************************************************

void ActionInit(void){
10006e00:	b580      	push	{r7, lr}
10006e02:	af00      	add	r7, sp, #0

	taskSetState(TASK_ACTION, TASK_STOP);
10006e04:	2301      	movs	r3, #1
10006e06:	425b      	negs	r3, r3
10006e08:	2002      	movs	r0, #2
10006e0a:	1c19      	adds	r1, r3, #0
10006e0c:	f001 fe54 	bl	10008ab8 <taskSetState>

}
10006e10:	46bd      	mov	sp, r7
10006e12:	bd80      	pop	{r7, pc}

10006e14 <ActionTask>:
//********************************************************************************************************************************************
//***********************************************************== CONTROL MOTOR TASK ==*********************************************************
//********************************************************************************************************************************************


void ActionTask(void){
10006e14:	b598      	push	{r3, r4, r7, lr}
10006e16:	af00      	add	r7, sp, #0
	//////////////////////////CONTROLE DE ACIONAMENTO DO MODO AUTOMATICO//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////******************************************//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	if(CONF.STATUS_BOT_AUTO  == true || CONF.STATUS_BOT_MANUAL == true){
10006e18:	4bde      	ldr	r3, [pc, #888]	; (10007194 <ActionTask+0x380>)
10006e1a:	22e0      	movs	r2, #224	; 0xe0
10006e1c:	5c9b      	ldrb	r3, [r3, r2]
10006e1e:	2b00      	cmp	r3, #0
10006e20:	d105      	bne.n	10006e2e <ActionTask+0x1a>
10006e22:	4bdc      	ldr	r3, [pc, #880]	; (10007194 <ActionTask+0x380>)
10006e24:	22e1      	movs	r2, #225	; 0xe1
10006e26:	5c9b      	ldrb	r3, [r3, r2]
10006e28:	2b00      	cmp	r3, #0
10006e2a:	d100      	bne.n	10006e2e <ActionTask+0x1a>
10006e2c:	e1c2      	b.n	100071b4 <ActionTask+0x3a0>
		CONF.STATUS_BOT_MANUAL = false;
10006e2e:	4bd9      	ldr	r3, [pc, #868]	; (10007194 <ActionTask+0x380>)
10006e30:	22e1      	movs	r2, #225	; 0xe1
10006e32:	2100      	movs	r1, #0
10006e34:	5499      	strb	r1, [r3, r2]

		if(CONF.STATUS_AUTOMATICO == true){
10006e36:	4bd7      	ldr	r3, [pc, #860]	; (10007194 <ActionTask+0x380>)
10006e38:	22de      	movs	r2, #222	; 0xde
10006e3a:	5c9b      	ldrb	r3, [r3, r2]
10006e3c:	2b00      	cmp	r3, #0
10006e3e:	d100      	bne.n	10006e42 <ActionTask+0x2e>
10006e40:	e0c9      	b.n	10006fd6 <ActionTask+0x1c2>


			if(CONF.ANG_MAX_SUP == true && CONF.ANG_MAX_INF == true){
10006e42:	4bd4      	ldr	r3, [pc, #848]	; (10007194 <ActionTask+0x380>)
10006e44:	22e5      	movs	r2, #229	; 0xe5
10006e46:	5c9b      	ldrb	r3, [r3, r2]
10006e48:	2b00      	cmp	r3, #0
10006e4a:	d00d      	beq.n	10006e68 <ActionTask+0x54>
10006e4c:	4bd1      	ldr	r3, [pc, #836]	; (10007194 <ActionTask+0x380>)
10006e4e:	22e4      	movs	r2, #228	; 0xe4
10006e50:	5c9b      	ldrb	r3, [r3, r2]
10006e52:	2b00      	cmp	r3, #0
10006e54:	d008      	beq.n	10006e68 <ActionTask+0x54>
				DIGITAL_IO_SetOutputHigh(&LED1);
10006e56:	4bd0      	ldr	r3, [pc, #832]	; (10007198 <ActionTask+0x384>)
10006e58:	1c18      	adds	r0, r3, #0
10006e5a:	f7ff ffb1 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
				DIGITAL_IO_SetOutputHigh(&PARTIDA);
10006e5e:	4bcf      	ldr	r3, [pc, #828]	; (1000719c <ActionTask+0x388>)
10006e60:	1c18      	adds	r0, r3, #0
10006e62:	f7ff ffad 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
10006e66:	e193      	b.n	10007190 <ActionTask+0x37c>

			}else{


				DIGITAL_IO_SetOutputHigh(&LED1);
10006e68:	4bcb      	ldr	r3, [pc, #812]	; (10007198 <ActionTask+0x384>)
10006e6a:	1c18      	adds	r0, r3, #0
10006e6c:	f7ff ffa8 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
				DIGITAL_IO_SetOutputHigh(&PARTIDA);
10006e70:	4bca      	ldr	r3, [pc, #808]	; (1000719c <ActionTask+0x388>)
10006e72:	1c18      	adds	r0, r3, #0
10006e74:	f7ff ffa4 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>

				///////////////////////////////////////////////////////////////////////////////////////////
				ACTION.RES_Porcent = (ACTION.Ang_max * ACTION.VAL_Porcent) / 100;		//calculo da correção
10006e78:	4bc9      	ldr	r3, [pc, #804]	; (100071a0 <ActionTask+0x38c>)
10006e7a:	22bf      	movs	r2, #191	; 0xbf
10006e7c:	5c9b      	ldrb	r3, [r3, r2]
10006e7e:	1c19      	adds	r1, r3, #0
10006e80:	4bc7      	ldr	r3, [pc, #796]	; (100071a0 <ActionTask+0x38c>)
10006e82:	22c5      	movs	r2, #197	; 0xc5
10006e84:	5c9b      	ldrb	r3, [r3, r2]
10006e86:	434b      	muls	r3, r1
10006e88:	1c18      	adds	r0, r3, #0
10006e8a:	2164      	movs	r1, #100	; 0x64
10006e8c:	f7fb fa1e 	bl	100022cc <__aeabi_idiv>
10006e90:	1c03      	adds	r3, r0, #0
10006e92:	b2d9      	uxtb	r1, r3
10006e94:	4bc2      	ldr	r3, [pc, #776]	; (100071a0 <ActionTask+0x38c>)
10006e96:	22c6      	movs	r2, #198	; 0xc6
10006e98:	5499      	strb	r1, [r3, r2]
				ACTION.Porcent_treated = (ACTION.Ang_max - ACTION.RES_Porcent);
10006e9a:	4bc1      	ldr	r3, [pc, #772]	; (100071a0 <ActionTask+0x38c>)
10006e9c:	22bf      	movs	r2, #191	; 0xbf
10006e9e:	5c9a      	ldrb	r2, [r3, r2]
10006ea0:	4bbf      	ldr	r3, [pc, #764]	; (100071a0 <ActionTask+0x38c>)
10006ea2:	21c6      	movs	r1, #198	; 0xc6
10006ea4:	5c5b      	ldrb	r3, [r3, r1]
10006ea6:	1ad3      	subs	r3, r2, r3
10006ea8:	b2d9      	uxtb	r1, r3
10006eaa:	4bbd      	ldr	r3, [pc, #756]	; (100071a0 <ActionTask+0x38c>)
10006eac:	22c7      	movs	r2, #199	; 0xc7
10006eae:	5499      	strb	r1, [r3, r2]

				if(ReadAxis1.Angle >= ACTION.Porcent_treated){
10006eb0:	4bbc      	ldr	r3, [pc, #752]	; (100071a4 <ActionTask+0x390>)
10006eb2:	2298      	movs	r2, #152	; 0x98
10006eb4:	589c      	ldr	r4, [r3, r2]
10006eb6:	4bba      	ldr	r3, [pc, #744]	; (100071a0 <ActionTask+0x38c>)
10006eb8:	22c7      	movs	r2, #199	; 0xc7
10006eba:	5c9b      	ldrb	r3, [r3, r2]
10006ebc:	1c18      	adds	r0, r3, #0
10006ebe:	f003 fab1 	bl	1000a424 <__aeabi_i2f>
10006ec2:	1c03      	adds	r3, r0, #0
10006ec4:	1c20      	adds	r0, r4, #0
10006ec6:	1c19      	adds	r1, r3, #0
10006ec8:	f002 fc4c 	bl	10009764 <__aeabi_fcmpge>
10006ecc:	1e03      	subs	r3, r0, #0
10006ece:	d003      	beq.n	10006ed8 <ActionTask+0xc4>
					ACTION.Control_reverse = true;
10006ed0:	4bb3      	ldr	r3, [pc, #716]	; (100071a0 <ActionTask+0x38c>)
10006ed2:	22c4      	movs	r2, #196	; 0xc4
10006ed4:	2101      	movs	r1, #1
10006ed6:	5499      	strb	r1, [r3, r2]
				}

				///////////////////////////////////////////////////////////////////////////////////////////
				if(ACTION.Ang_min == -5){
10006ed8:	4bb1      	ldr	r3, [pc, #708]	; (100071a0 <ActionTask+0x38c>)
10006eda:	22c0      	movs	r2, #192	; 0xc0
10006edc:	589b      	ldr	r3, [r3, r2]
10006ede:	1c18      	adds	r0, r3, #0
10006ee0:	49b1      	ldr	r1, [pc, #708]	; (100071a8 <ActionTask+0x394>)
10006ee2:	f002 fc1b 	bl	1000971c <__aeabi_fcmpeq>
10006ee6:	1e03      	subs	r3, r0, #0
10006ee8:	d022      	beq.n	10006f30 <ActionTask+0x11c>
					ACTION.Porcent_treated_Min = (ACTION.Ang_min + ACTION.Erro_Ang_Min_5); //ACTION.Erro_Ang_Min_5 adiciona o angulo de correção quando configurado -5
10006eea:	4bad      	ldr	r3, [pc, #692]	; (100071a0 <ActionTask+0x38c>)
10006eec:	22c0      	movs	r2, #192	; 0xc0
10006eee:	589c      	ldr	r4, [r3, r2]
10006ef0:	4bab      	ldr	r3, [pc, #684]	; (100071a0 <ActionTask+0x38c>)
10006ef2:	22d0      	movs	r2, #208	; 0xd0
10006ef4:	5c9b      	ldrb	r3, [r3, r2]
10006ef6:	1c18      	adds	r0, r3, #0
10006ef8:	f003 fa94 	bl	1000a424 <__aeabi_i2f>
10006efc:	1c03      	adds	r3, r0, #0
10006efe:	1c20      	adds	r0, r4, #0
10006f00:	1c19      	adds	r1, r3, #0
10006f02:	f002 fc51 	bl	100097a8 <__aeabi_fadd>
10006f06:	1c03      	adds	r3, r0, #0
10006f08:	1c19      	adds	r1, r3, #0
10006f0a:	4ba5      	ldr	r3, [pc, #660]	; (100071a0 <ActionTask+0x38c>)
10006f0c:	22cc      	movs	r2, #204	; 0xcc
10006f0e:	5099      	str	r1, [r3, r2]

					if(ReadAxis1.Angle <= ACTION.Porcent_treated_Min){	//MINIMO
10006f10:	4ba4      	ldr	r3, [pc, #656]	; (100071a4 <ActionTask+0x390>)
10006f12:	2298      	movs	r2, #152	; 0x98
10006f14:	5899      	ldr	r1, [r3, r2]
10006f16:	4ba2      	ldr	r3, [pc, #648]	; (100071a0 <ActionTask+0x38c>)
10006f18:	22cc      	movs	r2, #204	; 0xcc
10006f1a:	589b      	ldr	r3, [r3, r2]
10006f1c:	1c08      	adds	r0, r1, #0
10006f1e:	1c19      	adds	r1, r3, #0
10006f20:	f002 fc0c 	bl	1000973c <__aeabi_fcmple>
10006f24:	1e03      	subs	r3, r0, #0
10006f26:	d003      	beq.n	10006f30 <ActionTask+0x11c>
						ACTION.Control_reverse = false;
10006f28:	4b9d      	ldr	r3, [pc, #628]	; (100071a0 <ActionTask+0x38c>)
10006f2a:	22c4      	movs	r2, #196	; 0xc4
10006f2c:	2100      	movs	r1, #0
10006f2e:	5499      	strb	r1, [r3, r2]
					}
				}
				if(ACTION.Ang_min == 0){
10006f30:	4b9b      	ldr	r3, [pc, #620]	; (100071a0 <ActionTask+0x38c>)
10006f32:	22c0      	movs	r2, #192	; 0xc0
10006f34:	589b      	ldr	r3, [r3, r2]
10006f36:	1c18      	adds	r0, r3, #0
10006f38:	2100      	movs	r1, #0
10006f3a:	f002 fbef 	bl	1000971c <__aeabi_fcmpeq>
10006f3e:	1e03      	subs	r3, r0, #0
10006f40:	d02a      	beq.n	10006f98 <ActionTask+0x184>
					ACTION.Ang_Min_Treated = ACTION.Ang_min + ACTION.Erro_Ang_Min_0; //ACTION.Erro_Ang_Min_0 adiciona o angulo de correção quando configurado 0
10006f42:	4b97      	ldr	r3, [pc, #604]	; (100071a0 <ActionTask+0x38c>)
10006f44:	22c0      	movs	r2, #192	; 0xc0
10006f46:	589c      	ldr	r4, [r3, r2]
10006f48:	4b95      	ldr	r3, [pc, #596]	; (100071a0 <ActionTask+0x38c>)
10006f4a:	22d1      	movs	r2, #209	; 0xd1
10006f4c:	5c9b      	ldrb	r3, [r3, r2]
10006f4e:	1c18      	adds	r0, r3, #0
10006f50:	f003 fa68 	bl	1000a424 <__aeabi_i2f>
10006f54:	1c03      	adds	r3, r0, #0
10006f56:	1c20      	adds	r0, r4, #0
10006f58:	1c19      	adds	r1, r3, #0
10006f5a:	f002 fc25 	bl	100097a8 <__aeabi_fadd>
10006f5e:	1c03      	adds	r3, r0, #0
10006f60:	1c18      	adds	r0, r3, #0
10006f62:	f002 fc09 	bl	10009778 <__aeabi_f2uiz>
10006f66:	1c03      	adds	r3, r0, #0
10006f68:	b2d9      	uxtb	r1, r3
10006f6a:	4b8d      	ldr	r3, [pc, #564]	; (100071a0 <ActionTask+0x38c>)
10006f6c:	22d2      	movs	r2, #210	; 0xd2
10006f6e:	5499      	strb	r1, [r3, r2]

					if(ReadAxis1.Angle <= ACTION.Ang_Min_Treated){		//MINIMO
10006f70:	4b8c      	ldr	r3, [pc, #560]	; (100071a4 <ActionTask+0x390>)
10006f72:	2298      	movs	r2, #152	; 0x98
10006f74:	589c      	ldr	r4, [r3, r2]
10006f76:	4b8a      	ldr	r3, [pc, #552]	; (100071a0 <ActionTask+0x38c>)
10006f78:	22d2      	movs	r2, #210	; 0xd2
10006f7a:	5c9b      	ldrb	r3, [r3, r2]
10006f7c:	1c18      	adds	r0, r3, #0
10006f7e:	f003 fa51 	bl	1000a424 <__aeabi_i2f>
10006f82:	1c03      	adds	r3, r0, #0
10006f84:	1c20      	adds	r0, r4, #0
10006f86:	1c19      	adds	r1, r3, #0
10006f88:	f002 fbd8 	bl	1000973c <__aeabi_fcmple>
10006f8c:	1e03      	subs	r3, r0, #0
10006f8e:	d003      	beq.n	10006f98 <ActionTask+0x184>
						ACTION.Control_reverse = false;
10006f90:	4b83      	ldr	r3, [pc, #524]	; (100071a0 <ActionTask+0x38c>)
10006f92:	22c4      	movs	r2, #196	; 0xc4
10006f94:	2100      	movs	r1, #0
10006f96:	5499      	strb	r1, [r3, r2]
					}
				}
				///////////////////////////////////////////////////////////////////////////////////////////

				if(ACTION.Control_reverse == true){
10006f98:	4b81      	ldr	r3, [pc, #516]	; (100071a0 <ActionTask+0x38c>)
10006f9a:	22c4      	movs	r2, #196	; 0xc4
10006f9c:	5c9b      	ldrb	r3, [r3, r2]
10006f9e:	2b00      	cmp	r3, #0
10006fa0:	d007      	beq.n	10006fb2 <ActionTask+0x19e>
					DIGITAL_IO_SetOutputHigh(&LED2);
10006fa2:	4b82      	ldr	r3, [pc, #520]	; (100071ac <ActionTask+0x398>)
10006fa4:	1c18      	adds	r0, r3, #0
10006fa6:	f7ff ff0b 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputHigh(&REVERSAO);
10006faa:	4b81      	ldr	r3, [pc, #516]	; (100071b0 <ActionTask+0x39c>)
10006fac:	1c18      	adds	r0, r3, #0
10006fae:	f7ff ff07 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
				}

				if(ACTION.Control_reverse == false){
10006fb2:	4b7b      	ldr	r3, [pc, #492]	; (100071a0 <ActionTask+0x38c>)
10006fb4:	22c4      	movs	r2, #196	; 0xc4
10006fb6:	5c9b      	ldrb	r3, [r3, r2]
10006fb8:	2201      	movs	r2, #1
10006fba:	4053      	eors	r3, r2
10006fbc:	b2db      	uxtb	r3, r3
10006fbe:	2b00      	cmp	r3, #0
10006fc0:	d100      	bne.n	10006fc4 <ActionTask+0x1b0>
10006fc2:	e0e5      	b.n	10007190 <ActionTask+0x37c>
					DIGITAL_IO_SetOutputLow(&LED2);
10006fc4:	4b79      	ldr	r3, [pc, #484]	; (100071ac <ActionTask+0x398>)
10006fc6:	1c18      	adds	r0, r3, #0
10006fc8:	f7ff ff0a 	bl	10006de0 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputLow(&REVERSAO);
10006fcc:	4b78      	ldr	r3, [pc, #480]	; (100071b0 <ActionTask+0x39c>)
10006fce:	1c18      	adds	r0, r3, #0
10006fd0:	f7ff ff06 	bl	10006de0 <DIGITAL_IO_SetOutputLow>
10006fd4:	e0dc      	b.n	10007190 <ActionTask+0x37c>
		//////////////////////////------------------------------------------//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



		else if(CONF.STATUS_MANUAL == true){
10006fd6:	4b6f      	ldr	r3, [pc, #444]	; (10007194 <ActionTask+0x380>)
10006fd8:	22df      	movs	r2, #223	; 0xdf
10006fda:	5c9b      	ldrb	r3, [r3, r2]
10006fdc:	2b00      	cmp	r3, #0
10006fde:	d100      	bne.n	10006fe2 <ActionTask+0x1ce>
10006fe0:	e0d6      	b.n	10007190 <ActionTask+0x37c>

			if(CONF.ANG_MAX_SUP == true && CONF.ANG_MAX_INF == true){
10006fe2:	4b6c      	ldr	r3, [pc, #432]	; (10007194 <ActionTask+0x380>)
10006fe4:	22e5      	movs	r2, #229	; 0xe5
10006fe6:	5c9b      	ldrb	r3, [r3, r2]
10006fe8:	2b00      	cmp	r3, #0
10006fea:	d011      	beq.n	10007010 <ActionTask+0x1fc>
10006fec:	4b69      	ldr	r3, [pc, #420]	; (10007194 <ActionTask+0x380>)
10006fee:	22e4      	movs	r2, #228	; 0xe4
10006ff0:	5c9b      	ldrb	r3, [r3, r2]
10006ff2:	2b00      	cmp	r3, #0
10006ff4:	d00c      	beq.n	10007010 <ActionTask+0x1fc>
				CONF.STATUS_MANUAL = false;
10006ff6:	4b67      	ldr	r3, [pc, #412]	; (10007194 <ActionTask+0x380>)
10006ff8:	22df      	movs	r2, #223	; 0xdf
10006ffa:	2100      	movs	r1, #0
10006ffc:	5499      	strb	r1, [r3, r2]
				DIGITAL_IO_SetOutputHigh(&LED1);
10006ffe:	4b66      	ldr	r3, [pc, #408]	; (10007198 <ActionTask+0x384>)
10007000:	1c18      	adds	r0, r3, #0
10007002:	f7ff fedd 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
				DIGITAL_IO_SetOutputHigh(&PARTIDA);
10007006:	4b65      	ldr	r3, [pc, #404]	; (1000719c <ActionTask+0x388>)
10007008:	1c18      	adds	r0, r3, #0
1000700a:	f7ff fed9 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
1000700e:	e0b8      	b.n	10007182 <ActionTask+0x36e>

			}else{

				CONF.STATUS_MANUAL = false;
10007010:	4b60      	ldr	r3, [pc, #384]	; (10007194 <ActionTask+0x380>)
10007012:	22df      	movs	r2, #223	; 0xdf
10007014:	2100      	movs	r1, #0
10007016:	5499      	strb	r1, [r3, r2]
				DIGITAL_IO_SetOutputHigh(&LED1);
10007018:	4b5f      	ldr	r3, [pc, #380]	; (10007198 <ActionTask+0x384>)
1000701a:	1c18      	adds	r0, r3, #0
1000701c:	f7ff fed0 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
				DIGITAL_IO_SetOutputHigh(&PARTIDA);
10007020:	4b5e      	ldr	r3, [pc, #376]	; (1000719c <ActionTask+0x388>)
10007022:	1c18      	adds	r0, r3, #0
10007024:	f7ff fecc 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>

				ACTION.RES_Porcent = (ACTION.Ang_max * ACTION.VAL_Porcent) / 100;
10007028:	4b5d      	ldr	r3, [pc, #372]	; (100071a0 <ActionTask+0x38c>)
1000702a:	22bf      	movs	r2, #191	; 0xbf
1000702c:	5c9b      	ldrb	r3, [r3, r2]
1000702e:	1c19      	adds	r1, r3, #0
10007030:	4b5b      	ldr	r3, [pc, #364]	; (100071a0 <ActionTask+0x38c>)
10007032:	22c5      	movs	r2, #197	; 0xc5
10007034:	5c9b      	ldrb	r3, [r3, r2]
10007036:	434b      	muls	r3, r1
10007038:	1c18      	adds	r0, r3, #0
1000703a:	2164      	movs	r1, #100	; 0x64
1000703c:	f7fb f946 	bl	100022cc <__aeabi_idiv>
10007040:	1c03      	adds	r3, r0, #0
10007042:	b2d9      	uxtb	r1, r3
10007044:	4b56      	ldr	r3, [pc, #344]	; (100071a0 <ActionTask+0x38c>)
10007046:	22c6      	movs	r2, #198	; 0xc6
10007048:	5499      	strb	r1, [r3, r2]
				ACTION.Porcent_treated = (ACTION.Ang_max - ACTION.RES_Porcent);
1000704a:	4b55      	ldr	r3, [pc, #340]	; (100071a0 <ActionTask+0x38c>)
1000704c:	22bf      	movs	r2, #191	; 0xbf
1000704e:	5c9a      	ldrb	r2, [r3, r2]
10007050:	4b53      	ldr	r3, [pc, #332]	; (100071a0 <ActionTask+0x38c>)
10007052:	21c6      	movs	r1, #198	; 0xc6
10007054:	5c5b      	ldrb	r3, [r3, r1]
10007056:	1ad3      	subs	r3, r2, r3
10007058:	b2d9      	uxtb	r1, r3
1000705a:	4b51      	ldr	r3, [pc, #324]	; (100071a0 <ActionTask+0x38c>)
1000705c:	22c7      	movs	r2, #199	; 0xc7
1000705e:	5499      	strb	r1, [r3, r2]



				if(ReadAxis1.Angle >= ACTION.Porcent_treated){			//MAXIMO
10007060:	4b50      	ldr	r3, [pc, #320]	; (100071a4 <ActionTask+0x390>)
10007062:	2298      	movs	r2, #152	; 0x98
10007064:	589c      	ldr	r4, [r3, r2]
10007066:	4b4e      	ldr	r3, [pc, #312]	; (100071a0 <ActionTask+0x38c>)
10007068:	22c7      	movs	r2, #199	; 0xc7
1000706a:	5c9b      	ldrb	r3, [r3, r2]
1000706c:	1c18      	adds	r0, r3, #0
1000706e:	f003 f9d9 	bl	1000a424 <__aeabi_i2f>
10007072:	1c03      	adds	r3, r0, #0
10007074:	1c20      	adds	r0, r4, #0
10007076:	1c19      	adds	r1, r3, #0
10007078:	f002 fb74 	bl	10009764 <__aeabi_fcmpge>
1000707c:	1e03      	subs	r3, r0, #0
1000707e:	d003      	beq.n	10007088 <ActionTask+0x274>
					ACTION.Control_reverse = true;
10007080:	4b47      	ldr	r3, [pc, #284]	; (100071a0 <ActionTask+0x38c>)
10007082:	22c4      	movs	r2, #196	; 0xc4
10007084:	2101      	movs	r1, #1
10007086:	5499      	strb	r1, [r3, r2]

				}

				if(ACTION.Ang_min == -5){
10007088:	4b45      	ldr	r3, [pc, #276]	; (100071a0 <ActionTask+0x38c>)
1000708a:	22c0      	movs	r2, #192	; 0xc0
1000708c:	589b      	ldr	r3, [r3, r2]
1000708e:	1c18      	adds	r0, r3, #0
10007090:	4945      	ldr	r1, [pc, #276]	; (100071a8 <ActionTask+0x394>)
10007092:	f002 fb43 	bl	1000971c <__aeabi_fcmpeq>
10007096:	1e03      	subs	r3, r0, #0
10007098:	d022      	beq.n	100070e0 <ActionTask+0x2cc>
					ACTION.Porcent_treated_Min = (ACTION.Ang_min + ACTION.Erro_Ang_Min_5); //ACTION.Erro_Ang_Min_5 adiciona o angulo de correção quando configurado -5
1000709a:	4b41      	ldr	r3, [pc, #260]	; (100071a0 <ActionTask+0x38c>)
1000709c:	22c0      	movs	r2, #192	; 0xc0
1000709e:	589c      	ldr	r4, [r3, r2]
100070a0:	4b3f      	ldr	r3, [pc, #252]	; (100071a0 <ActionTask+0x38c>)
100070a2:	22d0      	movs	r2, #208	; 0xd0
100070a4:	5c9b      	ldrb	r3, [r3, r2]
100070a6:	1c18      	adds	r0, r3, #0
100070a8:	f003 f9bc 	bl	1000a424 <__aeabi_i2f>
100070ac:	1c03      	adds	r3, r0, #0
100070ae:	1c20      	adds	r0, r4, #0
100070b0:	1c19      	adds	r1, r3, #0
100070b2:	f002 fb79 	bl	100097a8 <__aeabi_fadd>
100070b6:	1c03      	adds	r3, r0, #0
100070b8:	1c19      	adds	r1, r3, #0
100070ba:	4b39      	ldr	r3, [pc, #228]	; (100071a0 <ActionTask+0x38c>)
100070bc:	22cc      	movs	r2, #204	; 0xcc
100070be:	5099      	str	r1, [r3, r2]

					if(ReadAxis1.Angle <= ACTION.Porcent_treated_Min){	//MINIMO
100070c0:	4b38      	ldr	r3, [pc, #224]	; (100071a4 <ActionTask+0x390>)
100070c2:	2298      	movs	r2, #152	; 0x98
100070c4:	5899      	ldr	r1, [r3, r2]
100070c6:	4b36      	ldr	r3, [pc, #216]	; (100071a0 <ActionTask+0x38c>)
100070c8:	22cc      	movs	r2, #204	; 0xcc
100070ca:	589b      	ldr	r3, [r3, r2]
100070cc:	1c08      	adds	r0, r1, #0
100070ce:	1c19      	adds	r1, r3, #0
100070d0:	f002 fb34 	bl	1000973c <__aeabi_fcmple>
100070d4:	1e03      	subs	r3, r0, #0
100070d6:	d003      	beq.n	100070e0 <ActionTask+0x2cc>
						ACTION.Control_reverse = false;
100070d8:	4b31      	ldr	r3, [pc, #196]	; (100071a0 <ActionTask+0x38c>)
100070da:	22c4      	movs	r2, #196	; 0xc4
100070dc:	2100      	movs	r1, #0
100070de:	5499      	strb	r1, [r3, r2]
					}
				}
				if(ACTION.Ang_min == 0){
100070e0:	4b2f      	ldr	r3, [pc, #188]	; (100071a0 <ActionTask+0x38c>)
100070e2:	22c0      	movs	r2, #192	; 0xc0
100070e4:	589b      	ldr	r3, [r3, r2]
100070e6:	1c18      	adds	r0, r3, #0
100070e8:	2100      	movs	r1, #0
100070ea:	f002 fb17 	bl	1000971c <__aeabi_fcmpeq>
100070ee:	1e03      	subs	r3, r0, #0
100070f0:	d02a      	beq.n	10007148 <ActionTask+0x334>
					ACTION.Ang_Min_Treated = ACTION.Ang_min + ACTION.Erro_Ang_Min_0; //ACTION.Erro_Ang_Min_0 adiciona o angulo de correção quando configurado 0
100070f2:	4b2b      	ldr	r3, [pc, #172]	; (100071a0 <ActionTask+0x38c>)
100070f4:	22c0      	movs	r2, #192	; 0xc0
100070f6:	589c      	ldr	r4, [r3, r2]
100070f8:	4b29      	ldr	r3, [pc, #164]	; (100071a0 <ActionTask+0x38c>)
100070fa:	22d1      	movs	r2, #209	; 0xd1
100070fc:	5c9b      	ldrb	r3, [r3, r2]
100070fe:	1c18      	adds	r0, r3, #0
10007100:	f003 f990 	bl	1000a424 <__aeabi_i2f>
10007104:	1c03      	adds	r3, r0, #0
10007106:	1c20      	adds	r0, r4, #0
10007108:	1c19      	adds	r1, r3, #0
1000710a:	f002 fb4d 	bl	100097a8 <__aeabi_fadd>
1000710e:	1c03      	adds	r3, r0, #0
10007110:	1c18      	adds	r0, r3, #0
10007112:	f002 fb31 	bl	10009778 <__aeabi_f2uiz>
10007116:	1c03      	adds	r3, r0, #0
10007118:	b2d9      	uxtb	r1, r3
1000711a:	4b21      	ldr	r3, [pc, #132]	; (100071a0 <ActionTask+0x38c>)
1000711c:	22d2      	movs	r2, #210	; 0xd2
1000711e:	5499      	strb	r1, [r3, r2]

					if(ReadAxis1.Angle <= ACTION.Ang_Min_Treated){		//MINIMO
10007120:	4b20      	ldr	r3, [pc, #128]	; (100071a4 <ActionTask+0x390>)
10007122:	2298      	movs	r2, #152	; 0x98
10007124:	589c      	ldr	r4, [r3, r2]
10007126:	4b1e      	ldr	r3, [pc, #120]	; (100071a0 <ActionTask+0x38c>)
10007128:	22d2      	movs	r2, #210	; 0xd2
1000712a:	5c9b      	ldrb	r3, [r3, r2]
1000712c:	1c18      	adds	r0, r3, #0
1000712e:	f003 f979 	bl	1000a424 <__aeabi_i2f>
10007132:	1c03      	adds	r3, r0, #0
10007134:	1c20      	adds	r0, r4, #0
10007136:	1c19      	adds	r1, r3, #0
10007138:	f002 fb00 	bl	1000973c <__aeabi_fcmple>
1000713c:	1e03      	subs	r3, r0, #0
1000713e:	d003      	beq.n	10007148 <ActionTask+0x334>
						ACTION.Control_reverse = false;
10007140:	4b17      	ldr	r3, [pc, #92]	; (100071a0 <ActionTask+0x38c>)
10007142:	22c4      	movs	r2, #196	; 0xc4
10007144:	2100      	movs	r1, #0
10007146:	5499      	strb	r1, [r3, r2]
					}
				}

				if(ACTION.Control_reverse == true){				//aciona a inversão
10007148:	4b15      	ldr	r3, [pc, #84]	; (100071a0 <ActionTask+0x38c>)
1000714a:	22c4      	movs	r2, #196	; 0xc4
1000714c:	5c9b      	ldrb	r3, [r3, r2]
1000714e:	2b00      	cmp	r3, #0
10007150:	d007      	beq.n	10007162 <ActionTask+0x34e>
					DIGITAL_IO_SetOutputHigh(&LED2);
10007152:	4b16      	ldr	r3, [pc, #88]	; (100071ac <ActionTask+0x398>)
10007154:	1c18      	adds	r0, r3, #0
10007156:	f7ff fe33 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
					DIGITAL_IO_SetOutputHigh(&REVERSAO);
1000715a:	4b15      	ldr	r3, [pc, #84]	; (100071b0 <ActionTask+0x39c>)
1000715c:	1c18      	adds	r0, r3, #0
1000715e:	f7ff fe2f 	bl	10006dc0 <DIGITAL_IO_SetOutputHigh>
				}
				if(ACTION.Control_reverse == false){			//desaciona a inversão
10007162:	4b0f      	ldr	r3, [pc, #60]	; (100071a0 <ActionTask+0x38c>)
10007164:	22c4      	movs	r2, #196	; 0xc4
10007166:	5c9b      	ldrb	r3, [r3, r2]
10007168:	2201      	movs	r2, #1
1000716a:	4053      	eors	r3, r2
1000716c:	b2db      	uxtb	r3, r3
1000716e:	2b00      	cmp	r3, #0
10007170:	d007      	beq.n	10007182 <ActionTask+0x36e>
					DIGITAL_IO_SetOutputLow(&LED2);
10007172:	4b0e      	ldr	r3, [pc, #56]	; (100071ac <ActionTask+0x398>)
10007174:	1c18      	adds	r0, r3, #0
10007176:	f7ff fe33 	bl	10006de0 <DIGITAL_IO_SetOutputLow>
					DIGITAL_IO_SetOutputLow(&REVERSAO);
1000717a:	4b0d      	ldr	r3, [pc, #52]	; (100071b0 <ActionTask+0x39c>)
1000717c:	1c18      	adds	r0, r3, #0
1000717e:	f7ff fe2f 	bl	10006de0 <DIGITAL_IO_SetOutputLow>
				}

			}

			taskSetState(TASK_ACTION, TASK_STOP);
10007182:	2301      	movs	r3, #1
10007184:	425b      	negs	r3, r3
10007186:	2002      	movs	r0, #2
10007188:	1c19      	adds	r1, r3, #0
1000718a:	f001 fc95 	bl	10008ab8 <taskSetState>


	if(CONF.STATUS_BOT_AUTO  == true || CONF.STATUS_BOT_MANUAL == true){
		CONF.STATUS_BOT_MANUAL = false;

		if(CONF.STATUS_AUTOMATICO == true){
1000718e:	e027      	b.n	100071e0 <ActionTask+0x3cc>
10007190:	e026      	b.n	100071e0 <ActionTask+0x3cc>
10007192:	46c0      	nop			; (mov r8, r8)
10007194:	20000a4c 	.word	0x20000a4c
10007198:	1000c35c 	.word	0x1000c35c
1000719c:	1000c37c 	.word	0x1000c37c
100071a0:	20000954 	.word	0x20000954
100071a4:	20000c18 	.word	0x20000c18
100071a8:	c0a00000 	.word	0xc0a00000
100071ac:	1000c36c 	.word	0x1000c36c
100071b0:	1000c38c 	.word	0x1000c38c

			taskSetState(TASK_ACTION, TASK_STOP);
		}

	}else{
		DIGITAL_IO_SetOutputLow(&LED1);
100071b4:	4b32      	ldr	r3, [pc, #200]	; (10007280 <ActionTask+0x46c>)
100071b6:	1c18      	adds	r0, r3, #0
100071b8:	f7ff fe12 	bl	10006de0 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputLow(&LED2);
100071bc:	4b31      	ldr	r3, [pc, #196]	; (10007284 <ActionTask+0x470>)
100071be:	1c18      	adds	r0, r3, #0
100071c0:	f7ff fe0e 	bl	10006de0 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputLow(&PARTIDA);
100071c4:	4b30      	ldr	r3, [pc, #192]	; (10007288 <ActionTask+0x474>)
100071c6:	1c18      	adds	r0, r3, #0
100071c8:	f7ff fe0a 	bl	10006de0 <DIGITAL_IO_SetOutputLow>
		taskSetState(TASK_ACTION, TASK_STOP);
100071cc:	2301      	movs	r3, #1
100071ce:	425b      	negs	r3, r3
100071d0:	2002      	movs	r0, #2
100071d2:	1c19      	adds	r1, r3, #0
100071d4:	f001 fc70 	bl	10008ab8 <taskSetState>
		taskSetState(TASK_CONF, TASK_GO);
100071d8:	2003      	movs	r0, #3
100071da:	2101      	movs	r1, #1
100071dc:	f001 fc6c 	bl	10008ab8 <taskSetState>
	//////////////////////////--CONTROLE DE CICLOS REALIZADOS PELO EQUIPAMENTO--///////////////////////////////////////////----------------------/////////////////////////////////////////
	//////////////////////////--------------------------------------------------///////////////////////////////////////////----------------------/////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	if(ReadAxis1.Angle <= 0 && ACTION.Ang_High == true){
100071e0:	4b2a      	ldr	r3, [pc, #168]	; (1000728c <ActionTask+0x478>)
100071e2:	2298      	movs	r2, #152	; 0x98
100071e4:	589b      	ldr	r3, [r3, r2]
100071e6:	1c18      	adds	r0, r3, #0
100071e8:	2100      	movs	r1, #0
100071ea:	f002 faa7 	bl	1000973c <__aeabi_fcmple>
100071ee:	1e03      	subs	r3, r0, #0
100071f0:	d036      	beq.n	10007260 <ActionTask+0x44c>
100071f2:	4b27      	ldr	r3, [pc, #156]	; (10007290 <ActionTask+0x47c>)
100071f4:	22f0      	movs	r2, #240	; 0xf0
100071f6:	5c9b      	ldrb	r3, [r3, r2]
100071f8:	2b00      	cmp	r3, #0
100071fa:	d031      	beq.n	10007260 <ActionTask+0x44c>

		ACTION.Ang_High = false;
100071fc:	4b24      	ldr	r3, [pc, #144]	; (10007290 <ActionTask+0x47c>)
100071fe:	22f0      	movs	r2, #240	; 0xf0
10007200:	2100      	movs	r1, #0
10007202:	5499      	strb	r1, [r3, r2]
		ACTION.Cont_Ciclos = ACTION.Cont_Ciclos_Report ++;
10007204:	4b22      	ldr	r3, [pc, #136]	; (10007290 <ActionTask+0x47c>)
10007206:	22e0      	movs	r2, #224	; 0xe0
10007208:	589b      	ldr	r3, [r3, r2]
1000720a:	1c59      	adds	r1, r3, #1
1000720c:	4a20      	ldr	r2, [pc, #128]	; (10007290 <ActionTask+0x47c>)
1000720e:	20e0      	movs	r0, #224	; 0xe0
10007210:	5011      	str	r1, [r2, r0]
10007212:	4a1f      	ldr	r2, [pc, #124]	; (10007290 <ActionTask+0x47c>)
10007214:	21d8      	movs	r1, #216	; 0xd8
10007216:	5053      	str	r3, [r2, r1]

		ACTION.Cont_Ciclos_Memory[0] = ACTION.Cont_Ciclos >> 24;
10007218:	4b1d      	ldr	r3, [pc, #116]	; (10007290 <ActionTask+0x47c>)
1000721a:	22d8      	movs	r2, #216	; 0xd8
1000721c:	589b      	ldr	r3, [r3, r2]
1000721e:	0e1b      	lsrs	r3, r3, #24
10007220:	b2d9      	uxtb	r1, r3
10007222:	4b1b      	ldr	r3, [pc, #108]	; (10007290 <ActionTask+0x47c>)
10007224:	22dc      	movs	r2, #220	; 0xdc
10007226:	5499      	strb	r1, [r3, r2]
		ACTION.Cont_Ciclos_Memory[1] = ACTION.Cont_Ciclos >> 16;
10007228:	4b19      	ldr	r3, [pc, #100]	; (10007290 <ActionTask+0x47c>)
1000722a:	22d8      	movs	r2, #216	; 0xd8
1000722c:	589b      	ldr	r3, [r3, r2]
1000722e:	0c1b      	lsrs	r3, r3, #16
10007230:	b2d9      	uxtb	r1, r3
10007232:	4b17      	ldr	r3, [pc, #92]	; (10007290 <ActionTask+0x47c>)
10007234:	22dd      	movs	r2, #221	; 0xdd
10007236:	5499      	strb	r1, [r3, r2]
		ACTION.Cont_Ciclos_Memory[2] = ACTION.Cont_Ciclos >> 8;
10007238:	4b15      	ldr	r3, [pc, #84]	; (10007290 <ActionTask+0x47c>)
1000723a:	22d8      	movs	r2, #216	; 0xd8
1000723c:	589b      	ldr	r3, [r3, r2]
1000723e:	0a1b      	lsrs	r3, r3, #8
10007240:	b2d9      	uxtb	r1, r3
10007242:	4b13      	ldr	r3, [pc, #76]	; (10007290 <ActionTask+0x47c>)
10007244:	22de      	movs	r2, #222	; 0xde
10007246:	5499      	strb	r1, [r3, r2]
		ACTION.Cont_Ciclos_Memory[3] = ACTION.Cont_Ciclos;
10007248:	4b11      	ldr	r3, [pc, #68]	; (10007290 <ActionTask+0x47c>)
1000724a:	22d8      	movs	r2, #216	; 0xd8
1000724c:	589b      	ldr	r3, [r3, r2]
1000724e:	b2d9      	uxtb	r1, r3
10007250:	4b0f      	ldr	r3, [pc, #60]	; (10007290 <ActionTask+0x47c>)
10007252:	22df      	movs	r2, #223	; 0xdf
10007254:	5499      	strb	r1, [r3, r2]


		E_EEPROM_XMC1_Write(CONT_CYCLES, ACTION.Cont_Ciclos_Memory);
10007256:	4b0f      	ldr	r3, [pc, #60]	; (10007294 <ActionTask+0x480>)
10007258:	2006      	movs	r0, #6
1000725a:	1c19      	adds	r1, r3, #0
1000725c:	f7fd ffbc 	bl	100051d8 <E_EEPROM_XMC1_Write>
	}

	if(ReadAxis1.Angle >= 5){
10007260:	4b0a      	ldr	r3, [pc, #40]	; (1000728c <ActionTask+0x478>)
10007262:	2298      	movs	r2, #152	; 0x98
10007264:	589b      	ldr	r3, [r3, r2]
10007266:	1c18      	adds	r0, r3, #0
10007268:	490b      	ldr	r1, [pc, #44]	; (10007298 <ActionTask+0x484>)
1000726a:	f002 fa7b 	bl	10009764 <__aeabi_fcmpge>
1000726e:	1e03      	subs	r3, r0, #0
10007270:	d003      	beq.n	1000727a <ActionTask+0x466>
		ACTION.Ang_High = true;
10007272:	4b07      	ldr	r3, [pc, #28]	; (10007290 <ActionTask+0x47c>)
10007274:	22f0      	movs	r2, #240	; 0xf0
10007276:	2101      	movs	r1, #1
10007278:	5499      	strb	r1, [r3, r2]
	}
}
1000727a:	46bd      	mov	sp, r7
1000727c:	bd98      	pop	{r3, r4, r7, pc}
1000727e:	46c0      	nop			; (mov r8, r8)
10007280:	1000c35c 	.word	0x1000c35c
10007284:	1000c36c 	.word	0x1000c36c
10007288:	1000c37c 	.word	0x1000c37c
1000728c:	20000c18 	.word	0x20000c18
10007290:	20000954 	.word	0x20000954
10007294:	20000a30 	.word	0x20000a30
10007298:	40a00000 	.word	0x40a00000

1000729c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000729c:	b580      	push	{r7, lr}
1000729e:	b082      	sub	sp, #8
100072a0:	af00      	add	r7, sp, #0
100072a2:	6078      	str	r0, [r7, #4]
100072a4:	1c0a      	adds	r2, r1, #0
100072a6:	1cfb      	adds	r3, r7, #3
100072a8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
100072aa:	1cfb      	adds	r3, r7, #3
100072ac:	781b      	ldrb	r3, [r3, #0]
100072ae:	2201      	movs	r2, #1
100072b0:	409a      	lsls	r2, r3
100072b2:	687b      	ldr	r3, [r7, #4]
100072b4:	605a      	str	r2, [r3, #4]
}
100072b6:	46bd      	mov	sp, r7
100072b8:	b002      	add	sp, #8
100072ba:	bd80      	pop	{r7, pc}

100072bc <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100072bc:	b580      	push	{r7, lr}
100072be:	b082      	sub	sp, #8
100072c0:	af00      	add	r7, sp, #0
100072c2:	6078      	str	r0, [r7, #4]
100072c4:	1c0a      	adds	r2, r1, #0
100072c6:	1cfb      	adds	r3, r7, #3
100072c8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100072ca:	1cfb      	adds	r3, r7, #3
100072cc:	781b      	ldrb	r3, [r3, #0]
100072ce:	2280      	movs	r2, #128	; 0x80
100072d0:	0252      	lsls	r2, r2, #9
100072d2:	409a      	lsls	r2, r3
100072d4:	687b      	ldr	r3, [r7, #4]
100072d6:	605a      	str	r2, [r3, #4]
}
100072d8:	46bd      	mov	sp, r7
100072da:	b002      	add	sp, #8
100072dc:	bd80      	pop	{r7, pc}
100072de:	46c0      	nop			; (mov r8, r8)

100072e0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100072e0:	b580      	push	{r7, lr}
100072e2:	b082      	sub	sp, #8
100072e4:	af00      	add	r7, sp, #0
100072e6:	6078      	str	r0, [r7, #4]
100072e8:	1c0a      	adds	r2, r1, #0
100072ea:	1cfb      	adds	r3, r7, #3
100072ec:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
100072ee:	687b      	ldr	r3, [r7, #4]
100072f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100072f2:	1cfb      	adds	r3, r7, #3
100072f4:	781b      	ldrb	r3, [r3, #0]
100072f6:	40da      	lsrs	r2, r3
100072f8:	1c13      	adds	r3, r2, #0
100072fa:	2201      	movs	r2, #1
100072fc:	4013      	ands	r3, r2
}
100072fe:	1c18      	adds	r0, r3, #0
10007300:	46bd      	mov	sp, r7
10007302:	b002      	add	sp, #8
10007304:	bd80      	pop	{r7, pc}
10007306:	46c0      	nop			; (mov r8, r8)

10007308 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
10007308:	b580      	push	{r7, lr}
1000730a:	b082      	sub	sp, #8
1000730c:	af00      	add	r7, sp, #0
1000730e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
10007310:	687b      	ldr	r3, [r7, #4]
10007312:	681a      	ldr	r2, [r3, #0]
10007314:	687b      	ldr	r3, [r7, #4]
10007316:	7b1b      	ldrb	r3, [r3, #12]
10007318:	1c10      	adds	r0, r2, #0
1000731a:	1c19      	adds	r1, r3, #0
1000731c:	f7ff ffbe 	bl	1000729c <XMC_GPIO_SetOutputHigh>
}
10007320:	46bd      	mov	sp, r7
10007322:	b002      	add	sp, #8
10007324:	bd80      	pop	{r7, pc}
10007326:	46c0      	nop			; (mov r8, r8)

10007328 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
10007328:	b580      	push	{r7, lr}
1000732a:	b082      	sub	sp, #8
1000732c:	af00      	add	r7, sp, #0
1000732e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
10007330:	687b      	ldr	r3, [r7, #4]
10007332:	681a      	ldr	r2, [r3, #0]
10007334:	687b      	ldr	r3, [r7, #4]
10007336:	7b1b      	ldrb	r3, [r3, #12]
10007338:	1c10      	adds	r0, r2, #0
1000733a:	1c19      	adds	r1, r3, #0
1000733c:	f7ff ffbe 	bl	100072bc <XMC_GPIO_SetOutputLow>
}
10007340:	46bd      	mov	sp, r7
10007342:	b002      	add	sp, #8
10007344:	bd80      	pop	{r7, pc}
10007346:	46c0      	nop			; (mov r8, r8)

10007348 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10007348:	b580      	push	{r7, lr}
1000734a:	b082      	sub	sp, #8
1000734c:	af00      	add	r7, sp, #0
1000734e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
10007350:	687b      	ldr	r3, [r7, #4]
10007352:	681a      	ldr	r2, [r3, #0]
10007354:	687b      	ldr	r3, [r7, #4]
10007356:	7b1b      	ldrb	r3, [r3, #12]
10007358:	1c10      	adds	r0, r2, #0
1000735a:	1c19      	adds	r1, r3, #0
1000735c:	f7ff ffc0 	bl	100072e0 <XMC_GPIO_GetInput>
10007360:	1c03      	adds	r3, r0, #0
}
10007362:	1c18      	adds	r0, r3, #0
10007364:	46bd      	mov	sp, r7
10007366:	b002      	add	sp, #8
10007368:	bd80      	pop	{r7, pc}
1000736a:	46c0      	nop			; (mov r8, r8)

1000736c <ConfInit>:

//********************************************************************************************************************************************
//***********************************************************== CONF INIT ==*************************************************************
//********************************************************************************************************************************************

void ConfInit(void){
1000736c:	b580      	push	{r7, lr}
1000736e:	af00      	add	r7, sp, #0
//
//	else if(ACTION.Status_Sense_motor[0] == 0){
//		ACTION.Status_Sense_motor[0] = 1;
//	}

	E_EEPROM_XMC1_Read(CONF_ANG_HIGH, 0, &CONF.STATUS_CONF_ANG_HIGH[0], 2);
10007370:	4b45      	ldr	r3, [pc, #276]	; (10007488 <ConfInit+0x11c>)
10007372:	2004      	movs	r0, #4
10007374:	2100      	movs	r1, #0
10007376:	1c1a      	adds	r2, r3, #0
10007378:	2302      	movs	r3, #2
1000737a:	f7fd ff57 	bl	1000522c <E_EEPROM_XMC1_Read>
	E_EEPROM_XMC1_Read(CONF_ANG_LOW, 0, &CONF.STATUS_CONF_ANG_LOW[0], 2);
1000737e:	4b43      	ldr	r3, [pc, #268]	; (1000748c <ConfInit+0x120>)
10007380:	2005      	movs	r0, #5
10007382:	2100      	movs	r1, #0
10007384:	1c1a      	adds	r2, r3, #0
10007386:	2302      	movs	r3, #2
10007388:	f7fd ff50 	bl	1000522c <E_EEPROM_XMC1_Read>

	if(CONF.STATUS_CONF_ANG_HIGH[0] == 1){
1000738c:	4b40      	ldr	r3, [pc, #256]	; (10007490 <ConfInit+0x124>)
1000738e:	22da      	movs	r2, #218	; 0xda
10007390:	5c9b      	ldrb	r3, [r3, r2]
10007392:	2b01      	cmp	r3, #1
10007394:	d114      	bne.n	100073c0 <ConfInit+0x54>
		ACTION.Ang_max = 3;						//valor teste prototipo
10007396:	4b3f      	ldr	r3, [pc, #252]	; (10007494 <ConfInit+0x128>)
10007398:	22bf      	movs	r2, #191	; 0xbf
1000739a:	2103      	movs	r1, #3
1000739c:	5499      	strb	r1, [r3, r2]
		CONF.Bot_Ang = CONF_ANG_2;
1000739e:	4b3c      	ldr	r3, [pc, #240]	; (10007490 <ConfInit+0x124>)
100073a0:	22c1      	movs	r2, #193	; 0xc1
100073a2:	2101      	movs	r1, #1
100073a4:	5499      	strb	r1, [r3, r2]
		DIGITAL_IO_SetOutputHigh(&LED_CONF_5);
100073a6:	4b3c      	ldr	r3, [pc, #240]	; (10007498 <ConfInit+0x12c>)
100073a8:	1c18      	adds	r0, r3, #0
100073aa:	f7ff ffad 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
		DIGITAL_IO_SetOutputLow(&LED_CONF_10);
100073ae:	4b3b      	ldr	r3, [pc, #236]	; (1000749c <ConfInit+0x130>)
100073b0:	1c18      	adds	r0, r3, #0
100073b2:	f7ff ffb9 	bl	10007328 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputLow(&LED_CONF_15);
100073b6:	4b3a      	ldr	r3, [pc, #232]	; (100074a0 <ConfInit+0x134>)
100073b8:	1c18      	adds	r0, r3, #0
100073ba:	f7ff ffb5 	bl	10007328 <DIGITAL_IO_SetOutputLow>
100073be:	e032      	b.n	10007426 <ConfInit+0xba>
	}

	else if(CONF.STATUS_CONF_ANG_HIGH[0] == 2){
100073c0:	4b33      	ldr	r3, [pc, #204]	; (10007490 <ConfInit+0x124>)
100073c2:	22da      	movs	r2, #218	; 0xda
100073c4:	5c9b      	ldrb	r3, [r3, r2]
100073c6:	2b02      	cmp	r3, #2
100073c8:	d114      	bne.n	100073f4 <ConfInit+0x88>
		ACTION.Ang_max = 5;						//valor teste prototipo
100073ca:	4b32      	ldr	r3, [pc, #200]	; (10007494 <ConfInit+0x128>)
100073cc:	22bf      	movs	r2, #191	; 0xbf
100073ce:	2105      	movs	r1, #5
100073d0:	5499      	strb	r1, [r3, r2]
		CONF.Bot_Ang = CONF_ANG_3;
100073d2:	4b2f      	ldr	r3, [pc, #188]	; (10007490 <ConfInit+0x124>)
100073d4:	22c1      	movs	r2, #193	; 0xc1
100073d6:	2102      	movs	r1, #2
100073d8:	5499      	strb	r1, [r3, r2]
		DIGITAL_IO_SetOutputLow(&LED_CONF_5);
100073da:	4b2f      	ldr	r3, [pc, #188]	; (10007498 <ConfInit+0x12c>)
100073dc:	1c18      	adds	r0, r3, #0
100073de:	f7ff ffa3 	bl	10007328 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputHigh(&LED_CONF_10);
100073e2:	4b2e      	ldr	r3, [pc, #184]	; (1000749c <ConfInit+0x130>)
100073e4:	1c18      	adds	r0, r3, #0
100073e6:	f7ff ff8f 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
		DIGITAL_IO_SetOutputLow(&LED_CONF_15);
100073ea:	4b2d      	ldr	r3, [pc, #180]	; (100074a0 <ConfInit+0x134>)
100073ec:	1c18      	adds	r0, r3, #0
100073ee:	f7ff ff9b 	bl	10007328 <DIGITAL_IO_SetOutputLow>
100073f2:	e018      	b.n	10007426 <ConfInit+0xba>
	}

	else if(CONF.STATUS_CONF_ANG_HIGH[0] == 3){
100073f4:	4b26      	ldr	r3, [pc, #152]	; (10007490 <ConfInit+0x124>)
100073f6:	22da      	movs	r2, #218	; 0xda
100073f8:	5c9b      	ldrb	r3, [r3, r2]
100073fa:	2b03      	cmp	r3, #3
100073fc:	d113      	bne.n	10007426 <ConfInit+0xba>
		ACTION.Ang_max = 9;						//valor teste prototipo
100073fe:	4b25      	ldr	r3, [pc, #148]	; (10007494 <ConfInit+0x128>)
10007400:	22bf      	movs	r2, #191	; 0xbf
10007402:	2109      	movs	r1, #9
10007404:	5499      	strb	r1, [r3, r2]
		CONF.Bot_Ang = CONF_ANG_1;
10007406:	4b22      	ldr	r3, [pc, #136]	; (10007490 <ConfInit+0x124>)
10007408:	22c1      	movs	r2, #193	; 0xc1
1000740a:	2100      	movs	r1, #0
1000740c:	5499      	strb	r1, [r3, r2]
		DIGITAL_IO_SetOutputLow(&LED_CONF_5);
1000740e:	4b22      	ldr	r3, [pc, #136]	; (10007498 <ConfInit+0x12c>)
10007410:	1c18      	adds	r0, r3, #0
10007412:	f7ff ff89 	bl	10007328 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputLow(&LED_CONF_10);
10007416:	4b21      	ldr	r3, [pc, #132]	; (1000749c <ConfInit+0x130>)
10007418:	1c18      	adds	r0, r3, #0
1000741a:	f7ff ff85 	bl	10007328 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputHigh(&LED_CONF_15);
1000741e:	4b20      	ldr	r3, [pc, #128]	; (100074a0 <ConfInit+0x134>)
10007420:	1c18      	adds	r0, r3, #0
10007422:	f7ff ff71 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
	}

	if(CONF.STATUS_CONF_ANG_LOW[0] == 1){
10007426:	4b1a      	ldr	r3, [pc, #104]	; (10007490 <ConfInit+0x124>)
10007428:	22dc      	movs	r2, #220	; 0xdc
1000742a:	5c9b      	ldrb	r3, [r3, r2]
1000742c:	2b01      	cmp	r3, #1
1000742e:	d10c      	bne.n	1000744a <ConfInit+0xde>
		ACTION.Ang_min = 0;
10007430:	4b18      	ldr	r3, [pc, #96]	; (10007494 <ConfInit+0x128>)
10007432:	22c0      	movs	r2, #192	; 0xc0
10007434:	2100      	movs	r1, #0
10007436:	5099      	str	r1, [r3, r2]
		//	CONF.Maq_Ang_Min = BOT_MIN_DPRESS;
		DIGITAL_IO_SetOutputHigh(&LED_CONF_MIN_0);
10007438:	4b1a      	ldr	r3, [pc, #104]	; (100074a4 <ConfInit+0x138>)
1000743a:	1c18      	adds	r0, r3, #0
1000743c:	f7ff ff64 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
		DIGITAL_IO_SetOutputLow (&LED_CONF_MIN_5);
10007440:	4b19      	ldr	r3, [pc, #100]	; (100074a8 <ConfInit+0x13c>)
10007442:	1c18      	adds	r0, r3, #0
10007444:	f7ff ff70 	bl	10007328 <DIGITAL_IO_SetOutputLow>
10007448:	e010      	b.n	1000746c <ConfInit+0x100>
	}

	else if(CONF.STATUS_CONF_ANG_LOW[0] == 2){
1000744a:	4b11      	ldr	r3, [pc, #68]	; (10007490 <ConfInit+0x124>)
1000744c:	22dc      	movs	r2, #220	; 0xdc
1000744e:	5c9b      	ldrb	r3, [r3, r2]
10007450:	2b02      	cmp	r3, #2
10007452:	d10b      	bne.n	1000746c <ConfInit+0x100>
		ACTION.Ang_min = -5;
10007454:	4b0f      	ldr	r3, [pc, #60]	; (10007494 <ConfInit+0x128>)
10007456:	22c0      	movs	r2, #192	; 0xc0
10007458:	4914      	ldr	r1, [pc, #80]	; (100074ac <ConfInit+0x140>)
1000745a:	5099      	str	r1, [r3, r2]
		//	CONF.Maq_Ang_Min = BOT_MIN_DPRESS;
		DIGITAL_IO_SetOutputLow(&LED_CONF_MIN_0);
1000745c:	4b11      	ldr	r3, [pc, #68]	; (100074a4 <ConfInit+0x138>)
1000745e:	1c18      	adds	r0, r3, #0
10007460:	f7ff ff62 	bl	10007328 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputHigh (&LED_CONF_MIN_5);
10007464:	4b10      	ldr	r3, [pc, #64]	; (100074a8 <ConfInit+0x13c>)
10007466:	1c18      	adds	r0, r3, #0
10007468:	f7ff ff4e 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
	}

	CONF.STATUS_BOT_AUTO = false;
1000746c:	4b08      	ldr	r3, [pc, #32]	; (10007490 <ConfInit+0x124>)
1000746e:	22e0      	movs	r2, #224	; 0xe0
10007470:	2100      	movs	r1, #0
10007472:	5499      	strb	r1, [r3, r2]
	CONF.STATUS_ANG_ZERO = false;
10007474:	4b06      	ldr	r3, [pc, #24]	; (10007490 <ConfInit+0x124>)
10007476:	22e3      	movs	r2, #227	; 0xe3
10007478:	2100      	movs	r1, #0
1000747a:	5499      	strb	r1, [r3, r2]

	taskSetState(TASK_CONF, TASK_GO);
1000747c:	2003      	movs	r0, #3
1000747e:	2101      	movs	r1, #1
10007480:	f001 fb1a 	bl	10008ab8 <taskSetState>

}
10007484:	46bd      	mov	sp, r7
10007486:	bd80      	pop	{r7, pc}
10007488:	20000b26 	.word	0x20000b26
1000748c:	20000b28 	.word	0x20000b28
10007490:	20000a4c 	.word	0x20000a4c
10007494:	20000954 	.word	0x20000954
10007498:	1000c3ac 	.word	0x1000c3ac
1000749c:	1000c39c 	.word	0x1000c39c
100074a0:	1000c3bc 	.word	0x1000c3bc
100074a4:	1000c3cc 	.word	0x1000c3cc
100074a8:	1000c3dc 	.word	0x1000c3dc
100074ac:	c0a00000 	.word	0xc0a00000

100074b0 <ConfTask>:

//********************************************************************************************************************************************
//***********************************************************== CONF TASK ==**************************************************************
//********************************************************************************************************************************************

void ConfTask(void){
100074b0:	b580      	push	{r7, lr}
100074b2:	af00      	add	r7, sp, #0

	CONF.BOT_ZERO = DIGITAL_IO_GetInput(&BOT_MIN);
100074b4:	4bd8      	ldr	r3, [pc, #864]	; (10007818 <ConfTask+0x368>)
100074b6:	1c18      	adds	r0, r3, #0
100074b8:	f7ff ff46 	bl	10007348 <DIGITAL_IO_GetInput>
100074bc:	1c03      	adds	r3, r0, #0
100074be:	b2d9      	uxtb	r1, r3
100074c0:	4bd6      	ldr	r3, [pc, #856]	; (1000781c <ConfTask+0x36c>)
100074c2:	22c9      	movs	r2, #201	; 0xc9
100074c4:	5499      	strb	r1, [r3, r2]
	if(CONF.BOT_ZERO == false){
100074c6:	4bd5      	ldr	r3, [pc, #852]	; (1000781c <ConfTask+0x36c>)
100074c8:	22c9      	movs	r2, #201	; 0xc9
100074ca:	5c9b      	ldrb	r3, [r3, r2]
100074cc:	2b00      	cmp	r3, #0
100074ce:	d000      	beq.n	100074d2 <ConfTask+0x22>
100074d0:	e08e      	b.n	100075f0 <ConfTask+0x140>
		//		CONF.BOT_ZERO = false;


		switch(CONF.Maq_Ang_Min)
100074d2:	4bd2      	ldr	r3, [pc, #840]	; (1000781c <ConfTask+0x36c>)
100074d4:	22c3      	movs	r2, #195	; 0xc3
100074d6:	5c9b      	ldrb	r3, [r3, r2]
100074d8:	2b00      	cmp	r3, #0
100074da:	d002      	beq.n	100074e2 <ConfTask+0x32>
100074dc:	2b01      	cmp	r3, #1
100074de:	d045      	beq.n	1000756c <ConfTask+0xbc>
100074e0:	e086      	b.n	100075f0 <ConfTask+0x140>
		{
		case BOT_MIN_PRESS:
		{

			if(/*(CONF.AUTOMATICO == true && CONF.STATUS_BOT_AUTO == false) ||*/ (CONF.BOT_ZERO == false && CONF.STATUS_ANG_ZERO == false && DEBAUCE.STATUS_DEBAUCE == true)){
100074e2:	4bce      	ldr	r3, [pc, #824]	; (1000781c <ConfTask+0x36c>)
100074e4:	22c9      	movs	r2, #201	; 0xc9
100074e6:	5c9b      	ldrb	r3, [r3, r2]
100074e8:	2b00      	cmp	r3, #0
100074ea:	d13e      	bne.n	1000756a <ConfTask+0xba>
100074ec:	4bcb      	ldr	r3, [pc, #812]	; (1000781c <ConfTask+0x36c>)
100074ee:	22e3      	movs	r2, #227	; 0xe3
100074f0:	5c9b      	ldrb	r3, [r3, r2]
100074f2:	2201      	movs	r2, #1
100074f4:	4053      	eors	r3, r2
100074f6:	b2db      	uxtb	r3, r3
100074f8:	2b00      	cmp	r3, #0
100074fa:	d036      	beq.n	1000756a <ConfTask+0xba>
100074fc:	4bc8      	ldr	r3, [pc, #800]	; (10007820 <ConfTask+0x370>)
100074fe:	22de      	movs	r2, #222	; 0xde
10007500:	5c9b      	ldrb	r3, [r3, r2]
10007502:	2b00      	cmp	r3, #0
10007504:	d031      	beq.n	1000756a <ConfTask+0xba>
				CONF.ANG_MAX_SUP = false;
10007506:	4bc5      	ldr	r3, [pc, #788]	; (1000781c <ConfTask+0x36c>)
10007508:	22e5      	movs	r2, #229	; 0xe5
1000750a:	2100      	movs	r1, #0
1000750c:	5499      	strb	r1, [r3, r2]
				DIGITAL_IO_SetOutputHigh(&LED_CONF_MIN_0);
1000750e:	4bc5      	ldr	r3, [pc, #788]	; (10007824 <ConfTask+0x374>)
10007510:	1c18      	adds	r0, r3, #0
10007512:	f7ff fef9 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
				DIGITAL_IO_SetOutputLow (&LED_CONF_MIN_5);
10007516:	4bc4      	ldr	r3, [pc, #784]	; (10007828 <ConfTask+0x378>)
10007518:	1c18      	adds	r0, r3, #0
1000751a:	f7ff ff05 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				ACTION.Erro_Ang_Min_0 = 4;
1000751e:	4bc3      	ldr	r3, [pc, #780]	; (1000782c <ConfTask+0x37c>)
10007520:	22d1      	movs	r2, #209	; 0xd1
10007522:	2104      	movs	r1, #4
10007524:	5499      	strb	r1, [r3, r2]
				ACTION.Ang_min = 0;
10007526:	4bc1      	ldr	r3, [pc, #772]	; (1000782c <ConfTask+0x37c>)
10007528:	22c0      	movs	r2, #192	; 0xc0
1000752a:	2100      	movs	r1, #0
1000752c:	5099      	str	r1, [r3, r2]
				CONF.BOT_ZERO = 1;
1000752e:	4bbb      	ldr	r3, [pc, #748]	; (1000781c <ConfTask+0x36c>)
10007530:	22c9      	movs	r2, #201	; 0xc9
10007532:	2101      	movs	r1, #1
10007534:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_ANG_ZERO = true;
10007536:	4bb9      	ldr	r3, [pc, #740]	; (1000781c <ConfTask+0x36c>)
10007538:	22e3      	movs	r2, #227	; 0xe3
1000753a:	2101      	movs	r1, #1
1000753c:	5499      	strb	r1, [r3, r2]
				DEBAUCE.STATUS_DEBAUCE = false;
1000753e:	4bb8      	ldr	r3, [pc, #736]	; (10007820 <ConfTask+0x370>)
10007540:	22de      	movs	r2, #222	; 0xde
10007542:	2100      	movs	r1, #0
10007544:	5499      	strb	r1, [r3, r2]
				CONF.Maq_Ang_Min = BOT_MIN_DPRESS;
10007546:	4bb5      	ldr	r3, [pc, #724]	; (1000781c <ConfTask+0x36c>)
10007548:	22c3      	movs	r2, #195	; 0xc3
1000754a:	2101      	movs	r1, #1
1000754c:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_CONF_ANG_LOW[0] = 1;
1000754e:	4bb3      	ldr	r3, [pc, #716]	; (1000781c <ConfTask+0x36c>)
10007550:	22dc      	movs	r2, #220	; 0xdc
10007552:	2101      	movs	r1, #1
10007554:	5499      	strb	r1, [r3, r2]
				E_EEPROM_XMC1_Write(CONF_ANG_LOW, &CONF.STATUS_CONF_ANG_LOW[0]);
10007556:	4bb6      	ldr	r3, [pc, #728]	; (10007830 <ConfTask+0x380>)
10007558:	2005      	movs	r0, #5
1000755a:	1c19      	adds	r1, r3, #0
1000755c:	f7fd fe3c 	bl	100051d8 <E_EEPROM_XMC1_Write>
				taskSetState(TASK_DEBAUCE, TASK_GO);
10007560:	2004      	movs	r0, #4
10007562:	2101      	movs	r1, #1
10007564:	f001 faa8 	bl	10008ab8 <taskSetState>
			}
		}
		break;
10007568:	e042      	b.n	100075f0 <ConfTask+0x140>
1000756a:	e041      	b.n	100075f0 <ConfTask+0x140>

		case BOT_MIN_DPRESS:
		{
			if(/*(CONF.AUTOMATICO == true && CONF.STATUS_BOT_AUTO == true) ||*/ (CONF.BOT_ZERO == false && CONF.STATUS_ANG_ZERO == true && DEBAUCE.STATUS_DEBAUCE == true)){
1000756c:	4bab      	ldr	r3, [pc, #684]	; (1000781c <ConfTask+0x36c>)
1000756e:	22c9      	movs	r2, #201	; 0xc9
10007570:	5c9b      	ldrb	r3, [r3, r2]
10007572:	2b00      	cmp	r3, #0
10007574:	d13b      	bne.n	100075ee <ConfTask+0x13e>
10007576:	4ba9      	ldr	r3, [pc, #676]	; (1000781c <ConfTask+0x36c>)
10007578:	22e3      	movs	r2, #227	; 0xe3
1000757a:	5c9b      	ldrb	r3, [r3, r2]
1000757c:	2b00      	cmp	r3, #0
1000757e:	d036      	beq.n	100075ee <ConfTask+0x13e>
10007580:	4ba7      	ldr	r3, [pc, #668]	; (10007820 <ConfTask+0x370>)
10007582:	22de      	movs	r2, #222	; 0xde
10007584:	5c9b      	ldrb	r3, [r3, r2]
10007586:	2b00      	cmp	r3, #0
10007588:	d031      	beq.n	100075ee <ConfTask+0x13e>
				CONF.ANG_MAX_SUP = true;
1000758a:	4ba4      	ldr	r3, [pc, #656]	; (1000781c <ConfTask+0x36c>)
1000758c:	22e5      	movs	r2, #229	; 0xe5
1000758e:	2101      	movs	r1, #1
10007590:	5499      	strb	r1, [r3, r2]
				DIGITAL_IO_SetOutputLow (&LED_CONF_MIN_0);
10007592:	4ba4      	ldr	r3, [pc, #656]	; (10007824 <ConfTask+0x374>)
10007594:	1c18      	adds	r0, r3, #0
10007596:	f7ff fec7 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				DIGITAL_IO_SetOutputHigh(&LED_CONF_MIN_5);
1000759a:	4ba3      	ldr	r3, [pc, #652]	; (10007828 <ConfTask+0x378>)
1000759c:	1c18      	adds	r0, r3, #0
1000759e:	f7ff feb3 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
				ACTION.Erro_Ang_Min_5 = 4;
100075a2:	4ba2      	ldr	r3, [pc, #648]	; (1000782c <ConfTask+0x37c>)
100075a4:	22d0      	movs	r2, #208	; 0xd0
100075a6:	2104      	movs	r1, #4
100075a8:	5499      	strb	r1, [r3, r2]
				ACTION.Ang_min = -5;
100075aa:	4ba0      	ldr	r3, [pc, #640]	; (1000782c <ConfTask+0x37c>)
100075ac:	22c0      	movs	r2, #192	; 0xc0
100075ae:	49a1      	ldr	r1, [pc, #644]	; (10007834 <ConfTask+0x384>)
100075b0:	5099      	str	r1, [r3, r2]
				CONF.Maq_Ang_Min = BOT_MIN_PRESS;
100075b2:	4b9a      	ldr	r3, [pc, #616]	; (1000781c <ConfTask+0x36c>)
100075b4:	22c3      	movs	r2, #195	; 0xc3
100075b6:	2100      	movs	r1, #0
100075b8:	5499      	strb	r1, [r3, r2]
				CONF.Cont_AUT = 0;
100075ba:	4b98      	ldr	r3, [pc, #608]	; (1000781c <ConfTask+0x36c>)
100075bc:	22d2      	movs	r2, #210	; 0xd2
100075be:	2100      	movs	r1, #0
100075c0:	5299      	strh	r1, [r3, r2]
				CONF.STATUS_ANG_ZERO = false;
100075c2:	4b96      	ldr	r3, [pc, #600]	; (1000781c <ConfTask+0x36c>)
100075c4:	22e3      	movs	r2, #227	; 0xe3
100075c6:	2100      	movs	r1, #0
100075c8:	5499      	strb	r1, [r3, r2]
				DEBAUCE.STATUS_DEBAUCE = false;
100075ca:	4b95      	ldr	r3, [pc, #596]	; (10007820 <ConfTask+0x370>)
100075cc:	22de      	movs	r2, #222	; 0xde
100075ce:	2100      	movs	r1, #0
100075d0:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_CONF_ANG_LOW[0] = 2;
100075d2:	4b92      	ldr	r3, [pc, #584]	; (1000781c <ConfTask+0x36c>)
100075d4:	22dc      	movs	r2, #220	; 0xdc
100075d6:	2102      	movs	r1, #2
100075d8:	5499      	strb	r1, [r3, r2]
				E_EEPROM_XMC1_Write(CONF_ANG_LOW, &CONF.STATUS_CONF_ANG_LOW[0]);
100075da:	4b95      	ldr	r3, [pc, #596]	; (10007830 <ConfTask+0x380>)
100075dc:	2005      	movs	r0, #5
100075de:	1c19      	adds	r1, r3, #0
100075e0:	f7fd fdfa 	bl	100051d8 <E_EEPROM_XMC1_Write>
				taskSetState(TASK_DEBAUCE, TASK_GO);
100075e4:	2004      	movs	r0, #4
100075e6:	2101      	movs	r1, #1
100075e8:	f001 fa66 	bl	10008ab8 <taskSetState>

			}
		}
		break;
100075ec:	e7ff      	b.n	100075ee <ConfTask+0x13e>
100075ee:	46c0      	nop			; (mov r8, r8)
		}
	}


	CONF.BOT_AUTO = DIGITAL_IO_GetInput(&BOT_AUTO);
100075f0:	4b91      	ldr	r3, [pc, #580]	; (10007838 <ConfTask+0x388>)
100075f2:	1c18      	adds	r0, r3, #0
100075f4:	f7ff fea8 	bl	10007348 <DIGITAL_IO_GetInput>
100075f8:	1c03      	adds	r3, r0, #0
100075fa:	b2d9      	uxtb	r1, r3
100075fc:	4b87      	ldr	r3, [pc, #540]	; (1000781c <ConfTask+0x36c>)
100075fe:	22cb      	movs	r2, #203	; 0xcb
10007600:	5499      	strb	r1, [r3, r2]
	if(CONF.BOT_AUTO == false){
10007602:	4b86      	ldr	r3, [pc, #536]	; (1000781c <ConfTask+0x36c>)
10007604:	22cb      	movs	r2, #203	; 0xcb
10007606:	5c9b      	ldrb	r3, [r3, r2]
10007608:	2b00      	cmp	r3, #0
1000760a:	d000      	beq.n	1000760e <ConfTask+0x15e>
1000760c:	e089      	b.n	10007722 <ConfTask+0x272>
		//		CONF.BOT_AUTO = true;

		switch(CONF.Maq_Auto)
1000760e:	4b83      	ldr	r3, [pc, #524]	; (1000781c <ConfTask+0x36c>)
10007610:	22c2      	movs	r2, #194	; 0xc2
10007612:	5c9b      	ldrb	r3, [r3, r2]
10007614:	2b00      	cmp	r3, #0
10007616:	d002      	beq.n	1000761e <ConfTask+0x16e>
10007618:	2b01      	cmp	r3, #1
1000761a:	d03d      	beq.n	10007698 <ConfTask+0x1e8>
1000761c:	e081      	b.n	10007722 <ConfTask+0x272>
		{
		case BOT_AUTO_PRESS:
		{
			if((CONF.AUTOMATICO == true && CONF.STATUS_BOT_AUTO == false) || (CONF.BOT_AUTO == false && CONF.STATUS_BOT_AUTO == false && DEBAUCE.STATUS_DEBAUCE == true)){ //Liga automatico
1000761e:	4b7f      	ldr	r3, [pc, #508]	; (1000781c <ConfTask+0x36c>)
10007620:	22ca      	movs	r2, #202	; 0xca
10007622:	5c9b      	ldrb	r3, [r3, r2]
10007624:	2b00      	cmp	r3, #0
10007626:	d007      	beq.n	10007638 <ConfTask+0x188>
10007628:	4b7c      	ldr	r3, [pc, #496]	; (1000781c <ConfTask+0x36c>)
1000762a:	22e0      	movs	r2, #224	; 0xe0
1000762c:	5c9b      	ldrb	r3, [r3, r2]
1000762e:	2201      	movs	r2, #1
10007630:	4053      	eors	r3, r2
10007632:	b2db      	uxtb	r3, r3
10007634:	2b00      	cmp	r3, #0
10007636:	d111      	bne.n	1000765c <ConfTask+0x1ac>
10007638:	4b78      	ldr	r3, [pc, #480]	; (1000781c <ConfTask+0x36c>)
1000763a:	22cb      	movs	r2, #203	; 0xcb
1000763c:	5c9b      	ldrb	r3, [r3, r2]
1000763e:	2b00      	cmp	r3, #0
10007640:	d129      	bne.n	10007696 <ConfTask+0x1e6>
10007642:	4b76      	ldr	r3, [pc, #472]	; (1000781c <ConfTask+0x36c>)
10007644:	22e0      	movs	r2, #224	; 0xe0
10007646:	5c9b      	ldrb	r3, [r3, r2]
10007648:	2201      	movs	r2, #1
1000764a:	4053      	eors	r3, r2
1000764c:	b2db      	uxtb	r3, r3
1000764e:	2b00      	cmp	r3, #0
10007650:	d021      	beq.n	10007696 <ConfTask+0x1e6>
10007652:	4b73      	ldr	r3, [pc, #460]	; (10007820 <ConfTask+0x370>)
10007654:	22de      	movs	r2, #222	; 0xde
10007656:	5c9b      	ldrb	r3, [r3, r2]
10007658:	2b00      	cmp	r3, #0
1000765a:	d01c      	beq.n	10007696 <ConfTask+0x1e6>
				CONF.Maq_Auto = BOT_AUTO_DPRESS;
1000765c:	4b6f      	ldr	r3, [pc, #444]	; (1000781c <ConfTask+0x36c>)
1000765e:	22c2      	movs	r2, #194	; 0xc2
10007660:	2101      	movs	r1, #1
10007662:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_BOT_AUTO = true;
10007664:	4b6d      	ldr	r3, [pc, #436]	; (1000781c <ConfTask+0x36c>)
10007666:	22e0      	movs	r2, #224	; 0xe0
10007668:	2101      	movs	r1, #1
1000766a:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_AUTOMATICO = true;
1000766c:	4b6b      	ldr	r3, [pc, #428]	; (1000781c <ConfTask+0x36c>)
1000766e:	22de      	movs	r2, #222	; 0xde
10007670:	2101      	movs	r1, #1
10007672:	5499      	strb	r1, [r3, r2]
				DEBAUCE.STATUS_DEBAUCE = false;
10007674:	4b6a      	ldr	r3, [pc, #424]	; (10007820 <ConfTask+0x370>)
10007676:	22de      	movs	r2, #222	; 0xde
10007678:	2100      	movs	r1, #0
1000767a:	5499      	strb	r1, [r3, r2]
				CONF.BOT_AUTO = 1;
1000767c:	4b67      	ldr	r3, [pc, #412]	; (1000781c <ConfTask+0x36c>)
1000767e:	22cb      	movs	r2, #203	; 0xcb
10007680:	2101      	movs	r1, #1
10007682:	5499      	strb	r1, [r3, r2]
				taskSetState(TASK_DEBAUCE, TASK_GO);
10007684:	2004      	movs	r0, #4
10007686:	2101      	movs	r1, #1
10007688:	f001 fa16 	bl	10008ab8 <taskSetState>
				taskSetState(TASK_ACTION, TASK_GO);
1000768c:	2002      	movs	r0, #2
1000768e:	2101      	movs	r1, #1
10007690:	f001 fa12 	bl	10008ab8 <taskSetState>
			}
		}
		break;
10007694:	e045      	b.n	10007722 <ConfTask+0x272>
10007696:	e044      	b.n	10007722 <ConfTask+0x272>

		case BOT_AUTO_DPRESS:
		{
			if((CONF.AUTOMATICO == true && CONF.STATUS_BOT_AUTO == true) || (CONF.BOT_AUTO == false && CONF.STATUS_BOT_AUTO == true && DEBAUCE.STATUS_DEBAUCE == true)){ //Desliga automatico
10007698:	4b60      	ldr	r3, [pc, #384]	; (1000781c <ConfTask+0x36c>)
1000769a:	22ca      	movs	r2, #202	; 0xca
1000769c:	5c9b      	ldrb	r3, [r3, r2]
1000769e:	2b00      	cmp	r3, #0
100076a0:	d004      	beq.n	100076ac <ConfTask+0x1fc>
100076a2:	4b5e      	ldr	r3, [pc, #376]	; (1000781c <ConfTask+0x36c>)
100076a4:	22e0      	movs	r2, #224	; 0xe0
100076a6:	5c9b      	ldrb	r3, [r3, r2]
100076a8:	2b00      	cmp	r3, #0
100076aa:	d10e      	bne.n	100076ca <ConfTask+0x21a>
100076ac:	4b5b      	ldr	r3, [pc, #364]	; (1000781c <ConfTask+0x36c>)
100076ae:	22cb      	movs	r2, #203	; 0xcb
100076b0:	5c9b      	ldrb	r3, [r3, r2]
100076b2:	2b00      	cmp	r3, #0
100076b4:	d134      	bne.n	10007720 <ConfTask+0x270>
100076b6:	4b59      	ldr	r3, [pc, #356]	; (1000781c <ConfTask+0x36c>)
100076b8:	22e0      	movs	r2, #224	; 0xe0
100076ba:	5c9b      	ldrb	r3, [r3, r2]
100076bc:	2b00      	cmp	r3, #0
100076be:	d02f      	beq.n	10007720 <ConfTask+0x270>
100076c0:	4b57      	ldr	r3, [pc, #348]	; (10007820 <ConfTask+0x370>)
100076c2:	22de      	movs	r2, #222	; 0xde
100076c4:	5c9b      	ldrb	r3, [r3, r2]
100076c6:	2b00      	cmp	r3, #0
100076c8:	d02a      	beq.n	10007720 <ConfTask+0x270>
				CONF.Maq_Auto = BOT_AUTO_PRESS;
100076ca:	4b54      	ldr	r3, [pc, #336]	; (1000781c <ConfTask+0x36c>)
100076cc:	22c2      	movs	r2, #194	; 0xc2
100076ce:	2100      	movs	r1, #0
100076d0:	5499      	strb	r1, [r3, r2]
				CONF.Cont_AUT = 0;
100076d2:	4b52      	ldr	r3, [pc, #328]	; (1000781c <ConfTask+0x36c>)
100076d4:	22d2      	movs	r2, #210	; 0xd2
100076d6:	2100      	movs	r1, #0
100076d8:	5299      	strh	r1, [r3, r2]
				CONF.STATUS_BOT_AUTO = false;
100076da:	4b50      	ldr	r3, [pc, #320]	; (1000781c <ConfTask+0x36c>)
100076dc:	22e0      	movs	r2, #224	; 0xe0
100076de:	2100      	movs	r1, #0
100076e0:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_AUTOMATICO = false;
100076e2:	4b4e      	ldr	r3, [pc, #312]	; (1000781c <ConfTask+0x36c>)
100076e4:	22de      	movs	r2, #222	; 0xde
100076e6:	2100      	movs	r1, #0
100076e8:	5499      	strb	r1, [r3, r2]
				DEBAUCE.STATUS_DEBAUCE = false;
100076ea:	4b4d      	ldr	r3, [pc, #308]	; (10007820 <ConfTask+0x370>)
100076ec:	22de      	movs	r2, #222	; 0xde
100076ee:	2100      	movs	r1, #0
100076f0:	5499      	strb	r1, [r3, r2]
				CONF.BOT_AUTO = 1;
100076f2:	4b4a      	ldr	r3, [pc, #296]	; (1000781c <ConfTask+0x36c>)
100076f4:	22cb      	movs	r2, #203	; 0xcb
100076f6:	2101      	movs	r1, #1
100076f8:	5499      	strb	r1, [r3, r2]
				taskSetState(TASK_DEBAUCE, TASK_GO);
100076fa:	2004      	movs	r0, #4
100076fc:	2101      	movs	r1, #1
100076fe:	f001 f9db 	bl	10008ab8 <taskSetState>
				DIGITAL_IO_SetOutputLow(&LED1);
10007702:	4b4e      	ldr	r3, [pc, #312]	; (1000783c <ConfTask+0x38c>)
10007704:	1c18      	adds	r0, r3, #0
10007706:	f7ff fe0f 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				DIGITAL_IO_SetOutputLow(&LED2);
1000770a:	4b4d      	ldr	r3, [pc, #308]	; (10007840 <ConfTask+0x390>)
1000770c:	1c18      	adds	r0, r3, #0
1000770e:	f7ff fe0b 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				taskSetState(TASK_ACTION, TASK_STOP);
10007712:	2301      	movs	r3, #1
10007714:	425b      	negs	r3, r3
10007716:	2002      	movs	r0, #2
10007718:	1c19      	adds	r1, r3, #0
1000771a:	f001 f9cd 	bl	10008ab8 <taskSetState>
			}
		}
		break;
1000771e:	e7ff      	b.n	10007720 <ConfTask+0x270>
10007720:	46c0      	nop			; (mov r8, r8)





	CONF.BOT_MANUAL = DIGITAL_IO_GetInput(&BOT_MANUAL);
10007722:	4b48      	ldr	r3, [pc, #288]	; (10007844 <ConfTask+0x394>)
10007724:	1c18      	adds	r0, r3, #0
10007726:	f7ff fe0f 	bl	10007348 <DIGITAL_IO_GetInput>
1000772a:	1c03      	adds	r3, r0, #0
1000772c:	b2d9      	uxtb	r1, r3
1000772e:	4b3b      	ldr	r3, [pc, #236]	; (1000781c <ConfTask+0x36c>)
10007730:	22cd      	movs	r2, #205	; 0xcd
10007732:	5499      	strb	r1, [r3, r2]
	if(CONF.MANUAL == true || CONF.BOT_MANUAL == 1){
10007734:	4b39      	ldr	r3, [pc, #228]	; (1000781c <ConfTask+0x36c>)
10007736:	22cc      	movs	r2, #204	; 0xcc
10007738:	5c9b      	ldrb	r3, [r3, r2]
1000773a:	2b00      	cmp	r3, #0
1000773c:	d104      	bne.n	10007748 <ConfTask+0x298>
1000773e:	4b37      	ldr	r3, [pc, #220]	; (1000781c <ConfTask+0x36c>)
10007740:	22cd      	movs	r2, #205	; 0xcd
10007742:	5c9b      	ldrb	r3, [r3, r2]
10007744:	2b01      	cmp	r3, #1
10007746:	d11d      	bne.n	10007784 <ConfTask+0x2d4>
		CONF.Maq_Auto = BOT_AUTO_PRESS;
10007748:	4b34      	ldr	r3, [pc, #208]	; (1000781c <ConfTask+0x36c>)
1000774a:	22c2      	movs	r2, #194	; 0xc2
1000774c:	2100      	movs	r1, #0
1000774e:	5499      	strb	r1, [r3, r2]
		CONF.STATUS_BOT_AUTO = false;
10007750:	4b32      	ldr	r3, [pc, #200]	; (1000781c <ConfTask+0x36c>)
10007752:	22e0      	movs	r2, #224	; 0xe0
10007754:	2100      	movs	r1, #0
10007756:	5499      	strb	r1, [r3, r2]
		CONF.STATUS_AUTOMATICO = false;
10007758:	4b30      	ldr	r3, [pc, #192]	; (1000781c <ConfTask+0x36c>)
1000775a:	22de      	movs	r2, #222	; 0xde
1000775c:	2100      	movs	r1, #0
1000775e:	5499      	strb	r1, [r3, r2]
		CONF.STATUS_MANUAL = true;
10007760:	4b2e      	ldr	r3, [pc, #184]	; (1000781c <ConfTask+0x36c>)
10007762:	22df      	movs	r2, #223	; 0xdf
10007764:	2101      	movs	r1, #1
10007766:	5499      	strb	r1, [r3, r2]
		CONF.STATUS_BOT_MANUAL = true;
10007768:	4b2c      	ldr	r3, [pc, #176]	; (1000781c <ConfTask+0x36c>)
1000776a:	22e1      	movs	r2, #225	; 0xe1
1000776c:	2101      	movs	r1, #1
1000776e:	5499      	strb	r1, [r3, r2]
		taskSetState(TASK_ACTION, TASK_GO);
10007770:	2002      	movs	r0, #2
10007772:	2101      	movs	r1, #1
10007774:	f001 f9a0 	bl	10008ab8 <taskSetState>
		taskSetState(TASK_CONF, TASK_STOP);
10007778:	2301      	movs	r3, #1
1000777a:	425b      	negs	r3, r3
1000777c:	2003      	movs	r0, #3
1000777e:	1c19      	adds	r1, r3, #0
10007780:	f001 f99a 	bl	10008ab8 <taskSetState>
	}

	if(CONF.ANGLE == true ){
10007784:	4b25      	ldr	r3, [pc, #148]	; (1000781c <ConfTask+0x36c>)
10007786:	22c6      	movs	r2, #198	; 0xc6
10007788:	5c9b      	ldrb	r3, [r3, r2]
1000778a:	2b00      	cmp	r3, #0
1000778c:	d100      	bne.n	10007790 <ConfTask+0x2e0>
1000778e:	e0ca      	b.n	10007926 <ConfTask+0x476>
		CONF.ANGLE = false;
10007790:	4b22      	ldr	r3, [pc, #136]	; (1000781c <ConfTask+0x36c>)
10007792:	22c6      	movs	r2, #198	; 0xc6
10007794:	2100      	movs	r1, #0
10007796:	5499      	strb	r1, [r3, r2]
		switch(CONF.Bot_Ang)
10007798:	4b20      	ldr	r3, [pc, #128]	; (1000781c <ConfTask+0x36c>)
1000779a:	22c1      	movs	r2, #193	; 0xc1
1000779c:	5c9b      	ldrb	r3, [r3, r2]
1000779e:	2b01      	cmp	r3, #1
100077a0:	d05a      	beq.n	10007858 <ConfTask+0x3a8>
100077a2:	2b02      	cmp	r3, #2
100077a4:	d100      	bne.n	100077a8 <ConfTask+0x2f8>
100077a6:	e08b      	b.n	100078c0 <ConfTask+0x410>
100077a8:	2b00      	cmp	r3, #0
100077aa:	d000      	beq.n	100077ae <ConfTask+0x2fe>
100077ac:	e0bb      	b.n	10007926 <ConfTask+0x476>
		{
		case CONF_ANG_1:
		{
			if(DEBAUCE.STATUS_DEBAUCE == true){
100077ae:	4b1c      	ldr	r3, [pc, #112]	; (10007820 <ConfTask+0x370>)
100077b0:	22de      	movs	r2, #222	; 0xde
100077b2:	5c9b      	ldrb	r3, [r3, r2]
100077b4:	2b00      	cmp	r3, #0
100077b6:	d02d      	beq.n	10007814 <ConfTask+0x364>
				CONF.ANG_MAX_INF = false;
100077b8:	4b18      	ldr	r3, [pc, #96]	; (1000781c <ConfTask+0x36c>)
100077ba:	22e4      	movs	r2, #228	; 0xe4
100077bc:	2100      	movs	r1, #0
100077be:	5499      	strb	r1, [r3, r2]
				DEBAUCE.STATUS_DEBAUCE = false;
100077c0:	4b17      	ldr	r3, [pc, #92]	; (10007820 <ConfTask+0x370>)
100077c2:	22de      	movs	r2, #222	; 0xde
100077c4:	2100      	movs	r1, #0
100077c6:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_CONF_ANG_HIGH[0] = 1;
100077c8:	4b14      	ldr	r3, [pc, #80]	; (1000781c <ConfTask+0x36c>)
100077ca:	22da      	movs	r2, #218	; 0xda
100077cc:	2101      	movs	r1, #1
100077ce:	5499      	strb	r1, [r3, r2]
				ACTION.Ang_max = 3;						//valor teste prototipo
100077d0:	4b16      	ldr	r3, [pc, #88]	; (1000782c <ConfTask+0x37c>)
100077d2:	22bf      	movs	r2, #191	; 0xbf
100077d4:	2103      	movs	r1, #3
100077d6:	5499      	strb	r1, [r3, r2]
				ACTION.VAL_Porcent = 95;
100077d8:	4b14      	ldr	r3, [pc, #80]	; (1000782c <ConfTask+0x37c>)
100077da:	22c5      	movs	r2, #197	; 0xc5
100077dc:	215f      	movs	r1, #95	; 0x5f
100077de:	5499      	strb	r1, [r3, r2]
				CONF.Bot_Ang = CONF_ANG_2;
100077e0:	4b0e      	ldr	r3, [pc, #56]	; (1000781c <ConfTask+0x36c>)
100077e2:	22c1      	movs	r2, #193	; 0xc1
100077e4:	2101      	movs	r1, #1
100077e6:	5499      	strb	r1, [r3, r2]
				taskSetState(TASK_DEBAUCE, TASK_GO);
100077e8:	2004      	movs	r0, #4
100077ea:	2101      	movs	r1, #1
100077ec:	f001 f964 	bl	10008ab8 <taskSetState>
				DIGITAL_IO_SetOutputHigh(&LED_CONF_5);
100077f0:	4b15      	ldr	r3, [pc, #84]	; (10007848 <ConfTask+0x398>)
100077f2:	1c18      	adds	r0, r3, #0
100077f4:	f7ff fd88 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
				DIGITAL_IO_SetOutputLow(&LED_CONF_10);
100077f8:	4b14      	ldr	r3, [pc, #80]	; (1000784c <ConfTask+0x39c>)
100077fa:	1c18      	adds	r0, r3, #0
100077fc:	f7ff fd94 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				DIGITAL_IO_SetOutputLow(&LED_CONF_15);
10007800:	4b13      	ldr	r3, [pc, #76]	; (10007850 <ConfTask+0x3a0>)
10007802:	1c18      	adds	r0, r3, #0
10007804:	f7ff fd90 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				E_EEPROM_XMC1_Write(CONF_ANG_HIGH, &CONF.STATUS_CONF_ANG_HIGH[0]);
10007808:	4b12      	ldr	r3, [pc, #72]	; (10007854 <ConfTask+0x3a4>)
1000780a:	2004      	movs	r0, #4
1000780c:	1c19      	adds	r1, r3, #0
1000780e:	f7fd fce3 	bl	100051d8 <E_EEPROM_XMC1_Write>
			}

		}
		break;
10007812:	e088      	b.n	10007926 <ConfTask+0x476>
10007814:	e087      	b.n	10007926 <ConfTask+0x476>
10007816:	46c0      	nop			; (mov r8, r8)
10007818:	1000c40c 	.word	0x1000c40c
1000781c:	20000a4c 	.word	0x20000a4c
10007820:	20000b34 	.word	0x20000b34
10007824:	1000c3cc 	.word	0x1000c3cc
10007828:	1000c3dc 	.word	0x1000c3dc
1000782c:	20000954 	.word	0x20000954
10007830:	20000b28 	.word	0x20000b28
10007834:	c0a00000 	.word	0xc0a00000
10007838:	1000c3ec 	.word	0x1000c3ec
1000783c:	1000c35c 	.word	0x1000c35c
10007840:	1000c36c 	.word	0x1000c36c
10007844:	1000c3fc 	.word	0x1000c3fc
10007848:	1000c3ac 	.word	0x1000c3ac
1000784c:	1000c39c 	.word	0x1000c39c
10007850:	1000c3bc 	.word	0x1000c3bc
10007854:	20000b26 	.word	0x20000b26

		case CONF_ANG_2:
		{
			if(DEBAUCE.STATUS_DEBAUCE == true){
10007858:	4b34      	ldr	r3, [pc, #208]	; (1000792c <ConfTask+0x47c>)
1000785a:	22de      	movs	r2, #222	; 0xde
1000785c:	5c9b      	ldrb	r3, [r3, r2]
1000785e:	2b00      	cmp	r3, #0
10007860:	d02d      	beq.n	100078be <ConfTask+0x40e>
				CONF.ANG_MAX_INF = false;
10007862:	4b33      	ldr	r3, [pc, #204]	; (10007930 <ConfTask+0x480>)
10007864:	22e4      	movs	r2, #228	; 0xe4
10007866:	2100      	movs	r1, #0
10007868:	5499      	strb	r1, [r3, r2]
				DEBAUCE.STATUS_DEBAUCE = false;
1000786a:	4b30      	ldr	r3, [pc, #192]	; (1000792c <ConfTask+0x47c>)
1000786c:	22de      	movs	r2, #222	; 0xde
1000786e:	2100      	movs	r1, #0
10007870:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_CONF_ANG_HIGH[0] = 2;
10007872:	4b2f      	ldr	r3, [pc, #188]	; (10007930 <ConfTask+0x480>)
10007874:	22da      	movs	r2, #218	; 0xda
10007876:	2102      	movs	r1, #2
10007878:	5499      	strb	r1, [r3, r2]
				ACTION.Ang_max = 5;						//valor teste prototipo
1000787a:	4b2e      	ldr	r3, [pc, #184]	; (10007934 <ConfTask+0x484>)
1000787c:	22bf      	movs	r2, #191	; 0xbf
1000787e:	2105      	movs	r1, #5
10007880:	5499      	strb	r1, [r3, r2]
				ACTION.VAL_Porcent = 50;
10007882:	4b2c      	ldr	r3, [pc, #176]	; (10007934 <ConfTask+0x484>)
10007884:	22c5      	movs	r2, #197	; 0xc5
10007886:	2132      	movs	r1, #50	; 0x32
10007888:	5499      	strb	r1, [r3, r2]
				CONF.Bot_Ang = CONF_ANG_3;
1000788a:	4b29      	ldr	r3, [pc, #164]	; (10007930 <ConfTask+0x480>)
1000788c:	22c1      	movs	r2, #193	; 0xc1
1000788e:	2102      	movs	r1, #2
10007890:	5499      	strb	r1, [r3, r2]
				taskSetState(TASK_DEBAUCE, TASK_GO);
10007892:	2004      	movs	r0, #4
10007894:	2101      	movs	r1, #1
10007896:	f001 f90f 	bl	10008ab8 <taskSetState>
				DIGITAL_IO_SetOutputLow (&LED_CONF_5);
1000789a:	4b27      	ldr	r3, [pc, #156]	; (10007938 <ConfTask+0x488>)
1000789c:	1c18      	adds	r0, r3, #0
1000789e:	f7ff fd43 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				DIGITAL_IO_SetOutputHigh(&LED_CONF_10);
100078a2:	4b26      	ldr	r3, [pc, #152]	; (1000793c <ConfTask+0x48c>)
100078a4:	1c18      	adds	r0, r3, #0
100078a6:	f7ff fd2f 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
				DIGITAL_IO_SetOutputLow (&LED_CONF_15);
100078aa:	4b25      	ldr	r3, [pc, #148]	; (10007940 <ConfTask+0x490>)
100078ac:	1c18      	adds	r0, r3, #0
100078ae:	f7ff fd3b 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				E_EEPROM_XMC1_Write(CONF_ANG_HIGH, &CONF.STATUS_CONF_ANG_HIGH[0]);
100078b2:	4b24      	ldr	r3, [pc, #144]	; (10007944 <ConfTask+0x494>)
100078b4:	2004      	movs	r0, #4
100078b6:	1c19      	adds	r1, r3, #0
100078b8:	f7fd fc8e 	bl	100051d8 <E_EEPROM_XMC1_Write>
			}

		}
		break;
100078bc:	e033      	b.n	10007926 <ConfTask+0x476>
100078be:	e032      	b.n	10007926 <ConfTask+0x476>

		case CONF_ANG_3:
		{
			if(DEBAUCE.STATUS_DEBAUCE == true){
100078c0:	4b1a      	ldr	r3, [pc, #104]	; (1000792c <ConfTask+0x47c>)
100078c2:	22de      	movs	r2, #222	; 0xde
100078c4:	5c9b      	ldrb	r3, [r3, r2]
100078c6:	2b00      	cmp	r3, #0
100078c8:	d02c      	beq.n	10007924 <ConfTask+0x474>
				CONF.ANG_MAX_INF = true;
100078ca:	4b19      	ldr	r3, [pc, #100]	; (10007930 <ConfTask+0x480>)
100078cc:	22e4      	movs	r2, #228	; 0xe4
100078ce:	2101      	movs	r1, #1
100078d0:	5499      	strb	r1, [r3, r2]
				DEBAUCE.STATUS_DEBAUCE = false;
100078d2:	4b16      	ldr	r3, [pc, #88]	; (1000792c <ConfTask+0x47c>)
100078d4:	22de      	movs	r2, #222	; 0xde
100078d6:	2100      	movs	r1, #0
100078d8:	5499      	strb	r1, [r3, r2]
				CONF.STATUS_CONF_ANG_HIGH[0] = 3;
100078da:	4b15      	ldr	r3, [pc, #84]	; (10007930 <ConfTask+0x480>)
100078dc:	22da      	movs	r2, #218	; 0xda
100078de:	2103      	movs	r1, #3
100078e0:	5499      	strb	r1, [r3, r2]
				ACTION.Ang_max = 9;						//valor teste prototipo
100078e2:	4b14      	ldr	r3, [pc, #80]	; (10007934 <ConfTask+0x484>)
100078e4:	22bf      	movs	r2, #191	; 0xbf
100078e6:	2109      	movs	r1, #9
100078e8:	5499      	strb	r1, [r3, r2]
				ACTION.VAL_Porcent = 10;
100078ea:	4b12      	ldr	r3, [pc, #72]	; (10007934 <ConfTask+0x484>)
100078ec:	22c5      	movs	r2, #197	; 0xc5
100078ee:	210a      	movs	r1, #10
100078f0:	5499      	strb	r1, [r3, r2]
				CONF.Bot_Ang = CONF_ANG_1;
100078f2:	4b0f      	ldr	r3, [pc, #60]	; (10007930 <ConfTask+0x480>)
100078f4:	22c1      	movs	r2, #193	; 0xc1
100078f6:	2100      	movs	r1, #0
100078f8:	5499      	strb	r1, [r3, r2]
				taskSetState(TASK_DEBAUCE, TASK_GO);
100078fa:	2004      	movs	r0, #4
100078fc:	2101      	movs	r1, #1
100078fe:	f001 f8db 	bl	10008ab8 <taskSetState>
				DIGITAL_IO_SetOutputLow (&LED_CONF_5);
10007902:	4b0d      	ldr	r3, [pc, #52]	; (10007938 <ConfTask+0x488>)
10007904:	1c18      	adds	r0, r3, #0
10007906:	f7ff fd0f 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				DIGITAL_IO_SetOutputLow (&LED_CONF_10);
1000790a:	4b0c      	ldr	r3, [pc, #48]	; (1000793c <ConfTask+0x48c>)
1000790c:	1c18      	adds	r0, r3, #0
1000790e:	f7ff fd0b 	bl	10007328 <DIGITAL_IO_SetOutputLow>
				DIGITAL_IO_SetOutputHigh(&LED_CONF_15);
10007912:	4b0b      	ldr	r3, [pc, #44]	; (10007940 <ConfTask+0x490>)
10007914:	1c18      	adds	r0, r3, #0
10007916:	f7ff fcf7 	bl	10007308 <DIGITAL_IO_SetOutputHigh>
				E_EEPROM_XMC1_Write(CONF_ANG_HIGH, &CONF.STATUS_CONF_ANG_HIGH[0]);
1000791a:	4b0a      	ldr	r3, [pc, #40]	; (10007944 <ConfTask+0x494>)
1000791c:	2004      	movs	r0, #4
1000791e:	1c19      	adds	r1, r3, #0
10007920:	f7fd fc5a 	bl	100051d8 <E_EEPROM_XMC1_Write>
			}

		}
		break;
10007924:	46c0      	nop			; (mov r8, r8)
		}
	}
}
10007926:	46bd      	mov	sp, r7
10007928:	bd80      	pop	{r7, pc}
1000792a:	46c0      	nop			; (mov r8, r8)
1000792c:	20000b34 	.word	0x20000b34
10007930:	20000a4c 	.word	0x20000a4c
10007934:	20000954 	.word	0x20000954
10007938:	1000c3ac 	.word	0x1000c3ac
1000793c:	1000c39c 	.word	0x1000c39c
10007940:	1000c3bc 	.word	0x1000c3bc
10007944:	20000b26 	.word	0x20000b26

10007948 <IRQ6_Handler>:

void Handler_BOT_MAX (void){
10007948:	b580      	push	{r7, lr}
1000794a:	af00      	add	r7, sp, #0
	CONF.ANGLE = true;
1000794c:	4b02      	ldr	r3, [pc, #8]	; (10007958 <IRQ6_Handler+0x10>)
1000794e:	22c6      	movs	r2, #198	; 0xc6
10007950:	2101      	movs	r1, #1
10007952:	5499      	strb	r1, [r3, r2]
}
10007954:	46bd      	mov	sp, r7
10007956:	bd80      	pop	{r7, pc}
10007958:	20000a4c 	.word	0x20000a4c

1000795c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
1000795c:	b580      	push	{r7, lr}
1000795e:	b082      	sub	sp, #8
10007960:	af00      	add	r7, sp, #0
10007962:	6078      	str	r0, [r7, #4]
10007964:	1c0a      	adds	r2, r1, #0
10007966:	1cfb      	adds	r3, r7, #3
10007968:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
1000796a:	687b      	ldr	r3, [r7, #4]
1000796c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1000796e:	1cfb      	adds	r3, r7, #3
10007970:	781b      	ldrb	r3, [r3, #0]
10007972:	40da      	lsrs	r2, r3
10007974:	1c13      	adds	r3, r2, #0
10007976:	2201      	movs	r2, #1
10007978:	4013      	ands	r3, r2
}
1000797a:	1c18      	adds	r0, r3, #0
1000797c:	46bd      	mov	sp, r7
1000797e:	b002      	add	sp, #8
10007980:	bd80      	pop	{r7, pc}
10007982:	46c0      	nop			; (mov r8, r8)

10007984 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
10007984:	b580      	push	{r7, lr}
10007986:	b082      	sub	sp, #8
10007988:	af00      	add	r7, sp, #0
1000798a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
1000798c:	687b      	ldr	r3, [r7, #4]
1000798e:	681a      	ldr	r2, [r3, #0]
10007990:	687b      	ldr	r3, [r7, #4]
10007992:	7b1b      	ldrb	r3, [r3, #12]
10007994:	1c10      	adds	r0, r2, #0
10007996:	1c19      	adds	r1, r3, #0
10007998:	f7ff ffe0 	bl	1000795c <XMC_GPIO_GetInput>
1000799c:	1c03      	adds	r3, r0, #0
}
1000799e:	1c18      	adds	r0, r3, #0
100079a0:	46bd      	mov	sp, r7
100079a2:	b002      	add	sp, #8
100079a4:	bd80      	pop	{r7, pc}
100079a6:	46c0      	nop			; (mov r8, r8)

100079a8 <DebauceInit>:

//********************************************************************************************************************************************
//***********************************************************== CONF INIT ==*************************************************************
//********************************************************************************************************************************************

void DebauceInit(void){
100079a8:	b580      	push	{r7, lr}
100079aa:	af00      	add	r7, sp, #0

	taskSetState(TASK_DEBAUCE, TASK_1S);
100079ac:	23fa      	movs	r3, #250	; 0xfa
100079ae:	009b      	lsls	r3, r3, #2
100079b0:	2004      	movs	r0, #4
100079b2:	1c19      	adds	r1, r3, #0
100079b4:	f001 f880 	bl	10008ab8 <taskSetState>

}
100079b8:	46bd      	mov	sp, r7
100079ba:	bd80      	pop	{r7, pc}

100079bc <DebauceTask>:

//********************************************************************************************************************************************
//***********************************************************== CONF TASK ==**************************************************************
//********************************************************************************************************************************************

void DebauceTask(void){
100079bc:	b580      	push	{r7, lr}
100079be:	af00      	add	r7, sp, #0

	DEBAUCE.CONT_DEBAUCE ++;
100079c0:	4b13      	ldr	r3, [pc, #76]	; (10007a10 <DebauceTask+0x54>)
100079c2:	22e0      	movs	r2, #224	; 0xe0
100079c4:	5a9b      	ldrh	r3, [r3, r2]
100079c6:	3301      	adds	r3, #1
100079c8:	b299      	uxth	r1, r3
100079ca:	4b11      	ldr	r3, [pc, #68]	; (10007a10 <DebauceTask+0x54>)
100079cc:	22e0      	movs	r2, #224	; 0xe0
100079ce:	5299      	strh	r1, [r3, r2]
	if((DEBAUCE.CONT_DEBAUCE >= 2) && (DIGITAL_IO_GetInput(&BOT_AUTO))){
100079d0:	4b0f      	ldr	r3, [pc, #60]	; (10007a10 <DebauceTask+0x54>)
100079d2:	22e0      	movs	r2, #224	; 0xe0
100079d4:	5a9b      	ldrh	r3, [r3, r2]
100079d6:	2b01      	cmp	r3, #1
100079d8:	d914      	bls.n	10007a04 <DebauceTask+0x48>
100079da:	4b0e      	ldr	r3, [pc, #56]	; (10007a14 <DebauceTask+0x58>)
100079dc:	1c18      	adds	r0, r3, #0
100079de:	f7ff ffd1 	bl	10007984 <DIGITAL_IO_GetInput>
100079e2:	1e03      	subs	r3, r0, #0
100079e4:	d00e      	beq.n	10007a04 <DebauceTask+0x48>

		DEBAUCE.CONT_DEBAUCE = 0;
100079e6:	4b0a      	ldr	r3, [pc, #40]	; (10007a10 <DebauceTask+0x54>)
100079e8:	22e0      	movs	r2, #224	; 0xe0
100079ea:	2100      	movs	r1, #0
100079ec:	5299      	strh	r1, [r3, r2]
		DEBAUCE.STATUS_DEBAUCE = true;
100079ee:	4b08      	ldr	r3, [pc, #32]	; (10007a10 <DebauceTask+0x54>)
100079f0:	22de      	movs	r2, #222	; 0xde
100079f2:	2101      	movs	r1, #1
100079f4:	5499      	strb	r1, [r3, r2]
		taskSetState(TASK_DEBAUCE, TASK_STOP);
100079f6:	2301      	movs	r3, #1
100079f8:	425b      	negs	r3, r3
100079fa:	2004      	movs	r0, #4
100079fc:	1c19      	adds	r1, r3, #0
100079fe:	f001 f85b 	bl	10008ab8 <taskSetState>
10007a02:	e003      	b.n	10007a0c <DebauceTask+0x50>
	}else{
		taskSetState(TASK_DEBAUCE, TASK_200MS);
10007a04:	2004      	movs	r0, #4
10007a06:	21c8      	movs	r1, #200	; 0xc8
10007a08:	f001 f856 	bl	10008ab8 <taskSetState>
	}

}
10007a0c:	46bd      	mov	sp, r7
10007a0e:	bd80      	pop	{r7, pc}
10007a10:	20000b34 	.word	0x20000b34
10007a14:	1000c3ec 	.word	0x1000c3ec

10007a18 <XMC_USIC_CH_RXFIFO_ClearEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
                                                   const uint32_t event)
{
10007a18:	b580      	push	{r7, lr}
10007a1a:	b082      	sub	sp, #8
10007a1c:	af00      	add	r7, sp, #0
10007a1e:	6078      	str	r0, [r7, #4]
10007a20:	6039      	str	r1, [r7, #0]
  channel->TRBSCR = event;
10007a22:	687a      	ldr	r2, [r7, #4]
10007a24:	238c      	movs	r3, #140	; 0x8c
10007a26:	005b      	lsls	r3, r3, #1
10007a28:	6839      	ldr	r1, [r7, #0]
10007a2a:	50d1      	str	r1, [r2, r3]
}
10007a2c:	46bd      	mov	sp, r7
10007a2e:	b002      	add	sp, #8
10007a30:	bd80      	pop	{r7, pc}
10007a32:	46c0      	nop			; (mov r8, r8)

10007a34 <UART_ClearRXFIFOStatus>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
{
10007a34:	b580      	push	{r7, lr}
10007a36:	b082      	sub	sp, #8
10007a38:	af00      	add	r7, sp, #0
10007a3a:	6078      	str	r0, [r7, #4]
10007a3c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
10007a3e:	687b      	ldr	r3, [r7, #4]
10007a40:	681a      	ldr	r2, [r3, #0]
10007a42:	683b      	ldr	r3, [r7, #0]
10007a44:	1c10      	adds	r0, r2, #0
10007a46:	1c19      	adds	r1, r3, #0
10007a48:	f7ff ffe6 	bl	10007a18 <XMC_USIC_CH_RXFIFO_ClearEvent>
}
10007a4c:	46bd      	mov	sp, r7
10007a4e:	b002      	add	sp, #8
10007a50:	bd80      	pop	{r7, pc}
10007a52:	46c0      	nop			; (mov r8, r8)

10007a54 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
10007a54:	b580      	push	{r7, lr}
10007a56:	b082      	sub	sp, #8
10007a58:	af00      	add	r7, sp, #0
10007a5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->tx_busy;
10007a5c:	687b      	ldr	r3, [r7, #4]
10007a5e:	689b      	ldr	r3, [r3, #8]
10007a60:	2226      	movs	r2, #38	; 0x26
10007a62:	5c9b      	ldrb	r3, [r3, r2]
10007a64:	b2db      	uxtb	r3, r3
}
10007a66:	1c18      	adds	r0, r3, #0
10007a68:	46bd      	mov	sp, r7
10007a6a:	b002      	add	sp, #8
10007a6c:	bd80      	pop	{r7, pc}
10007a6e:	46c0      	nop			; (mov r8, r8)

10007a70 <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
10007a70:	b580      	push	{r7, lr}
10007a72:	b082      	sub	sp, #8
10007a74:	af00      	add	r7, sp, #0
10007a76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL))	
  return handle->runtime->rx_busy;
10007a78:	687b      	ldr	r3, [r7, #4]
10007a7a:	689b      	ldr	r3, [r3, #8]
10007a7c:	2227      	movs	r2, #39	; 0x27
10007a7e:	5c9b      	ldrb	r3, [r3, r2]
10007a80:	b2db      	uxtb	r3, r3
}
10007a82:	1c18      	adds	r0, r3, #0
10007a84:	46bd      	mov	sp, r7
10007a86:	b002      	add	sp, #8
10007a88:	bd80      	pop	{r7, pc}
10007a8a:	46c0      	nop			; (mov r8, r8)

10007a8c <ReadAxis1Init>:


//********************************************************************************************************************************************
//***********************************************************== CONTROL MOTOR INIT ==*************************************************************
//********************************************************************************************************************************************
void ReadAxis1Init(void){
10007a8c:	b580      	push	{r7, lr}
10007a8e:	af00      	add	r7, sp, #0
	taskSetState(TASK_CONTROL_ANGLE1, TASK_STOP); //inicia a leitura do angulo 1
10007a90:	2301      	movs	r3, #1
10007a92:	425b      	negs	r3, r3
10007a94:	2000      	movs	r0, #0
10007a96:	1c19      	adds	r1, r3, #0
10007a98:	f001 f80e 	bl	10008ab8 <taskSetState>
	taskSetState(TASK_TRANSMIT_ANGLE, TASK_STOP); //não envia ângulo a central
10007a9c:	2301      	movs	r3, #1
10007a9e:	425b      	negs	r3, r3
10007aa0:	2001      	movs	r0, #1
10007aa2:	1c19      	adds	r1, r3, #0
10007aa4:	f001 f808 	bl	10008ab8 <taskSetState>

	UART_Receive(&UART_0, &ReadAxis1.rxData, 1);
10007aa8:	4a09      	ldr	r2, [pc, #36]	; (10007ad0 <ReadAxis1Init+0x44>)
10007aaa:	4b0a      	ldr	r3, [pc, #40]	; (10007ad4 <ReadAxis1Init+0x48>)
10007aac:	1c10      	adds	r0, r2, #0
10007aae:	1c19      	adds	r1, r3, #0
10007ab0:	2201      	movs	r2, #1
10007ab2:	f7fb f895 	bl	10002be0 <UART_Receive>

	ReadAxis1.ChangeAngle = true;
10007ab6:	4b07      	ldr	r3, [pc, #28]	; (10007ad4 <ReadAxis1Init+0x48>)
10007ab8:	229c      	movs	r2, #156	; 0x9c
10007aba:	2101      	movs	r1, #1
10007abc:	5499      	strb	r1, [r3, r2]
	//DIGITAL_IO_ToggleOutput(&LED1);
	//DIGITAL_IO_ToggleOutput(&LED2);

	//setup do sensor
	SetupSensor();
10007abe:	f000 fb81 	bl	100081c4 <SetupSensor>
	taskSetState(TASK_CONTROL_ANGLE1, TASK_GO); //inicia a leitura do angulo 1
10007ac2:	2000      	movs	r0, #0
10007ac4:	2101      	movs	r1, #1
10007ac6:	f000 fff7 	bl	10008ab8 <taskSetState>


}
10007aca:	46bd      	mov	sp, r7
10007acc:	bd80      	pop	{r7, pc}
10007ace:	46c0      	nop			; (mov r8, r8)
10007ad0:	20000584 	.word	0x20000584
10007ad4:	20000c18 	.word	0x20000c18

10007ad8 <ReadAxis1Task>:

//********************************************************************************************************************************************
//***********************************************************== CONTROL MOTOR TASK ==**************************************************************
//********************************************************************************************************************************************
void ReadAxis1Task(void){
10007ad8:	b590      	push	{r4, r7, lr}
10007ada:	b085      	sub	sp, #20
10007adc:	af04      	add	r7, sp, #16
	//leitura de dados do sensor
	//Leitura dos dados crus do acelerômetro 1

	memset(ReadAxis1.data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
10007ade:	4be1      	ldr	r3, [pc, #900]	; (10007e64 <ReadAxis1Task+0x38c>)
10007ae0:	1c18      	adds	r0, r3, #0
10007ae2:	2100      	movs	r1, #0
10007ae4:	2206      	movs	r2, #6
10007ae6:	f004 fb8d 	bl	1000c204 <memset>
	ReadAxis1.register_map[0] = LIS2DW12_OUT_X_L;
10007aea:	4bdf      	ldr	r3, [pc, #892]	; (10007e68 <ReadAxis1Task+0x390>)
10007aec:	2248      	movs	r2, #72	; 0x48
10007aee:	2128      	movs	r1, #40	; 0x28
10007af0:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
10007af2:	4ade      	ldr	r2, [pc, #888]	; (10007e6c <ReadAxis1Task+0x394>)
10007af4:	4cde      	ldr	r4, [pc, #888]	; (10007e70 <ReadAxis1Task+0x398>)
10007af6:	2301      	movs	r3, #1
10007af8:	9300      	str	r3, [sp, #0]
10007afa:	2300      	movs	r3, #0
10007afc:	9301      	str	r3, [sp, #4]
10007afe:	1c10      	adds	r0, r2, #0
10007b00:	2101      	movs	r1, #1
10007b02:	2230      	movs	r2, #48	; 0x30
10007b04:	1c23      	adds	r3, r4, #0
10007b06:	f7fc f8c7 	bl	10003c98 <I2C_MASTER_Transmit>
10007b0a:	1c03      	adds	r3, r0, #0
10007b0c:	1c19      	adds	r1, r3, #0
10007b0e:	4bd6      	ldr	r3, [pc, #856]	; (10007e68 <ReadAxis1Task+0x390>)
10007b10:	224a      	movs	r2, #74	; 0x4a
10007b12:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
10007b14:	46c0      	nop			; (mov r8, r8)
10007b16:	4bd5      	ldr	r3, [pc, #852]	; (10007e6c <ReadAxis1Task+0x394>)
10007b18:	1c18      	adds	r0, r3, #0
10007b1a:	f7ff ff9b 	bl	10007a54 <I2C_MASTER_IsTxBusy>
10007b1e:	1e03      	subs	r3, r0, #0
10007b20:	d1f9      	bne.n	10007b16 <ReadAxis1Task+0x3e>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, ReadAxis1.data_raw_buff, 6, true, true);
10007b22:	4ad2      	ldr	r2, [pc, #840]	; (10007e6c <ReadAxis1Task+0x394>)
10007b24:	4cd3      	ldr	r4, [pc, #844]	; (10007e74 <ReadAxis1Task+0x39c>)
10007b26:	2306      	movs	r3, #6
10007b28:	9300      	str	r3, [sp, #0]
10007b2a:	2301      	movs	r3, #1
10007b2c:	9301      	str	r3, [sp, #4]
10007b2e:	2301      	movs	r3, #1
10007b30:	9302      	str	r3, [sp, #8]
10007b32:	1c10      	adds	r0, r2, #0
10007b34:	2101      	movs	r1, #1
10007b36:	2231      	movs	r2, #49	; 0x31
10007b38:	1c23      	adds	r3, r4, #0
10007b3a:	f7fc fa5b 	bl	10003ff4 <I2C_MASTER_Receive>
10007b3e:	1c03      	adds	r3, r0, #0
10007b40:	1c19      	adds	r1, r3, #0
10007b42:	4bc9      	ldr	r3, [pc, #804]	; (10007e68 <ReadAxis1Task+0x390>)
10007b44:	224a      	movs	r2, #74	; 0x4a
10007b46:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
10007b48:	46c0      	nop			; (mov r8, r8)
10007b4a:	4bc8      	ldr	r3, [pc, #800]	; (10007e6c <ReadAxis1Task+0x394>)
10007b4c:	1c18      	adds	r0, r3, #0
10007b4e:	f7ff ff8f 	bl	10007a70 <I2C_MASTER_IsRxBusy>
10007b52:	1e03      	subs	r3, r0, #0
10007b54:	d1f9      	bne.n	10007b4a <ReadAxis1Task+0x72>



	ReadAxis1.data_raw_acceleration[0] = (int16_t)ReadAxis1.data_raw_buff[1];
10007b56:	4bc4      	ldr	r3, [pc, #784]	; (10007e68 <ReadAxis1Task+0x390>)
10007b58:	2255      	movs	r2, #85	; 0x55
10007b5a:	5c9b      	ldrb	r3, [r3, r2]
10007b5c:	b299      	uxth	r1, r3
10007b5e:	4bc2      	ldr	r3, [pc, #776]	; (10007e68 <ReadAxis1Task+0x390>)
10007b60:	224e      	movs	r2, #78	; 0x4e
10007b62:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[0] = (ReadAxis1.data_raw_acceleration[0] * 256) +  (int16_t)ReadAxis1.data_raw_buff[0];
10007b64:	4bc0      	ldr	r3, [pc, #768]	; (10007e68 <ReadAxis1Task+0x390>)
10007b66:	224e      	movs	r2, #78	; 0x4e
10007b68:	5a9b      	ldrh	r3, [r3, r2]
10007b6a:	b29b      	uxth	r3, r3
10007b6c:	021b      	lsls	r3, r3, #8
10007b6e:	b29a      	uxth	r2, r3
10007b70:	4bbd      	ldr	r3, [pc, #756]	; (10007e68 <ReadAxis1Task+0x390>)
10007b72:	2154      	movs	r1, #84	; 0x54
10007b74:	5c5b      	ldrb	r3, [r3, r1]
10007b76:	b29b      	uxth	r3, r3
10007b78:	18d3      	adds	r3, r2, r3
10007b7a:	b29b      	uxth	r3, r3
10007b7c:	b299      	uxth	r1, r3
10007b7e:	4bba      	ldr	r3, [pc, #744]	; (10007e68 <ReadAxis1Task+0x390>)
10007b80:	224e      	movs	r2, #78	; 0x4e
10007b82:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[1] = (int16_t)ReadAxis1.data_raw_buff[3];
10007b84:	4bb8      	ldr	r3, [pc, #736]	; (10007e68 <ReadAxis1Task+0x390>)
10007b86:	2257      	movs	r2, #87	; 0x57
10007b88:	5c9b      	ldrb	r3, [r3, r2]
10007b8a:	b299      	uxth	r1, r3
10007b8c:	4bb6      	ldr	r3, [pc, #728]	; (10007e68 <ReadAxis1Task+0x390>)
10007b8e:	2250      	movs	r2, #80	; 0x50
10007b90:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[1] = (ReadAxis1.data_raw_acceleration[1] * 256) +  (int16_t)ReadAxis1.data_raw_buff[2];
10007b92:	4bb5      	ldr	r3, [pc, #724]	; (10007e68 <ReadAxis1Task+0x390>)
10007b94:	2250      	movs	r2, #80	; 0x50
10007b96:	5a9b      	ldrh	r3, [r3, r2]
10007b98:	b29b      	uxth	r3, r3
10007b9a:	021b      	lsls	r3, r3, #8
10007b9c:	b29a      	uxth	r2, r3
10007b9e:	4bb2      	ldr	r3, [pc, #712]	; (10007e68 <ReadAxis1Task+0x390>)
10007ba0:	2156      	movs	r1, #86	; 0x56
10007ba2:	5c5b      	ldrb	r3, [r3, r1]
10007ba4:	b29b      	uxth	r3, r3
10007ba6:	18d3      	adds	r3, r2, r3
10007ba8:	b29b      	uxth	r3, r3
10007baa:	b299      	uxth	r1, r3
10007bac:	4bae      	ldr	r3, [pc, #696]	; (10007e68 <ReadAxis1Task+0x390>)
10007bae:	2250      	movs	r2, #80	; 0x50
10007bb0:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[2] = (int16_t)ReadAxis1.data_raw_buff[5];
10007bb2:	4bad      	ldr	r3, [pc, #692]	; (10007e68 <ReadAxis1Task+0x390>)
10007bb4:	2259      	movs	r2, #89	; 0x59
10007bb6:	5c9b      	ldrb	r3, [r3, r2]
10007bb8:	b299      	uxth	r1, r3
10007bba:	4bab      	ldr	r3, [pc, #684]	; (10007e68 <ReadAxis1Task+0x390>)
10007bbc:	2252      	movs	r2, #82	; 0x52
10007bbe:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[2] = (ReadAxis1.data_raw_acceleration[2] * 256) +  (int16_t)ReadAxis1.data_raw_buff[4];
10007bc0:	4ba9      	ldr	r3, [pc, #676]	; (10007e68 <ReadAxis1Task+0x390>)
10007bc2:	2252      	movs	r2, #82	; 0x52
10007bc4:	5a9b      	ldrh	r3, [r3, r2]
10007bc6:	b29b      	uxth	r3, r3
10007bc8:	021b      	lsls	r3, r3, #8
10007bca:	b29a      	uxth	r2, r3
10007bcc:	4ba6      	ldr	r3, [pc, #664]	; (10007e68 <ReadAxis1Task+0x390>)
10007bce:	2158      	movs	r1, #88	; 0x58
10007bd0:	5c5b      	ldrb	r3, [r3, r1]
10007bd2:	b29b      	uxth	r3, r3
10007bd4:	18d3      	adds	r3, r2, r3
10007bd6:	b29b      	uxth	r3, r3
10007bd8:	b299      	uxth	r1, r3
10007bda:	4ba3      	ldr	r3, [pc, #652]	; (10007e68 <ReadAxis1Task+0x390>)
10007bdc:	2252      	movs	r2, #82	; 0x52
10007bde:	5299      	strh	r1, [r3, r2]

	if(ReadAxis1.counter != 10){
10007be0:	4ba1      	ldr	r3, [pc, #644]	; (10007e68 <ReadAxis1Task+0x390>)
10007be2:	229e      	movs	r2, #158	; 0x9e
10007be4:	5a9b      	ldrh	r3, [r3, r2]
10007be6:	2b0a      	cmp	r3, #10
10007be8:	d019      	beq.n	10007c1e <ReadAxis1Task+0x146>
		ReadAxis1.counter++;
10007bea:	4b9f      	ldr	r3, [pc, #636]	; (10007e68 <ReadAxis1Task+0x390>)
10007bec:	229e      	movs	r2, #158	; 0x9e
10007bee:	5a9b      	ldrh	r3, [r3, r2]
10007bf0:	3301      	adds	r3, #1
10007bf2:	b299      	uxth	r1, r3
10007bf4:	4b9c      	ldr	r3, [pc, #624]	; (10007e68 <ReadAxis1Task+0x390>)
10007bf6:	229e      	movs	r2, #158	; 0x9e
10007bf8:	5299      	strh	r1, [r3, r2]

		ReadAxis1.data_raw_acceleration_Sum1 = ReadAxis1.data_raw_acceleration_Sum1 + ReadAxis1.data_raw_acceleration[0];
10007bfa:	4b9b      	ldr	r3, [pc, #620]	; (10007e68 <ReadAxis1Task+0x390>)
10007bfc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
10007bfe:	4b9a      	ldr	r3, [pc, #616]	; (10007e68 <ReadAxis1Task+0x390>)
10007c00:	214e      	movs	r1, #78	; 0x4e
10007c02:	5a5b      	ldrh	r3, [r3, r1]
10007c04:	b21b      	sxth	r3, r3
10007c06:	18d2      	adds	r2, r2, r3
10007c08:	4b97      	ldr	r3, [pc, #604]	; (10007e68 <ReadAxis1Task+0x390>)
10007c0a:	675a      	str	r2, [r3, #116]	; 0x74
		ReadAxis1.data_raw_acceleration_Sum2 = ReadAxis1.data_raw_acceleration_Sum2 + ReadAxis1.data_raw_acceleration[1];
10007c0c:	4b96      	ldr	r3, [pc, #600]	; (10007e68 <ReadAxis1Task+0x390>)
10007c0e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
10007c10:	4b95      	ldr	r3, [pc, #596]	; (10007e68 <ReadAxis1Task+0x390>)
10007c12:	2150      	movs	r1, #80	; 0x50
10007c14:	5a5b      	ldrh	r3, [r3, r1]
10007c16:	b21b      	sxth	r3, r3
10007c18:	18d2      	adds	r2, r2, r3
10007c1a:	4b93      	ldr	r3, [pc, #588]	; (10007e68 <ReadAxis1Task+0x390>)
10007c1c:	679a      	str	r2, [r3, #120]	; 0x78

	}

	if(ReadAxis1.counter == 10){
10007c1e:	4b92      	ldr	r3, [pc, #584]	; (10007e68 <ReadAxis1Task+0x390>)
10007c20:	229e      	movs	r2, #158	; 0x9e
10007c22:	5a9b      	ldrh	r3, [r3, r2]
10007c24:	2b0a      	cmp	r3, #10
10007c26:	d000      	beq.n	10007c2a <ReadAxis1Task+0x152>
10007c28:	e114      	b.n	10007e54 <ReadAxis1Task+0x37c>
		ReadAxis1.counter = 0;
10007c2a:	4b8f      	ldr	r3, [pc, #572]	; (10007e68 <ReadAxis1Task+0x390>)
10007c2c:	229e      	movs	r2, #158	; 0x9e
10007c2e:	2100      	movs	r1, #0
10007c30:	5299      	strh	r1, [r3, r2]


        ///////////////////////////////////////calculo da aceleração da gravidade em 2 eixos//////////////////////
		ReadAxis1.data_raw_acceleration_Media1 = ReadAxis1.data_raw_acceleration_Sum1/10;
10007c32:	4b8d      	ldr	r3, [pc, #564]	; (10007e68 <ReadAxis1Task+0x390>)
10007c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10007c36:	1c18      	adds	r0, r3, #0
10007c38:	210a      	movs	r1, #10
10007c3a:	f7fa fb47 	bl	100022cc <__aeabi_idiv>
10007c3e:	1c03      	adds	r3, r0, #0
10007c40:	b299      	uxth	r1, r3
10007c42:	4b89      	ldr	r3, [pc, #548]	; (10007e68 <ReadAxis1Task+0x390>)
10007c44:	227c      	movs	r2, #124	; 0x7c
10007c46:	5299      	strh	r1, [r3, r2]
		ReadAxis1.data_raw_acceleration_Sum1 = 0;
10007c48:	4b87      	ldr	r3, [pc, #540]	; (10007e68 <ReadAxis1Task+0x390>)
10007c4a:	2200      	movs	r2, #0
10007c4c:	675a      	str	r2, [r3, #116]	; 0x74

		ReadAxis1.acceleration_mg1 = lis2dw12_from_fs2_to_mg(ReadAxis1.data_raw_acceleration_Media1)/1000;
10007c4e:	4b86      	ldr	r3, [pc, #536]	; (10007e68 <ReadAxis1Task+0x390>)
10007c50:	227c      	movs	r2, #124	; 0x7c
10007c52:	5a9b      	ldrh	r3, [r3, r2]
10007c54:	b21b      	sxth	r3, r3
10007c56:	1c18      	adds	r0, r3, #0
10007c58:	f000 fdb0 	bl	100087bc <lis2dw12_from_fs2_to_mg>
10007c5c:	1c03      	adds	r3, r0, #0
10007c5e:	1c18      	adds	r0, r3, #0
10007c60:	4985      	ldr	r1, [pc, #532]	; (10007e78 <ReadAxis1Task+0x3a0>)
10007c62:	f001 ff1d 	bl	10009aa0 <__aeabi_fdiv>
10007c66:	1c03      	adds	r3, r0, #0
10007c68:	1c19      	adds	r1, r3, #0
10007c6a:	4b7f      	ldr	r3, [pc, #508]	; (10007e68 <ReadAxis1Task+0x390>)
10007c6c:	2280      	movs	r2, #128	; 0x80
10007c6e:	5099      	str	r1, [r3, r2]

		ReadAxis1.data_raw_acceleration_Media2 = ReadAxis1.data_raw_acceleration_Sum2/10;
10007c70:	4b7d      	ldr	r3, [pc, #500]	; (10007e68 <ReadAxis1Task+0x390>)
10007c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10007c74:	1c18      	adds	r0, r3, #0
10007c76:	210a      	movs	r1, #10
10007c78:	f7fa fb28 	bl	100022cc <__aeabi_idiv>
10007c7c:	1c03      	adds	r3, r0, #0
10007c7e:	b299      	uxth	r1, r3
10007c80:	4b79      	ldr	r3, [pc, #484]	; (10007e68 <ReadAxis1Task+0x390>)
10007c82:	227e      	movs	r2, #126	; 0x7e
10007c84:	5299      	strh	r1, [r3, r2]
		ReadAxis1.data_raw_acceleration_Sum2 = 0;
10007c86:	4b78      	ldr	r3, [pc, #480]	; (10007e68 <ReadAxis1Task+0x390>)
10007c88:	2200      	movs	r2, #0
10007c8a:	679a      	str	r2, [r3, #120]	; 0x78

		ReadAxis1.acceleration_mg2 = lis2dw12_from_fs2_to_mg(ReadAxis1.data_raw_acceleration_Media2)/1000;
10007c8c:	4b76      	ldr	r3, [pc, #472]	; (10007e68 <ReadAxis1Task+0x390>)
10007c8e:	227e      	movs	r2, #126	; 0x7e
10007c90:	5a9b      	ldrh	r3, [r3, r2]
10007c92:	b21b      	sxth	r3, r3
10007c94:	1c18      	adds	r0, r3, #0
10007c96:	f000 fd91 	bl	100087bc <lis2dw12_from_fs2_to_mg>
10007c9a:	1c03      	adds	r3, r0, #0
10007c9c:	1c18      	adds	r0, r3, #0
10007c9e:	4976      	ldr	r1, [pc, #472]	; (10007e78 <ReadAxis1Task+0x3a0>)
10007ca0:	f001 fefe 	bl	10009aa0 <__aeabi_fdiv>
10007ca4:	1c03      	adds	r3, r0, #0
10007ca6:	1c19      	adds	r1, r3, #0
10007ca8:	4b6f      	ldr	r3, [pc, #444]	; (10007e68 <ReadAxis1Task+0x390>)
10007caa:	2284      	movs	r2, #132	; 0x84
10007cac:	5099      	str	r1, [r3, r2]

		ReadAxis1.Angle = asin(ReadAxis1.acceleration_mg2);
10007cae:	4b6e      	ldr	r3, [pc, #440]	; (10007e68 <ReadAxis1Task+0x390>)
10007cb0:	2284      	movs	r2, #132	; 0x84
10007cb2:	589b      	ldr	r3, [r3, r2]
10007cb4:	1c18      	adds	r0, r3, #0
10007cb6:	f004 f977 	bl	1000bfa8 <__aeabi_f2d>
10007cba:	1c03      	adds	r3, r0, #0
10007cbc:	1c0c      	adds	r4, r1, #0
10007cbe:	1c18      	adds	r0, r3, #0
10007cc0:	1c21      	adds	r1, r4, #0
10007cc2:	f000 ff6b 	bl	10008b9c <asin>
10007cc6:	1c03      	adds	r3, r0, #0
10007cc8:	1c0c      	adds	r4, r1, #0
10007cca:	1c18      	adds	r0, r3, #0
10007ccc:	1c21      	adds	r1, r4, #0
10007cce:	f004 f9bf 	bl	1000c050 <__aeabi_d2f>
10007cd2:	1c01      	adds	r1, r0, #0
10007cd4:	4b64      	ldr	r3, [pc, #400]	; (10007e68 <ReadAxis1Task+0x390>)
10007cd6:	2298      	movs	r2, #152	; 0x98
10007cd8:	5099      	str	r1, [r3, r2]
		ReadAxis1.Angle = -ReadAxis1.Angle;
10007cda:	4b63      	ldr	r3, [pc, #396]	; (10007e68 <ReadAxis1Task+0x390>)
10007cdc:	2298      	movs	r2, #152	; 0x98
10007cde:	589b      	ldr	r3, [r3, r2]
10007ce0:	2280      	movs	r2, #128	; 0x80
10007ce2:	0612      	lsls	r2, r2, #24
10007ce4:	405a      	eors	r2, r3
10007ce6:	4b60      	ldr	r3, [pc, #384]	; (10007e68 <ReadAxis1Task+0x390>)
10007ce8:	2198      	movs	r1, #152	; 0x98
10007cea:	505a      	str	r2, [r3, r1]
		ReadAxis1.Angle = 180*ReadAxis1.Angle/3.141592;
10007cec:	4b5e      	ldr	r3, [pc, #376]	; (10007e68 <ReadAxis1Task+0x390>)
10007cee:	2298      	movs	r2, #152	; 0x98
10007cf0:	589b      	ldr	r3, [r3, r2]
10007cf2:	1c18      	adds	r0, r3, #0
10007cf4:	4961      	ldr	r1, [pc, #388]	; (10007e7c <ReadAxis1Task+0x3a4>)
10007cf6:	f002 f8c5 	bl	10009e84 <__aeabi_fmul>
10007cfa:	1c03      	adds	r3, r0, #0
10007cfc:	1c18      	adds	r0, r3, #0
10007cfe:	f004 f953 	bl	1000bfa8 <__aeabi_f2d>
10007d02:	1c03      	adds	r3, r0, #0
10007d04:	1c0c      	adds	r4, r1, #0
10007d06:	1c18      	adds	r0, r3, #0
10007d08:	1c21      	adds	r1, r4, #0
10007d0a:	4a5d      	ldr	r2, [pc, #372]	; (10007e80 <ReadAxis1Task+0x3a8>)
10007d0c:	4b5d      	ldr	r3, [pc, #372]	; (10007e84 <ReadAxis1Task+0x3ac>)
10007d0e:	f002 fef9 	bl	1000ab04 <__aeabi_ddiv>
10007d12:	1c03      	adds	r3, r0, #0
10007d14:	1c0c      	adds	r4, r1, #0
10007d16:	1c18      	adds	r0, r3, #0
10007d18:	1c21      	adds	r1, r4, #0
10007d1a:	f004 f999 	bl	1000c050 <__aeabi_d2f>
10007d1e:	1c01      	adds	r1, r0, #0
10007d20:	4b51      	ldr	r3, [pc, #324]	; (10007e68 <ReadAxis1Task+0x390>)
10007d22:	2298      	movs	r2, #152	; 0x98
10007d24:	5099      	str	r1, [r3, r2]

		taskSetState(TASK_ACTION, TASK_GO);
10007d26:	2002      	movs	r0, #2
10007d28:	2101      	movs	r1, #1
10007d2a:	f000 fec5 	bl	10008ab8 <taskSetState>

		if(ReadAxis1.acceleration_mg2 < -1){
10007d2e:	4b4e      	ldr	r3, [pc, #312]	; (10007e68 <ReadAxis1Task+0x390>)
10007d30:	2284      	movs	r2, #132	; 0x84
10007d32:	589b      	ldr	r3, [r3, r2]
10007d34:	1c18      	adds	r0, r3, #0
10007d36:	4954      	ldr	r1, [pc, #336]	; (10007e88 <ReadAxis1Task+0x3b0>)
10007d38:	f001 fcf6 	bl	10009728 <__aeabi_fcmplt>
10007d3c:	1e03      	subs	r3, r0, #0
10007d3e:	d003      	beq.n	10007d48 <ReadAxis1Task+0x270>
			ReadAxis1.ChangeTrue = true; //indica eixo 2
10007d40:	4b49      	ldr	r3, [pc, #292]	; (10007e68 <ReadAxis1Task+0x390>)
10007d42:	22a0      	movs	r2, #160	; 0xa0
10007d44:	2101      	movs	r1, #1
10007d46:	5499      	strb	r1, [r3, r2]
		}



		ReadAxis1.AngleIndice = (int16_t)ReadAxis1.Angle;
10007d48:	4b47      	ldr	r3, [pc, #284]	; (10007e68 <ReadAxis1Task+0x390>)
10007d4a:	2298      	movs	r2, #152	; 0x98
10007d4c:	589b      	ldr	r3, [r3, r2]
10007d4e:	1c18      	adds	r0, r3, #0
10007d50:	f002 fb48 	bl	1000a3e4 <__aeabi_f2iz>
10007d54:	1c03      	adds	r3, r0, #0
10007d56:	b299      	uxth	r1, r3
10007d58:	4b43      	ldr	r3, [pc, #268]	; (10007e68 <ReadAxis1Task+0x390>)
10007d5a:	2296      	movs	r2, #150	; 0x96
10007d5c:	5299      	strh	r1, [r3, r2]

		if(ReadAxis1.AngleIndice >= 37){
10007d5e:	4b42      	ldr	r3, [pc, #264]	; (10007e68 <ReadAxis1Task+0x390>)
10007d60:	2296      	movs	r2, #150	; 0x96
10007d62:	5a9b      	ldrh	r3, [r3, r2]
10007d64:	b21b      	sxth	r3, r3
10007d66:	2b24      	cmp	r3, #36	; 0x24
10007d68:	dd06      	ble.n	10007d78 <ReadAxis1Task+0x2a0>
			//ReadAxis1.AngleResolution = ReadAxis1.Angle + ResolutionAcel[ReadAxis1.AngleIndice - 37] + 1.6;
			ReadAxis1.AngleResolution = ReadAxis1.Angle;
10007d6a:	4b3f      	ldr	r3, [pc, #252]	; (10007e68 <ReadAxis1Task+0x390>)
10007d6c:	2298      	movs	r2, #152	; 0x98
10007d6e:	589a      	ldr	r2, [r3, r2]
10007d70:	4b3d      	ldr	r3, [pc, #244]	; (10007e68 <ReadAxis1Task+0x390>)
10007d72:	21b4      	movs	r1, #180	; 0xb4
10007d74:	505a      	str	r2, [r3, r1]
10007d76:	e005      	b.n	10007d84 <ReadAxis1Task+0x2ac>
		}
		else{
			ReadAxis1.AngleResolution = ReadAxis1.Angle;
10007d78:	4b3b      	ldr	r3, [pc, #236]	; (10007e68 <ReadAxis1Task+0x390>)
10007d7a:	2298      	movs	r2, #152	; 0x98
10007d7c:	589a      	ldr	r2, [r3, r2]
10007d7e:	4b3a      	ldr	r3, [pc, #232]	; (10007e68 <ReadAxis1Task+0x390>)
10007d80:	21b4      	movs	r1, #180	; 0xb4
10007d82:	505a      	str	r2, [r3, r1]
		}

		if(ReadAxis1.AngleResolution >= 75){
10007d84:	4b38      	ldr	r3, [pc, #224]	; (10007e68 <ReadAxis1Task+0x390>)
10007d86:	22b4      	movs	r2, #180	; 0xb4
10007d88:	589b      	ldr	r3, [r3, r2]
10007d8a:	1c18      	adds	r0, r3, #0
10007d8c:	493f      	ldr	r1, [pc, #252]	; (10007e8c <ReadAxis1Task+0x3b4>)
10007d8e:	f001 fce9 	bl	10009764 <__aeabi_fcmpge>
10007d92:	1e03      	subs	r3, r0, #0
10007d94:	d003      	beq.n	10007d9e <ReadAxis1Task+0x2c6>
			ReadAxis1.ChangeTrue = true; //indica eixo 2
10007d96:	4b34      	ldr	r3, [pc, #208]	; (10007e68 <ReadAxis1Task+0x390>)
10007d98:	22a0      	movs	r2, #160	; 0xa0
10007d9a:	2101      	movs	r1, #1
10007d9c:	5499      	strb	r1, [r3, r2]
//			DIGITAL_IO_ToggleOutput(&LED1);
//			DIGITAL_IO_ToggleOutput(&LED2);

		}

		if(ReadAxis1.ChangeTrue == true){
10007d9e:	4b32      	ldr	r3, [pc, #200]	; (10007e68 <ReadAxis1Task+0x390>)
10007da0:	22a0      	movs	r2, #160	; 0xa0
10007da2:	5c9b      	ldrb	r3, [r3, r2]
10007da4:	2b00      	cmp	r3, #0
10007da6:	d045      	beq.n	10007e34 <ReadAxis1Task+0x35c>
			ReadAxis1.Angle2 = acos(ReadAxis1.acceleration_mg1);
10007da8:	4b2f      	ldr	r3, [pc, #188]	; (10007e68 <ReadAxis1Task+0x390>)
10007daa:	2280      	movs	r2, #128	; 0x80
10007dac:	589b      	ldr	r3, [r3, r2]
10007dae:	1c18      	adds	r0, r3, #0
10007db0:	f004 f8fa 	bl	1000bfa8 <__aeabi_f2d>
10007db4:	1c03      	adds	r3, r0, #0
10007db6:	1c0c      	adds	r4, r1, #0
10007db8:	1c18      	adds	r0, r3, #0
10007dba:	1c21      	adds	r1, r4, #0
10007dbc:	f000 fe94 	bl	10008ae8 <acos>
10007dc0:	1c03      	adds	r3, r0, #0
10007dc2:	1c0c      	adds	r4, r1, #0
10007dc4:	1c18      	adds	r0, r3, #0
10007dc6:	1c21      	adds	r1, r4, #0
10007dc8:	f004 f942 	bl	1000c050 <__aeabi_d2f>
10007dcc:	1c01      	adds	r1, r0, #0
10007dce:	4b26      	ldr	r3, [pc, #152]	; (10007e68 <ReadAxis1Task+0x390>)
10007dd0:	2290      	movs	r2, #144	; 0x90
10007dd2:	5099      	str	r1, [r3, r2]
			ReadAxis1.Angle2 = 180*ReadAxis1.Angle2/3.141592;
10007dd4:	4b24      	ldr	r3, [pc, #144]	; (10007e68 <ReadAxis1Task+0x390>)
10007dd6:	2290      	movs	r2, #144	; 0x90
10007dd8:	589b      	ldr	r3, [r3, r2]
10007dda:	1c18      	adds	r0, r3, #0
10007ddc:	4927      	ldr	r1, [pc, #156]	; (10007e7c <ReadAxis1Task+0x3a4>)
10007dde:	f002 f851 	bl	10009e84 <__aeabi_fmul>
10007de2:	1c03      	adds	r3, r0, #0
10007de4:	1c18      	adds	r0, r3, #0
10007de6:	f004 f8df 	bl	1000bfa8 <__aeabi_f2d>
10007dea:	1c03      	adds	r3, r0, #0
10007dec:	1c0c      	adds	r4, r1, #0
10007dee:	1c18      	adds	r0, r3, #0
10007df0:	1c21      	adds	r1, r4, #0
10007df2:	4a23      	ldr	r2, [pc, #140]	; (10007e80 <ReadAxis1Task+0x3a8>)
10007df4:	4b23      	ldr	r3, [pc, #140]	; (10007e84 <ReadAxis1Task+0x3ac>)
10007df6:	f002 fe85 	bl	1000ab04 <__aeabi_ddiv>
10007dfa:	1c03      	adds	r3, r0, #0
10007dfc:	1c0c      	adds	r4, r1, #0
10007dfe:	1c18      	adds	r0, r3, #0
10007e00:	1c21      	adds	r1, r4, #0
10007e02:	f004 f925 	bl	1000c050 <__aeabi_d2f>
10007e06:	1c01      	adds	r1, r0, #0
10007e08:	4b17      	ldr	r3, [pc, #92]	; (10007e68 <ReadAxis1Task+0x390>)
10007e0a:	2290      	movs	r2, #144	; 0x90
10007e0c:	5099      	str	r1, [r3, r2]
			ReadAxis1.AngleResolution = ReadAxis1.Angle2;
10007e0e:	4b16      	ldr	r3, [pc, #88]	; (10007e68 <ReadAxis1Task+0x390>)
10007e10:	2290      	movs	r2, #144	; 0x90
10007e12:	589a      	ldr	r2, [r3, r2]
10007e14:	4b14      	ldr	r3, [pc, #80]	; (10007e68 <ReadAxis1Task+0x390>)
10007e16:	21b4      	movs	r1, #180	; 0xb4
10007e18:	505a      	str	r2, [r3, r1]

			if(ReadAxis1.AngleResolution <= 65){
10007e1a:	4b13      	ldr	r3, [pc, #76]	; (10007e68 <ReadAxis1Task+0x390>)
10007e1c:	22b4      	movs	r2, #180	; 0xb4
10007e1e:	589b      	ldr	r3, [r3, r2]
10007e20:	1c18      	adds	r0, r3, #0
10007e22:	491b      	ldr	r1, [pc, #108]	; (10007e90 <ReadAxis1Task+0x3b8>)
10007e24:	f001 fc8a 	bl	1000973c <__aeabi_fcmple>
10007e28:	1e03      	subs	r3, r0, #0
10007e2a:	d003      	beq.n	10007e34 <ReadAxis1Task+0x35c>
				ReadAxis1.ChangeTrue = false; //indica eixo 1
10007e2c:	4b0e      	ldr	r3, [pc, #56]	; (10007e68 <ReadAxis1Task+0x390>)
10007e2e:	22a0      	movs	r2, #160	; 0xa0
10007e30:	2100      	movs	r1, #0
10007e32:	5499      	strb	r1, [r3, r2]
			}
		}



		ReadAxis1.AngleInt = ReadAxis1.AngleResolution*100;
10007e34:	4b0c      	ldr	r3, [pc, #48]	; (10007e68 <ReadAxis1Task+0x390>)
10007e36:	22b4      	movs	r2, #180	; 0xb4
10007e38:	589b      	ldr	r3, [r3, r2]
10007e3a:	1c18      	adds	r0, r3, #0
10007e3c:	4915      	ldr	r1, [pc, #84]	; (10007e94 <ReadAxis1Task+0x3bc>)
10007e3e:	f002 f821 	bl	10009e84 <__aeabi_fmul>
10007e42:	1c03      	adds	r3, r0, #0
10007e44:	1c18      	adds	r0, r3, #0
10007e46:	f001 fc97 	bl	10009778 <__aeabi_f2uiz>
10007e4a:	1c03      	adds	r3, r0, #0
10007e4c:	b299      	uxth	r1, r3
10007e4e:	4b06      	ldr	r3, [pc, #24]	; (10007e68 <ReadAxis1Task+0x390>)
10007e50:	2294      	movs	r2, #148	; 0x94
10007e52:	5299      	strh	r1, [r3, r2]


	}


	taskSetState(TASK_CONTROL_ANGLE1, TASK_20MS);
10007e54:	2000      	movs	r0, #0
10007e56:	2114      	movs	r1, #20
10007e58:	f000 fe2e 	bl	10008ab8 <taskSetState>
//	DIGITAL_IO_ToggleOutput(&LED1);

}
10007e5c:	46bd      	mov	sp, r7
10007e5e:	b001      	add	sp, #4
10007e60:	bd90      	pop	{r4, r7, pc}
10007e62:	46c0      	nop			; (mov r8, r8)
10007e64:	20000c66 	.word	0x20000c66
10007e68:	20000c18 	.word	0x20000c18
10007e6c:	200005ec 	.word	0x200005ec
10007e70:	20000c60 	.word	0x20000c60
10007e74:	20000c6c 	.word	0x20000c6c
10007e78:	447a0000 	.word	0x447a0000
10007e7c:	43340000 	.word	0x43340000
10007e80:	fc8b007a 	.word	0xfc8b007a
10007e84:	400921fa 	.word	0x400921fa
10007e88:	bf800000 	.word	0xbf800000
10007e8c:	42960000 	.word	0x42960000
10007e90:	42820000 	.word	0x42820000
10007e94:	42c80000 	.word	0x42c80000

10007e98 <TransmitAngleTask>:

void TransmitAngleTask(void){
10007e98:	b590      	push	{r4, r7, lr}
10007e9a:	b083      	sub	sp, #12
10007e9c:	af00      	add	r7, sp, #0
	//envia o angulo a central
	  uint8_t txIndex = 0;
10007e9e:	1dfb      	adds	r3, r7, #7
10007ea0:	2200      	movs	r2, #0
10007ea2:	701a      	strb	r2, [r3, #0]
	  ReadAxis1.txBuffer[txIndex++] = 0x7E;
10007ea4:	1dfb      	adds	r3, r7, #7
10007ea6:	781b      	ldrb	r3, [r3, #0]
10007ea8:	1dfa      	adds	r2, r7, #7
10007eaa:	1c59      	adds	r1, r3, #1
10007eac:	7011      	strb	r1, [r2, #0]
10007eae:	1c19      	adds	r1, r3, #0
10007eb0:	4b40      	ldr	r3, [pc, #256]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007eb2:	2220      	movs	r2, #32
10007eb4:	185b      	adds	r3, r3, r1
10007eb6:	189b      	adds	r3, r3, r2
10007eb8:	227e      	movs	r2, #126	; 0x7e
10007eba:	719a      	strb	r2, [r3, #6]
	  ReadAxis1.txBuffer[txIndex++] = 8;
10007ebc:	1dfb      	adds	r3, r7, #7
10007ebe:	781b      	ldrb	r3, [r3, #0]
10007ec0:	1dfa      	adds	r2, r7, #7
10007ec2:	1c59      	adds	r1, r3, #1
10007ec4:	7011      	strb	r1, [r2, #0]
10007ec6:	1c19      	adds	r1, r3, #0
10007ec8:	4b3a      	ldr	r3, [pc, #232]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007eca:	2220      	movs	r2, #32
10007ecc:	185b      	adds	r3, r3, r1
10007ece:	189b      	adds	r3, r3, r2
10007ed0:	2208      	movs	r2, #8
10007ed2:	719a      	strb	r2, [r3, #6]
	  ReadAxis1.txBuffer[txIndex++] = 0;
10007ed4:	1dfb      	adds	r3, r7, #7
10007ed6:	781b      	ldrb	r3, [r3, #0]
10007ed8:	1dfa      	adds	r2, r7, #7
10007eda:	1c59      	adds	r1, r3, #1
10007edc:	7011      	strb	r1, [r2, #0]
10007ede:	1c19      	adds	r1, r3, #0
10007ee0:	4b34      	ldr	r3, [pc, #208]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007ee2:	2220      	movs	r2, #32
10007ee4:	185b      	adds	r3, r3, r1
10007ee6:	189b      	adds	r3, r3, r2
10007ee8:	2200      	movs	r2, #0
10007eea:	719a      	strb	r2, [r3, #6]
	  ReadAxis1.txBuffer[txIndex++] = ReadAxis1.AngleInt >> 8;
10007eec:	1dfb      	adds	r3, r7, #7
10007eee:	781b      	ldrb	r3, [r3, #0]
10007ef0:	1dfa      	adds	r2, r7, #7
10007ef2:	1c59      	adds	r1, r3, #1
10007ef4:	7011      	strb	r1, [r2, #0]
10007ef6:	1c18      	adds	r0, r3, #0
10007ef8:	4b2e      	ldr	r3, [pc, #184]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007efa:	2294      	movs	r2, #148	; 0x94
10007efc:	5a9b      	ldrh	r3, [r3, r2]
10007efe:	0a1b      	lsrs	r3, r3, #8
10007f00:	b29b      	uxth	r3, r3
10007f02:	b2d9      	uxtb	r1, r3
10007f04:	4b2b      	ldr	r3, [pc, #172]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f06:	2220      	movs	r2, #32
10007f08:	181b      	adds	r3, r3, r0
10007f0a:	189b      	adds	r3, r3, r2
10007f0c:	1c0a      	adds	r2, r1, #0
10007f0e:	719a      	strb	r2, [r3, #6]
	  ReadAxis1.txBuffer[txIndex++] = (uint8_t)ReadAxis1.AngleInt;
10007f10:	1dfb      	adds	r3, r7, #7
10007f12:	781b      	ldrb	r3, [r3, #0]
10007f14:	1dfa      	adds	r2, r7, #7
10007f16:	1c59      	adds	r1, r3, #1
10007f18:	7011      	strb	r1, [r2, #0]
10007f1a:	1c18      	adds	r0, r3, #0
10007f1c:	4b25      	ldr	r3, [pc, #148]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f1e:	2294      	movs	r2, #148	; 0x94
10007f20:	5a9b      	ldrh	r3, [r3, r2]
10007f22:	b2d9      	uxtb	r1, r3
10007f24:	4b23      	ldr	r3, [pc, #140]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f26:	2220      	movs	r2, #32
10007f28:	181b      	adds	r3, r3, r0
10007f2a:	189b      	adds	r3, r3, r2
10007f2c:	1c0a      	adds	r2, r1, #0
10007f2e:	719a      	strb	r2, [r3, #6]
	  ReadAxis1.txBuffer[txIndex++] = ReadAxis1.ChangeTrue;
10007f30:	1dfb      	adds	r3, r7, #7
10007f32:	781b      	ldrb	r3, [r3, #0]
10007f34:	1dfa      	adds	r2, r7, #7
10007f36:	1c59      	adds	r1, r3, #1
10007f38:	7011      	strb	r1, [r2, #0]
10007f3a:	1c19      	adds	r1, r3, #0
10007f3c:	4b1d      	ldr	r3, [pc, #116]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f3e:	22a0      	movs	r2, #160	; 0xa0
10007f40:	5c9b      	ldrb	r3, [r3, r2]
10007f42:	1c18      	adds	r0, r3, #0
10007f44:	4b1b      	ldr	r3, [pc, #108]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f46:	2220      	movs	r2, #32
10007f48:	185b      	adds	r3, r3, r1
10007f4a:	189b      	adds	r3, r3, r2
10007f4c:	1c02      	adds	r2, r0, #0
10007f4e:	719a      	strb	r2, [r3, #6]
	  ReadAxis1.txBuffer[txIndex] = ReadAxis1GetCRC(&ReadAxis1.txBuffer[0], &ReadAxis1.txBuffer[txIndex - 1]);
10007f50:	1dfb      	adds	r3, r7, #7
10007f52:	781c      	ldrb	r4, [r3, #0]
10007f54:	1dfb      	adds	r3, r7, #7
10007f56:	781b      	ldrb	r3, [r3, #0]
10007f58:	3b01      	subs	r3, #1
10007f5a:	3320      	adds	r3, #32
10007f5c:	1c1a      	adds	r2, r3, #0
10007f5e:	4b15      	ldr	r3, [pc, #84]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f60:	18d3      	adds	r3, r2, r3
10007f62:	3306      	adds	r3, #6
10007f64:	4a14      	ldr	r2, [pc, #80]	; (10007fb8 <TransmitAngleTask+0x120>)
10007f66:	1c10      	adds	r0, r2, #0
10007f68:	1c19      	adds	r1, r3, #0
10007f6a:	f000 f8fd 	bl	10008168 <ReadAxis1GetCRC>
10007f6e:	1c03      	adds	r3, r0, #0
10007f70:	1c19      	adds	r1, r3, #0
10007f72:	4b10      	ldr	r3, [pc, #64]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f74:	2220      	movs	r2, #32
10007f76:	191b      	adds	r3, r3, r4
10007f78:	189b      	adds	r3, r3, r2
10007f7a:	1c0a      	adds	r2, r1, #0
10007f7c:	719a      	strb	r2, [r3, #6]
	  txIndex++;
10007f7e:	1dfb      	adds	r3, r7, #7
10007f80:	781a      	ldrb	r2, [r3, #0]
10007f82:	1dfb      	adds	r3, r7, #7
10007f84:	3201      	adds	r2, #1
10007f86:	701a      	strb	r2, [r3, #0]
	  ReadAxis1.txBuffer[txIndex++] = 0x81;
10007f88:	1dfb      	adds	r3, r7, #7
10007f8a:	781b      	ldrb	r3, [r3, #0]
10007f8c:	1dfa      	adds	r2, r7, #7
10007f8e:	1c59      	adds	r1, r3, #1
10007f90:	7011      	strb	r1, [r2, #0]
10007f92:	1c19      	adds	r1, r3, #0
10007f94:	4b07      	ldr	r3, [pc, #28]	; (10007fb4 <TransmitAngleTask+0x11c>)
10007f96:	2220      	movs	r2, #32
10007f98:	185b      	adds	r3, r3, r1
10007f9a:	189b      	adds	r3, r3, r2
10007f9c:	2281      	movs	r2, #129	; 0x81
10007f9e:	719a      	strb	r2, [r3, #6]
	  UART_Transmit(&UART_0, ReadAxis1.txBuffer, 8);
10007fa0:	4a06      	ldr	r2, [pc, #24]	; (10007fbc <TransmitAngleTask+0x124>)
10007fa2:	4b05      	ldr	r3, [pc, #20]	; (10007fb8 <TransmitAngleTask+0x120>)
10007fa4:	1c10      	adds	r0, r2, #0
10007fa6:	1c19      	adds	r1, r3, #0
10007fa8:	2208      	movs	r2, #8
10007faa:	f7fa fdf3 	bl	10002b94 <UART_Transmit>
//	  DIGITAL_IO_ToggleOutput(&LED2);
//	  taskSetState(TASK_TRANSMIT_ANGLE, TASK_STOP);

}
10007fae:	46bd      	mov	sp, r7
10007fb0:	b003      	add	sp, #12
10007fb2:	bd90      	pop	{r4, r7, pc}
10007fb4:	20000c18 	.word	0x20000c18
10007fb8:	20000c3e 	.word	0x20000c3e
10007fbc:	20000584 	.word	0x20000584

10007fc0 <ReceiveCentral>:

void ReceiveCentral(void){
10007fc0:	b580      	push	{r7, lr}
10007fc2:	af00      	add	r7, sp, #0
	UART_Receive(&UART_0, &ReadAxis1.rxData, 1);
10007fc4:	4a65      	ldr	r2, [pc, #404]	; (1000815c <ReceiveCentral+0x19c>)
10007fc6:	4b66      	ldr	r3, [pc, #408]	; (10008160 <ReceiveCentral+0x1a0>)
10007fc8:	1c10      	adds	r0, r2, #0
10007fca:	1c19      	adds	r1, r3, #0
10007fcc:	2201      	movs	r2, #1
10007fce:	f7fa fe07 	bl	10002be0 <UART_Receive>
	UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
10007fd2:	4b62      	ldr	r3, [pc, #392]	; (1000815c <ReceiveCentral+0x19c>)
10007fd4:	1c18      	adds	r0, r3, #0
10007fd6:	2101      	movs	r1, #1
10007fd8:	f7ff fd2c 	bl	10007a34 <UART_ClearRXFIFOStatus>


	switch(ReadAxis1.rxState)
10007fdc:	4b60      	ldr	r3, [pc, #384]	; (10008160 <ReceiveCentral+0x1a0>)
10007fde:	785b      	ldrb	r3, [r3, #1]
10007fe0:	2b3c      	cmp	r3, #60	; 0x3c
10007fe2:	d900      	bls.n	10007fe6 <ReceiveCentral+0x26>
10007fe4:	e0b8      	b.n	10008158 <ReceiveCentral+0x198>
10007fe6:	009a      	lsls	r2, r3, #2
10007fe8:	4b5e      	ldr	r3, [pc, #376]	; (10008164 <ReceiveCentral+0x1a4>)
10007fea:	18d3      	adds	r3, r2, r3
10007fec:	681b      	ldr	r3, [r3, #0]
10007fee:	469f      	mov	pc, r3
	{
	    case READ_AXIS1_STATE_WAIT_HEADER:
	    {
	    	if(ReadAxis1.rxData == READ_AXIS1_HEADER){
10007ff0:	4b5b      	ldr	r3, [pc, #364]	; (10008160 <ReceiveCentral+0x1a0>)
10007ff2:	781b      	ldrb	r3, [r3, #0]
10007ff4:	2b7e      	cmp	r3, #126	; 0x7e
10007ff6:	d107      	bne.n	10008008 <ReceiveCentral+0x48>
	    		ReadAxis1.rxState = READ_AXIS1_STATE_GET_LEN;
10007ff8:	4b59      	ldr	r3, [pc, #356]	; (10008160 <ReceiveCentral+0x1a0>)
10007ffa:	220a      	movs	r2, #10
10007ffc:	705a      	strb	r2, [r3, #1]
	    		ReadAxis1.rxCrc = ReadAxis1.rxData;
10007ffe:	4b58      	ldr	r3, [pc, #352]	; (10008160 <ReceiveCentral+0x1a0>)
10008000:	781a      	ldrb	r2, [r3, #0]
10008002:	4b57      	ldr	r3, [pc, #348]	; (10008160 <ReceiveCentral+0x1a0>)
10008004:	709a      	strb	r2, [r3, #2]
	    	}
	    }
	    break;
10008006:	e0a7      	b.n	10008158 <ReceiveCentral+0x198>
10008008:	e0a6      	b.n	10008158 <ReceiveCentral+0x198>

		case READ_AXIS1_STATE_GET_LEN:
		{
			if(ReadAxis1.rxData < READ_AXIS1_BUFFER_LEN + READ_AXIS1_FIXED_PKT_LEN)
1000800a:	4b55      	ldr	r3, [pc, #340]	; (10008160 <ReceiveCentral+0x1a0>)
1000800c:	781b      	ldrb	r3, [r3, #0]
1000800e:	2b24      	cmp	r3, #36	; 0x24
10008010:	d80f      	bhi.n	10008032 <ReceiveCentral+0x72>
			{
				ReadAxis1.rxByteCount = ReadAxis1.rxData;
10008012:	4b53      	ldr	r3, [pc, #332]	; (10008160 <ReceiveCentral+0x1a0>)
10008014:	781a      	ldrb	r2, [r3, #0]
10008016:	4b52      	ldr	r3, [pc, #328]	; (10008160 <ReceiveCentral+0x1a0>)
10008018:	70da      	strb	r2, [r3, #3]
				ReadAxis1.rxCrc ^= ReadAxis1.rxData;
1000801a:	4b51      	ldr	r3, [pc, #324]	; (10008160 <ReceiveCentral+0x1a0>)
1000801c:	789a      	ldrb	r2, [r3, #2]
1000801e:	4b50      	ldr	r3, [pc, #320]	; (10008160 <ReceiveCentral+0x1a0>)
10008020:	781b      	ldrb	r3, [r3, #0]
10008022:	4053      	eors	r3, r2
10008024:	b2da      	uxtb	r2, r3
10008026:	4b4e      	ldr	r3, [pc, #312]	; (10008160 <ReceiveCentral+0x1a0>)
10008028:	709a      	strb	r2, [r3, #2]
				ReadAxis1.rxState = READ_AXIS1_STATE_GET_FUNC;
1000802a:	4b4d      	ldr	r3, [pc, #308]	; (10008160 <ReceiveCentral+0x1a0>)
1000802c:	221e      	movs	r2, #30
1000802e:	705a      	strb	r2, [r3, #1]
			else
			{
				ReadAxis1.rxState = READ_AXIS1_STATE_WAIT_HEADER;
			}
		}
		break;
10008030:	e092      	b.n	10008158 <ReceiveCentral+0x198>
				ReadAxis1.rxCrc ^= ReadAxis1.rxData;
				ReadAxis1.rxState = READ_AXIS1_STATE_GET_FUNC;
			}
			else
			{
				ReadAxis1.rxState = READ_AXIS1_STATE_WAIT_HEADER;
10008032:	4b4b      	ldr	r3, [pc, #300]	; (10008160 <ReceiveCentral+0x1a0>)
10008034:	2200      	movs	r2, #0
10008036:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
10008038:	e08e      	b.n	10008158 <ReceiveCentral+0x198>



		case READ_AXIS1_STATE_GET_FUNC:
		{
			ReadAxis1.rxFunc = ReadAxis1.rxData;
1000803a:	4b49      	ldr	r3, [pc, #292]	; (10008160 <ReceiveCentral+0x1a0>)
1000803c:	781a      	ldrb	r2, [r3, #0]
1000803e:	4b48      	ldr	r3, [pc, #288]	; (10008160 <ReceiveCentral+0x1a0>)
10008040:	715a      	strb	r2, [r3, #5]
			ReadAxis1.rxCrc ^= ReadAxis1.rxData;
10008042:	4b47      	ldr	r3, [pc, #284]	; (10008160 <ReceiveCentral+0x1a0>)
10008044:	789a      	ldrb	r2, [r3, #2]
10008046:	4b46      	ldr	r3, [pc, #280]	; (10008160 <ReceiveCentral+0x1a0>)
10008048:	781b      	ldrb	r3, [r3, #0]
1000804a:	4053      	eors	r3, r2
1000804c:	b2da      	uxtb	r2, r3
1000804e:	4b44      	ldr	r3, [pc, #272]	; (10008160 <ReceiveCentral+0x1a0>)
10008050:	709a      	strb	r2, [r3, #2]
			ReadAxis1.rxIndex = 0;
10008052:	4b43      	ldr	r3, [pc, #268]	; (10008160 <ReceiveCentral+0x1a0>)
10008054:	2200      	movs	r2, #0
10008056:	711a      	strb	r2, [r3, #4]
			ReadAxis1.rxState = READ_AXIS1_STATE_GET_DATA;
10008058:	4b41      	ldr	r3, [pc, #260]	; (10008160 <ReceiveCentral+0x1a0>)
1000805a:	2228      	movs	r2, #40	; 0x28
1000805c:	705a      	strb	r2, [r3, #1]
		}
		break;
1000805e:	e07b      	b.n	10008158 <ReceiveCentral+0x198>

		case READ_AXIS1_STATE_GET_DATA:
		{
			ReadAxis1.rxBuffer[ReadAxis1.rxIndex++] = ReadAxis1.rxData;
10008060:	4b3f      	ldr	r3, [pc, #252]	; (10008160 <ReceiveCentral+0x1a0>)
10008062:	791b      	ldrb	r3, [r3, #4]
10008064:	1c5a      	adds	r2, r3, #1
10008066:	b2d1      	uxtb	r1, r2
10008068:	4a3d      	ldr	r2, [pc, #244]	; (10008160 <ReceiveCentral+0x1a0>)
1000806a:	7111      	strb	r1, [r2, #4]
1000806c:	1c19      	adds	r1, r3, #0
1000806e:	4b3c      	ldr	r3, [pc, #240]	; (10008160 <ReceiveCentral+0x1a0>)
10008070:	781a      	ldrb	r2, [r3, #0]
10008072:	4b3b      	ldr	r3, [pc, #236]	; (10008160 <ReceiveCentral+0x1a0>)
10008074:	185b      	adds	r3, r3, r1
10008076:	719a      	strb	r2, [r3, #6]
			ReadAxis1.rxCrc ^= ReadAxis1.rxData;
10008078:	4b39      	ldr	r3, [pc, #228]	; (10008160 <ReceiveCentral+0x1a0>)
1000807a:	789a      	ldrb	r2, [r3, #2]
1000807c:	4b38      	ldr	r3, [pc, #224]	; (10008160 <ReceiveCentral+0x1a0>)
1000807e:	781b      	ldrb	r3, [r3, #0]
10008080:	4053      	eors	r3, r2
10008082:	b2da      	uxtb	r2, r3
10008084:	4b36      	ldr	r3, [pc, #216]	; (10008160 <ReceiveCentral+0x1a0>)
10008086:	709a      	strb	r2, [r3, #2]
			if(ReadAxis1.rxIndex == ReadAxis1.rxByteCount - READ_AXIS1_FIXED_PKT_LEN) // data len = total - (start, len, id, func, crc, stop)
10008088:	4b35      	ldr	r3, [pc, #212]	; (10008160 <ReceiveCentral+0x1a0>)
1000808a:	791b      	ldrb	r3, [r3, #4]
1000808c:	1c1a      	adds	r2, r3, #0
1000808e:	4b34      	ldr	r3, [pc, #208]	; (10008160 <ReceiveCentral+0x1a0>)
10008090:	78db      	ldrb	r3, [r3, #3]
10008092:	3b05      	subs	r3, #5
10008094:	429a      	cmp	r2, r3
10008096:	d103      	bne.n	100080a0 <ReceiveCentral+0xe0>
			{
				ReadAxis1.rxState = READ_AXIS1_STATE_CHECK_CRC;
10008098:	4b31      	ldr	r3, [pc, #196]	; (10008160 <ReceiveCentral+0x1a0>)
1000809a:	2232      	movs	r2, #50	; 0x32
1000809c:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
1000809e:	e05b      	b.n	10008158 <ReceiveCentral+0x198>
100080a0:	e05a      	b.n	10008158 <ReceiveCentral+0x198>

		case READ_AXIS1_STATE_CHECK_CRC:
		{
			ReadAxis1.rxCrc = ~ReadAxis1.rxCrc;
100080a2:	4b2f      	ldr	r3, [pc, #188]	; (10008160 <ReceiveCentral+0x1a0>)
100080a4:	789b      	ldrb	r3, [r3, #2]
100080a6:	43db      	mvns	r3, r3
100080a8:	b2da      	uxtb	r2, r3
100080aa:	4b2d      	ldr	r3, [pc, #180]	; (10008160 <ReceiveCentral+0x1a0>)
100080ac:	709a      	strb	r2, [r3, #2]
			if(ReadAxis1.rxData == ReadAxis1.rxCrc)
100080ae:	4b2c      	ldr	r3, [pc, #176]	; (10008160 <ReceiveCentral+0x1a0>)
100080b0:	781a      	ldrb	r2, [r3, #0]
100080b2:	4b2b      	ldr	r3, [pc, #172]	; (10008160 <ReceiveCentral+0x1a0>)
100080b4:	789b      	ldrb	r3, [r3, #2]
100080b6:	429a      	cmp	r2, r3
100080b8:	d103      	bne.n	100080c2 <ReceiveCentral+0x102>
			{
				ReadAxis1.rxState = READ_AXIS1_STATE_WAIT_TAIL;
100080ba:	4b29      	ldr	r3, [pc, #164]	; (10008160 <ReceiveCentral+0x1a0>)
100080bc:	223c      	movs	r2, #60	; 0x3c
100080be:	705a      	strb	r2, [r3, #1]
			else
			{
				ReadAxis1.rxState = READ_AXIS1_STATE_WAIT_HEADER;
			}
		}
		break;
100080c0:	e04a      	b.n	10008158 <ReceiveCentral+0x198>
			{
				ReadAxis1.rxState = READ_AXIS1_STATE_WAIT_TAIL;
			}
			else
			{
				ReadAxis1.rxState = READ_AXIS1_STATE_WAIT_HEADER;
100080c2:	4b27      	ldr	r3, [pc, #156]	; (10008160 <ReceiveCentral+0x1a0>)
100080c4:	2200      	movs	r2, #0
100080c6:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
100080c8:	e046      	b.n	10008158 <ReceiveCentral+0x198>

		case READ_AXIS1_STATE_WAIT_TAIL:
		{
			if(ReadAxis1.rxData == READ_AXIS1_TAIL)
100080ca:	4b25      	ldr	r3, [pc, #148]	; (10008160 <ReceiveCentral+0x1a0>)
100080cc:	781b      	ldrb	r3, [r3, #0]
100080ce:	2b81      	cmp	r3, #129	; 0x81
100080d0:	d13e      	bne.n	10008150 <ReceiveCentral+0x190>
			{

				if(ReadAxis1.rxBuffer[1] == 1){
100080d2:	4b23      	ldr	r3, [pc, #140]	; (10008160 <ReceiveCentral+0x1a0>)
100080d4:	79db      	ldrb	r3, [r3, #7]
100080d6:	2b01      	cmp	r3, #1
100080d8:	d109      	bne.n	100080ee <ReceiveCentral+0x12e>
					ReadAxis1.StatusCalibration1 = true;
100080da:	4b21      	ldr	r3, [pc, #132]	; (10008160 <ReceiveCentral+0x1a0>)
100080dc:	22a1      	movs	r2, #161	; 0xa1
100080de:	2101      	movs	r1, #1
100080e0:	5499      	strb	r1, [r3, r2]
					ReadAxis1.AngleCalibration = ReadAxis1.rxBuffer[1];
100080e2:	4b1f      	ldr	r3, [pc, #124]	; (10008160 <ReceiveCentral+0x1a0>)
100080e4:	79d9      	ldrb	r1, [r3, #7]
100080e6:	4b1e      	ldr	r3, [pc, #120]	; (10008160 <ReceiveCentral+0x1a0>)
100080e8:	22ac      	movs	r2, #172	; 0xac
100080ea:	5499      	strb	r1, [r3, r2]
100080ec:	e00c      	b.n	10008108 <ReceiveCentral+0x148>
				}
				else if(ReadAxis1.rxBuffer[1] == 2){
100080ee:	4b1c      	ldr	r3, [pc, #112]	; (10008160 <ReceiveCentral+0x1a0>)
100080f0:	79db      	ldrb	r3, [r3, #7]
100080f2:	2b02      	cmp	r3, #2
100080f4:	d108      	bne.n	10008108 <ReceiveCentral+0x148>
					ReadAxis1.StatusCalibration2 = true;
100080f6:	4b1a      	ldr	r3, [pc, #104]	; (10008160 <ReceiveCentral+0x1a0>)
100080f8:	22a2      	movs	r2, #162	; 0xa2
100080fa:	2101      	movs	r1, #1
100080fc:	5499      	strb	r1, [r3, r2]
					ReadAxis1.AngleCalibration = ReadAxis1.rxBuffer[1];
100080fe:	4b18      	ldr	r3, [pc, #96]	; (10008160 <ReceiveCentral+0x1a0>)
10008100:	79d9      	ldrb	r1, [r3, #7]
10008102:	4b17      	ldr	r3, [pc, #92]	; (10008160 <ReceiveCentral+0x1a0>)
10008104:	22ac      	movs	r2, #172	; 0xac
10008106:	5499      	strb	r1, [r3, r2]
				}
				taskSetState(TASK_TRANSMIT_ANGLE, TASK_GO);
10008108:	2001      	movs	r0, #1
1000810a:	2101      	movs	r1, #1
1000810c:	f000 fcd4 	bl	10008ab8 <taskSetState>

				if(ReadAxis1.rxBuffer[2] == 1){
10008110:	4b13      	ldr	r3, [pc, #76]	; (10008160 <ReceiveCentral+0x1a0>)
10008112:	7a1b      	ldrb	r3, [r3, #8]
10008114:	2b01      	cmp	r3, #1
10008116:	d10c      	bne.n	10008132 <ReceiveCentral+0x172>
					//entrou no modo encoder
					//parar a leitura
					taskSetState(TASK_CONTROL_ANGLE1, TASK_STOP);
10008118:	2301      	movs	r3, #1
1000811a:	425b      	negs	r3, r3
1000811c:	2000      	movs	r0, #0
1000811e:	1c19      	adds	r1, r3, #0
10008120:	f000 fcca 	bl	10008ab8 <taskSetState>
					taskSetState(TASK_TRANSMIT_ANGLE, TASK_STOP);
10008124:	2301      	movs	r3, #1
10008126:	425b      	negs	r3, r3
10008128:	2001      	movs	r0, #1
1000812a:	1c19      	adds	r1, r3, #0
1000812c:	f000 fcc4 	bl	10008ab8 <taskSetState>
10008130:	e00e      	b.n	10008150 <ReceiveCentral+0x190>
				}
				else if(ReadAxis1.rxBuffer[2] == 2){
10008132:	4b0b      	ldr	r3, [pc, #44]	; (10008160 <ReceiveCentral+0x1a0>)
10008134:	7a1b      	ldrb	r3, [r3, #8]
10008136:	2b02      	cmp	r3, #2
10008138:	d10a      	bne.n	10008150 <ReceiveCentral+0x190>
					//voltou para o modo angulo
					//reiniciar a leitura
					taskSetState(TASK_CONTROL_ANGLE1, TASK_GO);
1000813a:	2000      	movs	r0, #0
1000813c:	2101      	movs	r1, #1
1000813e:	f000 fcbb 	bl	10008ab8 <taskSetState>
					ReadAxis1.counter = 0;
10008142:	4b07      	ldr	r3, [pc, #28]	; (10008160 <ReceiveCentral+0x1a0>)
10008144:	229e      	movs	r2, #158	; 0x9e
10008146:	2100      	movs	r1, #0
10008148:	5299      	strh	r1, [r3, r2]
					ReadAxis1.data_raw_acceleration_Sum = 0;
1000814a:	4b05      	ldr	r3, [pc, #20]	; (10008160 <ReceiveCentral+0x1a0>)
1000814c:	2200      	movs	r2, #0
1000814e:	671a      	str	r2, [r3, #112]	; 0x70
				}
			}
			ReadAxis1.rxState = READ_AXIS1_STATE_WAIT_HEADER;
10008150:	4b03      	ldr	r3, [pc, #12]	; (10008160 <ReceiveCentral+0x1a0>)
10008152:	2200      	movs	r2, #0
10008154:	705a      	strb	r2, [r3, #1]
		}
		break;
10008156:	46c0      	nop			; (mov r8, r8)
	}
}
10008158:	46bd      	mov	sp, r7
1000815a:	bd80      	pop	{r7, pc}
1000815c:	20000584 	.word	0x20000584
10008160:	20000c18 	.word	0x20000c18
10008164:	1000c42c 	.word	0x1000c42c

10008168 <ReadAxis1GetCRC>:

uint8_t ReadAxis1GetCRC(unsigned char *startAddr, unsigned char *endAddr)
{
10008168:	b580      	push	{r7, lr}
1000816a:	b084      	sub	sp, #16
1000816c:	af00      	add	r7, sp, #0
1000816e:	6078      	str	r0, [r7, #4]
10008170:	6039      	str	r1, [r7, #0]
     uint8_t crc = 0;
10008172:	230f      	movs	r3, #15
10008174:	18fb      	adds	r3, r7, r3
10008176:	2200      	movs	r2, #0
10008178:	701a      	strb	r2, [r3, #0]
     while(startAddr <= endAddr)
1000817a:	e00b      	b.n	10008194 <ReadAxis1GetCRC+0x2c>
     {
         //ServiceDog();            // Feed the watchdog.
         crc = crc ^ (*startAddr);
1000817c:	687b      	ldr	r3, [r7, #4]
1000817e:	7819      	ldrb	r1, [r3, #0]
10008180:	230f      	movs	r3, #15
10008182:	18fb      	adds	r3, r7, r3
10008184:	220f      	movs	r2, #15
10008186:	18ba      	adds	r2, r7, r2
10008188:	7812      	ldrb	r2, [r2, #0]
1000818a:	404a      	eors	r2, r1
1000818c:	701a      	strb	r2, [r3, #0]
         startAddr++;
1000818e:	687b      	ldr	r3, [r7, #4]
10008190:	3301      	adds	r3, #1
10008192:	607b      	str	r3, [r7, #4]
}

uint8_t ReadAxis1GetCRC(unsigned char *startAddr, unsigned char *endAddr)
{
     uint8_t crc = 0;
     while(startAddr <= endAddr)
10008194:	687a      	ldr	r2, [r7, #4]
10008196:	683b      	ldr	r3, [r7, #0]
10008198:	429a      	cmp	r2, r3
1000819a:	d9ef      	bls.n	1000817c <ReadAxis1GetCRC+0x14>
     {
         //ServiceDog();            // Feed the watchdog.
         crc = crc ^ (*startAddr);
         startAddr++;
     }
     crc = ~crc;
1000819c:	230f      	movs	r3, #15
1000819e:	18fb      	adds	r3, r7, r3
100081a0:	220f      	movs	r2, #15
100081a2:	18ba      	adds	r2, r7, r2
100081a4:	7812      	ldrb	r2, [r2, #0]
100081a6:	43d2      	mvns	r2, r2
100081a8:	701a      	strb	r2, [r3, #0]
     crc &= 0x00FF;
100081aa:	230f      	movs	r3, #15
100081ac:	18fb      	adds	r3, r7, r3
100081ae:	220f      	movs	r2, #15
100081b0:	18ba      	adds	r2, r7, r2
100081b2:	7812      	ldrb	r2, [r2, #0]
100081b4:	701a      	strb	r2, [r3, #0]
     return(crc);
100081b6:	230f      	movs	r3, #15
100081b8:	18fb      	adds	r3, r7, r3
100081ba:	781b      	ldrb	r3, [r3, #0]
}
100081bc:	1c18      	adds	r0, r3, #0
100081be:	46bd      	mov	sp, r7
100081c0:	b004      	add	sp, #16
100081c2:	bd80      	pop	{r7, pc}

100081c4 <SetupSensor>:
//********************************************************************************************************************************************
void ReadAxis1SendSetup(void){

}

void SetupSensor(void){
100081c4:	b590      	push	{r4, r7, lr}
100081c6:	b085      	sub	sp, #20
100081c8:	af04      	add	r7, sp, #16
	// WHO AM I
	ReadAxis1.register_map[0] = LIS2DW12_WHO_AM_I;
100081ca:	4be7      	ldr	r3, [pc, #924]	; (10008568 <SetupSensor+0x3a4>)
100081cc:	2248      	movs	r2, #72	; 0x48
100081ce:	210f      	movs	r1, #15
100081d0:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
100081d2:	4ae6      	ldr	r2, [pc, #920]	; (1000856c <SetupSensor+0x3a8>)
100081d4:	4ce6      	ldr	r4, [pc, #920]	; (10008570 <SetupSensor+0x3ac>)
100081d6:	2301      	movs	r3, #1
100081d8:	9300      	str	r3, [sp, #0]
100081da:	2300      	movs	r3, #0
100081dc:	9301      	str	r3, [sp, #4]
100081de:	1c10      	adds	r0, r2, #0
100081e0:	2101      	movs	r1, #1
100081e2:	2230      	movs	r2, #48	; 0x30
100081e4:	1c23      	adds	r3, r4, #0
100081e6:	f7fb fd57 	bl	10003c98 <I2C_MASTER_Transmit>
100081ea:	1c03      	adds	r3, r0, #0
100081ec:	1c19      	adds	r1, r3, #0
100081ee:	4bde      	ldr	r3, [pc, #888]	; (10008568 <SetupSensor+0x3a4>)
100081f0:	224a      	movs	r2, #74	; 0x4a
100081f2:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
100081f4:	46c0      	nop			; (mov r8, r8)
100081f6:	4bdd      	ldr	r3, [pc, #884]	; (1000856c <SetupSensor+0x3a8>)
100081f8:	1c18      	adds	r0, r3, #0
100081fa:	f7ff fc2b 	bl	10007a54 <I2C_MASTER_IsTxBusy>
100081fe:	1e03      	subs	r3, r0, #0
10008200:	d1f9      	bne.n	100081f6 <SetupSensor+0x32>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, &ReadAxis1.whoamI, 1, true, true);
10008202:	4ada      	ldr	r2, [pc, #872]	; (1000856c <SetupSensor+0x3a8>)
10008204:	4cdb      	ldr	r4, [pc, #876]	; (10008574 <SetupSensor+0x3b0>)
10008206:	2301      	movs	r3, #1
10008208:	9300      	str	r3, [sp, #0]
1000820a:	2301      	movs	r3, #1
1000820c:	9301      	str	r3, [sp, #4]
1000820e:	2301      	movs	r3, #1
10008210:	9302      	str	r3, [sp, #8]
10008212:	1c10      	adds	r0, r2, #0
10008214:	2101      	movs	r1, #1
10008216:	2231      	movs	r2, #49	; 0x31
10008218:	1c23      	adds	r3, r4, #0
1000821a:	f7fb feeb 	bl	10003ff4 <I2C_MASTER_Receive>
1000821e:	1c03      	adds	r3, r0, #0
10008220:	1c19      	adds	r1, r3, #0
10008222:	4bd1      	ldr	r3, [pc, #836]	; (10008568 <SetupSensor+0x3a4>)
10008224:	224a      	movs	r2, #74	; 0x4a
10008226:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
10008228:	46c0      	nop			; (mov r8, r8)
1000822a:	4bd0      	ldr	r3, [pc, #832]	; (1000856c <SetupSensor+0x3a8>)
1000822c:	1c18      	adds	r0, r3, #0
1000822e:	f7ff fc1f 	bl	10007a70 <I2C_MASTER_IsRxBusy>
10008232:	1e03      	subs	r3, r0, #0
10008234:	d1f9      	bne.n	1000822a <SetupSensor+0x66>

	ReadAxis1.register_map[0] = LIS2DW12_CTRL2;
10008236:	4bcc      	ldr	r3, [pc, #816]	; (10008568 <SetupSensor+0x3a4>)
10008238:	2248      	movs	r2, #72	; 0x48
1000823a:	2121      	movs	r1, #33	; 0x21
1000823c:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
1000823e:	4acb      	ldr	r2, [pc, #812]	; (1000856c <SetupSensor+0x3a8>)
10008240:	4ccb      	ldr	r4, [pc, #812]	; (10008570 <SetupSensor+0x3ac>)
10008242:	2301      	movs	r3, #1
10008244:	9300      	str	r3, [sp, #0]
10008246:	2300      	movs	r3, #0
10008248:	9301      	str	r3, [sp, #4]
1000824a:	1c10      	adds	r0, r2, #0
1000824c:	2101      	movs	r1, #1
1000824e:	2230      	movs	r2, #48	; 0x30
10008250:	1c23      	adds	r3, r4, #0
10008252:	f7fb fd21 	bl	10003c98 <I2C_MASTER_Transmit>
10008256:	1c03      	adds	r3, r0, #0
10008258:	1c19      	adds	r1, r3, #0
1000825a:	4bc3      	ldr	r3, [pc, #780]	; (10008568 <SetupSensor+0x3a4>)
1000825c:	224a      	movs	r2, #74	; 0x4a
1000825e:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
10008260:	46c0      	nop			; (mov r8, r8)
10008262:	4bc2      	ldr	r3, [pc, #776]	; (1000856c <SetupSensor+0x3a8>)
10008264:	1c18      	adds	r0, r3, #0
10008266:	f7ff fbf5 	bl	10007a54 <I2C_MASTER_IsTxBusy>
1000826a:	1e03      	subs	r3, r0, #0
1000826c:	d1f9      	bne.n	10008262 <SetupSensor+0x9e>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, &ReadAxis1.rst, 1, true, true);
1000826e:	4abf      	ldr	r2, [pc, #764]	; (1000856c <SetupSensor+0x3a8>)
10008270:	4cc1      	ldr	r4, [pc, #772]	; (10008578 <SetupSensor+0x3b4>)
10008272:	2301      	movs	r3, #1
10008274:	9300      	str	r3, [sp, #0]
10008276:	2301      	movs	r3, #1
10008278:	9301      	str	r3, [sp, #4]
1000827a:	2301      	movs	r3, #1
1000827c:	9302      	str	r3, [sp, #8]
1000827e:	1c10      	adds	r0, r2, #0
10008280:	2101      	movs	r1, #1
10008282:	2231      	movs	r2, #49	; 0x31
10008284:	1c23      	adds	r3, r4, #0
10008286:	f7fb feb5 	bl	10003ff4 <I2C_MASTER_Receive>
1000828a:	1c03      	adds	r3, r0, #0
1000828c:	1c19      	adds	r1, r3, #0
1000828e:	4bb6      	ldr	r3, [pc, #728]	; (10008568 <SetupSensor+0x3a4>)
10008290:	224a      	movs	r2, #74	; 0x4a
10008292:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
10008294:	46c0      	nop			; (mov r8, r8)
10008296:	4bb5      	ldr	r3, [pc, #724]	; (1000856c <SetupSensor+0x3a8>)
10008298:	1c18      	adds	r0, r3, #0
1000829a:	f7ff fbe9 	bl	10007a70 <I2C_MASTER_IsRxBusy>
1000829e:	1e03      	subs	r3, r0, #0
100082a0:	d1f9      	bne.n	10008296 <SetupSensor+0xd2>

	ReadAxis1.register_map[0] = LIS2DW12_CTRL2;
100082a2:	4bb1      	ldr	r3, [pc, #708]	; (10008568 <SetupSensor+0x3a4>)
100082a4:	2248      	movs	r2, #72	; 0x48
100082a6:	2121      	movs	r1, #33	; 0x21
100082a8:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.rst | 0b01000000;
100082aa:	4baf      	ldr	r3, [pc, #700]	; (10008568 <SetupSensor+0x3a4>)
100082ac:	224c      	movs	r2, #76	; 0x4c
100082ae:	5c9b      	ldrb	r3, [r3, r2]
100082b0:	2240      	movs	r2, #64	; 0x40
100082b2:	4313      	orrs	r3, r2
100082b4:	b2d9      	uxtb	r1, r3
100082b6:	4bac      	ldr	r3, [pc, #688]	; (10008568 <SetupSensor+0x3a4>)
100082b8:	2249      	movs	r2, #73	; 0x49
100082ba:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, ReadAxis1.register_map, 2, true);
100082bc:	4aab      	ldr	r2, [pc, #684]	; (1000856c <SetupSensor+0x3a8>)
100082be:	4cac      	ldr	r4, [pc, #688]	; (10008570 <SetupSensor+0x3ac>)
100082c0:	2302      	movs	r3, #2
100082c2:	9300      	str	r3, [sp, #0]
100082c4:	2301      	movs	r3, #1
100082c6:	9301      	str	r3, [sp, #4]
100082c8:	1c10      	adds	r0, r2, #0
100082ca:	2101      	movs	r1, #1
100082cc:	2230      	movs	r2, #48	; 0x30
100082ce:	1c23      	adds	r3, r4, #0
100082d0:	f7fb fce2 	bl	10003c98 <I2C_MASTER_Transmit>
100082d4:	1c03      	adds	r3, r0, #0
100082d6:	1c19      	adds	r1, r3, #0
100082d8:	4ba3      	ldr	r3, [pc, #652]	; (10008568 <SetupSensor+0x3a4>)
100082da:	224a      	movs	r2, #74	; 0x4a
100082dc:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
100082de:	46c0      	nop			; (mov r8, r8)
100082e0:	4ba2      	ldr	r3, [pc, #648]	; (1000856c <SetupSensor+0x3a8>)
100082e2:	1c18      	adds	r0, r3, #0
100082e4:	f7ff fbb6 	bl	10007a54 <I2C_MASTER_IsTxBusy>
100082e8:	1e03      	subs	r3, r0, #0
100082ea:	d1f9      	bne.n	100082e0 <SetupSensor+0x11c>

	do {
		ReadAxis1.register_map[0] = LIS2DW12_CTRL2;
100082ec:	4b9e      	ldr	r3, [pc, #632]	; (10008568 <SetupSensor+0x3a4>)
100082ee:	2248      	movs	r2, #72	; 0x48
100082f0:	2121      	movs	r1, #33	; 0x21
100082f2:	5499      	strb	r1, [r3, r2]
		ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
100082f4:	4a9d      	ldr	r2, [pc, #628]	; (1000856c <SetupSensor+0x3a8>)
100082f6:	4c9e      	ldr	r4, [pc, #632]	; (10008570 <SetupSensor+0x3ac>)
100082f8:	2301      	movs	r3, #1
100082fa:	9300      	str	r3, [sp, #0]
100082fc:	2300      	movs	r3, #0
100082fe:	9301      	str	r3, [sp, #4]
10008300:	1c10      	adds	r0, r2, #0
10008302:	2101      	movs	r1, #1
10008304:	2230      	movs	r2, #48	; 0x30
10008306:	1c23      	adds	r3, r4, #0
10008308:	f7fb fcc6 	bl	10003c98 <I2C_MASTER_Transmit>
1000830c:	1c03      	adds	r3, r0, #0
1000830e:	1c19      	adds	r1, r3, #0
10008310:	4b95      	ldr	r3, [pc, #596]	; (10008568 <SetupSensor+0x3a4>)
10008312:	224a      	movs	r2, #74	; 0x4a
10008314:	5499      	strb	r1, [r3, r2]
		while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
10008316:	46c0      	nop			; (mov r8, r8)
10008318:	4b94      	ldr	r3, [pc, #592]	; (1000856c <SetupSensor+0x3a8>)
1000831a:	1c18      	adds	r0, r3, #0
1000831c:	f7ff fb9a 	bl	10007a54 <I2C_MASTER_IsTxBusy>
10008320:	1e03      	subs	r3, r0, #0
10008322:	d1f9      	bne.n	10008318 <SetupSensor+0x154>
		ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, &ReadAxis1.rst, 1, true, true);
10008324:	4a91      	ldr	r2, [pc, #580]	; (1000856c <SetupSensor+0x3a8>)
10008326:	4c94      	ldr	r4, [pc, #592]	; (10008578 <SetupSensor+0x3b4>)
10008328:	2301      	movs	r3, #1
1000832a:	9300      	str	r3, [sp, #0]
1000832c:	2301      	movs	r3, #1
1000832e:	9301      	str	r3, [sp, #4]
10008330:	2301      	movs	r3, #1
10008332:	9302      	str	r3, [sp, #8]
10008334:	1c10      	adds	r0, r2, #0
10008336:	2101      	movs	r1, #1
10008338:	2231      	movs	r2, #49	; 0x31
1000833a:	1c23      	adds	r3, r4, #0
1000833c:	f7fb fe5a 	bl	10003ff4 <I2C_MASTER_Receive>
10008340:	1c03      	adds	r3, r0, #0
10008342:	1c19      	adds	r1, r3, #0
10008344:	4b88      	ldr	r3, [pc, #544]	; (10008568 <SetupSensor+0x3a4>)
10008346:	224a      	movs	r2, #74	; 0x4a
10008348:	5499      	strb	r1, [r3, r2]
		while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
1000834a:	46c0      	nop			; (mov r8, r8)
1000834c:	4b87      	ldr	r3, [pc, #540]	; (1000856c <SetupSensor+0x3a8>)
1000834e:	1c18      	adds	r0, r3, #0
10008350:	f7ff fb8e 	bl	10007a70 <I2C_MASTER_IsRxBusy>
10008354:	1e03      	subs	r3, r0, #0
10008356:	d1f9      	bne.n	1000834c <SetupSensor+0x188>
		ReadAxis1.register_map[1] = ReadAxis1.rst & 0b01000000;
10008358:	4b83      	ldr	r3, [pc, #524]	; (10008568 <SetupSensor+0x3a4>)
1000835a:	224c      	movs	r2, #76	; 0x4c
1000835c:	5c9b      	ldrb	r3, [r3, r2]
1000835e:	2240      	movs	r2, #64	; 0x40
10008360:	4013      	ands	r3, r2
10008362:	b2d9      	uxtb	r1, r3
10008364:	4b80      	ldr	r3, [pc, #512]	; (10008568 <SetupSensor+0x3a4>)
10008366:	2249      	movs	r2, #73	; 0x49
10008368:	5499      	strb	r1, [r3, r2]
	} while (ReadAxis1.register_map[1]);
1000836a:	4b7f      	ldr	r3, [pc, #508]	; (10008568 <SetupSensor+0x3a4>)
1000836c:	2249      	movs	r2, #73	; 0x49
1000836e:	5c9b      	ldrb	r3, [r3, r2]
10008370:	2b00      	cmp	r3, #0
10008372:	d1bb      	bne.n	100082ec <SetupSensor+0x128>

	//Block data update
	ReadAxis1.register_map[0] = LIS2DW12_CTRL2;
10008374:	4b7c      	ldr	r3, [pc, #496]	; (10008568 <SetupSensor+0x3a4>)
10008376:	2248      	movs	r2, #72	; 0x48
10008378:	2121      	movs	r1, #33	; 0x21
1000837a:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
1000837c:	4a7b      	ldr	r2, [pc, #492]	; (1000856c <SetupSensor+0x3a8>)
1000837e:	4c7c      	ldr	r4, [pc, #496]	; (10008570 <SetupSensor+0x3ac>)
10008380:	2301      	movs	r3, #1
10008382:	9300      	str	r3, [sp, #0]
10008384:	2300      	movs	r3, #0
10008386:	9301      	str	r3, [sp, #4]
10008388:	1c10      	adds	r0, r2, #0
1000838a:	2101      	movs	r1, #1
1000838c:	2230      	movs	r2, #48	; 0x30
1000838e:	1c23      	adds	r3, r4, #0
10008390:	f7fb fc82 	bl	10003c98 <I2C_MASTER_Transmit>
10008394:	1c03      	adds	r3, r0, #0
10008396:	1c19      	adds	r1, r3, #0
10008398:	4b73      	ldr	r3, [pc, #460]	; (10008568 <SetupSensor+0x3a4>)
1000839a:	224a      	movs	r2, #74	; 0x4a
1000839c:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1000839e:	46c0      	nop			; (mov r8, r8)
100083a0:	4b72      	ldr	r3, [pc, #456]	; (1000856c <SetupSensor+0x3a8>)
100083a2:	1c18      	adds	r0, r3, #0
100083a4:	f7ff fb56 	bl	10007a54 <I2C_MASTER_IsTxBusy>
100083a8:	1e03      	subs	r3, r0, #0
100083aa:	d1f9      	bne.n	100083a0 <SetupSensor+0x1dc>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, &ReadAxis1.rst, 1, true, true);
100083ac:	4a6f      	ldr	r2, [pc, #444]	; (1000856c <SetupSensor+0x3a8>)
100083ae:	4c72      	ldr	r4, [pc, #456]	; (10008578 <SetupSensor+0x3b4>)
100083b0:	2301      	movs	r3, #1
100083b2:	9300      	str	r3, [sp, #0]
100083b4:	2301      	movs	r3, #1
100083b6:	9301      	str	r3, [sp, #4]
100083b8:	2301      	movs	r3, #1
100083ba:	9302      	str	r3, [sp, #8]
100083bc:	1c10      	adds	r0, r2, #0
100083be:	2101      	movs	r1, #1
100083c0:	2231      	movs	r2, #49	; 0x31
100083c2:	1c23      	adds	r3, r4, #0
100083c4:	f7fb fe16 	bl	10003ff4 <I2C_MASTER_Receive>
100083c8:	1c03      	adds	r3, r0, #0
100083ca:	1c19      	adds	r1, r3, #0
100083cc:	4b66      	ldr	r3, [pc, #408]	; (10008568 <SetupSensor+0x3a4>)
100083ce:	224a      	movs	r2, #74	; 0x4a
100083d0:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	4b65      	ldr	r3, [pc, #404]	; (1000856c <SetupSensor+0x3a8>)
100083d6:	1c18      	adds	r0, r3, #0
100083d8:	f7ff fb4a 	bl	10007a70 <I2C_MASTER_IsRxBusy>
100083dc:	1e03      	subs	r3, r0, #0
100083de:	d1f9      	bne.n	100083d4 <SetupSensor+0x210>

	ReadAxis1.register_map[0] = LIS2DW12_CTRL2;
100083e0:	4b61      	ldr	r3, [pc, #388]	; (10008568 <SetupSensor+0x3a4>)
100083e2:	2248      	movs	r2, #72	; 0x48
100083e4:	2121      	movs	r1, #33	; 0x21
100083e6:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.rst | 0b00001000;
100083e8:	4b5f      	ldr	r3, [pc, #380]	; (10008568 <SetupSensor+0x3a4>)
100083ea:	224c      	movs	r2, #76	; 0x4c
100083ec:	5c9b      	ldrb	r3, [r3, r2]
100083ee:	2208      	movs	r2, #8
100083f0:	4313      	orrs	r3, r2
100083f2:	b2d9      	uxtb	r1, r3
100083f4:	4b5c      	ldr	r3, [pc, #368]	; (10008568 <SetupSensor+0x3a4>)
100083f6:	2249      	movs	r2, #73	; 0x49
100083f8:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, ReadAxis1.register_map, 2, true);
100083fa:	4a5c      	ldr	r2, [pc, #368]	; (1000856c <SetupSensor+0x3a8>)
100083fc:	4c5c      	ldr	r4, [pc, #368]	; (10008570 <SetupSensor+0x3ac>)
100083fe:	2302      	movs	r3, #2
10008400:	9300      	str	r3, [sp, #0]
10008402:	2301      	movs	r3, #1
10008404:	9301      	str	r3, [sp, #4]
10008406:	1c10      	adds	r0, r2, #0
10008408:	2101      	movs	r1, #1
1000840a:	2230      	movs	r2, #48	; 0x30
1000840c:	1c23      	adds	r3, r4, #0
1000840e:	f7fb fc43 	bl	10003c98 <I2C_MASTER_Transmit>
10008412:	1c03      	adds	r3, r0, #0
10008414:	1c19      	adds	r1, r3, #0
10008416:	4b54      	ldr	r3, [pc, #336]	; (10008568 <SetupSensor+0x3a4>)
10008418:	224a      	movs	r2, #74	; 0x4a
1000841a:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1000841c:	46c0      	nop			; (mov r8, r8)
1000841e:	4b53      	ldr	r3, [pc, #332]	; (1000856c <SetupSensor+0x3a8>)
10008420:	1c18      	adds	r0, r3, #0
10008422:	f7ff fb17 	bl	10007a54 <I2C_MASTER_IsTxBusy>
10008426:	1e03      	subs	r3, r0, #0
10008428:	d1f9      	bne.n	1000841e <SetupSensor+0x25a>

	//Accelerometer cutoff filter frequency
	ReadAxis1.register_map[0] = LIS2DW12_CTRL6;
1000842a:	4b4f      	ldr	r3, [pc, #316]	; (10008568 <SetupSensor+0x3a4>)
1000842c:	2248      	movs	r2, #72	; 0x48
1000842e:	2125      	movs	r1, #37	; 0x25
10008430:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
10008432:	4a4e      	ldr	r2, [pc, #312]	; (1000856c <SetupSensor+0x3a8>)
10008434:	4c4e      	ldr	r4, [pc, #312]	; (10008570 <SetupSensor+0x3ac>)
10008436:	2301      	movs	r3, #1
10008438:	9300      	str	r3, [sp, #0]
1000843a:	2300      	movs	r3, #0
1000843c:	9301      	str	r3, [sp, #4]
1000843e:	1c10      	adds	r0, r2, #0
10008440:	2101      	movs	r1, #1
10008442:	2230      	movs	r2, #48	; 0x30
10008444:	1c23      	adds	r3, r4, #0
10008446:	f7fb fc27 	bl	10003c98 <I2C_MASTER_Transmit>
1000844a:	1c03      	adds	r3, r0, #0
1000844c:	1c19      	adds	r1, r3, #0
1000844e:	4b46      	ldr	r3, [pc, #280]	; (10008568 <SetupSensor+0x3a4>)
10008450:	224a      	movs	r2, #74	; 0x4a
10008452:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
10008454:	46c0      	nop			; (mov r8, r8)
10008456:	4b45      	ldr	r3, [pc, #276]	; (1000856c <SetupSensor+0x3a8>)
10008458:	1c18      	adds	r0, r3, #0
1000845a:	f7ff fafb 	bl	10007a54 <I2C_MASTER_IsTxBusy>
1000845e:	1e03      	subs	r3, r0, #0
10008460:	d1f9      	bne.n	10008456 <SetupSensor+0x292>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, &ReadAxis1.rst, 1, true, true);
10008462:	4a42      	ldr	r2, [pc, #264]	; (1000856c <SetupSensor+0x3a8>)
10008464:	4c44      	ldr	r4, [pc, #272]	; (10008578 <SetupSensor+0x3b4>)
10008466:	2301      	movs	r3, #1
10008468:	9300      	str	r3, [sp, #0]
1000846a:	2301      	movs	r3, #1
1000846c:	9301      	str	r3, [sp, #4]
1000846e:	2301      	movs	r3, #1
10008470:	9302      	str	r3, [sp, #8]
10008472:	1c10      	adds	r0, r2, #0
10008474:	2101      	movs	r1, #1
10008476:	2231      	movs	r2, #49	; 0x31
10008478:	1c23      	adds	r3, r4, #0
1000847a:	f7fb fdbb 	bl	10003ff4 <I2C_MASTER_Receive>
1000847e:	1c03      	adds	r3, r0, #0
10008480:	1c19      	adds	r1, r3, #0
10008482:	4b39      	ldr	r3, [pc, #228]	; (10008568 <SetupSensor+0x3a4>)
10008484:	224a      	movs	r2, #74	; 0x4a
10008486:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
10008488:	46c0      	nop			; (mov r8, r8)
1000848a:	4b38      	ldr	r3, [pc, #224]	; (1000856c <SetupSensor+0x3a8>)
1000848c:	1c18      	adds	r0, r3, #0
1000848e:	f7ff faef 	bl	10007a70 <I2C_MASTER_IsRxBusy>
10008492:	1e03      	subs	r3, r0, #0
10008494:	d1f9      	bne.n	1000848a <SetupSensor+0x2c6>

	ReadAxis1.register_map[0] = LIS2DW12_CTRL6;
10008496:	4b34      	ldr	r3, [pc, #208]	; (10008568 <SetupSensor+0x3a4>)
10008498:	2248      	movs	r2, #72	; 0x48
1000849a:	2125      	movs	r1, #37	; 0x25
1000849c:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.rst & 0b00111111;
1000849e:	4b32      	ldr	r3, [pc, #200]	; (10008568 <SetupSensor+0x3a4>)
100084a0:	224c      	movs	r2, #76	; 0x4c
100084a2:	5c9b      	ldrb	r3, [r3, r2]
100084a4:	223f      	movs	r2, #63	; 0x3f
100084a6:	4013      	ands	r3, r2
100084a8:	b2d9      	uxtb	r1, r3
100084aa:	4b2f      	ldr	r3, [pc, #188]	; (10008568 <SetupSensor+0x3a4>)
100084ac:	2249      	movs	r2, #73	; 0x49
100084ae:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.register_map[1] | 0b01000000;
100084b0:	4b2d      	ldr	r3, [pc, #180]	; (10008568 <SetupSensor+0x3a4>)
100084b2:	2249      	movs	r2, #73	; 0x49
100084b4:	5c9b      	ldrb	r3, [r3, r2]
100084b6:	2240      	movs	r2, #64	; 0x40
100084b8:	4313      	orrs	r3, r2
100084ba:	b2d9      	uxtb	r1, r3
100084bc:	4b2a      	ldr	r3, [pc, #168]	; (10008568 <SetupSensor+0x3a4>)
100084be:	2249      	movs	r2, #73	; 0x49
100084c0:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, ReadAxis1.register_map, 2, true);
100084c2:	4a2a      	ldr	r2, [pc, #168]	; (1000856c <SetupSensor+0x3a8>)
100084c4:	4c2a      	ldr	r4, [pc, #168]	; (10008570 <SetupSensor+0x3ac>)
100084c6:	2302      	movs	r3, #2
100084c8:	9300      	str	r3, [sp, #0]
100084ca:	2301      	movs	r3, #1
100084cc:	9301      	str	r3, [sp, #4]
100084ce:	1c10      	adds	r0, r2, #0
100084d0:	2101      	movs	r1, #1
100084d2:	2230      	movs	r2, #48	; 0x30
100084d4:	1c23      	adds	r3, r4, #0
100084d6:	f7fb fbdf 	bl	10003c98 <I2C_MASTER_Transmit>
100084da:	1c03      	adds	r3, r0, #0
100084dc:	1c19      	adds	r1, r3, #0
100084de:	4b22      	ldr	r3, [pc, #136]	; (10008568 <SetupSensor+0x3a4>)
100084e0:	224a      	movs	r2, #74	; 0x4a
100084e2:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
100084e4:	46c0      	nop			; (mov r8, r8)
100084e6:	4b21      	ldr	r3, [pc, #132]	; (1000856c <SetupSensor+0x3a8>)
100084e8:	1c18      	adds	r0, r3, #0
100084ea:	f7ff fab3 	bl	10007a54 <I2C_MASTER_IsTxBusy>
100084ee:	1e03      	subs	r3, r0, #0
100084f0:	d1f9      	bne.n	100084e6 <SetupSensor+0x322>

	//Select accelerometer operating modes
	ReadAxis1.register_map[0] = LIS2DW12_CTRL1;
100084f2:	4b1d      	ldr	r3, [pc, #116]	; (10008568 <SetupSensor+0x3a4>)
100084f4:	2248      	movs	r2, #72	; 0x48
100084f6:	2120      	movs	r1, #32
100084f8:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
100084fa:	4a1c      	ldr	r2, [pc, #112]	; (1000856c <SetupSensor+0x3a8>)
100084fc:	4c1c      	ldr	r4, [pc, #112]	; (10008570 <SetupSensor+0x3ac>)
100084fe:	2301      	movs	r3, #1
10008500:	9300      	str	r3, [sp, #0]
10008502:	2300      	movs	r3, #0
10008504:	9301      	str	r3, [sp, #4]
10008506:	1c10      	adds	r0, r2, #0
10008508:	2101      	movs	r1, #1
1000850a:	2230      	movs	r2, #48	; 0x30
1000850c:	1c23      	adds	r3, r4, #0
1000850e:	f7fb fbc3 	bl	10003c98 <I2C_MASTER_Transmit>
10008512:	1c03      	adds	r3, r0, #0
10008514:	1c19      	adds	r1, r3, #0
10008516:	4b14      	ldr	r3, [pc, #80]	; (10008568 <SetupSensor+0x3a4>)
10008518:	224a      	movs	r2, #74	; 0x4a
1000851a:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1000851c:	46c0      	nop			; (mov r8, r8)
1000851e:	4b13      	ldr	r3, [pc, #76]	; (1000856c <SetupSensor+0x3a8>)
10008520:	1c18      	adds	r0, r3, #0
10008522:	f7ff fa97 	bl	10007a54 <I2C_MASTER_IsTxBusy>
10008526:	1e03      	subs	r3, r0, #0
10008528:	d1f9      	bne.n	1000851e <SetupSensor+0x35a>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, &ReadAxis1.rst, 1, true, true);
1000852a:	4a10      	ldr	r2, [pc, #64]	; (1000856c <SetupSensor+0x3a8>)
1000852c:	4c12      	ldr	r4, [pc, #72]	; (10008578 <SetupSensor+0x3b4>)
1000852e:	2301      	movs	r3, #1
10008530:	9300      	str	r3, [sp, #0]
10008532:	2301      	movs	r3, #1
10008534:	9301      	str	r3, [sp, #4]
10008536:	2301      	movs	r3, #1
10008538:	9302      	str	r3, [sp, #8]
1000853a:	1c10      	adds	r0, r2, #0
1000853c:	2101      	movs	r1, #1
1000853e:	2231      	movs	r2, #49	; 0x31
10008540:	1c23      	adds	r3, r4, #0
10008542:	f7fb fd57 	bl	10003ff4 <I2C_MASTER_Receive>
10008546:	1c03      	adds	r3, r0, #0
10008548:	1c19      	adds	r1, r3, #0
1000854a:	4b07      	ldr	r3, [pc, #28]	; (10008568 <SetupSensor+0x3a4>)
1000854c:	224a      	movs	r2, #74	; 0x4a
1000854e:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
10008550:	46c0      	nop			; (mov r8, r8)
10008552:	4b06      	ldr	r3, [pc, #24]	; (1000856c <SetupSensor+0x3a8>)
10008554:	1c18      	adds	r0, r3, #0
10008556:	f7ff fa8b 	bl	10007a70 <I2C_MASTER_IsRxBusy>
1000855a:	1e03      	subs	r3, r0, #0
1000855c:	d1f9      	bne.n	10008552 <SetupSensor+0x38e>

	ReadAxis1.register_map[0] = LIS2DW12_CTRL1;
1000855e:	4b02      	ldr	r3, [pc, #8]	; (10008568 <SetupSensor+0x3a4>)
10008560:	2248      	movs	r2, #72	; 0x48
10008562:	2120      	movs	r1, #32
10008564:	e00a      	b.n	1000857c <SetupSensor+0x3b8>
10008566:	46c0      	nop			; (mov r8, r8)
10008568:	20000c18 	.word	0x20000c18
1000856c:	200005ec 	.word	0x200005ec
10008570:	20000c60 	.word	0x20000c60
10008574:	20000c63 	.word	0x20000c63
10008578:	20000c64 	.word	0x20000c64
1000857c:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.rst & 0b11110011;
1000857e:	4b89      	ldr	r3, [pc, #548]	; (100087a4 <SetupSensor+0x5e0>)
10008580:	224c      	movs	r2, #76	; 0x4c
10008582:	5c9b      	ldrb	r3, [r3, r2]
10008584:	220c      	movs	r2, #12
10008586:	4393      	bics	r3, r2
10008588:	b2d9      	uxtb	r1, r3
1000858a:	4b86      	ldr	r3, [pc, #536]	; (100087a4 <SetupSensor+0x5e0>)
1000858c:	2249      	movs	r2, #73	; 0x49
1000858e:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.register_map[1] | 0b00000100;
10008590:	4b84      	ldr	r3, [pc, #528]	; (100087a4 <SetupSensor+0x5e0>)
10008592:	2249      	movs	r2, #73	; 0x49
10008594:	5c9b      	ldrb	r3, [r3, r2]
10008596:	2204      	movs	r2, #4
10008598:	4313      	orrs	r3, r2
1000859a:	b2d9      	uxtb	r1, r3
1000859c:	4b81      	ldr	r3, [pc, #516]	; (100087a4 <SetupSensor+0x5e0>)
1000859e:	2249      	movs	r2, #73	; 0x49
100085a0:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, ReadAxis1.register_map, 2, true);
100085a2:	4a81      	ldr	r2, [pc, #516]	; (100087a8 <SetupSensor+0x5e4>)
100085a4:	4c81      	ldr	r4, [pc, #516]	; (100087ac <SetupSensor+0x5e8>)
100085a6:	2302      	movs	r3, #2
100085a8:	9300      	str	r3, [sp, #0]
100085aa:	2301      	movs	r3, #1
100085ac:	9301      	str	r3, [sp, #4]
100085ae:	1c10      	adds	r0, r2, #0
100085b0:	2101      	movs	r1, #1
100085b2:	2230      	movs	r2, #48	; 0x30
100085b4:	1c23      	adds	r3, r4, #0
100085b6:	f7fb fb6f 	bl	10003c98 <I2C_MASTER_Transmit>
100085ba:	1c03      	adds	r3, r0, #0
100085bc:	1c19      	adds	r1, r3, #0
100085be:	4b79      	ldr	r3, [pc, #484]	; (100087a4 <SetupSensor+0x5e0>)
100085c0:	224a      	movs	r2, #74	; 0x4a
100085c2:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
100085c4:	46c0      	nop			; (mov r8, r8)
100085c6:	4b78      	ldr	r3, [pc, #480]	; (100087a8 <SetupSensor+0x5e4>)
100085c8:	1c18      	adds	r0, r3, #0
100085ca:	f7ff fa43 	bl	10007a54 <I2C_MASTER_IsTxBusy>
100085ce:	1e03      	subs	r3, r0, #0
100085d0:	d1f9      	bne.n	100085c6 <SetupSensor+0x402>

	//Accelerometer data rate selection
	ReadAxis1.register_map[0] = LIS2DW12_CTRL1;
100085d2:	4b74      	ldr	r3, [pc, #464]	; (100087a4 <SetupSensor+0x5e0>)
100085d4:	2248      	movs	r2, #72	; 0x48
100085d6:	2120      	movs	r1, #32
100085d8:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
100085da:	4a73      	ldr	r2, [pc, #460]	; (100087a8 <SetupSensor+0x5e4>)
100085dc:	4c73      	ldr	r4, [pc, #460]	; (100087ac <SetupSensor+0x5e8>)
100085de:	2301      	movs	r3, #1
100085e0:	9300      	str	r3, [sp, #0]
100085e2:	2300      	movs	r3, #0
100085e4:	9301      	str	r3, [sp, #4]
100085e6:	1c10      	adds	r0, r2, #0
100085e8:	2101      	movs	r1, #1
100085ea:	2230      	movs	r2, #48	; 0x30
100085ec:	1c23      	adds	r3, r4, #0
100085ee:	f7fb fb53 	bl	10003c98 <I2C_MASTER_Transmit>
100085f2:	1c03      	adds	r3, r0, #0
100085f4:	1c19      	adds	r1, r3, #0
100085f6:	4b6b      	ldr	r3, [pc, #428]	; (100087a4 <SetupSensor+0x5e0>)
100085f8:	224a      	movs	r2, #74	; 0x4a
100085fa:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
100085fc:	46c0      	nop			; (mov r8, r8)
100085fe:	4b6a      	ldr	r3, [pc, #424]	; (100087a8 <SetupSensor+0x5e4>)
10008600:	1c18      	adds	r0, r3, #0
10008602:	f7ff fa27 	bl	10007a54 <I2C_MASTER_IsTxBusy>
10008606:	1e03      	subs	r3, r0, #0
10008608:	d1f9      	bne.n	100085fe <SetupSensor+0x43a>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, &ReadAxis1.rst, 1, true, true);
1000860a:	4a67      	ldr	r2, [pc, #412]	; (100087a8 <SetupSensor+0x5e4>)
1000860c:	4c68      	ldr	r4, [pc, #416]	; (100087b0 <SetupSensor+0x5ec>)
1000860e:	2301      	movs	r3, #1
10008610:	9300      	str	r3, [sp, #0]
10008612:	2301      	movs	r3, #1
10008614:	9301      	str	r3, [sp, #4]
10008616:	2301      	movs	r3, #1
10008618:	9302      	str	r3, [sp, #8]
1000861a:	1c10      	adds	r0, r2, #0
1000861c:	2101      	movs	r1, #1
1000861e:	2231      	movs	r2, #49	; 0x31
10008620:	1c23      	adds	r3, r4, #0
10008622:	f7fb fce7 	bl	10003ff4 <I2C_MASTER_Receive>
10008626:	1c03      	adds	r3, r0, #0
10008628:	1c19      	adds	r1, r3, #0
1000862a:	4b5e      	ldr	r3, [pc, #376]	; (100087a4 <SetupSensor+0x5e0>)
1000862c:	224a      	movs	r2, #74	; 0x4a
1000862e:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
10008630:	46c0      	nop			; (mov r8, r8)
10008632:	4b5d      	ldr	r3, [pc, #372]	; (100087a8 <SetupSensor+0x5e4>)
10008634:	1c18      	adds	r0, r3, #0
10008636:	f7ff fa1b 	bl	10007a70 <I2C_MASTER_IsRxBusy>
1000863a:	1e03      	subs	r3, r0, #0
1000863c:	d1f9      	bne.n	10008632 <SetupSensor+0x46e>

	ReadAxis1.register_map[0] = LIS2DW12_CTRL1;
1000863e:	4b59      	ldr	r3, [pc, #356]	; (100087a4 <SetupSensor+0x5e0>)
10008640:	2248      	movs	r2, #72	; 0x48
10008642:	2120      	movs	r1, #32
10008644:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.rst & 0b00001100;
10008646:	4b57      	ldr	r3, [pc, #348]	; (100087a4 <SetupSensor+0x5e0>)
10008648:	224c      	movs	r2, #76	; 0x4c
1000864a:	5c9b      	ldrb	r3, [r3, r2]
1000864c:	220c      	movs	r2, #12
1000864e:	4013      	ands	r3, r2
10008650:	b2d9      	uxtb	r1, r3
10008652:	4b54      	ldr	r3, [pc, #336]	; (100087a4 <SetupSensor+0x5e0>)
10008654:	2249      	movs	r2, #73	; 0x49
10008656:	5499      	strb	r1, [r3, r2]
	ReadAxis1.register_map[1] = ReadAxis1.register_map[1] | 0b00110001;
10008658:	4b52      	ldr	r3, [pc, #328]	; (100087a4 <SetupSensor+0x5e0>)
1000865a:	2249      	movs	r2, #73	; 0x49
1000865c:	5c9b      	ldrb	r3, [r3, r2]
1000865e:	2231      	movs	r2, #49	; 0x31
10008660:	4313      	orrs	r3, r2
10008662:	b2d9      	uxtb	r1, r3
10008664:	4b4f      	ldr	r3, [pc, #316]	; (100087a4 <SetupSensor+0x5e0>)
10008666:	2249      	movs	r2, #73	; 0x49
10008668:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, ReadAxis1.register_map, 2, true);
1000866a:	4a4f      	ldr	r2, [pc, #316]	; (100087a8 <SetupSensor+0x5e4>)
1000866c:	4c4f      	ldr	r4, [pc, #316]	; (100087ac <SetupSensor+0x5e8>)
1000866e:	2302      	movs	r3, #2
10008670:	9300      	str	r3, [sp, #0]
10008672:	2301      	movs	r3, #1
10008674:	9301      	str	r3, [sp, #4]
10008676:	1c10      	adds	r0, r2, #0
10008678:	2101      	movs	r1, #1
1000867a:	2230      	movs	r2, #48	; 0x30
1000867c:	1c23      	adds	r3, r4, #0
1000867e:	f7fb fb0b 	bl	10003c98 <I2C_MASTER_Transmit>
10008682:	1c03      	adds	r3, r0, #0
10008684:	1c19      	adds	r1, r3, #0
10008686:	4b47      	ldr	r3, [pc, #284]	; (100087a4 <SetupSensor+0x5e0>)
10008688:	224a      	movs	r2, #74	; 0x4a
1000868a:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
1000868c:	46c0      	nop			; (mov r8, r8)
1000868e:	4b46      	ldr	r3, [pc, #280]	; (100087a8 <SetupSensor+0x5e4>)
10008690:	1c18      	adds	r0, r3, #0
10008692:	f7ff f9df 	bl	10007a54 <I2C_MASTER_IsTxBusy>
10008696:	1e03      	subs	r3, r0, #0
10008698:	d1f9      	bne.n	1000868e <SetupSensor+0x4ca>

	//Leitura dos dados crus do acelerômetro 1
	memset(ReadAxis1.data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
1000869a:	4b46      	ldr	r3, [pc, #280]	; (100087b4 <SetupSensor+0x5f0>)
1000869c:	1c18      	adds	r0, r3, #0
1000869e:	2100      	movs	r1, #0
100086a0:	2206      	movs	r2, #6
100086a2:	f003 fdaf 	bl	1000c204 <memset>
	ReadAxis1.register_map[0] = LIS2DW12_OUT_X_L;
100086a6:	4b3f      	ldr	r3, [pc, #252]	; (100087a4 <SetupSensor+0x5e0>)
100086a8:	2248      	movs	r2, #72	; 0x48
100086aa:	2128      	movs	r1, #40	; 0x28
100086ac:	5499      	strb	r1, [r3, r2]
	ReadAxis1.status_I2C = I2C_MASTER_Transmit(&I2C_MASTER_0, true, ADD_ACCELW, &ReadAxis1.register_map[0], 1, false);
100086ae:	4a3e      	ldr	r2, [pc, #248]	; (100087a8 <SetupSensor+0x5e4>)
100086b0:	4c3e      	ldr	r4, [pc, #248]	; (100087ac <SetupSensor+0x5e8>)
100086b2:	2301      	movs	r3, #1
100086b4:	9300      	str	r3, [sp, #0]
100086b6:	2300      	movs	r3, #0
100086b8:	9301      	str	r3, [sp, #4]
100086ba:	1c10      	adds	r0, r2, #0
100086bc:	2101      	movs	r1, #1
100086be:	2230      	movs	r2, #48	; 0x30
100086c0:	1c23      	adds	r3, r4, #0
100086c2:	f7fb fae9 	bl	10003c98 <I2C_MASTER_Transmit>
100086c6:	1c03      	adds	r3, r0, #0
100086c8:	1c19      	adds	r1, r3, #0
100086ca:	4b36      	ldr	r3, [pc, #216]	; (100087a4 <SetupSensor+0x5e0>)
100086cc:	224a      	movs	r2, #74	; 0x4a
100086ce:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));
100086d0:	46c0      	nop			; (mov r8, r8)
100086d2:	4b35      	ldr	r3, [pc, #212]	; (100087a8 <SetupSensor+0x5e4>)
100086d4:	1c18      	adds	r0, r3, #0
100086d6:	f7ff f9bd 	bl	10007a54 <I2C_MASTER_IsTxBusy>
100086da:	1e03      	subs	r3, r0, #0
100086dc:	d1f9      	bne.n	100086d2 <SetupSensor+0x50e>
	ReadAxis1.status_I2C = I2C_MASTER_Receive(&I2C_MASTER_0, true, ADD_ACCELR, ReadAxis1.data_raw_buff, 6, true, true);
100086de:	4a32      	ldr	r2, [pc, #200]	; (100087a8 <SetupSensor+0x5e4>)
100086e0:	4c35      	ldr	r4, [pc, #212]	; (100087b8 <SetupSensor+0x5f4>)
100086e2:	2306      	movs	r3, #6
100086e4:	9300      	str	r3, [sp, #0]
100086e6:	2301      	movs	r3, #1
100086e8:	9301      	str	r3, [sp, #4]
100086ea:	2301      	movs	r3, #1
100086ec:	9302      	str	r3, [sp, #8]
100086ee:	1c10      	adds	r0, r2, #0
100086f0:	2101      	movs	r1, #1
100086f2:	2231      	movs	r2, #49	; 0x31
100086f4:	1c23      	adds	r3, r4, #0
100086f6:	f7fb fc7d 	bl	10003ff4 <I2C_MASTER_Receive>
100086fa:	1c03      	adds	r3, r0, #0
100086fc:	1c19      	adds	r1, r3, #0
100086fe:	4b29      	ldr	r3, [pc, #164]	; (100087a4 <SetupSensor+0x5e0>)
10008700:	224a      	movs	r2, #74	; 0x4a
10008702:	5499      	strb	r1, [r3, r2]
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_0));
10008704:	46c0      	nop			; (mov r8, r8)
10008706:	4b28      	ldr	r3, [pc, #160]	; (100087a8 <SetupSensor+0x5e4>)
10008708:	1c18      	adds	r0, r3, #0
1000870a:	f7ff f9b1 	bl	10007a70 <I2C_MASTER_IsRxBusy>
1000870e:	1e03      	subs	r3, r0, #0
10008710:	d1f9      	bne.n	10008706 <SetupSensor+0x542>

	ReadAxis1.data_raw_acceleration[0] = (int16_t)ReadAxis1.data_raw_buff[1];
10008712:	4b24      	ldr	r3, [pc, #144]	; (100087a4 <SetupSensor+0x5e0>)
10008714:	2255      	movs	r2, #85	; 0x55
10008716:	5c9b      	ldrb	r3, [r3, r2]
10008718:	b299      	uxth	r1, r3
1000871a:	4b22      	ldr	r3, [pc, #136]	; (100087a4 <SetupSensor+0x5e0>)
1000871c:	224e      	movs	r2, #78	; 0x4e
1000871e:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[0] = (ReadAxis1.data_raw_acceleration[0] * 256) +  (int16_t)ReadAxis1.data_raw_buff[0];
10008720:	4b20      	ldr	r3, [pc, #128]	; (100087a4 <SetupSensor+0x5e0>)
10008722:	224e      	movs	r2, #78	; 0x4e
10008724:	5a9b      	ldrh	r3, [r3, r2]
10008726:	b29b      	uxth	r3, r3
10008728:	021b      	lsls	r3, r3, #8
1000872a:	b29a      	uxth	r2, r3
1000872c:	4b1d      	ldr	r3, [pc, #116]	; (100087a4 <SetupSensor+0x5e0>)
1000872e:	2154      	movs	r1, #84	; 0x54
10008730:	5c5b      	ldrb	r3, [r3, r1]
10008732:	b29b      	uxth	r3, r3
10008734:	18d3      	adds	r3, r2, r3
10008736:	b29b      	uxth	r3, r3
10008738:	b299      	uxth	r1, r3
1000873a:	4b1a      	ldr	r3, [pc, #104]	; (100087a4 <SetupSensor+0x5e0>)
1000873c:	224e      	movs	r2, #78	; 0x4e
1000873e:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[1] = (int16_t)ReadAxis1.data_raw_buff[3];
10008740:	4b18      	ldr	r3, [pc, #96]	; (100087a4 <SetupSensor+0x5e0>)
10008742:	2257      	movs	r2, #87	; 0x57
10008744:	5c9b      	ldrb	r3, [r3, r2]
10008746:	b299      	uxth	r1, r3
10008748:	4b16      	ldr	r3, [pc, #88]	; (100087a4 <SetupSensor+0x5e0>)
1000874a:	2250      	movs	r2, #80	; 0x50
1000874c:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[1] = (ReadAxis1.data_raw_acceleration[1] * 256) +  (int16_t)ReadAxis1.data_raw_buff[2];
1000874e:	4b15      	ldr	r3, [pc, #84]	; (100087a4 <SetupSensor+0x5e0>)
10008750:	2250      	movs	r2, #80	; 0x50
10008752:	5a9b      	ldrh	r3, [r3, r2]
10008754:	b29b      	uxth	r3, r3
10008756:	021b      	lsls	r3, r3, #8
10008758:	b29a      	uxth	r2, r3
1000875a:	4b12      	ldr	r3, [pc, #72]	; (100087a4 <SetupSensor+0x5e0>)
1000875c:	2156      	movs	r1, #86	; 0x56
1000875e:	5c5b      	ldrb	r3, [r3, r1]
10008760:	b29b      	uxth	r3, r3
10008762:	18d3      	adds	r3, r2, r3
10008764:	b29b      	uxth	r3, r3
10008766:	b299      	uxth	r1, r3
10008768:	4b0e      	ldr	r3, [pc, #56]	; (100087a4 <SetupSensor+0x5e0>)
1000876a:	2250      	movs	r2, #80	; 0x50
1000876c:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[2] = (int16_t)ReadAxis1.data_raw_buff[5];
1000876e:	4b0d      	ldr	r3, [pc, #52]	; (100087a4 <SetupSensor+0x5e0>)
10008770:	2259      	movs	r2, #89	; 0x59
10008772:	5c9b      	ldrb	r3, [r3, r2]
10008774:	b299      	uxth	r1, r3
10008776:	4b0b      	ldr	r3, [pc, #44]	; (100087a4 <SetupSensor+0x5e0>)
10008778:	2252      	movs	r2, #82	; 0x52
1000877a:	5299      	strh	r1, [r3, r2]
	ReadAxis1.data_raw_acceleration[2] = (ReadAxis1.data_raw_acceleration[2] * 256) +  (int16_t)ReadAxis1.data_raw_buff[4];
1000877c:	4b09      	ldr	r3, [pc, #36]	; (100087a4 <SetupSensor+0x5e0>)
1000877e:	2252      	movs	r2, #82	; 0x52
10008780:	5a9b      	ldrh	r3, [r3, r2]
10008782:	b29b      	uxth	r3, r3
10008784:	021b      	lsls	r3, r3, #8
10008786:	b29a      	uxth	r2, r3
10008788:	4b06      	ldr	r3, [pc, #24]	; (100087a4 <SetupSensor+0x5e0>)
1000878a:	2158      	movs	r1, #88	; 0x58
1000878c:	5c5b      	ldrb	r3, [r3, r1]
1000878e:	b29b      	uxth	r3, r3
10008790:	18d3      	adds	r3, r2, r3
10008792:	b29b      	uxth	r3, r3
10008794:	b299      	uxth	r1, r3
10008796:	4b03      	ldr	r3, [pc, #12]	; (100087a4 <SetupSensor+0x5e0>)
10008798:	2252      	movs	r2, #82	; 0x52
1000879a:	5299      	strh	r1, [r3, r2]
}
1000879c:	46bd      	mov	sp, r7
1000879e:	b001      	add	sp, #4
100087a0:	bd90      	pop	{r4, r7, pc}
100087a2:	46c0      	nop			; (mov r8, r8)
100087a4:	20000c18 	.word	0x20000c18
100087a8:	200005ec 	.word	0x200005ec
100087ac:	20000c60 	.word	0x20000c60
100087b0:	20000c64 	.word	0x20000c64
100087b4:	20000c66 	.word	0x20000c66
100087b8:	20000c6c 	.word	0x20000c6c

100087bc <lis2dw12_from_fs2_to_mg>:

float lis2dw12_from_fs2_to_mg(int16_t lsb)
{
100087bc:	b580      	push	{r7, lr}
100087be:	b082      	sub	sp, #8
100087c0:	af00      	add	r7, sp, #0
100087c2:	1c02      	adds	r2, r0, #0
100087c4:	1dbb      	adds	r3, r7, #6
100087c6:	801a      	strh	r2, [r3, #0]
  return ((float)lsb) * 0.061f;
100087c8:	1dbb      	adds	r3, r7, #6
100087ca:	2200      	movs	r2, #0
100087cc:	5e9b      	ldrsh	r3, [r3, r2]
100087ce:	1c18      	adds	r0, r3, #0
100087d0:	f001 fe28 	bl	1000a424 <__aeabi_i2f>
100087d4:	1c03      	adds	r3, r0, #0
100087d6:	1c18      	adds	r0, r3, #0
100087d8:	4903      	ldr	r1, [pc, #12]	; (100087e8 <lis2dw12_from_fs2_to_mg+0x2c>)
100087da:	f001 fb53 	bl	10009e84 <__aeabi_fmul>
100087de:	1c03      	adds	r3, r0, #0
}
100087e0:	1c18      	adds	r0, r3, #0
100087e2:	46bd      	mov	sp, r7
100087e4:	b002      	add	sp, #8
100087e6:	bd80      	pop	{r7, pc}
100087e8:	3d79db23 	.word	0x3d79db23

100087ec <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
100087ec:	b580      	push	{r7, lr}
100087ee:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
100087f0:	4b03      	ldr	r3, [pc, #12]	; (10008800 <XMC_WDT_Start+0x14>)
100087f2:	4a03      	ldr	r2, [pc, #12]	; (10008800 <XMC_WDT_Start+0x14>)
100087f4:	6852      	ldr	r2, [r2, #4]
100087f6:	2101      	movs	r1, #1
100087f8:	430a      	orrs	r2, r1
100087fa:	605a      	str	r2, [r3, #4]
}
100087fc:	46bd      	mov	sp, r7
100087fe:	bd80      	pop	{r7, pc}
10008800:	40020000 	.word	0x40020000

10008804 <XMC_WDT_Stop>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Stop(void)
{
10008804:	b580      	push	{r7, lr}
10008806:	af00      	add	r7, sp, #0
  WDT->CTR &= (uint32_t)~WDT_CTR_ENB_Msk;
10008808:	4b03      	ldr	r3, [pc, #12]	; (10008818 <XMC_WDT_Stop+0x14>)
1000880a:	4a03      	ldr	r2, [pc, #12]	; (10008818 <XMC_WDT_Stop+0x14>)
1000880c:	6852      	ldr	r2, [r2, #4]
1000880e:	2101      	movs	r1, #1
10008810:	438a      	bics	r2, r1
10008812:	605a      	str	r2, [r3, #4]
}
10008814:	46bd      	mov	sp, r7
10008816:	bd80      	pop	{r7, pc}
10008818:	40020000 	.word	0x40020000

1000881c <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
1000881c:	b580      	push	{r7, lr}
1000881e:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
10008820:	4b02      	ldr	r3, [pc, #8]	; (1000882c <XMC_WDT_Service+0x10>)
10008822:	4a03      	ldr	r2, [pc, #12]	; (10008830 <XMC_WDT_Service+0x14>)
10008824:	609a      	str	r2, [r3, #8]
}
10008826:	46bd      	mov	sp, r7
10008828:	bd80      	pop	{r7, pc}
1000882a:	46c0      	nop			; (mov r8, r8)
1000882c:	40020000 	.word	0x40020000
10008830:	abadcafe 	.word	0xabadcafe

10008834 <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
10008834:	b580      	push	{r7, lr}
10008836:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
10008838:	4b02      	ldr	r3, [pc, #8]	; (10008844 <XMC_WDT_ClearAlarm+0x10>)
1000883a:	2201      	movs	r2, #1
1000883c:	61da      	str	r2, [r3, #28]
}
1000883e:	46bd      	mov	sp, r7
10008840:	bd80      	pop	{r7, pc}
10008842:	46c0      	nop			; (mov r8, r8)
10008844:	40020000 	.word	0x40020000

10008848 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
10008848:	b580      	push	{r7, lr}
1000884a:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
1000884c:	f7ff ffce 	bl	100087ec <XMC_WDT_Start>
}
10008850:	46bd      	mov	sp, r7
10008852:	bd80      	pop	{r7, pc}

10008854 <WATCHDOG_Stop>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Stop(void)
{
10008854:	b580      	push	{r7, lr}
10008856:	af00      	add	r7, sp, #0
  XMC_WDT_Stop();
10008858:	f7ff ffd4 	bl	10008804 <XMC_WDT_Stop>
}
1000885c:	46bd      	mov	sp, r7
1000885e:	bd80      	pop	{r7, pc}

10008860 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
10008860:	b580      	push	{r7, lr}
10008862:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
10008864:	f7ff ffda 	bl	1000881c <XMC_WDT_Service>
}
10008868:	46bd      	mov	sp, r7
1000886a:	bd80      	pop	{r7, pc}

1000886c <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
1000886c:	b580      	push	{r7, lr}
1000886e:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
10008870:	f7ff ffe0 	bl	10008834 <XMC_WDT_ClearAlarm>
}
10008874:	46bd      	mov	sp, r7
10008876:	bd80      	pop	{r7, pc}

10008878 <main>:
 * code.
 */


int main(void)
{
10008878:	b590      	push	{r4, r7, lr}
1000887a:	b083      	sub	sp, #12
1000887c:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;

	status = DAVE_Init();           /* Initialization of DAVE APPs  */
1000887e:	1dfc      	adds	r4, r7, #7
10008880:	f7fe f970 	bl	10006b64 <DAVE_Init>
10008884:	1c03      	adds	r3, r0, #0
10008886:	7023      	strb	r3, [r4, #0]

	if(status != DAVE_STATUS_SUCCESS)
10008888:	1dfb      	adds	r3, r7, #7
1000888a:	781b      	ldrb	r3, [r3, #0]
1000888c:	2b00      	cmp	r3, #0
1000888e:	d000      	beq.n	10008892 <main+0x1a>
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while(1U)
		{

		}
10008890:	e7fe      	b.n	10008890 <main+0x18>
	}

	WATCHDOG_Start(); 		// Start the watchdog timer
10008892:	f7ff ffd9 	bl	10008848 <WATCHDOG_Start>
	//  E_EEPROM_XMC1_Read(CONT_CYCLES, 0,&ACTION.Memory_03, 4);
	//  ACTION.Cont_Ciclos_Report = (ACTION.Memory_02 << 24) | ACTION.Memory_03;
	//


	E_EEPROM_XMC1_Read(CONT_CYCLES, 0, &ACTION.Cont_Ciclos_Memory_Report[0], 4);
10008896:	4b4d      	ldr	r3, [pc, #308]	; (100089cc <main+0x154>)
10008898:	2006      	movs	r0, #6
1000889a:	2100      	movs	r1, #0
1000889c:	1c1a      	adds	r2, r3, #0
1000889e:	2304      	movs	r3, #4
100088a0:	f7fc fcc4 	bl	1000522c <E_EEPROM_XMC1_Read>

	ACTION.Cont_Ciclos_Report = ACTION.Cont_Ciclos_Memory_Report [0];
100088a4:	4b4a      	ldr	r3, [pc, #296]	; (100089d0 <main+0x158>)
100088a6:	22ec      	movs	r2, #236	; 0xec
100088a8:	5c9b      	ldrb	r3, [r3, r2]
100088aa:	1c19      	adds	r1, r3, #0
100088ac:	4b48      	ldr	r3, [pc, #288]	; (100089d0 <main+0x158>)
100088ae:	22e0      	movs	r2, #224	; 0xe0
100088b0:	5099      	str	r1, [r3, r2]
	ACTION.Cont_Ciclos_Report = (ACTION.Cont_Ciclos_Report << 8) | ACTION.Cont_Ciclos_Memory_Report[1];
100088b2:	4b47      	ldr	r3, [pc, #284]	; (100089d0 <main+0x158>)
100088b4:	22e0      	movs	r2, #224	; 0xe0
100088b6:	589b      	ldr	r3, [r3, r2]
100088b8:	021b      	lsls	r3, r3, #8
100088ba:	4a45      	ldr	r2, [pc, #276]	; (100089d0 <main+0x158>)
100088bc:	21ed      	movs	r1, #237	; 0xed
100088be:	5c52      	ldrb	r2, [r2, r1]
100088c0:	431a      	orrs	r2, r3
100088c2:	4b43      	ldr	r3, [pc, #268]	; (100089d0 <main+0x158>)
100088c4:	21e0      	movs	r1, #224	; 0xe0
100088c6:	505a      	str	r2, [r3, r1]
	ACTION.Cont_Ciclos_Report = (ACTION.Cont_Ciclos_Report << 8) | ACTION.Cont_Ciclos_Memory_Report[2];
100088c8:	4b41      	ldr	r3, [pc, #260]	; (100089d0 <main+0x158>)
100088ca:	22e0      	movs	r2, #224	; 0xe0
100088cc:	589b      	ldr	r3, [r3, r2]
100088ce:	021b      	lsls	r3, r3, #8
100088d0:	4a3f      	ldr	r2, [pc, #252]	; (100089d0 <main+0x158>)
100088d2:	21ee      	movs	r1, #238	; 0xee
100088d4:	5c52      	ldrb	r2, [r2, r1]
100088d6:	431a      	orrs	r2, r3
100088d8:	4b3d      	ldr	r3, [pc, #244]	; (100089d0 <main+0x158>)
100088da:	21e0      	movs	r1, #224	; 0xe0
100088dc:	505a      	str	r2, [r3, r1]
	ACTION.Cont_Ciclos_Report = (ACTION.Cont_Ciclos_Report << 8) | ACTION.Cont_Ciclos_Memory_Report[3];
100088de:	4b3c      	ldr	r3, [pc, #240]	; (100089d0 <main+0x158>)
100088e0:	22e0      	movs	r2, #224	; 0xe0
100088e2:	589b      	ldr	r3, [r3, r2]
100088e4:	021b      	lsls	r3, r3, #8
100088e6:	4a3a      	ldr	r2, [pc, #232]	; (100089d0 <main+0x158>)
100088e8:	21ef      	movs	r1, #239	; 0xef
100088ea:	5c52      	ldrb	r2, [r2, r1]
100088ec:	431a      	orrs	r2, r3
100088ee:	4b38      	ldr	r3, [pc, #224]	; (100089d0 <main+0x158>)
100088f0:	21e0      	movs	r1, #224	; 0xe0
100088f2:	505a      	str	r2, [r3, r1]

	ACTION.Cycles_Display = ACTION.Cont_Ciclos_Report;
100088f4:	4b36      	ldr	r3, [pc, #216]	; (100089d0 <main+0x158>)
100088f6:	22e0      	movs	r2, #224	; 0xe0
100088f8:	589a      	ldr	r2, [r3, r2]
100088fa:	4b35      	ldr	r3, [pc, #212]	; (100089d0 <main+0x158>)
100088fc:	21e8      	movs	r1, #232	; 0xe8
100088fe:	505a      	str	r2, [r3, r1]
	//
	//
	//  ACTION.Cont_Ciclos_Report_teste = ACTION.Cont_Ciclos_Report;


	E_EEPROM_XMC1_Read(OFFSET1,		 	0,	 &ReadAxis1.OffsetMemory1,		 1);
10008900:	4b34      	ldr	r3, [pc, #208]	; (100089d4 <main+0x15c>)
10008902:	2001      	movs	r0, #1
10008904:	2100      	movs	r1, #0
10008906:	1c1a      	adds	r2, r3, #0
10008908:	2301      	movs	r3, #1
1000890a:	f7fc fc8f 	bl	1000522c <E_EEPROM_XMC1_Read>
	E_EEPROM_XMC1_Read(OFFSET2,		 	0,	 &ReadAxis1.OffsetMemory2,		 1);
1000890e:	4b32      	ldr	r3, [pc, #200]	; (100089d8 <main+0x160>)
10008910:	2002      	movs	r0, #2
10008912:	2100      	movs	r1, #0
10008914:	1c1a      	adds	r2, r3, #0
10008916:	2301      	movs	r3, #1
10008918:	f7fc fc88 	bl	1000522c <E_EEPROM_XMC1_Read>
	//E_EEPROM_XMC1_Read(CONF_ANG_HIGH,     0,	 &CONF.STATUS_CONF_ANG_HIGH,	 2);


	if(ReadAxis1.OffsetMemory1 == 0xFF){
1000891c:	4b2f      	ldr	r3, [pc, #188]	; (100089dc <main+0x164>)
1000891e:	22af      	movs	r2, #175	; 0xaf
10008920:	5c9b      	ldrb	r3, [r3, r2]
10008922:	2bff      	cmp	r3, #255	; 0xff
10008924:	d103      	bne.n	1000892e <main+0xb6>
		ReadAxis1.OffsetMemory1 = 0;
10008926:	4b2d      	ldr	r3, [pc, #180]	; (100089dc <main+0x164>)
10008928:	22af      	movs	r2, #175	; 0xaf
1000892a:	2100      	movs	r1, #0
1000892c:	5499      	strb	r1, [r3, r2]
	}

	if(ReadAxis1.OffsetMemory2 == 0xFF){
1000892e:	4b2b      	ldr	r3, [pc, #172]	; (100089dc <main+0x164>)
10008930:	22b0      	movs	r2, #176	; 0xb0
10008932:	5c9b      	ldrb	r3, [r3, r2]
10008934:	2bff      	cmp	r3, #255	; 0xff
10008936:	d103      	bne.n	10008940 <main+0xc8>
		ReadAxis1.OffsetMemory2 = 0;
10008938:	4b28      	ldr	r3, [pc, #160]	; (100089dc <main+0x164>)
1000893a:	22b0      	movs	r2, #176	; 0xb0
1000893c:	2100      	movs	r1, #0
1000893e:	5499      	strb	r1, [r3, r2]
	}

	ReadAxis1.OffsetMemoryRead1 = ReadAxis1.OffsetMemory1;
10008940:	4b26      	ldr	r3, [pc, #152]	; (100089dc <main+0x164>)
10008942:	22af      	movs	r2, #175	; 0xaf
10008944:	5c9b      	ldrb	r3, [r3, r2]
10008946:	b2d9      	uxtb	r1, r3
10008948:	4b24      	ldr	r3, [pc, #144]	; (100089dc <main+0x164>)
1000894a:	22ad      	movs	r2, #173	; 0xad
1000894c:	5499      	strb	r1, [r3, r2]
	ReadAxis1.OffsetAngle1 = (float)ReadAxis1.OffsetMemoryRead1/10;
1000894e:	4b23      	ldr	r3, [pc, #140]	; (100089dc <main+0x164>)
10008950:	22ad      	movs	r2, #173	; 0xad
10008952:	5c9b      	ldrb	r3, [r3, r2]
10008954:	b25b      	sxtb	r3, r3
10008956:	1c18      	adds	r0, r3, #0
10008958:	f001 fd64 	bl	1000a424 <__aeabi_i2f>
1000895c:	1c03      	adds	r3, r0, #0
1000895e:	1c18      	adds	r0, r3, #0
10008960:	491f      	ldr	r1, [pc, #124]	; (100089e0 <main+0x168>)
10008962:	f001 f89d 	bl	10009aa0 <__aeabi_fdiv>
10008966:	1c03      	adds	r3, r0, #0
10008968:	1c19      	adds	r1, r3, #0
1000896a:	4b1c      	ldr	r3, [pc, #112]	; (100089dc <main+0x164>)
1000896c:	22a4      	movs	r2, #164	; 0xa4
1000896e:	5099      	str	r1, [r3, r2]
	ReadAxis1.OffsetAngle1 = 0;
10008970:	4b1a      	ldr	r3, [pc, #104]	; (100089dc <main+0x164>)
10008972:	22a4      	movs	r2, #164	; 0xa4
10008974:	2100      	movs	r1, #0
10008976:	5099      	str	r1, [r3, r2]

	ReadAxis1.OffsetMemoryRead2 = ReadAxis1.OffsetMemory2;
10008978:	4b18      	ldr	r3, [pc, #96]	; (100089dc <main+0x164>)
1000897a:	22b0      	movs	r2, #176	; 0xb0
1000897c:	5c9b      	ldrb	r3, [r3, r2]
1000897e:	b2d9      	uxtb	r1, r3
10008980:	4b16      	ldr	r3, [pc, #88]	; (100089dc <main+0x164>)
10008982:	22ae      	movs	r2, #174	; 0xae
10008984:	5499      	strb	r1, [r3, r2]
	ReadAxis1.OffsetAngle2 = (float)ReadAxis1.OffsetMemoryRead2/10;
10008986:	4b15      	ldr	r3, [pc, #84]	; (100089dc <main+0x164>)
10008988:	22ae      	movs	r2, #174	; 0xae
1000898a:	5c9b      	ldrb	r3, [r3, r2]
1000898c:	b25b      	sxtb	r3, r3
1000898e:	1c18      	adds	r0, r3, #0
10008990:	f001 fd48 	bl	1000a424 <__aeabi_i2f>
10008994:	1c03      	adds	r3, r0, #0
10008996:	1c18      	adds	r0, r3, #0
10008998:	4911      	ldr	r1, [pc, #68]	; (100089e0 <main+0x168>)
1000899a:	f001 f881 	bl	10009aa0 <__aeabi_fdiv>
1000899e:	1c03      	adds	r3, r0, #0
100089a0:	1c19      	adds	r1, r3, #0
100089a2:	4b0e      	ldr	r3, [pc, #56]	; (100089dc <main+0x164>)
100089a4:	22a8      	movs	r2, #168	; 0xa8
100089a6:	5099      	str	r1, [r3, r2]
	ReadAxis1.OffsetAngle2 = 0;
100089a8:	4b0c      	ldr	r3, [pc, #48]	; (100089dc <main+0x164>)
100089aa:	22a8      	movs	r2, #168	; 0xa8
100089ac:	2100      	movs	r1, #0
100089ae:	5099      	str	r1, [r3, r2]

	ReadAxis1Init();
100089b0:	f7ff f86c 	bl	10007a8c <ReadAxis1Init>
	ActionInit();
100089b4:	f7fe fa24 	bl	10006e00 <ActionInit>
	ConfInit();
100089b8:	f7fe fcd8 	bl	1000736c <ConfInit>
	DebauceInit();
100089bc:	f7fe fff4 	bl	100079a8 <DebauceInit>

	/* Placeholder for user application code. The while loop below can be replaced with user application code. */
	while(1U)
	{
		scheduler();
100089c0:	f000 f81a 	bl	100089f8 <scheduler>
		WATCHDOG_Service(); //service the watchdog timer.
100089c4:	f7ff ff4c 	bl	10008860 <WATCHDOG_Service>
	}
100089c8:	e7fa      	b.n	100089c0 <main+0x148>
100089ca:	46c0      	nop			; (mov r8, r8)
100089cc:	20000a40 	.word	0x20000a40
100089d0:	20000954 	.word	0x20000954
100089d4:	20000cc7 	.word	0x20000cc7
100089d8:	20000cc8 	.word	0x20000cc8
100089dc:	20000c18 	.word	0x20000c18
100089e0:	41200000 	.word	0x41200000

100089e4 <Watchdog_Handler>:
}


void Watchdog_Handler(void){
100089e4:	b580      	push	{r7, lr}
100089e6:	af00      	add	r7, sp, #0
	WATCHDOG_ClearAlarm(); 	//clears the alarm flag
100089e8:	f7ff ff40 	bl	1000886c <WATCHDOG_ClearAlarm>
	WATCHDOG_Service(); 	//service the watchdog timer.
100089ec:	f7ff ff38 	bl	10008860 <WATCHDOG_Service>
	WATCHDOG_Stop(); 		//Stop the watchdog timer
100089f0:	f7ff ff30 	bl	10008854 <WATCHDOG_Stop>
}
100089f4:	46bd      	mov	sp, r7
100089f6:	bd80      	pop	{r7, pc}

100089f8 <scheduler>:

//********************************************************************************************************************************************
//***********************************************************== SCHEDULER ==******************************************************************
//********************************************************************************************************************************************
void scheduler(void)
{
100089f8:	b580      	push	{r7, lr}
100089fa:	b082      	sub	sp, #8
100089fc:	af00      	add	r7, sp, #0
    unsigned char i = 0;
100089fe:	1dfb      	adds	r3, r7, #7
10008a00:	2200      	movs	r2, #0
10008a02:	701a      	strb	r2, [r3, #0]

    for(i = 0; i < N_OF_TASKS; i++)     // Run all the tasks
10008a04:	1dfb      	adds	r3, r7, #7
10008a06:	2200      	movs	r2, #0
10008a08:	701a      	strb	r2, [r3, #0]
10008a0a:	e011      	b.n	10008a30 <scheduler+0x38>
    {
        if(!tasksTimer[i])             	// If GO STATE
10008a0c:	1dfb      	adds	r3, r7, #7
10008a0e:	781a      	ldrb	r2, [r3, #0]
10008a10:	4b0b      	ldr	r3, [pc, #44]	; (10008a40 <scheduler+0x48>)
10008a12:	0092      	lsls	r2, r2, #2
10008a14:	58d3      	ldr	r3, [r2, r3]
10008a16:	2b00      	cmp	r3, #0
10008a18:	d105      	bne.n	10008a26 <scheduler+0x2e>
        {
            func[i]();                  // Execute
10008a1a:	1dfb      	adds	r3, r7, #7
10008a1c:	781a      	ldrb	r2, [r3, #0]
10008a1e:	4b09      	ldr	r3, [pc, #36]	; (10008a44 <scheduler+0x4c>)
10008a20:	0092      	lsls	r2, r2, #2
10008a22:	58d3      	ldr	r3, [r2, r3]
10008a24:	4798      	blx	r3
//********************************************************************************************************************************************
void scheduler(void)
{
    unsigned char i = 0;

    for(i = 0; i < N_OF_TASKS; i++)     // Run all the tasks
10008a26:	1dfb      	adds	r3, r7, #7
10008a28:	781a      	ldrb	r2, [r3, #0]
10008a2a:	1dfb      	adds	r3, r7, #7
10008a2c:	3201      	adds	r2, #1
10008a2e:	701a      	strb	r2, [r3, #0]
10008a30:	1dfb      	adds	r3, r7, #7
10008a32:	781b      	ldrb	r3, [r3, #0]
10008a34:	2b04      	cmp	r3, #4
10008a36:	d9e9      	bls.n	10008a0c <scheduler+0x14>
        if(!tasksTimer[i])             	// If GO STATE
        {
            func[i]();                  // Execute
        }
    }
    return;
10008a38:	46c0      	nop			; (mov r8, r8)
}
10008a3a:	46bd      	mov	sp, r7
10008a3c:	b002      	add	sp, #8
10008a3e:	bd80      	pop	{r7, pc}
10008a40:	20000cd4 	.word	0x20000cd4
10008a44:	20000620 	.word	0x20000620

10008a48 <IRQ7_Handler>:

//********************************************************************************************************************************************
//***********************************************************== TIMER 1MS IRQ ==**************************************************************
//********************************************************************************************************************************************

void Timer1msIRQHandler(void){
10008a48:	b580      	push	{r7, lr}
10008a4a:	b082      	sub	sp, #8
10008a4c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < N_OF_TASKS; i++)     	// Timer for managing all the tasks
10008a4e:	1dfb      	adds	r3, r7, #7
10008a50:	2200      	movs	r2, #0
10008a52:	701a      	strb	r2, [r3, #0]
10008a54:	e014      	b.n	10008a80 <IRQ7_Handler+0x38>
    {
        if(tasksTimer[i] > 0)
10008a56:	1dfb      	adds	r3, r7, #7
10008a58:	781a      	ldrb	r2, [r3, #0]
10008a5a:	4b15      	ldr	r3, [pc, #84]	; (10008ab0 <IRQ7_Handler+0x68>)
10008a5c:	0092      	lsls	r2, r2, #2
10008a5e:	58d3      	ldr	r3, [r2, r3]
10008a60:	2b00      	cmp	r3, #0
10008a62:	dd08      	ble.n	10008a76 <IRQ7_Handler+0x2e>
        {
        	tasksTimer[i]--;
10008a64:	1dfb      	adds	r3, r7, #7
10008a66:	781b      	ldrb	r3, [r3, #0]
10008a68:	4a11      	ldr	r2, [pc, #68]	; (10008ab0 <IRQ7_Handler+0x68>)
10008a6a:	0099      	lsls	r1, r3, #2
10008a6c:	588a      	ldr	r2, [r1, r2]
10008a6e:	1e51      	subs	r1, r2, #1
10008a70:	4a0f      	ldr	r2, [pc, #60]	; (10008ab0 <IRQ7_Handler+0x68>)
10008a72:	009b      	lsls	r3, r3, #2
10008a74:	5099      	str	r1, [r3, r2]
//***********************************************************== TIMER 1MS IRQ ==**************************************************************
//********************************************************************************************************************************************

void Timer1msIRQHandler(void){

	for(uint8_t i = 0; i < N_OF_TASKS; i++)     	// Timer for managing all the tasks
10008a76:	1dfb      	adds	r3, r7, #7
10008a78:	781a      	ldrb	r2, [r3, #0]
10008a7a:	1dfb      	adds	r3, r7, #7
10008a7c:	3201      	adds	r2, #1
10008a7e:	701a      	strb	r2, [r3, #0]
10008a80:	1dfb      	adds	r3, r7, #7
10008a82:	781b      	ldrb	r3, [r3, #0]
10008a84:	2b04      	cmp	r3, #4
10008a86:	d9e6      	bls.n	10008a56 <IRQ7_Handler+0xe>
        {
        	tasksTimer[i]--;
        }
    }

	ReadAxis1.CountWork++;
10008a88:	4b0a      	ldr	r3, [pc, #40]	; (10008ab4 <IRQ7_Handler+0x6c>)
10008a8a:	22b1      	movs	r2, #177	; 0xb1
10008a8c:	5c9b      	ldrb	r3, [r3, r2]
10008a8e:	3301      	adds	r3, #1
10008a90:	b2d9      	uxtb	r1, r3
10008a92:	4b08      	ldr	r3, [pc, #32]	; (10008ab4 <IRQ7_Handler+0x6c>)
10008a94:	22b1      	movs	r2, #177	; 0xb1
10008a96:	5499      	strb	r1, [r3, r2]
	if(ReadAxis1.CountWork == 200){
10008a98:	4b06      	ldr	r3, [pc, #24]	; (10008ab4 <IRQ7_Handler+0x6c>)
10008a9a:	22b1      	movs	r2, #177	; 0xb1
10008a9c:	5c9b      	ldrb	r3, [r3, r2]
10008a9e:	2bc8      	cmp	r3, #200	; 0xc8
10008aa0:	d103      	bne.n	10008aaa <IRQ7_Handler+0x62>
		ReadAxis1.CountWork = 0;
10008aa2:	4b04      	ldr	r3, [pc, #16]	; (10008ab4 <IRQ7_Handler+0x6c>)
10008aa4:	22b1      	movs	r2, #177	; 0xb1
10008aa6:	2100      	movs	r1, #0
10008aa8:	5499      	strb	r1, [r3, r2]
		//DIGITAL_IO_ToggleOutput(&LED2);
	}


}
10008aaa:	46bd      	mov	sp, r7
10008aac:	b002      	add	sp, #8
10008aae:	bd80      	pop	{r7, pc}
10008ab0:	20000cd4 	.word	0x20000cd4
10008ab4:	20000c18 	.word	0x20000c18

10008ab8 <taskSetState>:

//********************************************************************************************************************************************
//***********************************************************== TASK SET STATE ==*************************************************************
//********************************************************************************************************************************************
void taskSetState(uint8_t task, int32_t state)
{
10008ab8:	b580      	push	{r7, lr}
10008aba:	b082      	sub	sp, #8
10008abc:	af00      	add	r7, sp, #0
10008abe:	1c02      	adds	r2, r0, #0
10008ac0:	6039      	str	r1, [r7, #0]
10008ac2:	1dfb      	adds	r3, r7, #7
10008ac4:	701a      	strb	r2, [r3, #0]
    if(task < N_OF_TASKS)
10008ac6:	1dfb      	adds	r3, r7, #7
10008ac8:	781b      	ldrb	r3, [r3, #0]
10008aca:	2b04      	cmp	r3, #4
10008acc:	d805      	bhi.n	10008ada <taskSetState+0x22>
    {
        tasksTimer[task] = state;
10008ace:	1dfb      	adds	r3, r7, #7
10008ad0:	781a      	ldrb	r2, [r3, #0]
10008ad2:	4b04      	ldr	r3, [pc, #16]	; (10008ae4 <taskSetState+0x2c>)
10008ad4:	0092      	lsls	r2, r2, #2
10008ad6:	6839      	ldr	r1, [r7, #0]
10008ad8:	50d1      	str	r1, [r2, r3]
    }
    return;
10008ada:	46c0      	nop			; (mov r8, r8)
}
10008adc:	46bd      	mov	sp, r7
10008ade:	b002      	add	sp, #8
10008ae0:	bd80      	pop	{r7, pc}
10008ae2:	46c0      	nop			; (mov r8, r8)
10008ae4:	20000cd4 	.word	0x20000cd4

10008ae8 <acos>:
10008ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
10008aea:	4647      	mov	r7, r8
10008aec:	b480      	push	{r7}
10008aee:	b08c      	sub	sp, #48	; 0x30
10008af0:	1c04      	adds	r4, r0, #0
10008af2:	1c0d      	adds	r5, r1, #0
10008af4:	f000 f8ac 	bl	10008c50 <__ieee754_acos>
10008af8:	4b24      	ldr	r3, [pc, #144]	; (10008b8c <acos+0xa4>)
10008afa:	1c06      	adds	r6, r0, #0
10008afc:	4698      	mov	r8, r3
10008afe:	781b      	ldrb	r3, [r3, #0]
10008b00:	1c0f      	adds	r7, r1, #0
10008b02:	b25b      	sxtb	r3, r3
10008b04:	3301      	adds	r3, #1
10008b06:	d005      	beq.n	10008b14 <acos+0x2c>
10008b08:	1c20      	adds	r0, r4, #0
10008b0a:	1c29      	adds	r1, r5, #0
10008b0c:	f000 fd86 	bl	1000961c <__fpclassifyd>
10008b10:	2800      	cmp	r0, #0
10008b12:	d105      	bne.n	10008b20 <acos+0x38>
10008b14:	1c30      	adds	r0, r6, #0
10008b16:	1c39      	adds	r1, r7, #0
10008b18:	b00c      	add	sp, #48	; 0x30
10008b1a:	bc04      	pop	{r2}
10008b1c:	4690      	mov	r8, r2
10008b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008b20:	1c20      	adds	r0, r4, #0
10008b22:	1c29      	adds	r1, r5, #0
10008b24:	f000 fd76 	bl	10009614 <fabs>
10008b28:	2200      	movs	r2, #0
10008b2a:	4b19      	ldr	r3, [pc, #100]	; (10008b90 <acos+0xa8>)
10008b2c:	f000 fdd6 	bl	100096dc <__aeabi_dcmpgt>
10008b30:	2800      	cmp	r0, #0
10008b32:	d0ef      	beq.n	10008b14 <acos+0x2c>
10008b34:	2301      	movs	r3, #1
10008b36:	9302      	str	r3, [sp, #8]
10008b38:	4b16      	ldr	r3, [pc, #88]	; (10008b94 <acos+0xac>)
10008b3a:	4817      	ldr	r0, [pc, #92]	; (10008b98 <acos+0xb0>)
10008b3c:	9303      	str	r3, [sp, #12]
10008b3e:	2300      	movs	r3, #0
10008b40:	9406      	str	r4, [sp, #24]
10008b42:	9507      	str	r5, [sp, #28]
10008b44:	930a      	str	r3, [sp, #40]	; 0x28
10008b46:	9404      	str	r4, [sp, #16]
10008b48:	9505      	str	r5, [sp, #20]
10008b4a:	f000 fd97 	bl	1000967c <nan>
10008b4e:	4643      	mov	r3, r8
10008b50:	781b      	ldrb	r3, [r3, #0]
10008b52:	9008      	str	r0, [sp, #32]
10008b54:	9109      	str	r1, [sp, #36]	; 0x24
10008b56:	b25b      	sxtb	r3, r3
10008b58:	2b02      	cmp	r3, #2
10008b5a:	d00b      	beq.n	10008b74 <acos+0x8c>
10008b5c:	a802      	add	r0, sp, #8
10008b5e:	f000 fd8b 	bl	10009678 <matherr>
10008b62:	2800      	cmp	r0, #0
10008b64:	d006      	beq.n	10008b74 <acos+0x8c>
10008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008b68:	9301      	str	r3, [sp, #4]
10008b6a:	2b00      	cmp	r3, #0
10008b6c:	d107      	bne.n	10008b7e <acos+0x96>
10008b6e:	9e08      	ldr	r6, [sp, #32]
10008b70:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008b72:	e7cf      	b.n	10008b14 <acos+0x2c>
10008b74:	f003 fb1a 	bl	1000c1ac <__errno>
10008b78:	2321      	movs	r3, #33	; 0x21
10008b7a:	6003      	str	r3, [r0, #0]
10008b7c:	e7f3      	b.n	10008b66 <acos+0x7e>
10008b7e:	f003 fb15 	bl	1000c1ac <__errno>
10008b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008b84:	9301      	str	r3, [sp, #4]
10008b86:	6003      	str	r3, [r0, #0]
10008b88:	e7f1      	b.n	10008b6e <acos+0x86>
10008b8a:	46c0      	nop			; (mov r8, r8)
10008b8c:	20000634 	.word	0x20000634
10008b90:	3ff00000 	.word	0x3ff00000
10008b94:	1000c520 	.word	0x1000c520
10008b98:	1000c52c 	.word	0x1000c52c

10008b9c <asin>:
10008b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b9e:	4647      	mov	r7, r8
10008ba0:	b480      	push	{r7}
10008ba2:	b08c      	sub	sp, #48	; 0x30
10008ba4:	1c04      	adds	r4, r0, #0
10008ba6:	1c0d      	adds	r5, r1, #0
10008ba8:	f000 fa54 	bl	10009054 <__ieee754_asin>
10008bac:	4b24      	ldr	r3, [pc, #144]	; (10008c40 <asin+0xa4>)
10008bae:	1c06      	adds	r6, r0, #0
10008bb0:	4698      	mov	r8, r3
10008bb2:	781b      	ldrb	r3, [r3, #0]
10008bb4:	1c0f      	adds	r7, r1, #0
10008bb6:	b25b      	sxtb	r3, r3
10008bb8:	3301      	adds	r3, #1
10008bba:	d005      	beq.n	10008bc8 <asin+0x2c>
10008bbc:	1c20      	adds	r0, r4, #0
10008bbe:	1c29      	adds	r1, r5, #0
10008bc0:	f000 fd2c 	bl	1000961c <__fpclassifyd>
10008bc4:	2800      	cmp	r0, #0
10008bc6:	d105      	bne.n	10008bd4 <asin+0x38>
10008bc8:	1c30      	adds	r0, r6, #0
10008bca:	1c39      	adds	r1, r7, #0
10008bcc:	b00c      	add	sp, #48	; 0x30
10008bce:	bc04      	pop	{r2}
10008bd0:	4690      	mov	r8, r2
10008bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008bd4:	1c20      	adds	r0, r4, #0
10008bd6:	1c29      	adds	r1, r5, #0
10008bd8:	f000 fd1c 	bl	10009614 <fabs>
10008bdc:	2200      	movs	r2, #0
10008bde:	4b19      	ldr	r3, [pc, #100]	; (10008c44 <asin+0xa8>)
10008be0:	f000 fd7c 	bl	100096dc <__aeabi_dcmpgt>
10008be4:	2800      	cmp	r0, #0
10008be6:	d0ef      	beq.n	10008bc8 <asin+0x2c>
10008be8:	2301      	movs	r3, #1
10008bea:	9302      	str	r3, [sp, #8]
10008bec:	4b16      	ldr	r3, [pc, #88]	; (10008c48 <asin+0xac>)
10008bee:	4817      	ldr	r0, [pc, #92]	; (10008c4c <asin+0xb0>)
10008bf0:	9303      	str	r3, [sp, #12]
10008bf2:	2300      	movs	r3, #0
10008bf4:	9406      	str	r4, [sp, #24]
10008bf6:	9507      	str	r5, [sp, #28]
10008bf8:	930a      	str	r3, [sp, #40]	; 0x28
10008bfa:	9404      	str	r4, [sp, #16]
10008bfc:	9505      	str	r5, [sp, #20]
10008bfe:	f000 fd3d 	bl	1000967c <nan>
10008c02:	4643      	mov	r3, r8
10008c04:	781b      	ldrb	r3, [r3, #0]
10008c06:	9008      	str	r0, [sp, #32]
10008c08:	9109      	str	r1, [sp, #36]	; 0x24
10008c0a:	b25b      	sxtb	r3, r3
10008c0c:	2b02      	cmp	r3, #2
10008c0e:	d00b      	beq.n	10008c28 <asin+0x8c>
10008c10:	a802      	add	r0, sp, #8
10008c12:	f000 fd31 	bl	10009678 <matherr>
10008c16:	2800      	cmp	r0, #0
10008c18:	d006      	beq.n	10008c28 <asin+0x8c>
10008c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008c1c:	9301      	str	r3, [sp, #4]
10008c1e:	2b00      	cmp	r3, #0
10008c20:	d107      	bne.n	10008c32 <asin+0x96>
10008c22:	9e08      	ldr	r6, [sp, #32]
10008c24:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008c26:	e7cf      	b.n	10008bc8 <asin+0x2c>
10008c28:	f003 fac0 	bl	1000c1ac <__errno>
10008c2c:	2321      	movs	r3, #33	; 0x21
10008c2e:	6003      	str	r3, [r0, #0]
10008c30:	e7f3      	b.n	10008c1a <asin+0x7e>
10008c32:	f003 fabb 	bl	1000c1ac <__errno>
10008c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008c38:	9301      	str	r3, [sp, #4]
10008c3a:	6003      	str	r3, [r0, #0]
10008c3c:	e7f1      	b.n	10008c22 <asin+0x86>
10008c3e:	46c0      	nop			; (mov r8, r8)
10008c40:	20000634 	.word	0x20000634
10008c44:	3ff00000 	.word	0x3ff00000
10008c48:	1000c528 	.word	0x1000c528
10008c4c:	1000c52c 	.word	0x1000c52c

10008c50 <__ieee754_acos>:
10008c50:	b5f0      	push	{r4, r5, r6, r7, lr}
10008c52:	1c0e      	adds	r6, r1, #0
10008c54:	4ae0      	ldr	r2, [pc, #896]	; (10008fd8 <__ieee754_acos+0x388>)
10008c56:	0073      	lsls	r3, r6, #1
10008c58:	b085      	sub	sp, #20
10008c5a:	1c07      	adds	r7, r0, #0
10008c5c:	085b      	lsrs	r3, r3, #1
10008c5e:	4293      	cmp	r3, r2
10008c60:	dd0c      	ble.n	10008c7c <__ieee754_acos+0x2c>
10008c62:	4ade      	ldr	r2, [pc, #888]	; (10008fdc <__ieee754_acos+0x38c>)
10008c64:	4694      	mov	ip, r2
10008c66:	4463      	add	r3, ip
10008c68:	4303      	orrs	r3, r0
10008c6a:	d000      	beq.n	10008c6e <__ieee754_acos+0x1e>
10008c6c:	e0ae      	b.n	10008dcc <__ieee754_acos+0x17c>
10008c6e:	2900      	cmp	r1, #0
10008c70:	dc00      	bgt.n	10008c74 <__ieee754_acos+0x24>
10008c72:	e12d      	b.n	10008ed0 <__ieee754_acos+0x280>
10008c74:	2000      	movs	r0, #0
10008c76:	2100      	movs	r1, #0
10008c78:	b005      	add	sp, #20
10008c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c7c:	4ad8      	ldr	r2, [pc, #864]	; (10008fe0 <__ieee754_acos+0x390>)
10008c7e:	4293      	cmp	r3, r2
10008c80:	dc00      	bgt.n	10008c84 <__ieee754_acos+0x34>
10008c82:	e09d      	b.n	10008dc0 <__ieee754_acos+0x170>
10008c84:	2900      	cmp	r1, #0
10008c86:	da00      	bge.n	10008c8a <__ieee754_acos+0x3a>
10008c88:	e125      	b.n	10008ed6 <__ieee754_acos+0x286>
10008c8a:	1c3a      	adds	r2, r7, #0
10008c8c:	1c33      	adds	r3, r6, #0
10008c8e:	2000      	movs	r0, #0
10008c90:	49d4      	ldr	r1, [pc, #848]	; (10008fe4 <__ieee754_acos+0x394>)
10008c92:	f002 fe0f 	bl	1000b8b4 <__aeabi_dsub>
10008c96:	2200      	movs	r2, #0
10008c98:	4bd3      	ldr	r3, [pc, #844]	; (10008fe8 <__ieee754_acos+0x398>)
10008c9a:	f002 fb71 	bl	1000b380 <__aeabi_dmul>
10008c9e:	1c04      	adds	r4, r0, #0
10008ca0:	1c0d      	adds	r5, r1, #0
10008ca2:	f000 fbc1 	bl	10009428 <__ieee754_sqrt>
10008ca6:	4ad1      	ldr	r2, [pc, #836]	; (10008fec <__ieee754_acos+0x39c>)
10008ca8:	1c0f      	adds	r7, r1, #0
10008caa:	9000      	str	r0, [sp, #0]
10008cac:	9101      	str	r1, [sp, #4]
10008cae:	4bd0      	ldr	r3, [pc, #832]	; (10008ff0 <__ieee754_acos+0x3a0>)
10008cb0:	1c20      	adds	r0, r4, #0
10008cb2:	1c29      	adds	r1, r5, #0
10008cb4:	f002 fb64 	bl	1000b380 <__aeabi_dmul>
10008cb8:	4ace      	ldr	r2, [pc, #824]	; (10008ff4 <__ieee754_acos+0x3a4>)
10008cba:	4bcf      	ldr	r3, [pc, #828]	; (10008ff8 <__ieee754_acos+0x3a8>)
10008cbc:	f001 fbfa 	bl	1000a4b4 <__aeabi_dadd>
10008cc0:	1c22      	adds	r2, r4, #0
10008cc2:	1c2b      	adds	r3, r5, #0
10008cc4:	f002 fb5c 	bl	1000b380 <__aeabi_dmul>
10008cc8:	4acc      	ldr	r2, [pc, #816]	; (10008ffc <__ieee754_acos+0x3ac>)
10008cca:	4bcd      	ldr	r3, [pc, #820]	; (10009000 <__ieee754_acos+0x3b0>)
10008ccc:	f002 fdf2 	bl	1000b8b4 <__aeabi_dsub>
10008cd0:	1c22      	adds	r2, r4, #0
10008cd2:	1c2b      	adds	r3, r5, #0
10008cd4:	f002 fb54 	bl	1000b380 <__aeabi_dmul>
10008cd8:	4aca      	ldr	r2, [pc, #808]	; (10009004 <__ieee754_acos+0x3b4>)
10008cda:	4bcb      	ldr	r3, [pc, #812]	; (10009008 <__ieee754_acos+0x3b8>)
10008cdc:	f001 fbea 	bl	1000a4b4 <__aeabi_dadd>
10008ce0:	1c22      	adds	r2, r4, #0
10008ce2:	1c2b      	adds	r3, r5, #0
10008ce4:	f002 fb4c 	bl	1000b380 <__aeabi_dmul>
10008ce8:	4ac8      	ldr	r2, [pc, #800]	; (1000900c <__ieee754_acos+0x3bc>)
10008cea:	4bc9      	ldr	r3, [pc, #804]	; (10009010 <__ieee754_acos+0x3c0>)
10008cec:	f002 fde2 	bl	1000b8b4 <__aeabi_dsub>
10008cf0:	1c22      	adds	r2, r4, #0
10008cf2:	1c2b      	adds	r3, r5, #0
10008cf4:	f002 fb44 	bl	1000b380 <__aeabi_dmul>
10008cf8:	4ac6      	ldr	r2, [pc, #792]	; (10009014 <__ieee754_acos+0x3c4>)
10008cfa:	4bc7      	ldr	r3, [pc, #796]	; (10009018 <__ieee754_acos+0x3c8>)
10008cfc:	f001 fbda 	bl	1000a4b4 <__aeabi_dadd>
10008d00:	1c22      	adds	r2, r4, #0
10008d02:	1c2b      	adds	r3, r5, #0
10008d04:	f002 fb3c 	bl	1000b380 <__aeabi_dmul>
10008d08:	4ac4      	ldr	r2, [pc, #784]	; (1000901c <__ieee754_acos+0x3cc>)
10008d0a:	9002      	str	r0, [sp, #8]
10008d0c:	9103      	str	r1, [sp, #12]
10008d0e:	4bc4      	ldr	r3, [pc, #784]	; (10009020 <__ieee754_acos+0x3d0>)
10008d10:	1c20      	adds	r0, r4, #0
10008d12:	1c29      	adds	r1, r5, #0
10008d14:	f002 fb34 	bl	1000b380 <__aeabi_dmul>
10008d18:	4ac2      	ldr	r2, [pc, #776]	; (10009024 <__ieee754_acos+0x3d4>)
10008d1a:	4bc3      	ldr	r3, [pc, #780]	; (10009028 <__ieee754_acos+0x3d8>)
10008d1c:	f002 fdca 	bl	1000b8b4 <__aeabi_dsub>
10008d20:	1c22      	adds	r2, r4, #0
10008d22:	1c2b      	adds	r3, r5, #0
10008d24:	f002 fb2c 	bl	1000b380 <__aeabi_dmul>
10008d28:	4ac0      	ldr	r2, [pc, #768]	; (1000902c <__ieee754_acos+0x3dc>)
10008d2a:	4bc1      	ldr	r3, [pc, #772]	; (10009030 <__ieee754_acos+0x3e0>)
10008d2c:	f001 fbc2 	bl	1000a4b4 <__aeabi_dadd>
10008d30:	1c22      	adds	r2, r4, #0
10008d32:	1c2b      	adds	r3, r5, #0
10008d34:	f002 fb24 	bl	1000b380 <__aeabi_dmul>
10008d38:	4abe      	ldr	r2, [pc, #760]	; (10009034 <__ieee754_acos+0x3e4>)
10008d3a:	4bbf      	ldr	r3, [pc, #764]	; (10009038 <__ieee754_acos+0x3e8>)
10008d3c:	f002 fdba 	bl	1000b8b4 <__aeabi_dsub>
10008d40:	1c22      	adds	r2, r4, #0
10008d42:	1c2b      	adds	r3, r5, #0
10008d44:	f002 fb1c 	bl	1000b380 <__aeabi_dmul>
10008d48:	2200      	movs	r2, #0
10008d4a:	4ba6      	ldr	r3, [pc, #664]	; (10008fe4 <__ieee754_acos+0x394>)
10008d4c:	f001 fbb2 	bl	1000a4b4 <__aeabi_dadd>
10008d50:	1c02      	adds	r2, r0, #0
10008d52:	1c0b      	adds	r3, r1, #0
10008d54:	9802      	ldr	r0, [sp, #8]
10008d56:	9903      	ldr	r1, [sp, #12]
10008d58:	f001 fed4 	bl	1000ab04 <__aeabi_ddiv>
10008d5c:	9a00      	ldr	r2, [sp, #0]
10008d5e:	9b01      	ldr	r3, [sp, #4]
10008d60:	f002 fb0e 	bl	1000b380 <__aeabi_dmul>
10008d64:	2600      	movs	r6, #0
10008d66:	9002      	str	r0, [sp, #8]
10008d68:	9103      	str	r1, [sp, #12]
10008d6a:	1c32      	adds	r2, r6, #0
10008d6c:	1c3b      	adds	r3, r7, #0
10008d6e:	1c30      	adds	r0, r6, #0
10008d70:	1c39      	adds	r1, r7, #0
10008d72:	f002 fb05 	bl	1000b380 <__aeabi_dmul>
10008d76:	1c02      	adds	r2, r0, #0
10008d78:	1c0b      	adds	r3, r1, #0
10008d7a:	1c20      	adds	r0, r4, #0
10008d7c:	1c29      	adds	r1, r5, #0
10008d7e:	f002 fd99 	bl	1000b8b4 <__aeabi_dsub>
10008d82:	1c32      	adds	r2, r6, #0
10008d84:	1c04      	adds	r4, r0, #0
10008d86:	1c0d      	adds	r5, r1, #0
10008d88:	9800      	ldr	r0, [sp, #0]
10008d8a:	9901      	ldr	r1, [sp, #4]
10008d8c:	1c3b      	adds	r3, r7, #0
10008d8e:	f001 fb91 	bl	1000a4b4 <__aeabi_dadd>
10008d92:	1c02      	adds	r2, r0, #0
10008d94:	1c0b      	adds	r3, r1, #0
10008d96:	1c20      	adds	r0, r4, #0
10008d98:	1c29      	adds	r1, r5, #0
10008d9a:	f001 feb3 	bl	1000ab04 <__aeabi_ddiv>
10008d9e:	1c02      	adds	r2, r0, #0
10008da0:	1c0b      	adds	r3, r1, #0
10008da2:	9802      	ldr	r0, [sp, #8]
10008da4:	9903      	ldr	r1, [sp, #12]
10008da6:	f001 fb85 	bl	1000a4b4 <__aeabi_dadd>
10008daa:	1c02      	adds	r2, r0, #0
10008dac:	1c0b      	adds	r3, r1, #0
10008dae:	1c30      	adds	r0, r6, #0
10008db0:	1c39      	adds	r1, r7, #0
10008db2:	f001 fb7f 	bl	1000a4b4 <__aeabi_dadd>
10008db6:	1c02      	adds	r2, r0, #0
10008db8:	1c0b      	adds	r3, r1, #0
10008dba:	f001 fb7b 	bl	1000a4b4 <__aeabi_dadd>
10008dbe:	e75b      	b.n	10008c78 <__ieee754_acos+0x28>
10008dc0:	4a9e      	ldr	r2, [pc, #632]	; (1000903c <__ieee754_acos+0x3ec>)
10008dc2:	4293      	cmp	r3, r2
10008dc4:	dc0d      	bgt.n	10008de2 <__ieee754_acos+0x192>
10008dc6:	489e      	ldr	r0, [pc, #632]	; (10009040 <__ieee754_acos+0x3f0>)
10008dc8:	499e      	ldr	r1, [pc, #632]	; (10009044 <__ieee754_acos+0x3f4>)
10008dca:	e755      	b.n	10008c78 <__ieee754_acos+0x28>
10008dcc:	1c3a      	adds	r2, r7, #0
10008dce:	1c33      	adds	r3, r6, #0
10008dd0:	1c38      	adds	r0, r7, #0
10008dd2:	1c31      	adds	r1, r6, #0
10008dd4:	f002 fd6e 	bl	1000b8b4 <__aeabi_dsub>
10008dd8:	1c02      	adds	r2, r0, #0
10008dda:	1c0b      	adds	r3, r1, #0
10008ddc:	f001 fe92 	bl	1000ab04 <__aeabi_ddiv>
10008de0:	e74a      	b.n	10008c78 <__ieee754_acos+0x28>
10008de2:	1c3a      	adds	r2, r7, #0
10008de4:	1c33      	adds	r3, r6, #0
10008de6:	1c38      	adds	r0, r7, #0
10008de8:	1c31      	adds	r1, r6, #0
10008dea:	f002 fac9 	bl	1000b380 <__aeabi_dmul>
10008dee:	1c04      	adds	r4, r0, #0
10008df0:	1c0d      	adds	r5, r1, #0
10008df2:	4a7e      	ldr	r2, [pc, #504]	; (10008fec <__ieee754_acos+0x39c>)
10008df4:	4b7e      	ldr	r3, [pc, #504]	; (10008ff0 <__ieee754_acos+0x3a0>)
10008df6:	f002 fac3 	bl	1000b380 <__aeabi_dmul>
10008dfa:	4a7e      	ldr	r2, [pc, #504]	; (10008ff4 <__ieee754_acos+0x3a4>)
10008dfc:	4b7e      	ldr	r3, [pc, #504]	; (10008ff8 <__ieee754_acos+0x3a8>)
10008dfe:	f001 fb59 	bl	1000a4b4 <__aeabi_dadd>
10008e02:	1c22      	adds	r2, r4, #0
10008e04:	1c2b      	adds	r3, r5, #0
10008e06:	f002 fabb 	bl	1000b380 <__aeabi_dmul>
10008e0a:	4a7c      	ldr	r2, [pc, #496]	; (10008ffc <__ieee754_acos+0x3ac>)
10008e0c:	4b7c      	ldr	r3, [pc, #496]	; (10009000 <__ieee754_acos+0x3b0>)
10008e0e:	f002 fd51 	bl	1000b8b4 <__aeabi_dsub>
10008e12:	1c22      	adds	r2, r4, #0
10008e14:	1c2b      	adds	r3, r5, #0
10008e16:	f002 fab3 	bl	1000b380 <__aeabi_dmul>
10008e1a:	4a7a      	ldr	r2, [pc, #488]	; (10009004 <__ieee754_acos+0x3b4>)
10008e1c:	4b7a      	ldr	r3, [pc, #488]	; (10009008 <__ieee754_acos+0x3b8>)
10008e1e:	f001 fb49 	bl	1000a4b4 <__aeabi_dadd>
10008e22:	1c22      	adds	r2, r4, #0
10008e24:	1c2b      	adds	r3, r5, #0
10008e26:	f002 faab 	bl	1000b380 <__aeabi_dmul>
10008e2a:	4a78      	ldr	r2, [pc, #480]	; (1000900c <__ieee754_acos+0x3bc>)
10008e2c:	4b78      	ldr	r3, [pc, #480]	; (10009010 <__ieee754_acos+0x3c0>)
10008e2e:	f002 fd41 	bl	1000b8b4 <__aeabi_dsub>
10008e32:	1c22      	adds	r2, r4, #0
10008e34:	1c2b      	adds	r3, r5, #0
10008e36:	f002 faa3 	bl	1000b380 <__aeabi_dmul>
10008e3a:	4a76      	ldr	r2, [pc, #472]	; (10009014 <__ieee754_acos+0x3c4>)
10008e3c:	4b76      	ldr	r3, [pc, #472]	; (10009018 <__ieee754_acos+0x3c8>)
10008e3e:	f001 fb39 	bl	1000a4b4 <__aeabi_dadd>
10008e42:	1c22      	adds	r2, r4, #0
10008e44:	1c2b      	adds	r3, r5, #0
10008e46:	f002 fa9b 	bl	1000b380 <__aeabi_dmul>
10008e4a:	4a74      	ldr	r2, [pc, #464]	; (1000901c <__ieee754_acos+0x3cc>)
10008e4c:	9000      	str	r0, [sp, #0]
10008e4e:	9101      	str	r1, [sp, #4]
10008e50:	4b73      	ldr	r3, [pc, #460]	; (10009020 <__ieee754_acos+0x3d0>)
10008e52:	1c20      	adds	r0, r4, #0
10008e54:	1c29      	adds	r1, r5, #0
10008e56:	f002 fa93 	bl	1000b380 <__aeabi_dmul>
10008e5a:	4a72      	ldr	r2, [pc, #456]	; (10009024 <__ieee754_acos+0x3d4>)
10008e5c:	4b72      	ldr	r3, [pc, #456]	; (10009028 <__ieee754_acos+0x3d8>)
10008e5e:	f002 fd29 	bl	1000b8b4 <__aeabi_dsub>
10008e62:	1c22      	adds	r2, r4, #0
10008e64:	1c2b      	adds	r3, r5, #0
10008e66:	f002 fa8b 	bl	1000b380 <__aeabi_dmul>
10008e6a:	4a70      	ldr	r2, [pc, #448]	; (1000902c <__ieee754_acos+0x3dc>)
10008e6c:	4b70      	ldr	r3, [pc, #448]	; (10009030 <__ieee754_acos+0x3e0>)
10008e6e:	f001 fb21 	bl	1000a4b4 <__aeabi_dadd>
10008e72:	1c22      	adds	r2, r4, #0
10008e74:	1c2b      	adds	r3, r5, #0
10008e76:	f002 fa83 	bl	1000b380 <__aeabi_dmul>
10008e7a:	4a6e      	ldr	r2, [pc, #440]	; (10009034 <__ieee754_acos+0x3e4>)
10008e7c:	4b6e      	ldr	r3, [pc, #440]	; (10009038 <__ieee754_acos+0x3e8>)
10008e7e:	f002 fd19 	bl	1000b8b4 <__aeabi_dsub>
10008e82:	1c22      	adds	r2, r4, #0
10008e84:	1c2b      	adds	r3, r5, #0
10008e86:	f002 fa7b 	bl	1000b380 <__aeabi_dmul>
10008e8a:	2200      	movs	r2, #0
10008e8c:	4b55      	ldr	r3, [pc, #340]	; (10008fe4 <__ieee754_acos+0x394>)
10008e8e:	f001 fb11 	bl	1000a4b4 <__aeabi_dadd>
10008e92:	1c02      	adds	r2, r0, #0
10008e94:	1c0b      	adds	r3, r1, #0
10008e96:	9800      	ldr	r0, [sp, #0]
10008e98:	9901      	ldr	r1, [sp, #4]
10008e9a:	f001 fe33 	bl	1000ab04 <__aeabi_ddiv>
10008e9e:	1c02      	adds	r2, r0, #0
10008ea0:	1c0b      	adds	r3, r1, #0
10008ea2:	1c38      	adds	r0, r7, #0
10008ea4:	1c31      	adds	r1, r6, #0
10008ea6:	f002 fa6b 	bl	1000b380 <__aeabi_dmul>
10008eaa:	1c02      	adds	r2, r0, #0
10008eac:	1c0b      	adds	r3, r1, #0
10008eae:	4866      	ldr	r0, [pc, #408]	; (10009048 <__ieee754_acos+0x3f8>)
10008eb0:	4966      	ldr	r1, [pc, #408]	; (1000904c <__ieee754_acos+0x3fc>)
10008eb2:	f002 fcff 	bl	1000b8b4 <__aeabi_dsub>
10008eb6:	1c02      	adds	r2, r0, #0
10008eb8:	1c0b      	adds	r3, r1, #0
10008eba:	1c38      	adds	r0, r7, #0
10008ebc:	1c31      	adds	r1, r6, #0
10008ebe:	f002 fcf9 	bl	1000b8b4 <__aeabi_dsub>
10008ec2:	1c02      	adds	r2, r0, #0
10008ec4:	1c0b      	adds	r3, r1, #0
10008ec6:	485e      	ldr	r0, [pc, #376]	; (10009040 <__ieee754_acos+0x3f0>)
10008ec8:	495e      	ldr	r1, [pc, #376]	; (10009044 <__ieee754_acos+0x3f4>)
10008eca:	f002 fcf3 	bl	1000b8b4 <__aeabi_dsub>
10008ece:	e6d3      	b.n	10008c78 <__ieee754_acos+0x28>
10008ed0:	485b      	ldr	r0, [pc, #364]	; (10009040 <__ieee754_acos+0x3f0>)
10008ed2:	495f      	ldr	r1, [pc, #380]	; (10009050 <__ieee754_acos+0x400>)
10008ed4:	e6d0      	b.n	10008c78 <__ieee754_acos+0x28>
10008ed6:	1c38      	adds	r0, r7, #0
10008ed8:	1c31      	adds	r1, r6, #0
10008eda:	2200      	movs	r2, #0
10008edc:	4b41      	ldr	r3, [pc, #260]	; (10008fe4 <__ieee754_acos+0x394>)
10008ede:	f001 fae9 	bl	1000a4b4 <__aeabi_dadd>
10008ee2:	2200      	movs	r2, #0
10008ee4:	4b40      	ldr	r3, [pc, #256]	; (10008fe8 <__ieee754_acos+0x398>)
10008ee6:	f002 fa4b 	bl	1000b380 <__aeabi_dmul>
10008eea:	1c04      	adds	r4, r0, #0
10008eec:	1c0d      	adds	r5, r1, #0
10008eee:	4a3f      	ldr	r2, [pc, #252]	; (10008fec <__ieee754_acos+0x39c>)
10008ef0:	4b3f      	ldr	r3, [pc, #252]	; (10008ff0 <__ieee754_acos+0x3a0>)
10008ef2:	f002 fa45 	bl	1000b380 <__aeabi_dmul>
10008ef6:	4a3f      	ldr	r2, [pc, #252]	; (10008ff4 <__ieee754_acos+0x3a4>)
10008ef8:	4b3f      	ldr	r3, [pc, #252]	; (10008ff8 <__ieee754_acos+0x3a8>)
10008efa:	f001 fadb 	bl	1000a4b4 <__aeabi_dadd>
10008efe:	1c22      	adds	r2, r4, #0
10008f00:	1c2b      	adds	r3, r5, #0
10008f02:	f002 fa3d 	bl	1000b380 <__aeabi_dmul>
10008f06:	4a3d      	ldr	r2, [pc, #244]	; (10008ffc <__ieee754_acos+0x3ac>)
10008f08:	4b3d      	ldr	r3, [pc, #244]	; (10009000 <__ieee754_acos+0x3b0>)
10008f0a:	f002 fcd3 	bl	1000b8b4 <__aeabi_dsub>
10008f0e:	1c22      	adds	r2, r4, #0
10008f10:	1c2b      	adds	r3, r5, #0
10008f12:	f002 fa35 	bl	1000b380 <__aeabi_dmul>
10008f16:	4a3b      	ldr	r2, [pc, #236]	; (10009004 <__ieee754_acos+0x3b4>)
10008f18:	4b3b      	ldr	r3, [pc, #236]	; (10009008 <__ieee754_acos+0x3b8>)
10008f1a:	f001 facb 	bl	1000a4b4 <__aeabi_dadd>
10008f1e:	1c22      	adds	r2, r4, #0
10008f20:	1c2b      	adds	r3, r5, #0
10008f22:	f002 fa2d 	bl	1000b380 <__aeabi_dmul>
10008f26:	4a39      	ldr	r2, [pc, #228]	; (1000900c <__ieee754_acos+0x3bc>)
10008f28:	4b39      	ldr	r3, [pc, #228]	; (10009010 <__ieee754_acos+0x3c0>)
10008f2a:	f002 fcc3 	bl	1000b8b4 <__aeabi_dsub>
10008f2e:	1c22      	adds	r2, r4, #0
10008f30:	1c2b      	adds	r3, r5, #0
10008f32:	f002 fa25 	bl	1000b380 <__aeabi_dmul>
10008f36:	4a37      	ldr	r2, [pc, #220]	; (10009014 <__ieee754_acos+0x3c4>)
10008f38:	4b37      	ldr	r3, [pc, #220]	; (10009018 <__ieee754_acos+0x3c8>)
10008f3a:	f001 fabb 	bl	1000a4b4 <__aeabi_dadd>
10008f3e:	1c22      	adds	r2, r4, #0
10008f40:	1c2b      	adds	r3, r5, #0
10008f42:	f002 fa1d 	bl	1000b380 <__aeabi_dmul>
10008f46:	9000      	str	r0, [sp, #0]
10008f48:	9101      	str	r1, [sp, #4]
10008f4a:	1c20      	adds	r0, r4, #0
10008f4c:	1c29      	adds	r1, r5, #0
10008f4e:	f000 fa6b 	bl	10009428 <__ieee754_sqrt>
10008f52:	4a32      	ldr	r2, [pc, #200]	; (1000901c <__ieee754_acos+0x3cc>)
10008f54:	1c06      	adds	r6, r0, #0
10008f56:	1c0f      	adds	r7, r1, #0
10008f58:	1c20      	adds	r0, r4, #0
10008f5a:	1c29      	adds	r1, r5, #0
10008f5c:	4b30      	ldr	r3, [pc, #192]	; (10009020 <__ieee754_acos+0x3d0>)
10008f5e:	f002 fa0f 	bl	1000b380 <__aeabi_dmul>
10008f62:	4a30      	ldr	r2, [pc, #192]	; (10009024 <__ieee754_acos+0x3d4>)
10008f64:	4b30      	ldr	r3, [pc, #192]	; (10009028 <__ieee754_acos+0x3d8>)
10008f66:	f002 fca5 	bl	1000b8b4 <__aeabi_dsub>
10008f6a:	1c22      	adds	r2, r4, #0
10008f6c:	1c2b      	adds	r3, r5, #0
10008f6e:	f002 fa07 	bl	1000b380 <__aeabi_dmul>
10008f72:	4a2e      	ldr	r2, [pc, #184]	; (1000902c <__ieee754_acos+0x3dc>)
10008f74:	4b2e      	ldr	r3, [pc, #184]	; (10009030 <__ieee754_acos+0x3e0>)
10008f76:	f001 fa9d 	bl	1000a4b4 <__aeabi_dadd>
10008f7a:	1c22      	adds	r2, r4, #0
10008f7c:	1c2b      	adds	r3, r5, #0
10008f7e:	f002 f9ff 	bl	1000b380 <__aeabi_dmul>
10008f82:	4a2c      	ldr	r2, [pc, #176]	; (10009034 <__ieee754_acos+0x3e4>)
10008f84:	4b2c      	ldr	r3, [pc, #176]	; (10009038 <__ieee754_acos+0x3e8>)
10008f86:	f002 fc95 	bl	1000b8b4 <__aeabi_dsub>
10008f8a:	1c22      	adds	r2, r4, #0
10008f8c:	1c2b      	adds	r3, r5, #0
10008f8e:	f002 f9f7 	bl	1000b380 <__aeabi_dmul>
10008f92:	2200      	movs	r2, #0
10008f94:	4b13      	ldr	r3, [pc, #76]	; (10008fe4 <__ieee754_acos+0x394>)
10008f96:	f001 fa8d 	bl	1000a4b4 <__aeabi_dadd>
10008f9a:	1c02      	adds	r2, r0, #0
10008f9c:	1c0b      	adds	r3, r1, #0
10008f9e:	9800      	ldr	r0, [sp, #0]
10008fa0:	9901      	ldr	r1, [sp, #4]
10008fa2:	f001 fdaf 	bl	1000ab04 <__aeabi_ddiv>
10008fa6:	1c32      	adds	r2, r6, #0
10008fa8:	1c3b      	adds	r3, r7, #0
10008faa:	f002 f9e9 	bl	1000b380 <__aeabi_dmul>
10008fae:	4a26      	ldr	r2, [pc, #152]	; (10009048 <__ieee754_acos+0x3f8>)
10008fb0:	4b26      	ldr	r3, [pc, #152]	; (1000904c <__ieee754_acos+0x3fc>)
10008fb2:	f002 fc7f 	bl	1000b8b4 <__aeabi_dsub>
10008fb6:	1c02      	adds	r2, r0, #0
10008fb8:	1c0b      	adds	r3, r1, #0
10008fba:	1c30      	adds	r0, r6, #0
10008fbc:	1c39      	adds	r1, r7, #0
10008fbe:	f001 fa79 	bl	1000a4b4 <__aeabi_dadd>
10008fc2:	1c02      	adds	r2, r0, #0
10008fc4:	1c0b      	adds	r3, r1, #0
10008fc6:	f001 fa75 	bl	1000a4b4 <__aeabi_dadd>
10008fca:	1c02      	adds	r2, r0, #0
10008fcc:	1c0b      	adds	r3, r1, #0
10008fce:	481c      	ldr	r0, [pc, #112]	; (10009040 <__ieee754_acos+0x3f0>)
10008fd0:	491f      	ldr	r1, [pc, #124]	; (10009050 <__ieee754_acos+0x400>)
10008fd2:	f002 fc6f 	bl	1000b8b4 <__aeabi_dsub>
10008fd6:	e64f      	b.n	10008c78 <__ieee754_acos+0x28>
10008fd8:	3fefffff 	.word	0x3fefffff
10008fdc:	c0100000 	.word	0xc0100000
10008fe0:	3fdfffff 	.word	0x3fdfffff
10008fe4:	3ff00000 	.word	0x3ff00000
10008fe8:	3fe00000 	.word	0x3fe00000
10008fec:	0dfdf709 	.word	0x0dfdf709
10008ff0:	3f023de1 	.word	0x3f023de1
10008ff4:	7501b288 	.word	0x7501b288
10008ff8:	3f49efe0 	.word	0x3f49efe0
10008ffc:	b5688f3b 	.word	0xb5688f3b
10009000:	3fa48228 	.word	0x3fa48228
10009004:	0e884455 	.word	0x0e884455
10009008:	3fc9c155 	.word	0x3fc9c155
1000900c:	03eb6f7d 	.word	0x03eb6f7d
10009010:	3fd4d612 	.word	0x3fd4d612
10009014:	55555555 	.word	0x55555555
10009018:	3fc55555 	.word	0x3fc55555
1000901c:	b12e9282 	.word	0xb12e9282
10009020:	3fb3b8c5 	.word	0x3fb3b8c5
10009024:	1b8d0159 	.word	0x1b8d0159
10009028:	3fe6066c 	.word	0x3fe6066c
1000902c:	9c598ac8 	.word	0x9c598ac8
10009030:	40002ae5 	.word	0x40002ae5
10009034:	1c8a2d4b 	.word	0x1c8a2d4b
10009038:	40033a27 	.word	0x40033a27
1000903c:	3c600000 	.word	0x3c600000
10009040:	54442d18 	.word	0x54442d18
10009044:	3ff921fb 	.word	0x3ff921fb
10009048:	33145c07 	.word	0x33145c07
1000904c:	3c91a626 	.word	0x3c91a626
10009050:	400921fb 	.word	0x400921fb

10009054 <__ieee754_asin>:
10009054:	b5f0      	push	{r4, r5, r6, r7, lr}
10009056:	4657      	mov	r7, sl
10009058:	464e      	mov	r6, r9
1000905a:	b4c0      	push	{r6, r7}
1000905c:	4bd0      	ldr	r3, [pc, #832]	; (100093a0 <__ieee754_asin+0x34c>)
1000905e:	004e      	lsls	r6, r1, #1
10009060:	b089      	sub	sp, #36	; 0x24
10009062:	1c07      	adds	r7, r0, #0
10009064:	468a      	mov	sl, r1
10009066:	4689      	mov	r9, r1
10009068:	0876      	lsrs	r6, r6, #1
1000906a:	429e      	cmp	r6, r3
1000906c:	dd13      	ble.n	10009096 <__ieee754_asin+0x42>
1000906e:	4bcd      	ldr	r3, [pc, #820]	; (100093a4 <__ieee754_asin+0x350>)
10009070:	469c      	mov	ip, r3
10009072:	4466      	add	r6, ip
10009074:	4306      	orrs	r6, r0
10009076:	d022      	beq.n	100090be <__ieee754_asin+0x6a>
10009078:	1c3a      	adds	r2, r7, #0
1000907a:	4653      	mov	r3, sl
1000907c:	f002 fc1a 	bl	1000b8b4 <__aeabi_dsub>
10009080:	1c0b      	adds	r3, r1, #0
10009082:	1c02      	adds	r2, r0, #0
10009084:	f001 fd3e 	bl	1000ab04 <__aeabi_ddiv>
10009088:	1c03      	adds	r3, r0, #0
1000908a:	1c18      	adds	r0, r3, #0
1000908c:	b009      	add	sp, #36	; 0x24
1000908e:	bc0c      	pop	{r2, r3}
10009090:	4691      	mov	r9, r2
10009092:	469a      	mov	sl, r3
10009094:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009096:	4bc4      	ldr	r3, [pc, #784]	; (100093a8 <__ieee754_asin+0x354>)
10009098:	429e      	cmp	r6, r3
1000909a:	dc24      	bgt.n	100090e6 <__ieee754_asin+0x92>
1000909c:	4bc3      	ldr	r3, [pc, #780]	; (100093ac <__ieee754_asin+0x358>)
1000909e:	429e      	cmp	r6, r3
100090a0:	dd00      	ble.n	100090a4 <__ieee754_asin+0x50>
100090a2:	e10f      	b.n	100092c4 <__ieee754_asin+0x270>
100090a4:	4ac2      	ldr	r2, [pc, #776]	; (100093b0 <__ieee754_asin+0x35c>)
100090a6:	4bc3      	ldr	r3, [pc, #780]	; (100093b4 <__ieee754_asin+0x360>)
100090a8:	f001 fa04 	bl	1000a4b4 <__aeabi_dadd>
100090ac:	2200      	movs	r2, #0
100090ae:	4bc2      	ldr	r3, [pc, #776]	; (100093b8 <__ieee754_asin+0x364>)
100090b0:	f000 fb14 	bl	100096dc <__aeabi_dcmpgt>
100090b4:	2800      	cmp	r0, #0
100090b6:	d016      	beq.n	100090e6 <__ieee754_asin+0x92>
100090b8:	1c3b      	adds	r3, r7, #0
100090ba:	4651      	mov	r1, sl
100090bc:	e7e5      	b.n	1000908a <__ieee754_asin+0x36>
100090be:	4abf      	ldr	r2, [pc, #764]	; (100093bc <__ieee754_asin+0x368>)
100090c0:	4bbf      	ldr	r3, [pc, #764]	; (100093c0 <__ieee754_asin+0x36c>)
100090c2:	f002 f95d 	bl	1000b380 <__aeabi_dmul>
100090c6:	4abf      	ldr	r2, [pc, #764]	; (100093c4 <__ieee754_asin+0x370>)
100090c8:	1c04      	adds	r4, r0, #0
100090ca:	1c0d      	adds	r5, r1, #0
100090cc:	4bbe      	ldr	r3, [pc, #760]	; (100093c8 <__ieee754_asin+0x374>)
100090ce:	1c38      	adds	r0, r7, #0
100090d0:	4651      	mov	r1, sl
100090d2:	f002 f955 	bl	1000b380 <__aeabi_dmul>
100090d6:	1c0b      	adds	r3, r1, #0
100090d8:	1c02      	adds	r2, r0, #0
100090da:	1c29      	adds	r1, r5, #0
100090dc:	1c20      	adds	r0, r4, #0
100090de:	f001 f9e9 	bl	1000a4b4 <__aeabi_dadd>
100090e2:	1c03      	adds	r3, r0, #0
100090e4:	e7d1      	b.n	1000908a <__ieee754_asin+0x36>
100090e6:	1c38      	adds	r0, r7, #0
100090e8:	4651      	mov	r1, sl
100090ea:	f000 fa93 	bl	10009614 <fabs>
100090ee:	1c02      	adds	r2, r0, #0
100090f0:	1c0b      	adds	r3, r1, #0
100090f2:	2000      	movs	r0, #0
100090f4:	49b0      	ldr	r1, [pc, #704]	; (100093b8 <__ieee754_asin+0x364>)
100090f6:	f002 fbdd 	bl	1000b8b4 <__aeabi_dsub>
100090fa:	2200      	movs	r2, #0
100090fc:	4bb3      	ldr	r3, [pc, #716]	; (100093cc <__ieee754_asin+0x378>)
100090fe:	f002 f93f 	bl	1000b380 <__aeabi_dmul>
10009102:	1c04      	adds	r4, r0, #0
10009104:	1c0d      	adds	r5, r1, #0
10009106:	4ab2      	ldr	r2, [pc, #712]	; (100093d0 <__ieee754_asin+0x37c>)
10009108:	4bb2      	ldr	r3, [pc, #712]	; (100093d4 <__ieee754_asin+0x380>)
1000910a:	f002 f939 	bl	1000b380 <__aeabi_dmul>
1000910e:	4ab2      	ldr	r2, [pc, #712]	; (100093d8 <__ieee754_asin+0x384>)
10009110:	4bb2      	ldr	r3, [pc, #712]	; (100093dc <__ieee754_asin+0x388>)
10009112:	f001 f9cf 	bl	1000a4b4 <__aeabi_dadd>
10009116:	1c22      	adds	r2, r4, #0
10009118:	1c2b      	adds	r3, r5, #0
1000911a:	f002 f931 	bl	1000b380 <__aeabi_dmul>
1000911e:	4ab0      	ldr	r2, [pc, #704]	; (100093e0 <__ieee754_asin+0x38c>)
10009120:	4bb0      	ldr	r3, [pc, #704]	; (100093e4 <__ieee754_asin+0x390>)
10009122:	f002 fbc7 	bl	1000b8b4 <__aeabi_dsub>
10009126:	1c22      	adds	r2, r4, #0
10009128:	1c2b      	adds	r3, r5, #0
1000912a:	f002 f929 	bl	1000b380 <__aeabi_dmul>
1000912e:	4aae      	ldr	r2, [pc, #696]	; (100093e8 <__ieee754_asin+0x394>)
10009130:	4bae      	ldr	r3, [pc, #696]	; (100093ec <__ieee754_asin+0x398>)
10009132:	f001 f9bf 	bl	1000a4b4 <__aeabi_dadd>
10009136:	1c22      	adds	r2, r4, #0
10009138:	1c2b      	adds	r3, r5, #0
1000913a:	f002 f921 	bl	1000b380 <__aeabi_dmul>
1000913e:	4aac      	ldr	r2, [pc, #688]	; (100093f0 <__ieee754_asin+0x39c>)
10009140:	4bac      	ldr	r3, [pc, #688]	; (100093f4 <__ieee754_asin+0x3a0>)
10009142:	f002 fbb7 	bl	1000b8b4 <__aeabi_dsub>
10009146:	1c22      	adds	r2, r4, #0
10009148:	1c2b      	adds	r3, r5, #0
1000914a:	f002 f919 	bl	1000b380 <__aeabi_dmul>
1000914e:	4aaa      	ldr	r2, [pc, #680]	; (100093f8 <__ieee754_asin+0x3a4>)
10009150:	4baa      	ldr	r3, [pc, #680]	; (100093fc <__ieee754_asin+0x3a8>)
10009152:	f001 f9af 	bl	1000a4b4 <__aeabi_dadd>
10009156:	1c22      	adds	r2, r4, #0
10009158:	1c2b      	adds	r3, r5, #0
1000915a:	f002 f911 	bl	1000b380 <__aeabi_dmul>
1000915e:	4aa8      	ldr	r2, [pc, #672]	; (10009400 <__ieee754_asin+0x3ac>)
10009160:	9002      	str	r0, [sp, #8]
10009162:	9103      	str	r1, [sp, #12]
10009164:	4ba7      	ldr	r3, [pc, #668]	; (10009404 <__ieee754_asin+0x3b0>)
10009166:	1c20      	adds	r0, r4, #0
10009168:	1c29      	adds	r1, r5, #0
1000916a:	f002 f909 	bl	1000b380 <__aeabi_dmul>
1000916e:	4aa6      	ldr	r2, [pc, #664]	; (10009408 <__ieee754_asin+0x3b4>)
10009170:	4ba6      	ldr	r3, [pc, #664]	; (1000940c <__ieee754_asin+0x3b8>)
10009172:	f002 fb9f 	bl	1000b8b4 <__aeabi_dsub>
10009176:	1c22      	adds	r2, r4, #0
10009178:	1c2b      	adds	r3, r5, #0
1000917a:	f002 f901 	bl	1000b380 <__aeabi_dmul>
1000917e:	4aa4      	ldr	r2, [pc, #656]	; (10009410 <__ieee754_asin+0x3bc>)
10009180:	4ba4      	ldr	r3, [pc, #656]	; (10009414 <__ieee754_asin+0x3c0>)
10009182:	f001 f997 	bl	1000a4b4 <__aeabi_dadd>
10009186:	1c22      	adds	r2, r4, #0
10009188:	1c2b      	adds	r3, r5, #0
1000918a:	f002 f8f9 	bl	1000b380 <__aeabi_dmul>
1000918e:	4aa2      	ldr	r2, [pc, #648]	; (10009418 <__ieee754_asin+0x3c4>)
10009190:	4ba2      	ldr	r3, [pc, #648]	; (1000941c <__ieee754_asin+0x3c8>)
10009192:	f002 fb8f 	bl	1000b8b4 <__aeabi_dsub>
10009196:	1c22      	adds	r2, r4, #0
10009198:	1c2b      	adds	r3, r5, #0
1000919a:	f002 f8f1 	bl	1000b380 <__aeabi_dmul>
1000919e:	4b86      	ldr	r3, [pc, #536]	; (100093b8 <__ieee754_asin+0x364>)
100091a0:	2200      	movs	r2, #0
100091a2:	f001 f987 	bl	1000a4b4 <__aeabi_dadd>
100091a6:	9004      	str	r0, [sp, #16]
100091a8:	9105      	str	r1, [sp, #20]
100091aa:	1c20      	adds	r0, r4, #0
100091ac:	1c29      	adds	r1, r5, #0
100091ae:	f000 f93b 	bl	10009428 <__ieee754_sqrt>
100091b2:	4b9b      	ldr	r3, [pc, #620]	; (10009420 <__ieee754_asin+0x3cc>)
100091b4:	9000      	str	r0, [sp, #0]
100091b6:	9101      	str	r1, [sp, #4]
100091b8:	429e      	cmp	r6, r3
100091ba:	dc62      	bgt.n	10009282 <__ieee754_asin+0x22e>
100091bc:	9800      	ldr	r0, [sp, #0]
100091be:	9901      	ldr	r1, [sp, #4]
100091c0:	2200      	movs	r2, #0
100091c2:	1c0b      	adds	r3, r1, #0
100091c4:	1c16      	adds	r6, r2, #0
100091c6:	1c02      	adds	r2, r0, #0
100091c8:	1c0f      	adds	r7, r1, #0
100091ca:	f001 f973 	bl	1000a4b4 <__aeabi_dadd>
100091ce:	9a04      	ldr	r2, [sp, #16]
100091d0:	9b05      	ldr	r3, [sp, #20]
100091d2:	9006      	str	r0, [sp, #24]
100091d4:	9107      	str	r1, [sp, #28]
100091d6:	9802      	ldr	r0, [sp, #8]
100091d8:	9903      	ldr	r1, [sp, #12]
100091da:	f001 fc93 	bl	1000ab04 <__aeabi_ddiv>
100091de:	1c02      	adds	r2, r0, #0
100091e0:	1c0b      	adds	r3, r1, #0
100091e2:	9806      	ldr	r0, [sp, #24]
100091e4:	9907      	ldr	r1, [sp, #28]
100091e6:	f002 f8cb 	bl	1000b380 <__aeabi_dmul>
100091ea:	1c32      	adds	r2, r6, #0
100091ec:	9002      	str	r0, [sp, #8]
100091ee:	9103      	str	r1, [sp, #12]
100091f0:	1c3b      	adds	r3, r7, #0
100091f2:	1c30      	adds	r0, r6, #0
100091f4:	1c39      	adds	r1, r7, #0
100091f6:	f002 f8c3 	bl	1000b380 <__aeabi_dmul>
100091fa:	1c02      	adds	r2, r0, #0
100091fc:	1c0b      	adds	r3, r1, #0
100091fe:	1c20      	adds	r0, r4, #0
10009200:	1c29      	adds	r1, r5, #0
10009202:	f002 fb57 	bl	1000b8b4 <__aeabi_dsub>
10009206:	1c32      	adds	r2, r6, #0
10009208:	1c04      	adds	r4, r0, #0
1000920a:	1c0d      	adds	r5, r1, #0
1000920c:	9800      	ldr	r0, [sp, #0]
1000920e:	9901      	ldr	r1, [sp, #4]
10009210:	1c3b      	adds	r3, r7, #0
10009212:	f001 f94f 	bl	1000a4b4 <__aeabi_dadd>
10009216:	1c02      	adds	r2, r0, #0
10009218:	1c0b      	adds	r3, r1, #0
1000921a:	1c20      	adds	r0, r4, #0
1000921c:	1c29      	adds	r1, r5, #0
1000921e:	f001 fc71 	bl	1000ab04 <__aeabi_ddiv>
10009222:	1c02      	adds	r2, r0, #0
10009224:	1c0b      	adds	r3, r1, #0
10009226:	f001 f945 	bl	1000a4b4 <__aeabi_dadd>
1000922a:	1c02      	adds	r2, r0, #0
1000922c:	1c0b      	adds	r3, r1, #0
1000922e:	4865      	ldr	r0, [pc, #404]	; (100093c4 <__ieee754_asin+0x370>)
10009230:	4965      	ldr	r1, [pc, #404]	; (100093c8 <__ieee754_asin+0x374>)
10009232:	f002 fb3f 	bl	1000b8b4 <__aeabi_dsub>
10009236:	1c02      	adds	r2, r0, #0
10009238:	1c0b      	adds	r3, r1, #0
1000923a:	9802      	ldr	r0, [sp, #8]
1000923c:	9903      	ldr	r1, [sp, #12]
1000923e:	f002 fb39 	bl	1000b8b4 <__aeabi_dsub>
10009242:	1c32      	adds	r2, r6, #0
10009244:	1c04      	adds	r4, r0, #0
10009246:	1c0d      	adds	r5, r1, #0
10009248:	1c3b      	adds	r3, r7, #0
1000924a:	1c30      	adds	r0, r6, #0
1000924c:	1c39      	adds	r1, r7, #0
1000924e:	f001 f931 	bl	1000a4b4 <__aeabi_dadd>
10009252:	1c02      	adds	r2, r0, #0
10009254:	1c0b      	adds	r3, r1, #0
10009256:	4859      	ldr	r0, [pc, #356]	; (100093bc <__ieee754_asin+0x368>)
10009258:	4972      	ldr	r1, [pc, #456]	; (10009424 <__ieee754_asin+0x3d0>)
1000925a:	f002 fb2b 	bl	1000b8b4 <__aeabi_dsub>
1000925e:	1c02      	adds	r2, r0, #0
10009260:	1c0b      	adds	r3, r1, #0
10009262:	1c20      	adds	r0, r4, #0
10009264:	1c29      	adds	r1, r5, #0
10009266:	f002 fb25 	bl	1000b8b4 <__aeabi_dsub>
1000926a:	1c02      	adds	r2, r0, #0
1000926c:	1c0b      	adds	r3, r1, #0
1000926e:	4853      	ldr	r0, [pc, #332]	; (100093bc <__ieee754_asin+0x368>)
10009270:	496c      	ldr	r1, [pc, #432]	; (10009424 <__ieee754_asin+0x3d0>)
10009272:	f002 fb1f 	bl	1000b8b4 <__aeabi_dsub>
10009276:	464b      	mov	r3, r9
10009278:	2b00      	cmp	r3, #0
1000927a:	dc00      	bgt.n	1000927e <__ieee754_asin+0x22a>
1000927c:	e08a      	b.n	10009394 <__ieee754_asin+0x340>
1000927e:	1c03      	adds	r3, r0, #0
10009280:	e703      	b.n	1000908a <__ieee754_asin+0x36>
10009282:	9a04      	ldr	r2, [sp, #16]
10009284:	9b05      	ldr	r3, [sp, #20]
10009286:	9802      	ldr	r0, [sp, #8]
10009288:	9903      	ldr	r1, [sp, #12]
1000928a:	f001 fc3b 	bl	1000ab04 <__aeabi_ddiv>
1000928e:	9c00      	ldr	r4, [sp, #0]
10009290:	9d01      	ldr	r5, [sp, #4]
10009292:	1c02      	adds	r2, r0, #0
10009294:	1c0b      	adds	r3, r1, #0
10009296:	1c20      	adds	r0, r4, #0
10009298:	1c29      	adds	r1, r5, #0
1000929a:	f002 f871 	bl	1000b380 <__aeabi_dmul>
1000929e:	1c22      	adds	r2, r4, #0
100092a0:	1c2b      	adds	r3, r5, #0
100092a2:	f001 f907 	bl	1000a4b4 <__aeabi_dadd>
100092a6:	1c02      	adds	r2, r0, #0
100092a8:	1c0b      	adds	r3, r1, #0
100092aa:	f001 f903 	bl	1000a4b4 <__aeabi_dadd>
100092ae:	4a45      	ldr	r2, [pc, #276]	; (100093c4 <__ieee754_asin+0x370>)
100092b0:	4b45      	ldr	r3, [pc, #276]	; (100093c8 <__ieee754_asin+0x374>)
100092b2:	f002 faff 	bl	1000b8b4 <__aeabi_dsub>
100092b6:	1c02      	adds	r2, r0, #0
100092b8:	1c0b      	adds	r3, r1, #0
100092ba:	4840      	ldr	r0, [pc, #256]	; (100093bc <__ieee754_asin+0x368>)
100092bc:	4940      	ldr	r1, [pc, #256]	; (100093c0 <__ieee754_asin+0x36c>)
100092be:	f002 faf9 	bl	1000b8b4 <__aeabi_dsub>
100092c2:	e7d8      	b.n	10009276 <__ieee754_asin+0x222>
100092c4:	1c3a      	adds	r2, r7, #0
100092c6:	4653      	mov	r3, sl
100092c8:	f002 f85a 	bl	1000b380 <__aeabi_dmul>
100092cc:	1c04      	adds	r4, r0, #0
100092ce:	1c0d      	adds	r5, r1, #0
100092d0:	4a3f      	ldr	r2, [pc, #252]	; (100093d0 <__ieee754_asin+0x37c>)
100092d2:	4b40      	ldr	r3, [pc, #256]	; (100093d4 <__ieee754_asin+0x380>)
100092d4:	f002 f854 	bl	1000b380 <__aeabi_dmul>
100092d8:	4a3f      	ldr	r2, [pc, #252]	; (100093d8 <__ieee754_asin+0x384>)
100092da:	4b40      	ldr	r3, [pc, #256]	; (100093dc <__ieee754_asin+0x388>)
100092dc:	f001 f8ea 	bl	1000a4b4 <__aeabi_dadd>
100092e0:	1c22      	adds	r2, r4, #0
100092e2:	1c2b      	adds	r3, r5, #0
100092e4:	f002 f84c 	bl	1000b380 <__aeabi_dmul>
100092e8:	4a3d      	ldr	r2, [pc, #244]	; (100093e0 <__ieee754_asin+0x38c>)
100092ea:	4b3e      	ldr	r3, [pc, #248]	; (100093e4 <__ieee754_asin+0x390>)
100092ec:	f002 fae2 	bl	1000b8b4 <__aeabi_dsub>
100092f0:	1c22      	adds	r2, r4, #0
100092f2:	1c2b      	adds	r3, r5, #0
100092f4:	f002 f844 	bl	1000b380 <__aeabi_dmul>
100092f8:	4a3b      	ldr	r2, [pc, #236]	; (100093e8 <__ieee754_asin+0x394>)
100092fa:	4b3c      	ldr	r3, [pc, #240]	; (100093ec <__ieee754_asin+0x398>)
100092fc:	f001 f8da 	bl	1000a4b4 <__aeabi_dadd>
10009300:	1c22      	adds	r2, r4, #0
10009302:	1c2b      	adds	r3, r5, #0
10009304:	f002 f83c 	bl	1000b380 <__aeabi_dmul>
10009308:	4a39      	ldr	r2, [pc, #228]	; (100093f0 <__ieee754_asin+0x39c>)
1000930a:	4b3a      	ldr	r3, [pc, #232]	; (100093f4 <__ieee754_asin+0x3a0>)
1000930c:	f002 fad2 	bl	1000b8b4 <__aeabi_dsub>
10009310:	1c22      	adds	r2, r4, #0
10009312:	1c2b      	adds	r3, r5, #0
10009314:	f002 f834 	bl	1000b380 <__aeabi_dmul>
10009318:	4a37      	ldr	r2, [pc, #220]	; (100093f8 <__ieee754_asin+0x3a4>)
1000931a:	4b38      	ldr	r3, [pc, #224]	; (100093fc <__ieee754_asin+0x3a8>)
1000931c:	f001 f8ca 	bl	1000a4b4 <__aeabi_dadd>
10009320:	1c22      	adds	r2, r4, #0
10009322:	1c2b      	adds	r3, r5, #0
10009324:	f002 f82c 	bl	1000b380 <__aeabi_dmul>
10009328:	4a35      	ldr	r2, [pc, #212]	; (10009400 <__ieee754_asin+0x3ac>)
1000932a:	9000      	str	r0, [sp, #0]
1000932c:	9101      	str	r1, [sp, #4]
1000932e:	4b35      	ldr	r3, [pc, #212]	; (10009404 <__ieee754_asin+0x3b0>)
10009330:	1c20      	adds	r0, r4, #0
10009332:	1c29      	adds	r1, r5, #0
10009334:	f002 f824 	bl	1000b380 <__aeabi_dmul>
10009338:	4a33      	ldr	r2, [pc, #204]	; (10009408 <__ieee754_asin+0x3b4>)
1000933a:	4b34      	ldr	r3, [pc, #208]	; (1000940c <__ieee754_asin+0x3b8>)
1000933c:	f002 faba 	bl	1000b8b4 <__aeabi_dsub>
10009340:	1c22      	adds	r2, r4, #0
10009342:	1c2b      	adds	r3, r5, #0
10009344:	f002 f81c 	bl	1000b380 <__aeabi_dmul>
10009348:	4a31      	ldr	r2, [pc, #196]	; (10009410 <__ieee754_asin+0x3bc>)
1000934a:	4b32      	ldr	r3, [pc, #200]	; (10009414 <__ieee754_asin+0x3c0>)
1000934c:	f001 f8b2 	bl	1000a4b4 <__aeabi_dadd>
10009350:	1c22      	adds	r2, r4, #0
10009352:	1c2b      	adds	r3, r5, #0
10009354:	f002 f814 	bl	1000b380 <__aeabi_dmul>
10009358:	4a2f      	ldr	r2, [pc, #188]	; (10009418 <__ieee754_asin+0x3c4>)
1000935a:	4b30      	ldr	r3, [pc, #192]	; (1000941c <__ieee754_asin+0x3c8>)
1000935c:	f002 faaa 	bl	1000b8b4 <__aeabi_dsub>
10009360:	1c22      	adds	r2, r4, #0
10009362:	1c2b      	adds	r3, r5, #0
10009364:	f002 f80c 	bl	1000b380 <__aeabi_dmul>
10009368:	2200      	movs	r2, #0
1000936a:	4b13      	ldr	r3, [pc, #76]	; (100093b8 <__ieee754_asin+0x364>)
1000936c:	f001 f8a2 	bl	1000a4b4 <__aeabi_dadd>
10009370:	1c02      	adds	r2, r0, #0
10009372:	1c0b      	adds	r3, r1, #0
10009374:	9800      	ldr	r0, [sp, #0]
10009376:	9901      	ldr	r1, [sp, #4]
10009378:	f001 fbc4 	bl	1000ab04 <__aeabi_ddiv>
1000937c:	1c02      	adds	r2, r0, #0
1000937e:	1c0b      	adds	r3, r1, #0
10009380:	1c38      	adds	r0, r7, #0
10009382:	4651      	mov	r1, sl
10009384:	f001 fffc 	bl	1000b380 <__aeabi_dmul>
10009388:	4653      	mov	r3, sl
1000938a:	1c3a      	adds	r2, r7, #0
1000938c:	f001 f892 	bl	1000a4b4 <__aeabi_dadd>
10009390:	1c03      	adds	r3, r0, #0
10009392:	e67a      	b.n	1000908a <__ieee754_asin+0x36>
10009394:	2280      	movs	r2, #128	; 0x80
10009396:	0612      	lsls	r2, r2, #24
10009398:	4694      	mov	ip, r2
1000939a:	1c03      	adds	r3, r0, #0
1000939c:	4461      	add	r1, ip
1000939e:	e674      	b.n	1000908a <__ieee754_asin+0x36>
100093a0:	3fefffff 	.word	0x3fefffff
100093a4:	c0100000 	.word	0xc0100000
100093a8:	3fdfffff 	.word	0x3fdfffff
100093ac:	3e3fffff 	.word	0x3e3fffff
100093b0:	8800759c 	.word	0x8800759c
100093b4:	7e37e43c 	.word	0x7e37e43c
100093b8:	3ff00000 	.word	0x3ff00000
100093bc:	54442d18 	.word	0x54442d18
100093c0:	3ff921fb 	.word	0x3ff921fb
100093c4:	33145c07 	.word	0x33145c07
100093c8:	3c91a626 	.word	0x3c91a626
100093cc:	3fe00000 	.word	0x3fe00000
100093d0:	0dfdf709 	.word	0x0dfdf709
100093d4:	3f023de1 	.word	0x3f023de1
100093d8:	7501b288 	.word	0x7501b288
100093dc:	3f49efe0 	.word	0x3f49efe0
100093e0:	b5688f3b 	.word	0xb5688f3b
100093e4:	3fa48228 	.word	0x3fa48228
100093e8:	0e884455 	.word	0x0e884455
100093ec:	3fc9c155 	.word	0x3fc9c155
100093f0:	03eb6f7d 	.word	0x03eb6f7d
100093f4:	3fd4d612 	.word	0x3fd4d612
100093f8:	55555555 	.word	0x55555555
100093fc:	3fc55555 	.word	0x3fc55555
10009400:	b12e9282 	.word	0xb12e9282
10009404:	3fb3b8c5 	.word	0x3fb3b8c5
10009408:	1b8d0159 	.word	0x1b8d0159
1000940c:	3fe6066c 	.word	0x3fe6066c
10009410:	9c598ac8 	.word	0x9c598ac8
10009414:	40002ae5 	.word	0x40002ae5
10009418:	1c8a2d4b 	.word	0x1c8a2d4b
1000941c:	40033a27 	.word	0x40033a27
10009420:	3fef3332 	.word	0x3fef3332
10009424:	3fe921fb 	.word	0x3fe921fb

10009428 <__ieee754_sqrt>:
10009428:	b5f0      	push	{r4, r5, r6, r7, lr}
1000942a:	4656      	mov	r6, sl
1000942c:	464d      	mov	r5, r9
1000942e:	4644      	mov	r4, r8
10009430:	465f      	mov	r7, fp
10009432:	4b75      	ldr	r3, [pc, #468]	; (10009608 <__ieee754_sqrt+0x1e0>)
10009434:	b4f0      	push	{r4, r5, r6, r7}
10009436:	1c0a      	adds	r2, r1, #0
10009438:	1c0e      	adds	r6, r1, #0
1000943a:	1c19      	adds	r1, r3, #0
1000943c:	b083      	sub	sp, #12
1000943e:	1c05      	adds	r5, r0, #0
10009440:	1c04      	adds	r4, r0, #0
10009442:	4031      	ands	r1, r6
10009444:	4299      	cmp	r1, r3
10009446:	d100      	bne.n	1000944a <__ieee754_sqrt+0x22>
10009448:	e0b7      	b.n	100095ba <__ieee754_sqrt+0x192>
1000944a:	2e00      	cmp	r6, #0
1000944c:	dc00      	bgt.n	10009450 <__ieee754_sqrt+0x28>
1000944e:	e093      	b.n	10009578 <__ieee754_sqrt+0x150>
10009450:	1531      	asrs	r1, r6, #20
10009452:	d100      	bne.n	10009456 <__ieee754_sqrt+0x2e>
10009454:	e0a0      	b.n	10009598 <__ieee754_sqrt+0x170>
10009456:	4b6d      	ldr	r3, [pc, #436]	; (1000960c <__ieee754_sqrt+0x1e4>)
10009458:	0312      	lsls	r2, r2, #12
1000945a:	18ce      	adds	r6, r1, r3
1000945c:	2380      	movs	r3, #128	; 0x80
1000945e:	0b12      	lsrs	r2, r2, #12
10009460:	035b      	lsls	r3, r3, #13
10009462:	431a      	orrs	r2, r3
10009464:	07f3      	lsls	r3, r6, #31
10009466:	d500      	bpl.n	1000946a <__ieee754_sqrt+0x42>
10009468:	e077      	b.n	1000955a <__ieee754_sqrt+0x132>
1000946a:	1073      	asrs	r3, r6, #1
1000946c:	0052      	lsls	r2, r2, #1
1000946e:	4698      	mov	r8, r3
10009470:	0fe3      	lsrs	r3, r4, #31
10009472:	18d3      	adds	r3, r2, r3
10009474:	2280      	movs	r2, #128	; 0x80
10009476:	2116      	movs	r1, #22
10009478:	2700      	movs	r7, #0
1000947a:	2500      	movs	r5, #0
1000947c:	0064      	lsls	r4, r4, #1
1000947e:	0392      	lsls	r2, r2, #14
10009480:	18a8      	adds	r0, r5, r2
10009482:	4298      	cmp	r0, r3
10009484:	dc02      	bgt.n	1000948c <__ieee754_sqrt+0x64>
10009486:	1885      	adds	r5, r0, r2
10009488:	1a1b      	subs	r3, r3, r0
1000948a:	18bf      	adds	r7, r7, r2
1000948c:	0fe0      	lsrs	r0, r4, #31
1000948e:	005b      	lsls	r3, r3, #1
10009490:	3901      	subs	r1, #1
10009492:	181b      	adds	r3, r3, r0
10009494:	0064      	lsls	r4, r4, #1
10009496:	0852      	lsrs	r2, r2, #1
10009498:	2900      	cmp	r1, #0
1000949a:	d1f1      	bne.n	10009480 <__ieee754_sqrt+0x58>
1000949c:	2200      	movs	r2, #0
1000949e:	9201      	str	r2, [sp, #4]
100094a0:	4694      	mov	ip, r2
100094a2:	2280      	movs	r2, #128	; 0x80
100094a4:	0612      	lsls	r2, r2, #24
100094a6:	2020      	movs	r0, #32
100094a8:	4692      	mov	sl, r2
100094aa:	e009      	b.n	100094c0 <__ieee754_sqrt+0x98>
100094ac:	42ab      	cmp	r3, r5
100094ae:	d047      	beq.n	10009540 <__ieee754_sqrt+0x118>
100094b0:	0fe1      	lsrs	r1, r4, #31
100094b2:	005b      	lsls	r3, r3, #1
100094b4:	3801      	subs	r0, #1
100094b6:	185b      	adds	r3, r3, r1
100094b8:	0064      	lsls	r4, r4, #1
100094ba:	0852      	lsrs	r2, r2, #1
100094bc:	2800      	cmp	r0, #0
100094be:	d01e      	beq.n	100094fe <__ieee754_sqrt+0xd6>
100094c0:	4661      	mov	r1, ip
100094c2:	1889      	adds	r1, r1, r2
100094c4:	429d      	cmp	r5, r3
100094c6:	daf1      	bge.n	100094ac <__ieee754_sqrt+0x84>
100094c8:	188e      	adds	r6, r1, r2
100094ca:	46b4      	mov	ip, r6
100094cc:	0fce      	lsrs	r6, r1, #31
100094ce:	07f6      	lsls	r6, r6, #31
100094d0:	46a9      	mov	r9, r5
100094d2:	4556      	cmp	r6, sl
100094d4:	d02e      	beq.n	10009534 <__ieee754_sqrt+0x10c>
100094d6:	1b5b      	subs	r3, r3, r5
100094d8:	428c      	cmp	r4, r1
100094da:	41ad      	sbcs	r5, r5
100094dc:	426d      	negs	r5, r5
100094de:	1b5b      	subs	r3, r3, r5
100094e0:	1a64      	subs	r4, r4, r1
100094e2:	9901      	ldr	r1, [sp, #4]
100094e4:	005b      	lsls	r3, r3, #1
100094e6:	468b      	mov	fp, r1
100094e8:	4493      	add	fp, r2
100094ea:	4659      	mov	r1, fp
100094ec:	3801      	subs	r0, #1
100094ee:	9101      	str	r1, [sp, #4]
100094f0:	0fe1      	lsrs	r1, r4, #31
100094f2:	464d      	mov	r5, r9
100094f4:	185b      	adds	r3, r3, r1
100094f6:	0064      	lsls	r4, r4, #1
100094f8:	0852      	lsrs	r2, r2, #1
100094fa:	2800      	cmp	r0, #0
100094fc:	d1e0      	bne.n	100094c0 <__ieee754_sqrt+0x98>
100094fe:	4323      	orrs	r3, r4
10009500:	d130      	bne.n	10009564 <__ieee754_sqrt+0x13c>
10009502:	9b01      	ldr	r3, [sp, #4]
10009504:	085b      	lsrs	r3, r3, #1
10009506:	4942      	ldr	r1, [pc, #264]	; (10009610 <__ieee754_sqrt+0x1e8>)
10009508:	107a      	asrs	r2, r7, #1
1000950a:	468c      	mov	ip, r1
1000950c:	4462      	add	r2, ip
1000950e:	07f9      	lsls	r1, r7, #31
10009510:	d502      	bpl.n	10009518 <__ieee754_sqrt+0xf0>
10009512:	2180      	movs	r1, #128	; 0x80
10009514:	0609      	lsls	r1, r1, #24
10009516:	430b      	orrs	r3, r1
10009518:	4641      	mov	r1, r8
1000951a:	050e      	lsls	r6, r1, #20
1000951c:	18b1      	adds	r1, r6, r2
1000951e:	1c1d      	adds	r5, r3, #0
10009520:	1c0e      	adds	r6, r1, #0
10009522:	1c28      	adds	r0, r5, #0
10009524:	1c31      	adds	r1, r6, #0
10009526:	b003      	add	sp, #12
10009528:	bc3c      	pop	{r2, r3, r4, r5}
1000952a:	4690      	mov	r8, r2
1000952c:	4699      	mov	r9, r3
1000952e:	46a2      	mov	sl, r4
10009530:	46ab      	mov	fp, r5
10009532:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009534:	4666      	mov	r6, ip
10009536:	2e00      	cmp	r6, #0
10009538:	dbcd      	blt.n	100094d6 <__ieee754_sqrt+0xae>
1000953a:	1c6e      	adds	r6, r5, #1
1000953c:	46b1      	mov	r9, r6
1000953e:	e7ca      	b.n	100094d6 <__ieee754_sqrt+0xae>
10009540:	42a1      	cmp	r1, r4
10009542:	d808      	bhi.n	10009556 <__ieee754_sqrt+0x12e>
10009544:	188e      	adds	r6, r1, r2
10009546:	46b4      	mov	ip, r6
10009548:	0fce      	lsrs	r6, r1, #31
1000954a:	07f6      	lsls	r6, r6, #31
1000954c:	4556      	cmp	r6, sl
1000954e:	d041      	beq.n	100095d4 <__ieee754_sqrt+0x1ac>
10009550:	4699      	mov	r9, r3
10009552:	2300      	movs	r3, #0
10009554:	e7c4      	b.n	100094e0 <__ieee754_sqrt+0xb8>
10009556:	1c1d      	adds	r5, r3, #0
10009558:	e7aa      	b.n	100094b0 <__ieee754_sqrt+0x88>
1000955a:	0fe3      	lsrs	r3, r4, #31
1000955c:	0052      	lsls	r2, r2, #1
1000955e:	18d2      	adds	r2, r2, r3
10009560:	0064      	lsls	r4, r4, #1
10009562:	e782      	b.n	1000946a <__ieee754_sqrt+0x42>
10009564:	9b01      	ldr	r3, [sp, #4]
10009566:	3301      	adds	r3, #1
10009568:	d03a      	beq.n	100095e0 <__ieee754_sqrt+0x1b8>
1000956a:	9a01      	ldr	r2, [sp, #4]
1000956c:	2301      	movs	r3, #1
1000956e:	4694      	mov	ip, r2
10009570:	4013      	ands	r3, r2
10009572:	4463      	add	r3, ip
10009574:	085b      	lsrs	r3, r3, #1
10009576:	e7c6      	b.n	10009506 <__ieee754_sqrt+0xde>
10009578:	0073      	lsls	r3, r6, #1
1000957a:	085b      	lsrs	r3, r3, #1
1000957c:	4303      	orrs	r3, r0
1000957e:	d0d0      	beq.n	10009522 <__ieee754_sqrt+0xfa>
10009580:	2100      	movs	r1, #0
10009582:	2e00      	cmp	r6, #0
10009584:	d133      	bne.n	100095ee <__ieee754_sqrt+0x1c6>
10009586:	0ae2      	lsrs	r2, r4, #11
10009588:	3915      	subs	r1, #21
1000958a:	0564      	lsls	r4, r4, #21
1000958c:	2a00      	cmp	r2, #0
1000958e:	d0fa      	beq.n	10009586 <__ieee754_sqrt+0x15e>
10009590:	2380      	movs	r3, #128	; 0x80
10009592:	035b      	lsls	r3, r3, #13
10009594:	421a      	tst	r2, r3
10009596:	d126      	bne.n	100095e6 <__ieee754_sqrt+0x1be>
10009598:	2080      	movs	r0, #128	; 0x80
1000959a:	2300      	movs	r3, #0
1000959c:	0340      	lsls	r0, r0, #13
1000959e:	0052      	lsls	r2, r2, #1
100095a0:	3301      	adds	r3, #1
100095a2:	4202      	tst	r2, r0
100095a4:	d0fb      	beq.n	1000959e <__ieee754_sqrt+0x176>
100095a6:	2501      	movs	r5, #1
100095a8:	2020      	movs	r0, #32
100095aa:	1aed      	subs	r5, r5, r3
100095ac:	1ac0      	subs	r0, r0, r3
100095ae:	1949      	adds	r1, r1, r5
100095b0:	1c25      	adds	r5, r4, #0
100095b2:	40c5      	lsrs	r5, r0
100095b4:	409c      	lsls	r4, r3
100095b6:	432a      	orrs	r2, r5
100095b8:	e74d      	b.n	10009456 <__ieee754_sqrt+0x2e>
100095ba:	1c2a      	adds	r2, r5, #0
100095bc:	1c33      	adds	r3, r6, #0
100095be:	1c28      	adds	r0, r5, #0
100095c0:	1c31      	adds	r1, r6, #0
100095c2:	f001 fedd 	bl	1000b380 <__aeabi_dmul>
100095c6:	1c2a      	adds	r2, r5, #0
100095c8:	1c33      	adds	r3, r6, #0
100095ca:	f000 ff73 	bl	1000a4b4 <__aeabi_dadd>
100095ce:	1c05      	adds	r5, r0, #0
100095d0:	1c0e      	adds	r6, r1, #0
100095d2:	e7a6      	b.n	10009522 <__ieee754_sqrt+0xfa>
100095d4:	4666      	mov	r6, ip
100095d6:	2e00      	cmp	r6, #0
100095d8:	daaf      	bge.n	1000953a <__ieee754_sqrt+0x112>
100095da:	2300      	movs	r3, #0
100095dc:	46a9      	mov	r9, r5
100095de:	e77f      	b.n	100094e0 <__ieee754_sqrt+0xb8>
100095e0:	3701      	adds	r7, #1
100095e2:	2300      	movs	r3, #0
100095e4:	e78f      	b.n	10009506 <__ieee754_sqrt+0xde>
100095e6:	2020      	movs	r0, #32
100095e8:	2501      	movs	r5, #1
100095ea:	2300      	movs	r3, #0
100095ec:	e7df      	b.n	100095ae <__ieee754_sqrt+0x186>
100095ee:	1c2a      	adds	r2, r5, #0
100095f0:	1c33      	adds	r3, r6, #0
100095f2:	1c28      	adds	r0, r5, #0
100095f4:	1c31      	adds	r1, r6, #0
100095f6:	f002 f95d 	bl	1000b8b4 <__aeabi_dsub>
100095fa:	1c02      	adds	r2, r0, #0
100095fc:	1c0b      	adds	r3, r1, #0
100095fe:	f001 fa81 	bl	1000ab04 <__aeabi_ddiv>
10009602:	1c05      	adds	r5, r0, #0
10009604:	1c0e      	adds	r6, r1, #0
10009606:	e78c      	b.n	10009522 <__ieee754_sqrt+0xfa>
10009608:	7ff00000 	.word	0x7ff00000
1000960c:	fffffc01 	.word	0xfffffc01
10009610:	3fe00000 	.word	0x3fe00000

10009614 <fabs>:
10009614:	0049      	lsls	r1, r1, #1
10009616:	084b      	lsrs	r3, r1, #1
10009618:	1c19      	adds	r1, r3, #0
1000961a:	4770      	bx	lr

1000961c <__fpclassifyd>:
1000961c:	1c0a      	adds	r2, r1, #0
1000961e:	1c03      	adds	r3, r0, #0
10009620:	4302      	orrs	r2, r0
10009622:	b530      	push	{r4, r5, lr}
10009624:	2002      	movs	r0, #2
10009626:	2a00      	cmp	r2, #0
10009628:	d100      	bne.n	1000962c <__fpclassifyd+0x10>
1000962a:	bd30      	pop	{r4, r5, pc}
1000962c:	2280      	movs	r2, #128	; 0x80
1000962e:	0612      	lsls	r2, r2, #24
10009630:	4291      	cmp	r1, r2
10009632:	d016      	beq.n	10009662 <__fpclassifyd+0x46>
10009634:	4a0c      	ldr	r2, [pc, #48]	; (10009668 <__fpclassifyd+0x4c>)
10009636:	2004      	movs	r0, #4
10009638:	188c      	adds	r4, r1, r2
1000963a:	4a0c      	ldr	r2, [pc, #48]	; (1000966c <__fpclassifyd+0x50>)
1000963c:	4294      	cmp	r4, r2
1000963e:	d9f4      	bls.n	1000962a <__fpclassifyd+0xe>
10009640:	4c0b      	ldr	r4, [pc, #44]	; (10009670 <__fpclassifyd+0x54>)
10009642:	190c      	adds	r4, r1, r4
10009644:	4294      	cmp	r4, r2
10009646:	d9f0      	bls.n	1000962a <__fpclassifyd+0xe>
10009648:	4a0a      	ldr	r2, [pc, #40]	; (10009674 <__fpclassifyd+0x58>)
1000964a:	0049      	lsls	r1, r1, #1
1000964c:	0849      	lsrs	r1, r1, #1
1000964e:	2003      	movs	r0, #3
10009650:	4291      	cmp	r1, r2
10009652:	d9ea      	bls.n	1000962a <__fpclassifyd+0xe>
10009654:	4a06      	ldr	r2, [pc, #24]	; (10009670 <__fpclassifyd+0x54>)
10009656:	2000      	movs	r0, #0
10009658:	4291      	cmp	r1, r2
1000965a:	d1e6      	bne.n	1000962a <__fpclassifyd+0xe>
1000965c:	4258      	negs	r0, r3
1000965e:	4158      	adcs	r0, r3
10009660:	e7e3      	b.n	1000962a <__fpclassifyd+0xe>
10009662:	2b00      	cmp	r3, #0
10009664:	d0e1      	beq.n	1000962a <__fpclassifyd+0xe>
10009666:	e7ef      	b.n	10009648 <__fpclassifyd+0x2c>
10009668:	fff00000 	.word	0xfff00000
1000966c:	7fdfffff 	.word	0x7fdfffff
10009670:	7ff00000 	.word	0x7ff00000
10009674:	000fffff 	.word	0x000fffff

10009678 <matherr>:
10009678:	2000      	movs	r0, #0
1000967a:	4770      	bx	lr

1000967c <nan>:
1000967c:	2000      	movs	r0, #0
1000967e:	4901      	ldr	r1, [pc, #4]	; (10009684 <nan+0x8>)
10009680:	4770      	bx	lr
10009682:	46c0      	nop			; (mov r8, r8)
10009684:	7ff80000 	.word	0x7ff80000

10009688 <__aeabi_cdrcmple>:
10009688:	4684      	mov	ip, r0
1000968a:	1c10      	adds	r0, r2, #0
1000968c:	4662      	mov	r2, ip
1000968e:	468c      	mov	ip, r1
10009690:	1c19      	adds	r1, r3, #0
10009692:	4663      	mov	r3, ip
10009694:	e000      	b.n	10009698 <__aeabi_cdcmpeq>
10009696:	46c0      	nop			; (mov r8, r8)

10009698 <__aeabi_cdcmpeq>:
10009698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000969a:	f001 fe0b 	bl	1000b2b4 <__ledf2>
1000969e:	2800      	cmp	r0, #0
100096a0:	d401      	bmi.n	100096a6 <__aeabi_cdcmpeq+0xe>
100096a2:	2100      	movs	r1, #0
100096a4:	42c8      	cmn	r0, r1
100096a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100096a8 <__aeabi_dcmpeq>:
100096a8:	b510      	push	{r4, lr}
100096aa:	f001 fd4f 	bl	1000b14c <__eqdf2>
100096ae:	4240      	negs	r0, r0
100096b0:	3001      	adds	r0, #1
100096b2:	bd10      	pop	{r4, pc}

100096b4 <__aeabi_dcmplt>:
100096b4:	b510      	push	{r4, lr}
100096b6:	f001 fdfd 	bl	1000b2b4 <__ledf2>
100096ba:	2800      	cmp	r0, #0
100096bc:	db01      	blt.n	100096c2 <__aeabi_dcmplt+0xe>
100096be:	2000      	movs	r0, #0
100096c0:	bd10      	pop	{r4, pc}
100096c2:	2001      	movs	r0, #1
100096c4:	bd10      	pop	{r4, pc}
100096c6:	46c0      	nop			; (mov r8, r8)

100096c8 <__aeabi_dcmple>:
100096c8:	b510      	push	{r4, lr}
100096ca:	f001 fdf3 	bl	1000b2b4 <__ledf2>
100096ce:	2800      	cmp	r0, #0
100096d0:	dd01      	ble.n	100096d6 <__aeabi_dcmple+0xe>
100096d2:	2000      	movs	r0, #0
100096d4:	bd10      	pop	{r4, pc}
100096d6:	2001      	movs	r0, #1
100096d8:	bd10      	pop	{r4, pc}
100096da:	46c0      	nop			; (mov r8, r8)

100096dc <__aeabi_dcmpgt>:
100096dc:	b510      	push	{r4, lr}
100096de:	f001 fd79 	bl	1000b1d4 <__gedf2>
100096e2:	2800      	cmp	r0, #0
100096e4:	dc01      	bgt.n	100096ea <__aeabi_dcmpgt+0xe>
100096e6:	2000      	movs	r0, #0
100096e8:	bd10      	pop	{r4, pc}
100096ea:	2001      	movs	r0, #1
100096ec:	bd10      	pop	{r4, pc}
100096ee:	46c0      	nop			; (mov r8, r8)

100096f0 <__aeabi_dcmpge>:
100096f0:	b510      	push	{r4, lr}
100096f2:	f001 fd6f 	bl	1000b1d4 <__gedf2>
100096f6:	2800      	cmp	r0, #0
100096f8:	da01      	bge.n	100096fe <__aeabi_dcmpge+0xe>
100096fa:	2000      	movs	r0, #0
100096fc:	bd10      	pop	{r4, pc}
100096fe:	2001      	movs	r0, #1
10009700:	bd10      	pop	{r4, pc}
10009702:	46c0      	nop			; (mov r8, r8)

10009704 <__aeabi_cfrcmple>:
10009704:	4684      	mov	ip, r0
10009706:	1c08      	adds	r0, r1, #0
10009708:	4661      	mov	r1, ip
1000970a:	e7ff      	b.n	1000970c <__aeabi_cfcmpeq>

1000970c <__aeabi_cfcmpeq>:
1000970c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000970e:	f000 fb73 	bl	10009df8 <__lesf2>
10009712:	2800      	cmp	r0, #0
10009714:	d401      	bmi.n	1000971a <__aeabi_cfcmpeq+0xe>
10009716:	2100      	movs	r1, #0
10009718:	42c8      	cmn	r0, r1
1000971a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000971c <__aeabi_fcmpeq>:
1000971c:	b510      	push	{r4, lr}
1000971e:	f000 faf7 	bl	10009d10 <__eqsf2>
10009722:	4240      	negs	r0, r0
10009724:	3001      	adds	r0, #1
10009726:	bd10      	pop	{r4, pc}

10009728 <__aeabi_fcmplt>:
10009728:	b510      	push	{r4, lr}
1000972a:	f000 fb65 	bl	10009df8 <__lesf2>
1000972e:	2800      	cmp	r0, #0
10009730:	db01      	blt.n	10009736 <__aeabi_fcmplt+0xe>
10009732:	2000      	movs	r0, #0
10009734:	bd10      	pop	{r4, pc}
10009736:	2001      	movs	r0, #1
10009738:	bd10      	pop	{r4, pc}
1000973a:	46c0      	nop			; (mov r8, r8)

1000973c <__aeabi_fcmple>:
1000973c:	b510      	push	{r4, lr}
1000973e:	f000 fb5b 	bl	10009df8 <__lesf2>
10009742:	2800      	cmp	r0, #0
10009744:	dd01      	ble.n	1000974a <__aeabi_fcmple+0xe>
10009746:	2000      	movs	r0, #0
10009748:	bd10      	pop	{r4, pc}
1000974a:	2001      	movs	r0, #1
1000974c:	bd10      	pop	{r4, pc}
1000974e:	46c0      	nop			; (mov r8, r8)

10009750 <__aeabi_fcmpgt>:
10009750:	b510      	push	{r4, lr}
10009752:	f000 fb07 	bl	10009d64 <__gesf2>
10009756:	2800      	cmp	r0, #0
10009758:	dc01      	bgt.n	1000975e <__aeabi_fcmpgt+0xe>
1000975a:	2000      	movs	r0, #0
1000975c:	bd10      	pop	{r4, pc}
1000975e:	2001      	movs	r0, #1
10009760:	bd10      	pop	{r4, pc}
10009762:	46c0      	nop			; (mov r8, r8)

10009764 <__aeabi_fcmpge>:
10009764:	b510      	push	{r4, lr}
10009766:	f000 fafd 	bl	10009d64 <__gesf2>
1000976a:	2800      	cmp	r0, #0
1000976c:	da01      	bge.n	10009772 <__aeabi_fcmpge+0xe>
1000976e:	2000      	movs	r0, #0
10009770:	bd10      	pop	{r4, pc}
10009772:	2001      	movs	r0, #1
10009774:	bd10      	pop	{r4, pc}
10009776:	46c0      	nop			; (mov r8, r8)

10009778 <__aeabi_f2uiz>:
10009778:	219e      	movs	r1, #158	; 0x9e
1000977a:	b510      	push	{r4, lr}
1000977c:	05c9      	lsls	r1, r1, #23
1000977e:	1c04      	adds	r4, r0, #0
10009780:	f7ff fff0 	bl	10009764 <__aeabi_fcmpge>
10009784:	2800      	cmp	r0, #0
10009786:	d103      	bne.n	10009790 <__aeabi_f2uiz+0x18>
10009788:	1c20      	adds	r0, r4, #0
1000978a:	f000 fe2b 	bl	1000a3e4 <__aeabi_f2iz>
1000978e:	bd10      	pop	{r4, pc}
10009790:	219e      	movs	r1, #158	; 0x9e
10009792:	1c20      	adds	r0, r4, #0
10009794:	05c9      	lsls	r1, r1, #23
10009796:	f000 fca7 	bl	1000a0e8 <__aeabi_fsub>
1000979a:	f000 fe23 	bl	1000a3e4 <__aeabi_f2iz>
1000979e:	2380      	movs	r3, #128	; 0x80
100097a0:	061b      	lsls	r3, r3, #24
100097a2:	469c      	mov	ip, r3
100097a4:	4460      	add	r0, ip
100097a6:	e7f2      	b.n	1000978e <__aeabi_f2uiz+0x16>

100097a8 <__aeabi_fadd>:
100097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100097aa:	004a      	lsls	r2, r1, #1
100097ac:	0243      	lsls	r3, r0, #9
100097ae:	0044      	lsls	r4, r0, #1
100097b0:	024e      	lsls	r6, r1, #9
100097b2:	0fc5      	lsrs	r5, r0, #31
100097b4:	0e24      	lsrs	r4, r4, #24
100097b6:	1c28      	adds	r0, r5, #0
100097b8:	099b      	lsrs	r3, r3, #6
100097ba:	0e12      	lsrs	r2, r2, #24
100097bc:	0fc9      	lsrs	r1, r1, #31
100097be:	09b7      	lsrs	r7, r6, #6
100097c0:	428d      	cmp	r5, r1
100097c2:	d040      	beq.n	10009846 <__aeabi_fadd+0x9e>
100097c4:	1aa0      	subs	r0, r4, r2
100097c6:	2800      	cmp	r0, #0
100097c8:	dc00      	bgt.n	100097cc <__aeabi_fadd+0x24>
100097ca:	e084      	b.n	100098d6 <__aeabi_fadd+0x12e>
100097cc:	2a00      	cmp	r2, #0
100097ce:	d11c      	bne.n	1000980a <__aeabi_fadd+0x62>
100097d0:	2f00      	cmp	r7, #0
100097d2:	d15c      	bne.n	1000988e <__aeabi_fadd+0xe6>
100097d4:	075a      	lsls	r2, r3, #29
100097d6:	d004      	beq.n	100097e2 <__aeabi_fadd+0x3a>
100097d8:	220f      	movs	r2, #15
100097da:	401a      	ands	r2, r3
100097dc:	2a04      	cmp	r2, #4
100097de:	d000      	beq.n	100097e2 <__aeabi_fadd+0x3a>
100097e0:	3304      	adds	r3, #4
100097e2:	2280      	movs	r2, #128	; 0x80
100097e4:	04d2      	lsls	r2, r2, #19
100097e6:	401a      	ands	r2, r3
100097e8:	1c28      	adds	r0, r5, #0
100097ea:	2a00      	cmp	r2, #0
100097ec:	d024      	beq.n	10009838 <__aeabi_fadd+0x90>
100097ee:	3401      	adds	r4, #1
100097f0:	2cff      	cmp	r4, #255	; 0xff
100097f2:	d100      	bne.n	100097f6 <__aeabi_fadd+0x4e>
100097f4:	e07b      	b.n	100098ee <__aeabi_fadd+0x146>
100097f6:	019b      	lsls	r3, r3, #6
100097f8:	0a5b      	lsrs	r3, r3, #9
100097fa:	b2e4      	uxtb	r4, r4
100097fc:	025b      	lsls	r3, r3, #9
100097fe:	05e4      	lsls	r4, r4, #23
10009800:	0a5b      	lsrs	r3, r3, #9
10009802:	4323      	orrs	r3, r4
10009804:	07c0      	lsls	r0, r0, #31
10009806:	4318      	orrs	r0, r3
10009808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000980a:	2cff      	cmp	r4, #255	; 0xff
1000980c:	d0e2      	beq.n	100097d4 <__aeabi_fadd+0x2c>
1000980e:	2280      	movs	r2, #128	; 0x80
10009810:	04d2      	lsls	r2, r2, #19
10009812:	4317      	orrs	r7, r2
10009814:	2601      	movs	r6, #1
10009816:	281b      	cmp	r0, #27
10009818:	dc08      	bgt.n	1000982c <__aeabi_fadd+0x84>
1000981a:	1c39      	adds	r1, r7, #0
1000981c:	2220      	movs	r2, #32
1000981e:	1c3e      	adds	r6, r7, #0
10009820:	40c1      	lsrs	r1, r0
10009822:	1a10      	subs	r0, r2, r0
10009824:	4086      	lsls	r6, r0
10009826:	1e77      	subs	r7, r6, #1
10009828:	41be      	sbcs	r6, r7
1000982a:	430e      	orrs	r6, r1
1000982c:	1b9b      	subs	r3, r3, r6
1000982e:	015a      	lsls	r2, r3, #5
10009830:	d433      	bmi.n	1000989a <__aeabi_fadd+0xf2>
10009832:	1c28      	adds	r0, r5, #0
10009834:	075a      	lsls	r2, r3, #29
10009836:	d1cf      	bne.n	100097d8 <__aeabi_fadd+0x30>
10009838:	08db      	lsrs	r3, r3, #3
1000983a:	2cff      	cmp	r4, #255	; 0xff
1000983c:	d01e      	beq.n	1000987c <__aeabi_fadd+0xd4>
1000983e:	025b      	lsls	r3, r3, #9
10009840:	0a5b      	lsrs	r3, r3, #9
10009842:	b2e4      	uxtb	r4, r4
10009844:	e7da      	b.n	100097fc <__aeabi_fadd+0x54>
10009846:	1aa1      	subs	r1, r4, r2
10009848:	2900      	cmp	r1, #0
1000984a:	dd57      	ble.n	100098fc <__aeabi_fadd+0x154>
1000984c:	2a00      	cmp	r2, #0
1000984e:	d03a      	beq.n	100098c6 <__aeabi_fadd+0x11e>
10009850:	2cff      	cmp	r4, #255	; 0xff
10009852:	d0bf      	beq.n	100097d4 <__aeabi_fadd+0x2c>
10009854:	2280      	movs	r2, #128	; 0x80
10009856:	04d2      	lsls	r2, r2, #19
10009858:	4317      	orrs	r7, r2
1000985a:	2601      	movs	r6, #1
1000985c:	291b      	cmp	r1, #27
1000985e:	dd72      	ble.n	10009946 <__aeabi_fadd+0x19e>
10009860:	199b      	adds	r3, r3, r6
10009862:	015a      	lsls	r2, r3, #5
10009864:	d5e5      	bpl.n	10009832 <__aeabi_fadd+0x8a>
10009866:	3401      	adds	r4, #1
10009868:	2cff      	cmp	r4, #255	; 0xff
1000986a:	d100      	bne.n	1000986e <__aeabi_fadd+0xc6>
1000986c:	e087      	b.n	1000997e <__aeabi_fadd+0x1d6>
1000986e:	2101      	movs	r1, #1
10009870:	4a8a      	ldr	r2, [pc, #552]	; (10009a9c <__aeabi_fadd+0x2f4>)
10009872:	4019      	ands	r1, r3
10009874:	4013      	ands	r3, r2
10009876:	085b      	lsrs	r3, r3, #1
10009878:	430b      	orrs	r3, r1
1000987a:	e7ab      	b.n	100097d4 <__aeabi_fadd+0x2c>
1000987c:	2b00      	cmp	r3, #0
1000987e:	d036      	beq.n	100098ee <__aeabi_fadd+0x146>
10009880:	2280      	movs	r2, #128	; 0x80
10009882:	03d2      	lsls	r2, r2, #15
10009884:	4313      	orrs	r3, r2
10009886:	025b      	lsls	r3, r3, #9
10009888:	0a5b      	lsrs	r3, r3, #9
1000988a:	24ff      	movs	r4, #255	; 0xff
1000988c:	e7b6      	b.n	100097fc <__aeabi_fadd+0x54>
1000988e:	3801      	subs	r0, #1
10009890:	2800      	cmp	r0, #0
10009892:	d13f      	bne.n	10009914 <__aeabi_fadd+0x16c>
10009894:	1bdb      	subs	r3, r3, r7
10009896:	015a      	lsls	r2, r3, #5
10009898:	d5cb      	bpl.n	10009832 <__aeabi_fadd+0x8a>
1000989a:	019b      	lsls	r3, r3, #6
1000989c:	099e      	lsrs	r6, r3, #6
1000989e:	1c30      	adds	r0, r6, #0
100098a0:	f002 fc66 	bl	1000c170 <__clzsi2>
100098a4:	3805      	subs	r0, #5
100098a6:	4086      	lsls	r6, r0
100098a8:	4284      	cmp	r4, r0
100098aa:	dc23      	bgt.n	100098f4 <__aeabi_fadd+0x14c>
100098ac:	1b00      	subs	r0, r0, r4
100098ae:	241f      	movs	r4, #31
100098b0:	1c32      	adds	r2, r6, #0
100098b2:	1c43      	adds	r3, r0, #1
100098b4:	1a20      	subs	r0, r4, r0
100098b6:	40da      	lsrs	r2, r3
100098b8:	4086      	lsls	r6, r0
100098ba:	1c13      	adds	r3, r2, #0
100098bc:	1e74      	subs	r4, r6, #1
100098be:	41a6      	sbcs	r6, r4
100098c0:	2400      	movs	r4, #0
100098c2:	4333      	orrs	r3, r6
100098c4:	e786      	b.n	100097d4 <__aeabi_fadd+0x2c>
100098c6:	2f00      	cmp	r7, #0
100098c8:	d100      	bne.n	100098cc <__aeabi_fadd+0x124>
100098ca:	e783      	b.n	100097d4 <__aeabi_fadd+0x2c>
100098cc:	3901      	subs	r1, #1
100098ce:	2900      	cmp	r1, #0
100098d0:	d150      	bne.n	10009974 <__aeabi_fadd+0x1cc>
100098d2:	19db      	adds	r3, r3, r7
100098d4:	e7c5      	b.n	10009862 <__aeabi_fadd+0xba>
100098d6:	2800      	cmp	r0, #0
100098d8:	d120      	bne.n	1000991c <__aeabi_fadd+0x174>
100098da:	1c62      	adds	r2, r4, #1
100098dc:	b2d2      	uxtb	r2, r2
100098de:	2a01      	cmp	r2, #1
100098e0:	dd5e      	ble.n	100099a0 <__aeabi_fadd+0x1f8>
100098e2:	1bde      	subs	r6, r3, r7
100098e4:	0172      	lsls	r2, r6, #5
100098e6:	d528      	bpl.n	1000993a <__aeabi_fadd+0x192>
100098e8:	1afe      	subs	r6, r7, r3
100098ea:	1c0d      	adds	r5, r1, #0
100098ec:	e7d7      	b.n	1000989e <__aeabi_fadd+0xf6>
100098ee:	24ff      	movs	r4, #255	; 0xff
100098f0:	2300      	movs	r3, #0
100098f2:	e783      	b.n	100097fc <__aeabi_fadd+0x54>
100098f4:	4b69      	ldr	r3, [pc, #420]	; (10009a9c <__aeabi_fadd+0x2f4>)
100098f6:	1a24      	subs	r4, r4, r0
100098f8:	4033      	ands	r3, r6
100098fa:	e76b      	b.n	100097d4 <__aeabi_fadd+0x2c>
100098fc:	2900      	cmp	r1, #0
100098fe:	d158      	bne.n	100099b2 <__aeabi_fadd+0x20a>
10009900:	1c62      	adds	r2, r4, #1
10009902:	b2d1      	uxtb	r1, r2
10009904:	2901      	cmp	r1, #1
10009906:	dd3c      	ble.n	10009982 <__aeabi_fadd+0x1da>
10009908:	2aff      	cmp	r2, #255	; 0xff
1000990a:	d037      	beq.n	1000997c <__aeabi_fadd+0x1d4>
1000990c:	18fb      	adds	r3, r7, r3
1000990e:	085b      	lsrs	r3, r3, #1
10009910:	1c14      	adds	r4, r2, #0
10009912:	e75f      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009914:	2cff      	cmp	r4, #255	; 0xff
10009916:	d000      	beq.n	1000991a <__aeabi_fadd+0x172>
10009918:	e77c      	b.n	10009814 <__aeabi_fadd+0x6c>
1000991a:	e75b      	b.n	100097d4 <__aeabi_fadd+0x2c>
1000991c:	2c00      	cmp	r4, #0
1000991e:	d01e      	beq.n	1000995e <__aeabi_fadd+0x1b6>
10009920:	2aff      	cmp	r2, #255	; 0xff
10009922:	d023      	beq.n	1000996c <__aeabi_fadd+0x1c4>
10009924:	2480      	movs	r4, #128	; 0x80
10009926:	04e4      	lsls	r4, r4, #19
10009928:	4240      	negs	r0, r0
1000992a:	4323      	orrs	r3, r4
1000992c:	281b      	cmp	r0, #27
1000992e:	dd5b      	ble.n	100099e8 <__aeabi_fadd+0x240>
10009930:	2301      	movs	r3, #1
10009932:	1afb      	subs	r3, r7, r3
10009934:	1c14      	adds	r4, r2, #0
10009936:	1c0d      	adds	r5, r1, #0
10009938:	e7ad      	b.n	10009896 <__aeabi_fadd+0xee>
1000993a:	2e00      	cmp	r6, #0
1000993c:	d1af      	bne.n	1000989e <__aeabi_fadd+0xf6>
1000993e:	2300      	movs	r3, #0
10009940:	2000      	movs	r0, #0
10009942:	2400      	movs	r4, #0
10009944:	e778      	b.n	10009838 <__aeabi_fadd+0x90>
10009946:	1c3a      	adds	r2, r7, #0
10009948:	40ca      	lsrs	r2, r1
1000994a:	4694      	mov	ip, r2
1000994c:	2220      	movs	r2, #32
1000994e:	1c3e      	adds	r6, r7, #0
10009950:	1a51      	subs	r1, r2, r1
10009952:	408e      	lsls	r6, r1
10009954:	4662      	mov	r2, ip
10009956:	1e77      	subs	r7, r6, #1
10009958:	41be      	sbcs	r6, r7
1000995a:	4316      	orrs	r6, r2
1000995c:	e780      	b.n	10009860 <__aeabi_fadd+0xb8>
1000995e:	2b00      	cmp	r3, #0
10009960:	d03e      	beq.n	100099e0 <__aeabi_fadd+0x238>
10009962:	43c0      	mvns	r0, r0
10009964:	2800      	cmp	r0, #0
10009966:	d0e4      	beq.n	10009932 <__aeabi_fadd+0x18a>
10009968:	2aff      	cmp	r2, #255	; 0xff
1000996a:	d1df      	bne.n	1000992c <__aeabi_fadd+0x184>
1000996c:	1c3b      	adds	r3, r7, #0
1000996e:	24ff      	movs	r4, #255	; 0xff
10009970:	1c0d      	adds	r5, r1, #0
10009972:	e72f      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009974:	2cff      	cmp	r4, #255	; 0xff
10009976:	d000      	beq.n	1000997a <__aeabi_fadd+0x1d2>
10009978:	e76f      	b.n	1000985a <__aeabi_fadd+0xb2>
1000997a:	e72b      	b.n	100097d4 <__aeabi_fadd+0x2c>
1000997c:	24ff      	movs	r4, #255	; 0xff
1000997e:	2300      	movs	r3, #0
10009980:	e75a      	b.n	10009838 <__aeabi_fadd+0x90>
10009982:	2c00      	cmp	r4, #0
10009984:	d15a      	bne.n	10009a3c <__aeabi_fadd+0x294>
10009986:	2b00      	cmp	r3, #0
10009988:	d07f      	beq.n	10009a8a <__aeabi_fadd+0x2e2>
1000998a:	2f00      	cmp	r7, #0
1000998c:	d100      	bne.n	10009990 <__aeabi_fadd+0x1e8>
1000998e:	e721      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009990:	19db      	adds	r3, r3, r7
10009992:	015a      	lsls	r2, r3, #5
10009994:	d400      	bmi.n	10009998 <__aeabi_fadd+0x1f0>
10009996:	e74c      	b.n	10009832 <__aeabi_fadd+0x8a>
10009998:	4a40      	ldr	r2, [pc, #256]	; (10009a9c <__aeabi_fadd+0x2f4>)
1000999a:	3401      	adds	r4, #1
1000999c:	4013      	ands	r3, r2
1000999e:	e719      	b.n	100097d4 <__aeabi_fadd+0x2c>
100099a0:	2c00      	cmp	r4, #0
100099a2:	d115      	bne.n	100099d0 <__aeabi_fadd+0x228>
100099a4:	2b00      	cmp	r3, #0
100099a6:	d12f      	bne.n	10009a08 <__aeabi_fadd+0x260>
100099a8:	2f00      	cmp	r7, #0
100099aa:	d05d      	beq.n	10009a68 <__aeabi_fadd+0x2c0>
100099ac:	1c3b      	adds	r3, r7, #0
100099ae:	1c0d      	adds	r5, r1, #0
100099b0:	e710      	b.n	100097d4 <__aeabi_fadd+0x2c>
100099b2:	2c00      	cmp	r4, #0
100099b4:	d121      	bne.n	100099fa <__aeabi_fadd+0x252>
100099b6:	2b00      	cmp	r3, #0
100099b8:	d053      	beq.n	10009a62 <__aeabi_fadd+0x2ba>
100099ba:	43c9      	mvns	r1, r1
100099bc:	2900      	cmp	r1, #0
100099be:	d004      	beq.n	100099ca <__aeabi_fadd+0x222>
100099c0:	2aff      	cmp	r2, #255	; 0xff
100099c2:	d04b      	beq.n	10009a5c <__aeabi_fadd+0x2b4>
100099c4:	291b      	cmp	r1, #27
100099c6:	dd57      	ble.n	10009a78 <__aeabi_fadd+0x2d0>
100099c8:	2301      	movs	r3, #1
100099ca:	19db      	adds	r3, r3, r7
100099cc:	1c14      	adds	r4, r2, #0
100099ce:	e748      	b.n	10009862 <__aeabi_fadd+0xba>
100099d0:	2b00      	cmp	r3, #0
100099d2:	d122      	bne.n	10009a1a <__aeabi_fadd+0x272>
100099d4:	2f00      	cmp	r7, #0
100099d6:	d04a      	beq.n	10009a6e <__aeabi_fadd+0x2c6>
100099d8:	1c3b      	adds	r3, r7, #0
100099da:	1c0d      	adds	r5, r1, #0
100099dc:	24ff      	movs	r4, #255	; 0xff
100099de:	e6f9      	b.n	100097d4 <__aeabi_fadd+0x2c>
100099e0:	1c3b      	adds	r3, r7, #0
100099e2:	1c14      	adds	r4, r2, #0
100099e4:	1c0d      	adds	r5, r1, #0
100099e6:	e6f5      	b.n	100097d4 <__aeabi_fadd+0x2c>
100099e8:	1c1d      	adds	r5, r3, #0
100099ea:	2420      	movs	r4, #32
100099ec:	40c5      	lsrs	r5, r0
100099ee:	1a20      	subs	r0, r4, r0
100099f0:	4083      	lsls	r3, r0
100099f2:	1e58      	subs	r0, r3, #1
100099f4:	4183      	sbcs	r3, r0
100099f6:	432b      	orrs	r3, r5
100099f8:	e79b      	b.n	10009932 <__aeabi_fadd+0x18a>
100099fa:	2aff      	cmp	r2, #255	; 0xff
100099fc:	d02e      	beq.n	10009a5c <__aeabi_fadd+0x2b4>
100099fe:	2480      	movs	r4, #128	; 0x80
10009a00:	04e4      	lsls	r4, r4, #19
10009a02:	4249      	negs	r1, r1
10009a04:	4323      	orrs	r3, r4
10009a06:	e7dd      	b.n	100099c4 <__aeabi_fadd+0x21c>
10009a08:	2f00      	cmp	r7, #0
10009a0a:	d100      	bne.n	10009a0e <__aeabi_fadd+0x266>
10009a0c:	e6e2      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a0e:	1bda      	subs	r2, r3, r7
10009a10:	0150      	lsls	r0, r2, #5
10009a12:	d53c      	bpl.n	10009a8e <__aeabi_fadd+0x2e6>
10009a14:	1afb      	subs	r3, r7, r3
10009a16:	1c0d      	adds	r5, r1, #0
10009a18:	e6dc      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a1a:	24ff      	movs	r4, #255	; 0xff
10009a1c:	2f00      	cmp	r7, #0
10009a1e:	d100      	bne.n	10009a22 <__aeabi_fadd+0x27a>
10009a20:	e6d8      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a22:	2280      	movs	r2, #128	; 0x80
10009a24:	08db      	lsrs	r3, r3, #3
10009a26:	03d2      	lsls	r2, r2, #15
10009a28:	4213      	tst	r3, r2
10009a2a:	d004      	beq.n	10009a36 <__aeabi_fadd+0x28e>
10009a2c:	08fe      	lsrs	r6, r7, #3
10009a2e:	4216      	tst	r6, r2
10009a30:	d101      	bne.n	10009a36 <__aeabi_fadd+0x28e>
10009a32:	1c33      	adds	r3, r6, #0
10009a34:	1c0d      	adds	r5, r1, #0
10009a36:	00db      	lsls	r3, r3, #3
10009a38:	24ff      	movs	r4, #255	; 0xff
10009a3a:	e6cb      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a3c:	2b00      	cmp	r3, #0
10009a3e:	d00d      	beq.n	10009a5c <__aeabi_fadd+0x2b4>
10009a40:	24ff      	movs	r4, #255	; 0xff
10009a42:	2f00      	cmp	r7, #0
10009a44:	d100      	bne.n	10009a48 <__aeabi_fadd+0x2a0>
10009a46:	e6c5      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a48:	2280      	movs	r2, #128	; 0x80
10009a4a:	08db      	lsrs	r3, r3, #3
10009a4c:	03d2      	lsls	r2, r2, #15
10009a4e:	4213      	tst	r3, r2
10009a50:	d0f1      	beq.n	10009a36 <__aeabi_fadd+0x28e>
10009a52:	08fe      	lsrs	r6, r7, #3
10009a54:	4216      	tst	r6, r2
10009a56:	d1ee      	bne.n	10009a36 <__aeabi_fadd+0x28e>
10009a58:	1c33      	adds	r3, r6, #0
10009a5a:	e7ec      	b.n	10009a36 <__aeabi_fadd+0x28e>
10009a5c:	1c3b      	adds	r3, r7, #0
10009a5e:	24ff      	movs	r4, #255	; 0xff
10009a60:	e6b8      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a62:	1c3b      	adds	r3, r7, #0
10009a64:	1c14      	adds	r4, r2, #0
10009a66:	e6b5      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a68:	1c23      	adds	r3, r4, #0
10009a6a:	2000      	movs	r0, #0
10009a6c:	e6e4      	b.n	10009838 <__aeabi_fadd+0x90>
10009a6e:	2380      	movs	r3, #128	; 0x80
10009a70:	2000      	movs	r0, #0
10009a72:	049b      	lsls	r3, r3, #18
10009a74:	24ff      	movs	r4, #255	; 0xff
10009a76:	e6df      	b.n	10009838 <__aeabi_fadd+0x90>
10009a78:	1c1e      	adds	r6, r3, #0
10009a7a:	2420      	movs	r4, #32
10009a7c:	40ce      	lsrs	r6, r1
10009a7e:	1a61      	subs	r1, r4, r1
10009a80:	408b      	lsls	r3, r1
10009a82:	1e59      	subs	r1, r3, #1
10009a84:	418b      	sbcs	r3, r1
10009a86:	4333      	orrs	r3, r6
10009a88:	e79f      	b.n	100099ca <__aeabi_fadd+0x222>
10009a8a:	1c3b      	adds	r3, r7, #0
10009a8c:	e6a2      	b.n	100097d4 <__aeabi_fadd+0x2c>
10009a8e:	1e13      	subs	r3, r2, #0
10009a90:	d000      	beq.n	10009a94 <__aeabi_fadd+0x2ec>
10009a92:	e6ce      	b.n	10009832 <__aeabi_fadd+0x8a>
10009a94:	2300      	movs	r3, #0
10009a96:	2000      	movs	r0, #0
10009a98:	e6ce      	b.n	10009838 <__aeabi_fadd+0x90>
10009a9a:	46c0      	nop			; (mov r8, r8)
10009a9c:	fbffffff 	.word	0xfbffffff

10009aa0 <__aeabi_fdiv>:
10009aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009aa2:	4656      	mov	r6, sl
10009aa4:	464d      	mov	r5, r9
10009aa6:	465f      	mov	r7, fp
10009aa8:	4644      	mov	r4, r8
10009aaa:	b4f0      	push	{r4, r5, r6, r7}
10009aac:	0243      	lsls	r3, r0, #9
10009aae:	0045      	lsls	r5, r0, #1
10009ab0:	0fc7      	lsrs	r7, r0, #31
10009ab2:	b083      	sub	sp, #12
10009ab4:	468a      	mov	sl, r1
10009ab6:	0a5c      	lsrs	r4, r3, #9
10009ab8:	0e2e      	lsrs	r6, r5, #24
10009aba:	46b9      	mov	r9, r7
10009abc:	d041      	beq.n	10009b42 <__aeabi_fdiv+0xa2>
10009abe:	2eff      	cmp	r6, #255	; 0xff
10009ac0:	d026      	beq.n	10009b10 <__aeabi_fdiv+0x70>
10009ac2:	2380      	movs	r3, #128	; 0x80
10009ac4:	041b      	lsls	r3, r3, #16
10009ac6:	4323      	orrs	r3, r4
10009ac8:	00dc      	lsls	r4, r3, #3
10009aca:	2300      	movs	r3, #0
10009acc:	4698      	mov	r8, r3
10009ace:	469b      	mov	fp, r3
10009ad0:	3e7f      	subs	r6, #127	; 0x7f
10009ad2:	4653      	mov	r3, sl
10009ad4:	025b      	lsls	r3, r3, #9
10009ad6:	0a5d      	lsrs	r5, r3, #9
10009ad8:	4653      	mov	r3, sl
10009ada:	005a      	lsls	r2, r3, #1
10009adc:	0fdb      	lsrs	r3, r3, #31
10009ade:	0e12      	lsrs	r2, r2, #24
10009ae0:	469a      	mov	sl, r3
10009ae2:	d039      	beq.n	10009b58 <__aeabi_fdiv+0xb8>
10009ae4:	2aff      	cmp	r2, #255	; 0xff
10009ae6:	d033      	beq.n	10009b50 <__aeabi_fdiv+0xb0>
10009ae8:	2380      	movs	r3, #128	; 0x80
10009aea:	041b      	lsls	r3, r3, #16
10009aec:	432b      	orrs	r3, r5
10009aee:	00dd      	lsls	r5, r3, #3
10009af0:	2300      	movs	r3, #0
10009af2:	3a7f      	subs	r2, #127	; 0x7f
10009af4:	4651      	mov	r1, sl
10009af6:	1ab2      	subs	r2, r6, r2
10009af8:	4646      	mov	r6, r8
10009afa:	4079      	eors	r1, r7
10009afc:	1c08      	adds	r0, r1, #0
10009afe:	9201      	str	r2, [sp, #4]
10009b00:	431e      	orrs	r6, r3
10009b02:	2e0f      	cmp	r6, #15
10009b04:	d900      	bls.n	10009b08 <__aeabi_fdiv+0x68>
10009b06:	e076      	b.n	10009bf6 <__aeabi_fdiv+0x156>
10009b08:	4a7e      	ldr	r2, [pc, #504]	; (10009d04 <__aeabi_fdiv+0x264>)
10009b0a:	00b6      	lsls	r6, r6, #2
10009b0c:	5996      	ldr	r6, [r2, r6]
10009b0e:	46b7      	mov	pc, r6
10009b10:	2c00      	cmp	r4, #0
10009b12:	d130      	bne.n	10009b76 <__aeabi_fdiv+0xd6>
10009b14:	2308      	movs	r3, #8
10009b16:	4698      	mov	r8, r3
10009b18:	3b06      	subs	r3, #6
10009b1a:	469b      	mov	fp, r3
10009b1c:	e7d9      	b.n	10009ad2 <__aeabi_fdiv+0x32>
10009b1e:	2380      	movs	r3, #128	; 0x80
10009b20:	2100      	movs	r1, #0
10009b22:	03db      	lsls	r3, r3, #15
10009b24:	24ff      	movs	r4, #255	; 0xff
10009b26:	025b      	lsls	r3, r3, #9
10009b28:	05e4      	lsls	r4, r4, #23
10009b2a:	0a5b      	lsrs	r3, r3, #9
10009b2c:	07c9      	lsls	r1, r1, #31
10009b2e:	4323      	orrs	r3, r4
10009b30:	430b      	orrs	r3, r1
10009b32:	1c18      	adds	r0, r3, #0
10009b34:	b003      	add	sp, #12
10009b36:	bc3c      	pop	{r2, r3, r4, r5}
10009b38:	4690      	mov	r8, r2
10009b3a:	4699      	mov	r9, r3
10009b3c:	46a2      	mov	sl, r4
10009b3e:	46ab      	mov	fp, r5
10009b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b42:	2c00      	cmp	r4, #0
10009b44:	d128      	bne.n	10009b98 <__aeabi_fdiv+0xf8>
10009b46:	2304      	movs	r3, #4
10009b48:	4698      	mov	r8, r3
10009b4a:	3b03      	subs	r3, #3
10009b4c:	469b      	mov	fp, r3
10009b4e:	e7c0      	b.n	10009ad2 <__aeabi_fdiv+0x32>
10009b50:	2d00      	cmp	r5, #0
10009b52:	d11f      	bne.n	10009b94 <__aeabi_fdiv+0xf4>
10009b54:	2302      	movs	r3, #2
10009b56:	e002      	b.n	10009b5e <__aeabi_fdiv+0xbe>
10009b58:	2d00      	cmp	r5, #0
10009b5a:	d111      	bne.n	10009b80 <__aeabi_fdiv+0xe0>
10009b5c:	2301      	movs	r3, #1
10009b5e:	1ab2      	subs	r2, r6, r2
10009b60:	4650      	mov	r0, sl
10009b62:	4646      	mov	r6, r8
10009b64:	4078      	eors	r0, r7
10009b66:	9201      	str	r2, [sp, #4]
10009b68:	431e      	orrs	r6, r3
10009b6a:	2e0f      	cmp	r6, #15
10009b6c:	d827      	bhi.n	10009bbe <__aeabi_fdiv+0x11e>
10009b6e:	4966      	ldr	r1, [pc, #408]	; (10009d08 <__aeabi_fdiv+0x268>)
10009b70:	00b6      	lsls	r6, r6, #2
10009b72:	5989      	ldr	r1, [r1, r6]
10009b74:	468f      	mov	pc, r1
10009b76:	230c      	movs	r3, #12
10009b78:	4698      	mov	r8, r3
10009b7a:	3b09      	subs	r3, #9
10009b7c:	469b      	mov	fp, r3
10009b7e:	e7a8      	b.n	10009ad2 <__aeabi_fdiv+0x32>
10009b80:	1c28      	adds	r0, r5, #0
10009b82:	f002 faf5 	bl	1000c170 <__clzsi2>
10009b86:	2276      	movs	r2, #118	; 0x76
10009b88:	1f43      	subs	r3, r0, #5
10009b8a:	4252      	negs	r2, r2
10009b8c:	409d      	lsls	r5, r3
10009b8e:	1a12      	subs	r2, r2, r0
10009b90:	2300      	movs	r3, #0
10009b92:	e7af      	b.n	10009af4 <__aeabi_fdiv+0x54>
10009b94:	2303      	movs	r3, #3
10009b96:	e7ad      	b.n	10009af4 <__aeabi_fdiv+0x54>
10009b98:	1c20      	adds	r0, r4, #0
10009b9a:	f002 fae9 	bl	1000c170 <__clzsi2>
10009b9e:	1f43      	subs	r3, r0, #5
10009ba0:	409c      	lsls	r4, r3
10009ba2:	2376      	movs	r3, #118	; 0x76
10009ba4:	425b      	negs	r3, r3
10009ba6:	1a1e      	subs	r6, r3, r0
10009ba8:	2300      	movs	r3, #0
10009baa:	4698      	mov	r8, r3
10009bac:	469b      	mov	fp, r3
10009bae:	e790      	b.n	10009ad2 <__aeabi_fdiv+0x32>
10009bb0:	2500      	movs	r5, #0
10009bb2:	46d1      	mov	r9, sl
10009bb4:	469b      	mov	fp, r3
10009bb6:	465b      	mov	r3, fp
10009bb8:	4648      	mov	r0, r9
10009bba:	2b02      	cmp	r3, #2
10009bbc:	d16f      	bne.n	10009c9e <__aeabi_fdiv+0x1fe>
10009bbe:	2101      	movs	r1, #1
10009bc0:	24ff      	movs	r4, #255	; 0xff
10009bc2:	4001      	ands	r1, r0
10009bc4:	2300      	movs	r3, #0
10009bc6:	e7ae      	b.n	10009b26 <__aeabi_fdiv+0x86>
10009bc8:	237e      	movs	r3, #126	; 0x7e
10009bca:	9a01      	ldr	r2, [sp, #4]
10009bcc:	425b      	negs	r3, r3
10009bce:	1a9b      	subs	r3, r3, r2
10009bd0:	2b1b      	cmp	r3, #27
10009bd2:	dd6d      	ble.n	10009cb0 <__aeabi_fdiv+0x210>
10009bd4:	2101      	movs	r1, #1
10009bd6:	464b      	mov	r3, r9
10009bd8:	4019      	ands	r1, r3
10009bda:	2400      	movs	r4, #0
10009bdc:	2300      	movs	r3, #0
10009bde:	e7a2      	b.n	10009b26 <__aeabi_fdiv+0x86>
10009be0:	2380      	movs	r3, #128	; 0x80
10009be2:	03db      	lsls	r3, r3, #15
10009be4:	421c      	tst	r4, r3
10009be6:	d149      	bne.n	10009c7c <__aeabi_fdiv+0x1dc>
10009be8:	2380      	movs	r3, #128	; 0x80
10009bea:	03db      	lsls	r3, r3, #15
10009bec:	4323      	orrs	r3, r4
10009bee:	025b      	lsls	r3, r3, #9
10009bf0:	0a5b      	lsrs	r3, r3, #9
10009bf2:	1c39      	adds	r1, r7, #0
10009bf4:	e796      	b.n	10009b24 <__aeabi_fdiv+0x84>
10009bf6:	0163      	lsls	r3, r4, #5
10009bf8:	016d      	lsls	r5, r5, #5
10009bfa:	42ab      	cmp	r3, r5
10009bfc:	d337      	bcc.n	10009c6e <__aeabi_fdiv+0x1ce>
10009bfe:	4689      	mov	r9, r1
10009c00:	201a      	movs	r0, #26
10009c02:	2101      	movs	r1, #1
10009c04:	1b5b      	subs	r3, r3, r5
10009c06:	2401      	movs	r4, #1
10009c08:	1c1e      	adds	r6, r3, #0
10009c0a:	0049      	lsls	r1, r1, #1
10009c0c:	005b      	lsls	r3, r3, #1
10009c0e:	2e00      	cmp	r6, #0
10009c10:	db01      	blt.n	10009c16 <__aeabi_fdiv+0x176>
10009c12:	42ab      	cmp	r3, r5
10009c14:	d301      	bcc.n	10009c1a <__aeabi_fdiv+0x17a>
10009c16:	1b5b      	subs	r3, r3, r5
10009c18:	4321      	orrs	r1, r4
10009c1a:	3801      	subs	r0, #1
10009c1c:	2800      	cmp	r0, #0
10009c1e:	d1f3      	bne.n	10009c08 <__aeabi_fdiv+0x168>
10009c20:	1e58      	subs	r0, r3, #1
10009c22:	4183      	sbcs	r3, r0
10009c24:	430b      	orrs	r3, r1
10009c26:	1c1d      	adds	r5, r3, #0
10009c28:	9c01      	ldr	r4, [sp, #4]
10009c2a:	347f      	adds	r4, #127	; 0x7f
10009c2c:	2c00      	cmp	r4, #0
10009c2e:	ddcb      	ble.n	10009bc8 <__aeabi_fdiv+0x128>
10009c30:	076b      	lsls	r3, r5, #29
10009c32:	d004      	beq.n	10009c3e <__aeabi_fdiv+0x19e>
10009c34:	230f      	movs	r3, #15
10009c36:	402b      	ands	r3, r5
10009c38:	2b04      	cmp	r3, #4
10009c3a:	d000      	beq.n	10009c3e <__aeabi_fdiv+0x19e>
10009c3c:	3504      	adds	r5, #4
10009c3e:	012b      	lsls	r3, r5, #4
10009c40:	d504      	bpl.n	10009c4c <__aeabi_fdiv+0x1ac>
10009c42:	9a01      	ldr	r2, [sp, #4]
10009c44:	4b31      	ldr	r3, [pc, #196]	; (10009d0c <__aeabi_fdiv+0x26c>)
10009c46:	3280      	adds	r2, #128	; 0x80
10009c48:	1c14      	adds	r4, r2, #0
10009c4a:	401d      	ands	r5, r3
10009c4c:	2cfe      	cmp	r4, #254	; 0xfe
10009c4e:	dd07      	ble.n	10009c60 <__aeabi_fdiv+0x1c0>
10009c50:	464b      	mov	r3, r9
10009c52:	2101      	movs	r1, #1
10009c54:	24ff      	movs	r4, #255	; 0xff
10009c56:	4019      	ands	r1, r3
10009c58:	2300      	movs	r3, #0
10009c5a:	e764      	b.n	10009b26 <__aeabi_fdiv+0x86>
10009c5c:	1c25      	adds	r5, r4, #0
10009c5e:	e7aa      	b.n	10009bb6 <__aeabi_fdiv+0x116>
10009c60:	2101      	movs	r1, #1
10009c62:	464a      	mov	r2, r9
10009c64:	01ab      	lsls	r3, r5, #6
10009c66:	0a5b      	lsrs	r3, r3, #9
10009c68:	b2e4      	uxtb	r4, r4
10009c6a:	4011      	ands	r1, r2
10009c6c:	e75b      	b.n	10009b26 <__aeabi_fdiv+0x86>
10009c6e:	9a01      	ldr	r2, [sp, #4]
10009c70:	4689      	mov	r9, r1
10009c72:	3a01      	subs	r2, #1
10009c74:	9201      	str	r2, [sp, #4]
10009c76:	201b      	movs	r0, #27
10009c78:	2100      	movs	r1, #0
10009c7a:	e7c4      	b.n	10009c06 <__aeabi_fdiv+0x166>
10009c7c:	421d      	tst	r5, r3
10009c7e:	d007      	beq.n	10009c90 <__aeabi_fdiv+0x1f0>
10009c80:	4323      	orrs	r3, r4
10009c82:	025b      	lsls	r3, r3, #9
10009c84:	0a5b      	lsrs	r3, r3, #9
10009c86:	1c39      	adds	r1, r7, #0
10009c88:	e74c      	b.n	10009b24 <__aeabi_fdiv+0x84>
10009c8a:	2500      	movs	r5, #0
10009c8c:	0263      	lsls	r3, r4, #9
10009c8e:	d5ab      	bpl.n	10009be8 <__aeabi_fdiv+0x148>
10009c90:	2380      	movs	r3, #128	; 0x80
10009c92:	03db      	lsls	r3, r3, #15
10009c94:	432b      	orrs	r3, r5
10009c96:	025b      	lsls	r3, r3, #9
10009c98:	0a5b      	lsrs	r3, r3, #9
10009c9a:	4651      	mov	r1, sl
10009c9c:	e742      	b.n	10009b24 <__aeabi_fdiv+0x84>
10009c9e:	2b03      	cmp	r3, #3
10009ca0:	d025      	beq.n	10009cee <__aeabi_fdiv+0x24e>
10009ca2:	2b01      	cmp	r3, #1
10009ca4:	d1c0      	bne.n	10009c28 <__aeabi_fdiv+0x188>
10009ca6:	2101      	movs	r1, #1
10009ca8:	2400      	movs	r4, #0
10009caa:	4001      	ands	r1, r0
10009cac:	2300      	movs	r3, #0
10009cae:	e73a      	b.n	10009b26 <__aeabi_fdiv+0x86>
10009cb0:	1c29      	adds	r1, r5, #0
10009cb2:	40d9      	lsrs	r1, r3
10009cb4:	1c2b      	adds	r3, r5, #0
10009cb6:	9a01      	ldr	r2, [sp, #4]
10009cb8:	329e      	adds	r2, #158	; 0x9e
10009cba:	4093      	lsls	r3, r2
10009cbc:	1e5d      	subs	r5, r3, #1
10009cbe:	41ab      	sbcs	r3, r5
10009cc0:	430b      	orrs	r3, r1
10009cc2:	075a      	lsls	r2, r3, #29
10009cc4:	d004      	beq.n	10009cd0 <__aeabi_fdiv+0x230>
10009cc6:	220f      	movs	r2, #15
10009cc8:	401a      	ands	r2, r3
10009cca:	2a04      	cmp	r2, #4
10009ccc:	d000      	beq.n	10009cd0 <__aeabi_fdiv+0x230>
10009cce:	3304      	adds	r3, #4
10009cd0:	015a      	lsls	r2, r3, #5
10009cd2:	d505      	bpl.n	10009ce0 <__aeabi_fdiv+0x240>
10009cd4:	464b      	mov	r3, r9
10009cd6:	2101      	movs	r1, #1
10009cd8:	2401      	movs	r4, #1
10009cda:	4019      	ands	r1, r3
10009cdc:	2300      	movs	r3, #0
10009cde:	e722      	b.n	10009b26 <__aeabi_fdiv+0x86>
10009ce0:	2101      	movs	r1, #1
10009ce2:	464a      	mov	r2, r9
10009ce4:	019b      	lsls	r3, r3, #6
10009ce6:	0a5b      	lsrs	r3, r3, #9
10009ce8:	4011      	ands	r1, r2
10009cea:	2400      	movs	r4, #0
10009cec:	e71b      	b.n	10009b26 <__aeabi_fdiv+0x86>
10009cee:	2380      	movs	r3, #128	; 0x80
10009cf0:	2101      	movs	r1, #1
10009cf2:	464a      	mov	r2, r9
10009cf4:	03db      	lsls	r3, r3, #15
10009cf6:	432b      	orrs	r3, r5
10009cf8:	025b      	lsls	r3, r3, #9
10009cfa:	400a      	ands	r2, r1
10009cfc:	0a5b      	lsrs	r3, r3, #9
10009cfe:	1c11      	adds	r1, r2, #0
10009d00:	e710      	b.n	10009b24 <__aeabi_fdiv+0x84>
10009d02:	46c0      	nop			; (mov r8, r8)
10009d04:	1000c530 	.word	0x1000c530
10009d08:	1000c570 	.word	0x1000c570
10009d0c:	f7ffffff 	.word	0xf7ffffff

10009d10 <__eqsf2>:
10009d10:	0243      	lsls	r3, r0, #9
10009d12:	b570      	push	{r4, r5, r6, lr}
10009d14:	0042      	lsls	r2, r0, #1
10009d16:	004c      	lsls	r4, r1, #1
10009d18:	0a5d      	lsrs	r5, r3, #9
10009d1a:	0fc3      	lsrs	r3, r0, #31
10009d1c:	0248      	lsls	r0, r1, #9
10009d1e:	0e12      	lsrs	r2, r2, #24
10009d20:	0a46      	lsrs	r6, r0, #9
10009d22:	0e24      	lsrs	r4, r4, #24
10009d24:	0fc9      	lsrs	r1, r1, #31
10009d26:	2aff      	cmp	r2, #255	; 0xff
10009d28:	d005      	beq.n	10009d36 <__eqsf2+0x26>
10009d2a:	2cff      	cmp	r4, #255	; 0xff
10009d2c:	d008      	beq.n	10009d40 <__eqsf2+0x30>
10009d2e:	2001      	movs	r0, #1
10009d30:	42a2      	cmp	r2, r4
10009d32:	d00b      	beq.n	10009d4c <__eqsf2+0x3c>
10009d34:	bd70      	pop	{r4, r5, r6, pc}
10009d36:	2001      	movs	r0, #1
10009d38:	2d00      	cmp	r5, #0
10009d3a:	d1fb      	bne.n	10009d34 <__eqsf2+0x24>
10009d3c:	2cff      	cmp	r4, #255	; 0xff
10009d3e:	d1f6      	bne.n	10009d2e <__eqsf2+0x1e>
10009d40:	2001      	movs	r0, #1
10009d42:	2e00      	cmp	r6, #0
10009d44:	d1f6      	bne.n	10009d34 <__eqsf2+0x24>
10009d46:	2001      	movs	r0, #1
10009d48:	42a2      	cmp	r2, r4
10009d4a:	d1f3      	bne.n	10009d34 <__eqsf2+0x24>
10009d4c:	42b5      	cmp	r5, r6
10009d4e:	d1f1      	bne.n	10009d34 <__eqsf2+0x24>
10009d50:	428b      	cmp	r3, r1
10009d52:	d005      	beq.n	10009d60 <__eqsf2+0x50>
10009d54:	2a00      	cmp	r2, #0
10009d56:	d1ed      	bne.n	10009d34 <__eqsf2+0x24>
10009d58:	1c28      	adds	r0, r5, #0
10009d5a:	1e43      	subs	r3, r0, #1
10009d5c:	4198      	sbcs	r0, r3
10009d5e:	e7e9      	b.n	10009d34 <__eqsf2+0x24>
10009d60:	2000      	movs	r0, #0
10009d62:	e7e7      	b.n	10009d34 <__eqsf2+0x24>

10009d64 <__gesf2>:
10009d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d66:	0243      	lsls	r3, r0, #9
10009d68:	024d      	lsls	r5, r1, #9
10009d6a:	004a      	lsls	r2, r1, #1
10009d6c:	0044      	lsls	r4, r0, #1
10009d6e:	0a5e      	lsrs	r6, r3, #9
10009d70:	0e24      	lsrs	r4, r4, #24
10009d72:	0fc3      	lsrs	r3, r0, #31
10009d74:	0a6d      	lsrs	r5, r5, #9
10009d76:	0e12      	lsrs	r2, r2, #24
10009d78:	0fc9      	lsrs	r1, r1, #31
10009d7a:	2cff      	cmp	r4, #255	; 0xff
10009d7c:	d00d      	beq.n	10009d9a <__gesf2+0x36>
10009d7e:	2aff      	cmp	r2, #255	; 0xff
10009d80:	d031      	beq.n	10009de6 <__gesf2+0x82>
10009d82:	2c00      	cmp	r4, #0
10009d84:	d10d      	bne.n	10009da2 <__gesf2+0x3e>
10009d86:	4277      	negs	r7, r6
10009d88:	4177      	adcs	r7, r6
10009d8a:	2a00      	cmp	r2, #0
10009d8c:	d123      	bne.n	10009dd6 <__gesf2+0x72>
10009d8e:	2d00      	cmp	r5, #0
10009d90:	d121      	bne.n	10009dd6 <__gesf2+0x72>
10009d92:	2000      	movs	r0, #0
10009d94:	2f00      	cmp	r7, #0
10009d96:	d10b      	bne.n	10009db0 <__gesf2+0x4c>
10009d98:	e007      	b.n	10009daa <__gesf2+0x46>
10009d9a:	2e00      	cmp	r6, #0
10009d9c:	d128      	bne.n	10009df0 <__gesf2+0x8c>
10009d9e:	2aff      	cmp	r2, #255	; 0xff
10009da0:	d021      	beq.n	10009de6 <__gesf2+0x82>
10009da2:	2a00      	cmp	r2, #0
10009da4:	d005      	beq.n	10009db2 <__gesf2+0x4e>
10009da6:	428b      	cmp	r3, r1
10009da8:	d007      	beq.n	10009dba <__gesf2+0x56>
10009daa:	4258      	negs	r0, r3
10009dac:	2301      	movs	r3, #1
10009dae:	4318      	orrs	r0, r3
10009db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009db2:	2d00      	cmp	r5, #0
10009db4:	d0f9      	beq.n	10009daa <__gesf2+0x46>
10009db6:	428b      	cmp	r3, r1
10009db8:	d1f7      	bne.n	10009daa <__gesf2+0x46>
10009dba:	4294      	cmp	r4, r2
10009dbc:	dcf5      	bgt.n	10009daa <__gesf2+0x46>
10009dbe:	db04      	blt.n	10009dca <__gesf2+0x66>
10009dc0:	42ae      	cmp	r6, r5
10009dc2:	d8f2      	bhi.n	10009daa <__gesf2+0x46>
10009dc4:	2000      	movs	r0, #0
10009dc6:	42ae      	cmp	r6, r5
10009dc8:	d2f2      	bcs.n	10009db0 <__gesf2+0x4c>
10009dca:	4258      	negs	r0, r3
10009dcc:	4143      	adcs	r3, r0
10009dce:	2001      	movs	r0, #1
10009dd0:	425b      	negs	r3, r3
10009dd2:	4318      	orrs	r0, r3
10009dd4:	e7ec      	b.n	10009db0 <__gesf2+0x4c>
10009dd6:	2f00      	cmp	r7, #0
10009dd8:	d0e5      	beq.n	10009da6 <__gesf2+0x42>
10009dda:	4248      	negs	r0, r1
10009ddc:	4141      	adcs	r1, r0
10009dde:	2001      	movs	r0, #1
10009de0:	4249      	negs	r1, r1
10009de2:	4308      	orrs	r0, r1
10009de4:	e7e4      	b.n	10009db0 <__gesf2+0x4c>
10009de6:	2d00      	cmp	r5, #0
10009de8:	d102      	bne.n	10009df0 <__gesf2+0x8c>
10009dea:	2c00      	cmp	r4, #0
10009dec:	d0cb      	beq.n	10009d86 <__gesf2+0x22>
10009dee:	e7da      	b.n	10009da6 <__gesf2+0x42>
10009df0:	2002      	movs	r0, #2
10009df2:	4240      	negs	r0, r0
10009df4:	e7dc      	b.n	10009db0 <__gesf2+0x4c>
10009df6:	46c0      	nop			; (mov r8, r8)

10009df8 <__lesf2>:
10009df8:	0243      	lsls	r3, r0, #9
10009dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dfc:	0042      	lsls	r2, r0, #1
10009dfe:	004c      	lsls	r4, r1, #1
10009e00:	0a5e      	lsrs	r6, r3, #9
10009e02:	0fc3      	lsrs	r3, r0, #31
10009e04:	0248      	lsls	r0, r1, #9
10009e06:	0e12      	lsrs	r2, r2, #24
10009e08:	0a45      	lsrs	r5, r0, #9
10009e0a:	0e24      	lsrs	r4, r4, #24
10009e0c:	0fc9      	lsrs	r1, r1, #31
10009e0e:	2aff      	cmp	r2, #255	; 0xff
10009e10:	d00f      	beq.n	10009e32 <__lesf2+0x3a>
10009e12:	2cff      	cmp	r4, #255	; 0xff
10009e14:	d01a      	beq.n	10009e4c <__lesf2+0x54>
10009e16:	2a00      	cmp	r2, #0
10009e18:	d110      	bne.n	10009e3c <__lesf2+0x44>
10009e1a:	4277      	negs	r7, r6
10009e1c:	4177      	adcs	r7, r6
10009e1e:	2c00      	cmp	r4, #0
10009e20:	d029      	beq.n	10009e76 <__lesf2+0x7e>
10009e22:	2f00      	cmp	r7, #0
10009e24:	d017      	beq.n	10009e56 <__lesf2+0x5e>
10009e26:	4248      	negs	r0, r1
10009e28:	4141      	adcs	r1, r0
10009e2a:	2001      	movs	r0, #1
10009e2c:	4249      	negs	r1, r1
10009e2e:	4308      	orrs	r0, r1
10009e30:	e00b      	b.n	10009e4a <__lesf2+0x52>
10009e32:	2002      	movs	r0, #2
10009e34:	2e00      	cmp	r6, #0
10009e36:	d108      	bne.n	10009e4a <__lesf2+0x52>
10009e38:	2cff      	cmp	r4, #255	; 0xff
10009e3a:	d007      	beq.n	10009e4c <__lesf2+0x54>
10009e3c:	2c00      	cmp	r4, #0
10009e3e:	d10a      	bne.n	10009e56 <__lesf2+0x5e>
10009e40:	2d00      	cmp	r5, #0
10009e42:	d108      	bne.n	10009e56 <__lesf2+0x5e>
10009e44:	4258      	negs	r0, r3
10009e46:	2301      	movs	r3, #1
10009e48:	4318      	orrs	r0, r3
10009e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e4c:	2002      	movs	r0, #2
10009e4e:	2d00      	cmp	r5, #0
10009e50:	d1fb      	bne.n	10009e4a <__lesf2+0x52>
10009e52:	2a00      	cmp	r2, #0
10009e54:	d0e1      	beq.n	10009e1a <__lesf2+0x22>
10009e56:	428b      	cmp	r3, r1
10009e58:	d1f4      	bne.n	10009e44 <__lesf2+0x4c>
10009e5a:	42a2      	cmp	r2, r4
10009e5c:	dcf2      	bgt.n	10009e44 <__lesf2+0x4c>
10009e5e:	db04      	blt.n	10009e6a <__lesf2+0x72>
10009e60:	42ae      	cmp	r6, r5
10009e62:	d8ef      	bhi.n	10009e44 <__lesf2+0x4c>
10009e64:	2000      	movs	r0, #0
10009e66:	42ae      	cmp	r6, r5
10009e68:	d2ef      	bcs.n	10009e4a <__lesf2+0x52>
10009e6a:	4258      	negs	r0, r3
10009e6c:	4143      	adcs	r3, r0
10009e6e:	2001      	movs	r0, #1
10009e70:	425b      	negs	r3, r3
10009e72:	4318      	orrs	r0, r3
10009e74:	e7e9      	b.n	10009e4a <__lesf2+0x52>
10009e76:	2d00      	cmp	r5, #0
10009e78:	d1d3      	bne.n	10009e22 <__lesf2+0x2a>
10009e7a:	2000      	movs	r0, #0
10009e7c:	2f00      	cmp	r7, #0
10009e7e:	d1e4      	bne.n	10009e4a <__lesf2+0x52>
10009e80:	e7e0      	b.n	10009e44 <__lesf2+0x4c>
10009e82:	46c0      	nop			; (mov r8, r8)

10009e84 <__aeabi_fmul>:
10009e84:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e86:	465f      	mov	r7, fp
10009e88:	4656      	mov	r6, sl
10009e8a:	464d      	mov	r5, r9
10009e8c:	4644      	mov	r4, r8
10009e8e:	b4f0      	push	{r4, r5, r6, r7}
10009e90:	0245      	lsls	r5, r0, #9
10009e92:	0046      	lsls	r6, r0, #1
10009e94:	0fc4      	lsrs	r4, r0, #31
10009e96:	b083      	sub	sp, #12
10009e98:	1c0f      	adds	r7, r1, #0
10009e9a:	0a6d      	lsrs	r5, r5, #9
10009e9c:	0e36      	lsrs	r6, r6, #24
10009e9e:	46a3      	mov	fp, r4
10009ea0:	d045      	beq.n	10009f2e <__aeabi_fmul+0xaa>
10009ea2:	2eff      	cmp	r6, #255	; 0xff
10009ea4:	d025      	beq.n	10009ef2 <__aeabi_fmul+0x6e>
10009ea6:	2380      	movs	r3, #128	; 0x80
10009ea8:	041b      	lsls	r3, r3, #16
10009eaa:	431d      	orrs	r5, r3
10009eac:	2300      	movs	r3, #0
10009eae:	469a      	mov	sl, r3
10009eb0:	00ed      	lsls	r5, r5, #3
10009eb2:	3e7f      	subs	r6, #127	; 0x7f
10009eb4:	9301      	str	r3, [sp, #4]
10009eb6:	027b      	lsls	r3, r7, #9
10009eb8:	0a5b      	lsrs	r3, r3, #9
10009eba:	4698      	mov	r8, r3
10009ebc:	0078      	lsls	r0, r7, #1
10009ebe:	0ffb      	lsrs	r3, r7, #31
10009ec0:	0e00      	lsrs	r0, r0, #24
10009ec2:	4699      	mov	r9, r3
10009ec4:	d040      	beq.n	10009f48 <__aeabi_fmul+0xc4>
10009ec6:	28ff      	cmp	r0, #255	; 0xff
10009ec8:	d038      	beq.n	10009f3c <__aeabi_fmul+0xb8>
10009eca:	2380      	movs	r3, #128	; 0x80
10009ecc:	4642      	mov	r2, r8
10009ece:	041b      	lsls	r3, r3, #16
10009ed0:	4313      	orrs	r3, r2
10009ed2:	00db      	lsls	r3, r3, #3
10009ed4:	4698      	mov	r8, r3
10009ed6:	2300      	movs	r3, #0
10009ed8:	387f      	subs	r0, #127	; 0x7f
10009eda:	464a      	mov	r2, r9
10009edc:	9f01      	ldr	r7, [sp, #4]
10009ede:	1830      	adds	r0, r6, r0
10009ee0:	4062      	eors	r2, r4
10009ee2:	1c41      	adds	r1, r0, #1
10009ee4:	431f      	orrs	r7, r3
10009ee6:	2f0f      	cmp	r7, #15
10009ee8:	d869      	bhi.n	10009fbe <__aeabi_fmul+0x13a>
10009eea:	4e7d      	ldr	r6, [pc, #500]	; (1000a0e0 <__aeabi_fmul+0x25c>)
10009eec:	00bf      	lsls	r7, r7, #2
10009eee:	59f6      	ldr	r6, [r6, r7]
10009ef0:	46b7      	mov	pc, r6
10009ef2:	2d00      	cmp	r5, #0
10009ef4:	d145      	bne.n	10009f82 <__aeabi_fmul+0xfe>
10009ef6:	2308      	movs	r3, #8
10009ef8:	9301      	str	r3, [sp, #4]
10009efa:	3b06      	subs	r3, #6
10009efc:	469a      	mov	sl, r3
10009efe:	e7da      	b.n	10009eb6 <__aeabi_fmul+0x32>
10009f00:	4693      	mov	fp, r2
10009f02:	4653      	mov	r3, sl
10009f04:	2b02      	cmp	r3, #2
10009f06:	d12f      	bne.n	10009f68 <__aeabi_fmul+0xe4>
10009f08:	465b      	mov	r3, fp
10009f0a:	2401      	movs	r4, #1
10009f0c:	2500      	movs	r5, #0
10009f0e:	401c      	ands	r4, r3
10009f10:	23ff      	movs	r3, #255	; 0xff
10009f12:	026d      	lsls	r5, r5, #9
10009f14:	05db      	lsls	r3, r3, #23
10009f16:	0a6d      	lsrs	r5, r5, #9
10009f18:	07e4      	lsls	r4, r4, #31
10009f1a:	431d      	orrs	r5, r3
10009f1c:	4325      	orrs	r5, r4
10009f1e:	1c28      	adds	r0, r5, #0
10009f20:	b003      	add	sp, #12
10009f22:	bc3c      	pop	{r2, r3, r4, r5}
10009f24:	4690      	mov	r8, r2
10009f26:	4699      	mov	r9, r3
10009f28:	46a2      	mov	sl, r4
10009f2a:	46ab      	mov	fp, r5
10009f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f2e:	2d00      	cmp	r5, #0
10009f30:	d12c      	bne.n	10009f8c <__aeabi_fmul+0x108>
10009f32:	2304      	movs	r3, #4
10009f34:	9301      	str	r3, [sp, #4]
10009f36:	3b03      	subs	r3, #3
10009f38:	469a      	mov	sl, r3
10009f3a:	e7bc      	b.n	10009eb6 <__aeabi_fmul+0x32>
10009f3c:	4643      	mov	r3, r8
10009f3e:	425a      	negs	r2, r3
10009f40:	4153      	adcs	r3, r2
10009f42:	2203      	movs	r2, #3
10009f44:	1ad3      	subs	r3, r2, r3
10009f46:	e7c8      	b.n	10009eda <__aeabi_fmul+0x56>
10009f48:	4642      	mov	r2, r8
10009f4a:	2301      	movs	r3, #1
10009f4c:	2a00      	cmp	r2, #0
10009f4e:	d0c4      	beq.n	10009eda <__aeabi_fmul+0x56>
10009f50:	4640      	mov	r0, r8
10009f52:	f002 f90d 	bl	1000c170 <__clzsi2>
10009f56:	4642      	mov	r2, r8
10009f58:	1f43      	subs	r3, r0, #5
10009f5a:	409a      	lsls	r2, r3
10009f5c:	2376      	movs	r3, #118	; 0x76
10009f5e:	425b      	negs	r3, r3
10009f60:	1a18      	subs	r0, r3, r0
10009f62:	4690      	mov	r8, r2
10009f64:	2300      	movs	r3, #0
10009f66:	e7b8      	b.n	10009eda <__aeabi_fmul+0x56>
10009f68:	2b03      	cmp	r3, #3
10009f6a:	d100      	bne.n	10009f6e <__aeabi_fmul+0xea>
10009f6c:	e0ad      	b.n	1000a0ca <__aeabi_fmul+0x246>
10009f6e:	2b01      	cmp	r3, #1
10009f70:	d000      	beq.n	10009f74 <__aeabi_fmul+0xf0>
10009f72:	e08c      	b.n	1000a08e <__aeabi_fmul+0x20a>
10009f74:	465b      	mov	r3, fp
10009f76:	4654      	mov	r4, sl
10009f78:	401c      	ands	r4, r3
10009f7a:	b2e4      	uxtb	r4, r4
10009f7c:	2300      	movs	r3, #0
10009f7e:	2500      	movs	r5, #0
10009f80:	e7c7      	b.n	10009f12 <__aeabi_fmul+0x8e>
10009f82:	230c      	movs	r3, #12
10009f84:	9301      	str	r3, [sp, #4]
10009f86:	3b09      	subs	r3, #9
10009f88:	469a      	mov	sl, r3
10009f8a:	e794      	b.n	10009eb6 <__aeabi_fmul+0x32>
10009f8c:	1c28      	adds	r0, r5, #0
10009f8e:	f002 f8ef 	bl	1000c170 <__clzsi2>
10009f92:	2676      	movs	r6, #118	; 0x76
10009f94:	1f43      	subs	r3, r0, #5
10009f96:	409d      	lsls	r5, r3
10009f98:	2300      	movs	r3, #0
10009f9a:	4276      	negs	r6, r6
10009f9c:	1a36      	subs	r6, r6, r0
10009f9e:	9301      	str	r3, [sp, #4]
10009fa0:	469a      	mov	sl, r3
10009fa2:	e788      	b.n	10009eb6 <__aeabi_fmul+0x32>
10009fa4:	2580      	movs	r5, #128	; 0x80
10009fa6:	2400      	movs	r4, #0
10009fa8:	03ed      	lsls	r5, r5, #15
10009faa:	23ff      	movs	r3, #255	; 0xff
10009fac:	e7b1      	b.n	10009f12 <__aeabi_fmul+0x8e>
10009fae:	4645      	mov	r5, r8
10009fb0:	46cb      	mov	fp, r9
10009fb2:	469a      	mov	sl, r3
10009fb4:	e7a5      	b.n	10009f02 <__aeabi_fmul+0x7e>
10009fb6:	4645      	mov	r5, r8
10009fb8:	4693      	mov	fp, r2
10009fba:	469a      	mov	sl, r3
10009fbc:	e7a1      	b.n	10009f02 <__aeabi_fmul+0x7e>
10009fbe:	4643      	mov	r3, r8
10009fc0:	042c      	lsls	r4, r5, #16
10009fc2:	0c1b      	lsrs	r3, r3, #16
10009fc4:	469c      	mov	ip, r3
10009fc6:	0c23      	lsrs	r3, r4, #16
10009fc8:	4644      	mov	r4, r8
10009fca:	0426      	lsls	r6, r4, #16
10009fcc:	1c1c      	adds	r4, r3, #0
10009fce:	0c36      	lsrs	r6, r6, #16
10009fd0:	0c2f      	lsrs	r7, r5, #16
10009fd2:	4374      	muls	r4, r6
10009fd4:	1c35      	adds	r5, r6, #0
10009fd6:	4666      	mov	r6, ip
10009fd8:	437d      	muls	r5, r7
10009fda:	4373      	muls	r3, r6
10009fdc:	4377      	muls	r7, r6
10009fde:	18eb      	adds	r3, r5, r3
10009fe0:	0c26      	lsrs	r6, r4, #16
10009fe2:	199e      	adds	r6, r3, r6
10009fe4:	42b5      	cmp	r5, r6
10009fe6:	d903      	bls.n	10009ff0 <__aeabi_fmul+0x16c>
10009fe8:	2380      	movs	r3, #128	; 0x80
10009fea:	025b      	lsls	r3, r3, #9
10009fec:	469c      	mov	ip, r3
10009fee:	4467      	add	r7, ip
10009ff0:	0424      	lsls	r4, r4, #16
10009ff2:	0433      	lsls	r3, r6, #16
10009ff4:	0c24      	lsrs	r4, r4, #16
10009ff6:	191b      	adds	r3, r3, r4
10009ff8:	019d      	lsls	r5, r3, #6
10009ffa:	1e6c      	subs	r4, r5, #1
10009ffc:	41a5      	sbcs	r5, r4
10009ffe:	0e9b      	lsrs	r3, r3, #26
1000a000:	0c36      	lsrs	r6, r6, #16
1000a002:	432b      	orrs	r3, r5
1000a004:	19bd      	adds	r5, r7, r6
1000a006:	01ad      	lsls	r5, r5, #6
1000a008:	431d      	orrs	r5, r3
1000a00a:	012b      	lsls	r3, r5, #4
1000a00c:	d504      	bpl.n	1000a018 <__aeabi_fmul+0x194>
1000a00e:	2301      	movs	r3, #1
1000a010:	0868      	lsrs	r0, r5, #1
1000a012:	401d      	ands	r5, r3
1000a014:	4305      	orrs	r5, r0
1000a016:	1c08      	adds	r0, r1, #0
1000a018:	1c03      	adds	r3, r0, #0
1000a01a:	337f      	adds	r3, #127	; 0x7f
1000a01c:	2b00      	cmp	r3, #0
1000a01e:	dd2c      	ble.n	1000a07a <__aeabi_fmul+0x1f6>
1000a020:	0769      	lsls	r1, r5, #29
1000a022:	d004      	beq.n	1000a02e <__aeabi_fmul+0x1aa>
1000a024:	210f      	movs	r1, #15
1000a026:	4029      	ands	r1, r5
1000a028:	2904      	cmp	r1, #4
1000a02a:	d000      	beq.n	1000a02e <__aeabi_fmul+0x1aa>
1000a02c:	3504      	adds	r5, #4
1000a02e:	0129      	lsls	r1, r5, #4
1000a030:	d503      	bpl.n	1000a03a <__aeabi_fmul+0x1b6>
1000a032:	4b2c      	ldr	r3, [pc, #176]	; (1000a0e4 <__aeabi_fmul+0x260>)
1000a034:	401d      	ands	r5, r3
1000a036:	1c03      	adds	r3, r0, #0
1000a038:	3380      	adds	r3, #128	; 0x80
1000a03a:	2bfe      	cmp	r3, #254	; 0xfe
1000a03c:	dd17      	ble.n	1000a06e <__aeabi_fmul+0x1ea>
1000a03e:	2401      	movs	r4, #1
1000a040:	23ff      	movs	r3, #255	; 0xff
1000a042:	4014      	ands	r4, r2
1000a044:	2500      	movs	r5, #0
1000a046:	e764      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a048:	2080      	movs	r0, #128	; 0x80
1000a04a:	03c0      	lsls	r0, r0, #15
1000a04c:	4205      	tst	r5, r0
1000a04e:	d009      	beq.n	1000a064 <__aeabi_fmul+0x1e0>
1000a050:	4643      	mov	r3, r8
1000a052:	4203      	tst	r3, r0
1000a054:	d106      	bne.n	1000a064 <__aeabi_fmul+0x1e0>
1000a056:	4645      	mov	r5, r8
1000a058:	4305      	orrs	r5, r0
1000a05a:	026d      	lsls	r5, r5, #9
1000a05c:	0a6d      	lsrs	r5, r5, #9
1000a05e:	464c      	mov	r4, r9
1000a060:	23ff      	movs	r3, #255	; 0xff
1000a062:	e756      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a064:	4305      	orrs	r5, r0
1000a066:	026d      	lsls	r5, r5, #9
1000a068:	0a6d      	lsrs	r5, r5, #9
1000a06a:	23ff      	movs	r3, #255	; 0xff
1000a06c:	e751      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a06e:	2401      	movs	r4, #1
1000a070:	01ad      	lsls	r5, r5, #6
1000a072:	0a6d      	lsrs	r5, r5, #9
1000a074:	b2db      	uxtb	r3, r3
1000a076:	4014      	ands	r4, r2
1000a078:	e74b      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a07a:	237e      	movs	r3, #126	; 0x7e
1000a07c:	425b      	negs	r3, r3
1000a07e:	1a1b      	subs	r3, r3, r0
1000a080:	2b1b      	cmp	r3, #27
1000a082:	dd07      	ble.n	1000a094 <__aeabi_fmul+0x210>
1000a084:	2401      	movs	r4, #1
1000a086:	2300      	movs	r3, #0
1000a088:	4014      	ands	r4, r2
1000a08a:	2500      	movs	r5, #0
1000a08c:	e741      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a08e:	1c08      	adds	r0, r1, #0
1000a090:	465a      	mov	r2, fp
1000a092:	e7c1      	b.n	1000a018 <__aeabi_fmul+0x194>
1000a094:	309e      	adds	r0, #158	; 0x9e
1000a096:	1c29      	adds	r1, r5, #0
1000a098:	4085      	lsls	r5, r0
1000a09a:	40d9      	lsrs	r1, r3
1000a09c:	1e68      	subs	r0, r5, #1
1000a09e:	4185      	sbcs	r5, r0
1000a0a0:	430d      	orrs	r5, r1
1000a0a2:	076b      	lsls	r3, r5, #29
1000a0a4:	d004      	beq.n	1000a0b0 <__aeabi_fmul+0x22c>
1000a0a6:	230f      	movs	r3, #15
1000a0a8:	402b      	ands	r3, r5
1000a0aa:	2b04      	cmp	r3, #4
1000a0ac:	d000      	beq.n	1000a0b0 <__aeabi_fmul+0x22c>
1000a0ae:	3504      	adds	r5, #4
1000a0b0:	016b      	lsls	r3, r5, #5
1000a0b2:	d504      	bpl.n	1000a0be <__aeabi_fmul+0x23a>
1000a0b4:	2401      	movs	r4, #1
1000a0b6:	2301      	movs	r3, #1
1000a0b8:	4014      	ands	r4, r2
1000a0ba:	2500      	movs	r5, #0
1000a0bc:	e729      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a0be:	2401      	movs	r4, #1
1000a0c0:	01ad      	lsls	r5, r5, #6
1000a0c2:	0a6d      	lsrs	r5, r5, #9
1000a0c4:	4014      	ands	r4, r2
1000a0c6:	2300      	movs	r3, #0
1000a0c8:	e723      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a0ca:	2380      	movs	r3, #128	; 0x80
1000a0cc:	03db      	lsls	r3, r3, #15
1000a0ce:	431d      	orrs	r5, r3
1000a0d0:	2401      	movs	r4, #1
1000a0d2:	465b      	mov	r3, fp
1000a0d4:	026d      	lsls	r5, r5, #9
1000a0d6:	4023      	ands	r3, r4
1000a0d8:	1c1c      	adds	r4, r3, #0
1000a0da:	0a6d      	lsrs	r5, r5, #9
1000a0dc:	23ff      	movs	r3, #255	; 0xff
1000a0de:	e718      	b.n	10009f12 <__aeabi_fmul+0x8e>
1000a0e0:	1000c5b0 	.word	0x1000c5b0
1000a0e4:	f7ffffff 	.word	0xf7ffffff

1000a0e8 <__aeabi_fsub>:
1000a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a0ea:	004a      	lsls	r2, r1, #1
1000a0ec:	0243      	lsls	r3, r0, #9
1000a0ee:	0044      	lsls	r4, r0, #1
1000a0f0:	024d      	lsls	r5, r1, #9
1000a0f2:	0fc0      	lsrs	r0, r0, #31
1000a0f4:	0e24      	lsrs	r4, r4, #24
1000a0f6:	1c06      	adds	r6, r0, #0
1000a0f8:	099b      	lsrs	r3, r3, #6
1000a0fa:	0e12      	lsrs	r2, r2, #24
1000a0fc:	0fc9      	lsrs	r1, r1, #31
1000a0fe:	09ad      	lsrs	r5, r5, #6
1000a100:	2aff      	cmp	r2, #255	; 0xff
1000a102:	d100      	bne.n	1000a106 <__aeabi_fsub+0x1e>
1000a104:	e075      	b.n	1000a1f2 <__aeabi_fsub+0x10a>
1000a106:	2701      	movs	r7, #1
1000a108:	4079      	eors	r1, r7
1000a10a:	4288      	cmp	r0, r1
1000a10c:	d050      	beq.n	1000a1b0 <__aeabi_fsub+0xc8>
1000a10e:	1aa0      	subs	r0, r4, r2
1000a110:	2800      	cmp	r0, #0
1000a112:	dc00      	bgt.n	1000a116 <__aeabi_fsub+0x2e>
1000a114:	e08f      	b.n	1000a236 <__aeabi_fsub+0x14e>
1000a116:	2a00      	cmp	r2, #0
1000a118:	d11e      	bne.n	1000a158 <__aeabi_fsub+0x70>
1000a11a:	2d00      	cmp	r5, #0
1000a11c:	d000      	beq.n	1000a120 <__aeabi_fsub+0x38>
1000a11e:	e075      	b.n	1000a20c <__aeabi_fsub+0x124>
1000a120:	075a      	lsls	r2, r3, #29
1000a122:	d004      	beq.n	1000a12e <__aeabi_fsub+0x46>
1000a124:	220f      	movs	r2, #15
1000a126:	401a      	ands	r2, r3
1000a128:	2a04      	cmp	r2, #4
1000a12a:	d000      	beq.n	1000a12e <__aeabi_fsub+0x46>
1000a12c:	3304      	adds	r3, #4
1000a12e:	2280      	movs	r2, #128	; 0x80
1000a130:	2001      	movs	r0, #1
1000a132:	04d2      	lsls	r2, r2, #19
1000a134:	401a      	ands	r2, r3
1000a136:	4030      	ands	r0, r6
1000a138:	2a00      	cmp	r2, #0
1000a13a:	d032      	beq.n	1000a1a2 <__aeabi_fsub+0xba>
1000a13c:	3401      	adds	r4, #1
1000a13e:	2cff      	cmp	r4, #255	; 0xff
1000a140:	d100      	bne.n	1000a144 <__aeabi_fsub+0x5c>
1000a142:	e084      	b.n	1000a24e <__aeabi_fsub+0x166>
1000a144:	019b      	lsls	r3, r3, #6
1000a146:	0a5b      	lsrs	r3, r3, #9
1000a148:	b2e4      	uxtb	r4, r4
1000a14a:	025b      	lsls	r3, r3, #9
1000a14c:	05e4      	lsls	r4, r4, #23
1000a14e:	0a5b      	lsrs	r3, r3, #9
1000a150:	4323      	orrs	r3, r4
1000a152:	07c0      	lsls	r0, r0, #31
1000a154:	4318      	orrs	r0, r3
1000a156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a158:	2cff      	cmp	r4, #255	; 0xff
1000a15a:	d0e1      	beq.n	1000a120 <__aeabi_fsub+0x38>
1000a15c:	2280      	movs	r2, #128	; 0x80
1000a15e:	04d2      	lsls	r2, r2, #19
1000a160:	4315      	orrs	r5, r2
1000a162:	281b      	cmp	r0, #27
1000a164:	dd7a      	ble.n	1000a25c <__aeabi_fsub+0x174>
1000a166:	2501      	movs	r5, #1
1000a168:	1b5b      	subs	r3, r3, r5
1000a16a:	015a      	lsls	r2, r3, #5
1000a16c:	d55d      	bpl.n	1000a22a <__aeabi_fsub+0x142>
1000a16e:	019b      	lsls	r3, r3, #6
1000a170:	099f      	lsrs	r7, r3, #6
1000a172:	1c38      	adds	r0, r7, #0
1000a174:	f001 fffc 	bl	1000c170 <__clzsi2>
1000a178:	3805      	subs	r0, #5
1000a17a:	4087      	lsls	r7, r0
1000a17c:	4284      	cmp	r4, r0
1000a17e:	dc69      	bgt.n	1000a254 <__aeabi_fsub+0x16c>
1000a180:	1b00      	subs	r0, r0, r4
1000a182:	241f      	movs	r4, #31
1000a184:	1c3a      	adds	r2, r7, #0
1000a186:	1c43      	adds	r3, r0, #1
1000a188:	1a20      	subs	r0, r4, r0
1000a18a:	40da      	lsrs	r2, r3
1000a18c:	4087      	lsls	r7, r0
1000a18e:	1c13      	adds	r3, r2, #0
1000a190:	1e7c      	subs	r4, r7, #1
1000a192:	41a7      	sbcs	r7, r4
1000a194:	2400      	movs	r4, #0
1000a196:	433b      	orrs	r3, r7
1000a198:	e7c2      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a19a:	1e13      	subs	r3, r2, #0
1000a19c:	d145      	bne.n	1000a22a <__aeabi_fsub+0x142>
1000a19e:	2300      	movs	r3, #0
1000a1a0:	2000      	movs	r0, #0
1000a1a2:	08db      	lsrs	r3, r3, #3
1000a1a4:	2cff      	cmp	r4, #255	; 0xff
1000a1a6:	d028      	beq.n	1000a1fa <__aeabi_fsub+0x112>
1000a1a8:	025b      	lsls	r3, r3, #9
1000a1aa:	0a5b      	lsrs	r3, r3, #9
1000a1ac:	b2e4      	uxtb	r4, r4
1000a1ae:	e7cc      	b.n	1000a14a <__aeabi_fsub+0x62>
1000a1b0:	1aa1      	subs	r1, r4, r2
1000a1b2:	2900      	cmp	r1, #0
1000a1b4:	dd5b      	ble.n	1000a26e <__aeabi_fsub+0x186>
1000a1b6:	2a00      	cmp	r2, #0
1000a1b8:	d02e      	beq.n	1000a218 <__aeabi_fsub+0x130>
1000a1ba:	2cff      	cmp	r4, #255	; 0xff
1000a1bc:	d0b0      	beq.n	1000a120 <__aeabi_fsub+0x38>
1000a1be:	2280      	movs	r2, #128	; 0x80
1000a1c0:	04d2      	lsls	r2, r2, #19
1000a1c2:	4315      	orrs	r5, r2
1000a1c4:	291b      	cmp	r1, #27
1000a1c6:	dc74      	bgt.n	1000a2b2 <__aeabi_fsub+0x1ca>
1000a1c8:	1c2f      	adds	r7, r5, #0
1000a1ca:	2220      	movs	r2, #32
1000a1cc:	40cf      	lsrs	r7, r1
1000a1ce:	1a51      	subs	r1, r2, r1
1000a1d0:	408d      	lsls	r5, r1
1000a1d2:	1e69      	subs	r1, r5, #1
1000a1d4:	418d      	sbcs	r5, r1
1000a1d6:	433d      	orrs	r5, r7
1000a1d8:	195b      	adds	r3, r3, r5
1000a1da:	015a      	lsls	r2, r3, #5
1000a1dc:	d525      	bpl.n	1000a22a <__aeabi_fsub+0x142>
1000a1de:	3401      	adds	r4, #1
1000a1e0:	2cff      	cmp	r4, #255	; 0xff
1000a1e2:	d074      	beq.n	1000a2ce <__aeabi_fsub+0x1e6>
1000a1e4:	2101      	movs	r1, #1
1000a1e6:	4a7e      	ldr	r2, [pc, #504]	; (1000a3e0 <__aeabi_fsub+0x2f8>)
1000a1e8:	4019      	ands	r1, r3
1000a1ea:	4013      	ands	r3, r2
1000a1ec:	085b      	lsrs	r3, r3, #1
1000a1ee:	430b      	orrs	r3, r1
1000a1f0:	e796      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a1f2:	2d00      	cmp	r5, #0
1000a1f4:	d000      	beq.n	1000a1f8 <__aeabi_fsub+0x110>
1000a1f6:	e788      	b.n	1000a10a <__aeabi_fsub+0x22>
1000a1f8:	e785      	b.n	1000a106 <__aeabi_fsub+0x1e>
1000a1fa:	2b00      	cmp	r3, #0
1000a1fc:	d027      	beq.n	1000a24e <__aeabi_fsub+0x166>
1000a1fe:	2280      	movs	r2, #128	; 0x80
1000a200:	03d2      	lsls	r2, r2, #15
1000a202:	4313      	orrs	r3, r2
1000a204:	025b      	lsls	r3, r3, #9
1000a206:	0a5b      	lsrs	r3, r3, #9
1000a208:	24ff      	movs	r4, #255	; 0xff
1000a20a:	e79e      	b.n	1000a14a <__aeabi_fsub+0x62>
1000a20c:	3801      	subs	r0, #1
1000a20e:	2800      	cmp	r0, #0
1000a210:	d0aa      	beq.n	1000a168 <__aeabi_fsub+0x80>
1000a212:	2cff      	cmp	r4, #255	; 0xff
1000a214:	d1a5      	bne.n	1000a162 <__aeabi_fsub+0x7a>
1000a216:	e783      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a218:	2d00      	cmp	r5, #0
1000a21a:	d100      	bne.n	1000a21e <__aeabi_fsub+0x136>
1000a21c:	e780      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a21e:	3901      	subs	r1, #1
1000a220:	2900      	cmp	r1, #0
1000a222:	d0d9      	beq.n	1000a1d8 <__aeabi_fsub+0xf0>
1000a224:	2cff      	cmp	r4, #255	; 0xff
1000a226:	d1cd      	bne.n	1000a1c4 <__aeabi_fsub+0xdc>
1000a228:	e77a      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a22a:	075a      	lsls	r2, r3, #29
1000a22c:	d000      	beq.n	1000a230 <__aeabi_fsub+0x148>
1000a22e:	e779      	b.n	1000a124 <__aeabi_fsub+0x3c>
1000a230:	2001      	movs	r0, #1
1000a232:	4030      	ands	r0, r6
1000a234:	e7b5      	b.n	1000a1a2 <__aeabi_fsub+0xba>
1000a236:	2800      	cmp	r0, #0
1000a238:	d125      	bne.n	1000a286 <__aeabi_fsub+0x19e>
1000a23a:	1c62      	adds	r2, r4, #1
1000a23c:	b2d2      	uxtb	r2, r2
1000a23e:	2a01      	cmp	r2, #1
1000a240:	dd55      	ble.n	1000a2ee <__aeabi_fsub+0x206>
1000a242:	1b5f      	subs	r7, r3, r5
1000a244:	017a      	lsls	r2, r7, #5
1000a246:	d52d      	bpl.n	1000a2a4 <__aeabi_fsub+0x1bc>
1000a248:	1aef      	subs	r7, r5, r3
1000a24a:	1c0e      	adds	r6, r1, #0
1000a24c:	e791      	b.n	1000a172 <__aeabi_fsub+0x8a>
1000a24e:	24ff      	movs	r4, #255	; 0xff
1000a250:	2300      	movs	r3, #0
1000a252:	e77a      	b.n	1000a14a <__aeabi_fsub+0x62>
1000a254:	4b62      	ldr	r3, [pc, #392]	; (1000a3e0 <__aeabi_fsub+0x2f8>)
1000a256:	1a24      	subs	r4, r4, r0
1000a258:	403b      	ands	r3, r7
1000a25a:	e761      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a25c:	1c29      	adds	r1, r5, #0
1000a25e:	2220      	movs	r2, #32
1000a260:	40c1      	lsrs	r1, r0
1000a262:	1a10      	subs	r0, r2, r0
1000a264:	4085      	lsls	r5, r0
1000a266:	1e68      	subs	r0, r5, #1
1000a268:	4185      	sbcs	r5, r0
1000a26a:	430d      	orrs	r5, r1
1000a26c:	e77c      	b.n	1000a168 <__aeabi_fsub+0x80>
1000a26e:	2900      	cmp	r1, #0
1000a270:	d146      	bne.n	1000a300 <__aeabi_fsub+0x218>
1000a272:	1c62      	adds	r2, r4, #1
1000a274:	b2d1      	uxtb	r1, r2
1000a276:	2901      	cmp	r1, #1
1000a278:	dd2b      	ble.n	1000a2d2 <__aeabi_fsub+0x1ea>
1000a27a:	2aff      	cmp	r2, #255	; 0xff
1000a27c:	d026      	beq.n	1000a2cc <__aeabi_fsub+0x1e4>
1000a27e:	18eb      	adds	r3, r5, r3
1000a280:	085b      	lsrs	r3, r3, #1
1000a282:	1c14      	adds	r4, r2, #0
1000a284:	e74c      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a286:	2c00      	cmp	r4, #0
1000a288:	d015      	beq.n	1000a2b6 <__aeabi_fsub+0x1ce>
1000a28a:	2aff      	cmp	r2, #255	; 0xff
1000a28c:	d01a      	beq.n	1000a2c4 <__aeabi_fsub+0x1dc>
1000a28e:	2480      	movs	r4, #128	; 0x80
1000a290:	04e4      	lsls	r4, r4, #19
1000a292:	4240      	negs	r0, r0
1000a294:	4323      	orrs	r3, r4
1000a296:	281b      	cmp	r0, #27
1000a298:	dd4d      	ble.n	1000a336 <__aeabi_fsub+0x24e>
1000a29a:	2301      	movs	r3, #1
1000a29c:	1aeb      	subs	r3, r5, r3
1000a29e:	1c14      	adds	r4, r2, #0
1000a2a0:	1c0e      	adds	r6, r1, #0
1000a2a2:	e762      	b.n	1000a16a <__aeabi_fsub+0x82>
1000a2a4:	2f00      	cmp	r7, #0
1000a2a6:	d000      	beq.n	1000a2aa <__aeabi_fsub+0x1c2>
1000a2a8:	e763      	b.n	1000a172 <__aeabi_fsub+0x8a>
1000a2aa:	2300      	movs	r3, #0
1000a2ac:	2000      	movs	r0, #0
1000a2ae:	2400      	movs	r4, #0
1000a2b0:	e777      	b.n	1000a1a2 <__aeabi_fsub+0xba>
1000a2b2:	2501      	movs	r5, #1
1000a2b4:	e790      	b.n	1000a1d8 <__aeabi_fsub+0xf0>
1000a2b6:	2b00      	cmp	r3, #0
1000a2b8:	d039      	beq.n	1000a32e <__aeabi_fsub+0x246>
1000a2ba:	43c0      	mvns	r0, r0
1000a2bc:	2800      	cmp	r0, #0
1000a2be:	d0ed      	beq.n	1000a29c <__aeabi_fsub+0x1b4>
1000a2c0:	2aff      	cmp	r2, #255	; 0xff
1000a2c2:	d1e8      	bne.n	1000a296 <__aeabi_fsub+0x1ae>
1000a2c4:	1c2b      	adds	r3, r5, #0
1000a2c6:	24ff      	movs	r4, #255	; 0xff
1000a2c8:	1c0e      	adds	r6, r1, #0
1000a2ca:	e729      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a2cc:	24ff      	movs	r4, #255	; 0xff
1000a2ce:	2300      	movs	r3, #0
1000a2d0:	e767      	b.n	1000a1a2 <__aeabi_fsub+0xba>
1000a2d2:	2c00      	cmp	r4, #0
1000a2d4:	d15a      	bne.n	1000a38c <__aeabi_fsub+0x2a4>
1000a2d6:	2b00      	cmp	r3, #0
1000a2d8:	d07f      	beq.n	1000a3da <__aeabi_fsub+0x2f2>
1000a2da:	2d00      	cmp	r5, #0
1000a2dc:	d100      	bne.n	1000a2e0 <__aeabi_fsub+0x1f8>
1000a2de:	e71f      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a2e0:	195b      	adds	r3, r3, r5
1000a2e2:	015a      	lsls	r2, r3, #5
1000a2e4:	d5a1      	bpl.n	1000a22a <__aeabi_fsub+0x142>
1000a2e6:	4a3e      	ldr	r2, [pc, #248]	; (1000a3e0 <__aeabi_fsub+0x2f8>)
1000a2e8:	3401      	adds	r4, #1
1000a2ea:	4013      	ands	r3, r2
1000a2ec:	e718      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a2ee:	2c00      	cmp	r4, #0
1000a2f0:	d115      	bne.n	1000a31e <__aeabi_fsub+0x236>
1000a2f2:	2b00      	cmp	r3, #0
1000a2f4:	d12f      	bne.n	1000a356 <__aeabi_fsub+0x26e>
1000a2f6:	2d00      	cmp	r5, #0
1000a2f8:	d05e      	beq.n	1000a3b8 <__aeabi_fsub+0x2d0>
1000a2fa:	1c2b      	adds	r3, r5, #0
1000a2fc:	1c0e      	adds	r6, r1, #0
1000a2fe:	e70f      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a300:	2c00      	cmp	r4, #0
1000a302:	d121      	bne.n	1000a348 <__aeabi_fsub+0x260>
1000a304:	2b00      	cmp	r3, #0
1000a306:	d054      	beq.n	1000a3b2 <__aeabi_fsub+0x2ca>
1000a308:	43c9      	mvns	r1, r1
1000a30a:	2900      	cmp	r1, #0
1000a30c:	d004      	beq.n	1000a318 <__aeabi_fsub+0x230>
1000a30e:	2aff      	cmp	r2, #255	; 0xff
1000a310:	d04c      	beq.n	1000a3ac <__aeabi_fsub+0x2c4>
1000a312:	291b      	cmp	r1, #27
1000a314:	dd58      	ble.n	1000a3c8 <__aeabi_fsub+0x2e0>
1000a316:	2301      	movs	r3, #1
1000a318:	195b      	adds	r3, r3, r5
1000a31a:	1c14      	adds	r4, r2, #0
1000a31c:	e75d      	b.n	1000a1da <__aeabi_fsub+0xf2>
1000a31e:	2b00      	cmp	r3, #0
1000a320:	d123      	bne.n	1000a36a <__aeabi_fsub+0x282>
1000a322:	2d00      	cmp	r5, #0
1000a324:	d04b      	beq.n	1000a3be <__aeabi_fsub+0x2d6>
1000a326:	1c2b      	adds	r3, r5, #0
1000a328:	1c0e      	adds	r6, r1, #0
1000a32a:	24ff      	movs	r4, #255	; 0xff
1000a32c:	e6f8      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a32e:	1c2b      	adds	r3, r5, #0
1000a330:	1c14      	adds	r4, r2, #0
1000a332:	1c0e      	adds	r6, r1, #0
1000a334:	e6f4      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a336:	1c1e      	adds	r6, r3, #0
1000a338:	2420      	movs	r4, #32
1000a33a:	40c6      	lsrs	r6, r0
1000a33c:	1a20      	subs	r0, r4, r0
1000a33e:	4083      	lsls	r3, r0
1000a340:	1e58      	subs	r0, r3, #1
1000a342:	4183      	sbcs	r3, r0
1000a344:	4333      	orrs	r3, r6
1000a346:	e7a9      	b.n	1000a29c <__aeabi_fsub+0x1b4>
1000a348:	2aff      	cmp	r2, #255	; 0xff
1000a34a:	d02f      	beq.n	1000a3ac <__aeabi_fsub+0x2c4>
1000a34c:	2480      	movs	r4, #128	; 0x80
1000a34e:	04e4      	lsls	r4, r4, #19
1000a350:	4249      	negs	r1, r1
1000a352:	4323      	orrs	r3, r4
1000a354:	e7dd      	b.n	1000a312 <__aeabi_fsub+0x22a>
1000a356:	2d00      	cmp	r5, #0
1000a358:	d100      	bne.n	1000a35c <__aeabi_fsub+0x274>
1000a35a:	e6e1      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a35c:	1b5a      	subs	r2, r3, r5
1000a35e:	0150      	lsls	r0, r2, #5
1000a360:	d400      	bmi.n	1000a364 <__aeabi_fsub+0x27c>
1000a362:	e71a      	b.n	1000a19a <__aeabi_fsub+0xb2>
1000a364:	1aeb      	subs	r3, r5, r3
1000a366:	1c0e      	adds	r6, r1, #0
1000a368:	e6da      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a36a:	24ff      	movs	r4, #255	; 0xff
1000a36c:	2d00      	cmp	r5, #0
1000a36e:	d100      	bne.n	1000a372 <__aeabi_fsub+0x28a>
1000a370:	e6d6      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a372:	2280      	movs	r2, #128	; 0x80
1000a374:	08db      	lsrs	r3, r3, #3
1000a376:	03d2      	lsls	r2, r2, #15
1000a378:	4213      	tst	r3, r2
1000a37a:	d004      	beq.n	1000a386 <__aeabi_fsub+0x29e>
1000a37c:	08ed      	lsrs	r5, r5, #3
1000a37e:	4215      	tst	r5, r2
1000a380:	d101      	bne.n	1000a386 <__aeabi_fsub+0x29e>
1000a382:	1c2b      	adds	r3, r5, #0
1000a384:	1c0e      	adds	r6, r1, #0
1000a386:	00db      	lsls	r3, r3, #3
1000a388:	24ff      	movs	r4, #255	; 0xff
1000a38a:	e6c9      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a38c:	2b00      	cmp	r3, #0
1000a38e:	d00d      	beq.n	1000a3ac <__aeabi_fsub+0x2c4>
1000a390:	24ff      	movs	r4, #255	; 0xff
1000a392:	2d00      	cmp	r5, #0
1000a394:	d100      	bne.n	1000a398 <__aeabi_fsub+0x2b0>
1000a396:	e6c3      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a398:	2280      	movs	r2, #128	; 0x80
1000a39a:	08db      	lsrs	r3, r3, #3
1000a39c:	03d2      	lsls	r2, r2, #15
1000a39e:	4213      	tst	r3, r2
1000a3a0:	d0f1      	beq.n	1000a386 <__aeabi_fsub+0x29e>
1000a3a2:	08ed      	lsrs	r5, r5, #3
1000a3a4:	4215      	tst	r5, r2
1000a3a6:	d1ee      	bne.n	1000a386 <__aeabi_fsub+0x29e>
1000a3a8:	1c2b      	adds	r3, r5, #0
1000a3aa:	e7ec      	b.n	1000a386 <__aeabi_fsub+0x29e>
1000a3ac:	1c2b      	adds	r3, r5, #0
1000a3ae:	24ff      	movs	r4, #255	; 0xff
1000a3b0:	e6b6      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a3b2:	1c2b      	adds	r3, r5, #0
1000a3b4:	1c14      	adds	r4, r2, #0
1000a3b6:	e6b3      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a3b8:	1c23      	adds	r3, r4, #0
1000a3ba:	2000      	movs	r0, #0
1000a3bc:	e6f1      	b.n	1000a1a2 <__aeabi_fsub+0xba>
1000a3be:	2380      	movs	r3, #128	; 0x80
1000a3c0:	2000      	movs	r0, #0
1000a3c2:	049b      	lsls	r3, r3, #18
1000a3c4:	24ff      	movs	r4, #255	; 0xff
1000a3c6:	e6ec      	b.n	1000a1a2 <__aeabi_fsub+0xba>
1000a3c8:	1c1f      	adds	r7, r3, #0
1000a3ca:	2420      	movs	r4, #32
1000a3cc:	40cf      	lsrs	r7, r1
1000a3ce:	1a61      	subs	r1, r4, r1
1000a3d0:	408b      	lsls	r3, r1
1000a3d2:	1e59      	subs	r1, r3, #1
1000a3d4:	418b      	sbcs	r3, r1
1000a3d6:	433b      	orrs	r3, r7
1000a3d8:	e79e      	b.n	1000a318 <__aeabi_fsub+0x230>
1000a3da:	1c2b      	adds	r3, r5, #0
1000a3dc:	e6a0      	b.n	1000a120 <__aeabi_fsub+0x38>
1000a3de:	46c0      	nop			; (mov r8, r8)
1000a3e0:	fbffffff 	.word	0xfbffffff

1000a3e4 <__aeabi_f2iz>:
1000a3e4:	0242      	lsls	r2, r0, #9
1000a3e6:	0a51      	lsrs	r1, r2, #9
1000a3e8:	0042      	lsls	r2, r0, #1
1000a3ea:	0fc3      	lsrs	r3, r0, #31
1000a3ec:	0e12      	lsrs	r2, r2, #24
1000a3ee:	2000      	movs	r0, #0
1000a3f0:	2a7e      	cmp	r2, #126	; 0x7e
1000a3f2:	dd0d      	ble.n	1000a410 <__aeabi_f2iz+0x2c>
1000a3f4:	2a9d      	cmp	r2, #157	; 0x9d
1000a3f6:	dc0c      	bgt.n	1000a412 <__aeabi_f2iz+0x2e>
1000a3f8:	2080      	movs	r0, #128	; 0x80
1000a3fa:	0400      	lsls	r0, r0, #16
1000a3fc:	4301      	orrs	r1, r0
1000a3fe:	2a95      	cmp	r2, #149	; 0x95
1000a400:	dc0a      	bgt.n	1000a418 <__aeabi_f2iz+0x34>
1000a402:	2096      	movs	r0, #150	; 0x96
1000a404:	1a82      	subs	r2, r0, r2
1000a406:	40d1      	lsrs	r1, r2
1000a408:	1c0a      	adds	r2, r1, #0
1000a40a:	4258      	negs	r0, r3
1000a40c:	4042      	eors	r2, r0
1000a40e:	18d0      	adds	r0, r2, r3
1000a410:	4770      	bx	lr
1000a412:	4a03      	ldr	r2, [pc, #12]	; (1000a420 <__aeabi_f2iz+0x3c>)
1000a414:	1898      	adds	r0, r3, r2
1000a416:	e7fb      	b.n	1000a410 <__aeabi_f2iz+0x2c>
1000a418:	3a96      	subs	r2, #150	; 0x96
1000a41a:	4091      	lsls	r1, r2
1000a41c:	1c0a      	adds	r2, r1, #0
1000a41e:	e7f4      	b.n	1000a40a <__aeabi_f2iz+0x26>
1000a420:	7fffffff 	.word	0x7fffffff

1000a424 <__aeabi_i2f>:
1000a424:	b570      	push	{r4, r5, r6, lr}
1000a426:	1e04      	subs	r4, r0, #0
1000a428:	d039      	beq.n	1000a49e <__aeabi_i2f+0x7a>
1000a42a:	0fc5      	lsrs	r5, r0, #31
1000a42c:	d000      	beq.n	1000a430 <__aeabi_i2f+0xc>
1000a42e:	4244      	negs	r4, r0
1000a430:	1c20      	adds	r0, r4, #0
1000a432:	f001 fe9d 	bl	1000c170 <__clzsi2>
1000a436:	239e      	movs	r3, #158	; 0x9e
1000a438:	1c26      	adds	r6, r4, #0
1000a43a:	1a1b      	subs	r3, r3, r0
1000a43c:	2b96      	cmp	r3, #150	; 0x96
1000a43e:	dc07      	bgt.n	1000a450 <__aeabi_i2f+0x2c>
1000a440:	2808      	cmp	r0, #8
1000a442:	dd01      	ble.n	1000a448 <__aeabi_i2f+0x24>
1000a444:	3808      	subs	r0, #8
1000a446:	4084      	lsls	r4, r0
1000a448:	0264      	lsls	r4, r4, #9
1000a44a:	0a64      	lsrs	r4, r4, #9
1000a44c:	b2d8      	uxtb	r0, r3
1000a44e:	e01e      	b.n	1000a48e <__aeabi_i2f+0x6a>
1000a450:	2b99      	cmp	r3, #153	; 0x99
1000a452:	dd0a      	ble.n	1000a46a <__aeabi_i2f+0x46>
1000a454:	2205      	movs	r2, #5
1000a456:	1c21      	adds	r1, r4, #0
1000a458:	1a12      	subs	r2, r2, r0
1000a45a:	40d1      	lsrs	r1, r2
1000a45c:	1c0a      	adds	r2, r1, #0
1000a45e:	1c01      	adds	r1, r0, #0
1000a460:	311b      	adds	r1, #27
1000a462:	408e      	lsls	r6, r1
1000a464:	1e71      	subs	r1, r6, #1
1000a466:	418e      	sbcs	r6, r1
1000a468:	4316      	orrs	r6, r2
1000a46a:	2805      	cmp	r0, #5
1000a46c:	dd01      	ble.n	1000a472 <__aeabi_i2f+0x4e>
1000a46e:	1f42      	subs	r2, r0, #5
1000a470:	4096      	lsls	r6, r2
1000a472:	4c0f      	ldr	r4, [pc, #60]	; (1000a4b0 <__aeabi_i2f+0x8c>)
1000a474:	4034      	ands	r4, r6
1000a476:	0772      	lsls	r2, r6, #29
1000a478:	d004      	beq.n	1000a484 <__aeabi_i2f+0x60>
1000a47a:	220f      	movs	r2, #15
1000a47c:	4016      	ands	r6, r2
1000a47e:	2e04      	cmp	r6, #4
1000a480:	d000      	beq.n	1000a484 <__aeabi_i2f+0x60>
1000a482:	3404      	adds	r4, #4
1000a484:	0162      	lsls	r2, r4, #5
1000a486:	d40e      	bmi.n	1000a4a6 <__aeabi_i2f+0x82>
1000a488:	01a4      	lsls	r4, r4, #6
1000a48a:	0a64      	lsrs	r4, r4, #9
1000a48c:	b2d8      	uxtb	r0, r3
1000a48e:	0264      	lsls	r4, r4, #9
1000a490:	05c0      	lsls	r0, r0, #23
1000a492:	0a64      	lsrs	r4, r4, #9
1000a494:	07ed      	lsls	r5, r5, #31
1000a496:	4304      	orrs	r4, r0
1000a498:	432c      	orrs	r4, r5
1000a49a:	1c20      	adds	r0, r4, #0
1000a49c:	bd70      	pop	{r4, r5, r6, pc}
1000a49e:	2500      	movs	r5, #0
1000a4a0:	2000      	movs	r0, #0
1000a4a2:	2400      	movs	r4, #0
1000a4a4:	e7f3      	b.n	1000a48e <__aeabi_i2f+0x6a>
1000a4a6:	4b02      	ldr	r3, [pc, #8]	; (1000a4b0 <__aeabi_i2f+0x8c>)
1000a4a8:	401c      	ands	r4, r3
1000a4aa:	239f      	movs	r3, #159	; 0x9f
1000a4ac:	1a1b      	subs	r3, r3, r0
1000a4ae:	e7eb      	b.n	1000a488 <__aeabi_i2f+0x64>
1000a4b0:	fbffffff 	.word	0xfbffffff

1000a4b4 <__aeabi_dadd>:
1000a4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4b6:	4645      	mov	r5, r8
1000a4b8:	4657      	mov	r7, sl
1000a4ba:	464e      	mov	r6, r9
1000a4bc:	4694      	mov	ip, r2
1000a4be:	004c      	lsls	r4, r1, #1
1000a4c0:	030a      	lsls	r2, r1, #12
1000a4c2:	0fc9      	lsrs	r1, r1, #31
1000a4c4:	b4e0      	push	{r5, r6, r7}
1000a4c6:	4688      	mov	r8, r1
1000a4c8:	1c0e      	adds	r6, r1, #0
1000a4ca:	0319      	lsls	r1, r3, #12
1000a4cc:	0f47      	lsrs	r7, r0, #29
1000a4ce:	00c5      	lsls	r5, r0, #3
1000a4d0:	0a48      	lsrs	r0, r1, #9
1000a4d2:	4661      	mov	r1, ip
1000a4d4:	0f49      	lsrs	r1, r1, #29
1000a4d6:	4301      	orrs	r1, r0
1000a4d8:	4660      	mov	r0, ip
1000a4da:	0a52      	lsrs	r2, r2, #9
1000a4dc:	4317      	orrs	r7, r2
1000a4de:	00c0      	lsls	r0, r0, #3
1000a4e0:	005a      	lsls	r2, r3, #1
1000a4e2:	0d64      	lsrs	r4, r4, #21
1000a4e4:	0d52      	lsrs	r2, r2, #21
1000a4e6:	0fdb      	lsrs	r3, r3, #31
1000a4e8:	4684      	mov	ip, r0
1000a4ea:	4598      	cmp	r8, r3
1000a4ec:	d100      	bne.n	1000a4f0 <__aeabi_dadd+0x3c>
1000a4ee:	e0a7      	b.n	1000a640 <__aeabi_dadd+0x18c>
1000a4f0:	1aa0      	subs	r0, r4, r2
1000a4f2:	2800      	cmp	r0, #0
1000a4f4:	dc00      	bgt.n	1000a4f8 <__aeabi_dadd+0x44>
1000a4f6:	e101      	b.n	1000a6fc <__aeabi_dadd+0x248>
1000a4f8:	2a00      	cmp	r2, #0
1000a4fa:	d13d      	bne.n	1000a578 <__aeabi_dadd+0xc4>
1000a4fc:	4663      	mov	r3, ip
1000a4fe:	430b      	orrs	r3, r1
1000a500:	d000      	beq.n	1000a504 <__aeabi_dadd+0x50>
1000a502:	e0d4      	b.n	1000a6ae <__aeabi_dadd+0x1fa>
1000a504:	076b      	lsls	r3, r5, #29
1000a506:	d100      	bne.n	1000a50a <__aeabi_dadd+0x56>
1000a508:	e088      	b.n	1000a61c <__aeabi_dadd+0x168>
1000a50a:	230f      	movs	r3, #15
1000a50c:	402b      	ands	r3, r5
1000a50e:	2b04      	cmp	r3, #4
1000a510:	d100      	bne.n	1000a514 <__aeabi_dadd+0x60>
1000a512:	e083      	b.n	1000a61c <__aeabi_dadd+0x168>
1000a514:	1d2a      	adds	r2, r5, #4
1000a516:	42aa      	cmp	r2, r5
1000a518:	41ad      	sbcs	r5, r5
1000a51a:	2380      	movs	r3, #128	; 0x80
1000a51c:	426d      	negs	r5, r5
1000a51e:	197f      	adds	r7, r7, r5
1000a520:	041b      	lsls	r3, r3, #16
1000a522:	403b      	ands	r3, r7
1000a524:	4646      	mov	r6, r8
1000a526:	1c15      	adds	r5, r2, #0
1000a528:	2b00      	cmp	r3, #0
1000a52a:	d100      	bne.n	1000a52e <__aeabi_dadd+0x7a>
1000a52c:	e07c      	b.n	1000a628 <__aeabi_dadd+0x174>
1000a52e:	4bcc      	ldr	r3, [pc, #816]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a530:	3401      	adds	r4, #1
1000a532:	429c      	cmp	r4, r3
1000a534:	d100      	bne.n	1000a538 <__aeabi_dadd+0x84>
1000a536:	e0fd      	b.n	1000a734 <__aeabi_dadd+0x280>
1000a538:	1c3a      	adds	r2, r7, #0
1000a53a:	4bca      	ldr	r3, [pc, #808]	; (1000a864 <__aeabi_dadd+0x3b0>)
1000a53c:	08ed      	lsrs	r5, r5, #3
1000a53e:	401a      	ands	r2, r3
1000a540:	0750      	lsls	r0, r2, #29
1000a542:	0564      	lsls	r4, r4, #21
1000a544:	0252      	lsls	r2, r2, #9
1000a546:	4305      	orrs	r5, r0
1000a548:	0b12      	lsrs	r2, r2, #12
1000a54a:	0d64      	lsrs	r4, r4, #21
1000a54c:	2100      	movs	r1, #0
1000a54e:	0312      	lsls	r2, r2, #12
1000a550:	0d0b      	lsrs	r3, r1, #20
1000a552:	051b      	lsls	r3, r3, #20
1000a554:	0564      	lsls	r4, r4, #21
1000a556:	0b12      	lsrs	r2, r2, #12
1000a558:	431a      	orrs	r2, r3
1000a55a:	0863      	lsrs	r3, r4, #1
1000a55c:	4cc2      	ldr	r4, [pc, #776]	; (1000a868 <__aeabi_dadd+0x3b4>)
1000a55e:	07f6      	lsls	r6, r6, #31
1000a560:	4014      	ands	r4, r2
1000a562:	431c      	orrs	r4, r3
1000a564:	0064      	lsls	r4, r4, #1
1000a566:	0864      	lsrs	r4, r4, #1
1000a568:	4334      	orrs	r4, r6
1000a56a:	1c28      	adds	r0, r5, #0
1000a56c:	1c21      	adds	r1, r4, #0
1000a56e:	bc1c      	pop	{r2, r3, r4}
1000a570:	4690      	mov	r8, r2
1000a572:	4699      	mov	r9, r3
1000a574:	46a2      	mov	sl, r4
1000a576:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a578:	4bb9      	ldr	r3, [pc, #740]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a57a:	429c      	cmp	r4, r3
1000a57c:	d0c2      	beq.n	1000a504 <__aeabi_dadd+0x50>
1000a57e:	2380      	movs	r3, #128	; 0x80
1000a580:	041b      	lsls	r3, r3, #16
1000a582:	4319      	orrs	r1, r3
1000a584:	2838      	cmp	r0, #56	; 0x38
1000a586:	dd00      	ble.n	1000a58a <__aeabi_dadd+0xd6>
1000a588:	e0ec      	b.n	1000a764 <__aeabi_dadd+0x2b0>
1000a58a:	281f      	cmp	r0, #31
1000a58c:	dd00      	ble.n	1000a590 <__aeabi_dadd+0xdc>
1000a58e:	e121      	b.n	1000a7d4 <__aeabi_dadd+0x320>
1000a590:	2220      	movs	r2, #32
1000a592:	1c0e      	adds	r6, r1, #0
1000a594:	4663      	mov	r3, ip
1000a596:	1a12      	subs	r2, r2, r0
1000a598:	4096      	lsls	r6, r2
1000a59a:	40c3      	lsrs	r3, r0
1000a59c:	4333      	orrs	r3, r6
1000a59e:	4666      	mov	r6, ip
1000a5a0:	4096      	lsls	r6, r2
1000a5a2:	1c32      	adds	r2, r6, #0
1000a5a4:	1e56      	subs	r6, r2, #1
1000a5a6:	41b2      	sbcs	r2, r6
1000a5a8:	4313      	orrs	r3, r2
1000a5aa:	1c0a      	adds	r2, r1, #0
1000a5ac:	40c2      	lsrs	r2, r0
1000a5ae:	1aeb      	subs	r3, r5, r3
1000a5b0:	429d      	cmp	r5, r3
1000a5b2:	41b6      	sbcs	r6, r6
1000a5b4:	1c1d      	adds	r5, r3, #0
1000a5b6:	1aba      	subs	r2, r7, r2
1000a5b8:	4276      	negs	r6, r6
1000a5ba:	1b97      	subs	r7, r2, r6
1000a5bc:	023b      	lsls	r3, r7, #8
1000a5be:	d400      	bmi.n	1000a5c2 <__aeabi_dadd+0x10e>
1000a5c0:	e097      	b.n	1000a6f2 <__aeabi_dadd+0x23e>
1000a5c2:	027a      	lsls	r2, r7, #9
1000a5c4:	0a56      	lsrs	r6, r2, #9
1000a5c6:	2e00      	cmp	r6, #0
1000a5c8:	d100      	bne.n	1000a5cc <__aeabi_dadd+0x118>
1000a5ca:	e0b6      	b.n	1000a73a <__aeabi_dadd+0x286>
1000a5cc:	1c30      	adds	r0, r6, #0
1000a5ce:	f001 fdcf 	bl	1000c170 <__clzsi2>
1000a5d2:	1c03      	adds	r3, r0, #0
1000a5d4:	3b08      	subs	r3, #8
1000a5d6:	2b1f      	cmp	r3, #31
1000a5d8:	dd00      	ble.n	1000a5dc <__aeabi_dadd+0x128>
1000a5da:	e0b7      	b.n	1000a74c <__aeabi_dadd+0x298>
1000a5dc:	409e      	lsls	r6, r3
1000a5de:	1c37      	adds	r7, r6, #0
1000a5e0:	2628      	movs	r6, #40	; 0x28
1000a5e2:	1c2a      	adds	r2, r5, #0
1000a5e4:	1a36      	subs	r6, r6, r0
1000a5e6:	40f2      	lsrs	r2, r6
1000a5e8:	1c16      	adds	r6, r2, #0
1000a5ea:	409d      	lsls	r5, r3
1000a5ec:	433e      	orrs	r6, r7
1000a5ee:	429c      	cmp	r4, r3
1000a5f0:	dd00      	ble.n	1000a5f4 <__aeabi_dadd+0x140>
1000a5f2:	e0b2      	b.n	1000a75a <__aeabi_dadd+0x2a6>
1000a5f4:	1b1c      	subs	r4, r3, r4
1000a5f6:	1c62      	adds	r2, r4, #1
1000a5f8:	2a1f      	cmp	r2, #31
1000a5fa:	dd00      	ble.n	1000a5fe <__aeabi_dadd+0x14a>
1000a5fc:	e0d8      	b.n	1000a7b0 <__aeabi_dadd+0x2fc>
1000a5fe:	231f      	movs	r3, #31
1000a600:	1c29      	adds	r1, r5, #0
1000a602:	1b1c      	subs	r4, r3, r4
1000a604:	1c33      	adds	r3, r6, #0
1000a606:	40a5      	lsls	r5, r4
1000a608:	40a3      	lsls	r3, r4
1000a60a:	40d1      	lsrs	r1, r2
1000a60c:	1e6c      	subs	r4, r5, #1
1000a60e:	41a5      	sbcs	r5, r4
1000a610:	40d6      	lsrs	r6, r2
1000a612:	4319      	orrs	r1, r3
1000a614:	430d      	orrs	r5, r1
1000a616:	1c37      	adds	r7, r6, #0
1000a618:	2400      	movs	r4, #0
1000a61a:	e773      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a61c:	2380      	movs	r3, #128	; 0x80
1000a61e:	041b      	lsls	r3, r3, #16
1000a620:	403b      	ands	r3, r7
1000a622:	4646      	mov	r6, r8
1000a624:	d000      	beq.n	1000a628 <__aeabi_dadd+0x174>
1000a626:	e782      	b.n	1000a52e <__aeabi_dadd+0x7a>
1000a628:	4b8d      	ldr	r3, [pc, #564]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a62a:	08ed      	lsrs	r5, r5, #3
1000a62c:	0778      	lsls	r0, r7, #29
1000a62e:	4305      	orrs	r5, r0
1000a630:	08fa      	lsrs	r2, r7, #3
1000a632:	429c      	cmp	r4, r3
1000a634:	d032      	beq.n	1000a69c <__aeabi_dadd+0x1e8>
1000a636:	0312      	lsls	r2, r2, #12
1000a638:	0564      	lsls	r4, r4, #21
1000a63a:	0b12      	lsrs	r2, r2, #12
1000a63c:	0d64      	lsrs	r4, r4, #21
1000a63e:	e785      	b.n	1000a54c <__aeabi_dadd+0x98>
1000a640:	1aa3      	subs	r3, r4, r2
1000a642:	2b00      	cmp	r3, #0
1000a644:	dc00      	bgt.n	1000a648 <__aeabi_dadd+0x194>
1000a646:	e094      	b.n	1000a772 <__aeabi_dadd+0x2be>
1000a648:	2a00      	cmp	r2, #0
1000a64a:	d03c      	beq.n	1000a6c6 <__aeabi_dadd+0x212>
1000a64c:	4a84      	ldr	r2, [pc, #528]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a64e:	4294      	cmp	r4, r2
1000a650:	d100      	bne.n	1000a654 <__aeabi_dadd+0x1a0>
1000a652:	e757      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a654:	2280      	movs	r2, #128	; 0x80
1000a656:	0412      	lsls	r2, r2, #16
1000a658:	4311      	orrs	r1, r2
1000a65a:	2b38      	cmp	r3, #56	; 0x38
1000a65c:	dc00      	bgt.n	1000a660 <__aeabi_dadd+0x1ac>
1000a65e:	e105      	b.n	1000a86c <__aeabi_dadd+0x3b8>
1000a660:	4663      	mov	r3, ip
1000a662:	4319      	orrs	r1, r3
1000a664:	1e48      	subs	r0, r1, #1
1000a666:	4181      	sbcs	r1, r0
1000a668:	2200      	movs	r2, #0
1000a66a:	b2c8      	uxtb	r0, r1
1000a66c:	1940      	adds	r0, r0, r5
1000a66e:	42a8      	cmp	r0, r5
1000a670:	419b      	sbcs	r3, r3
1000a672:	1c05      	adds	r5, r0, #0
1000a674:	19d2      	adds	r2, r2, r7
1000a676:	425b      	negs	r3, r3
1000a678:	18d7      	adds	r7, r2, r3
1000a67a:	023b      	lsls	r3, r7, #8
1000a67c:	d539      	bpl.n	1000a6f2 <__aeabi_dadd+0x23e>
1000a67e:	4b78      	ldr	r3, [pc, #480]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a680:	3401      	adds	r4, #1
1000a682:	429c      	cmp	r4, r3
1000a684:	d100      	bne.n	1000a688 <__aeabi_dadd+0x1d4>
1000a686:	e14c      	b.n	1000a922 <__aeabi_dadd+0x46e>
1000a688:	2001      	movs	r0, #1
1000a68a:	4a76      	ldr	r2, [pc, #472]	; (1000a864 <__aeabi_dadd+0x3b0>)
1000a68c:	086b      	lsrs	r3, r5, #1
1000a68e:	403a      	ands	r2, r7
1000a690:	4028      	ands	r0, r5
1000a692:	4318      	orrs	r0, r3
1000a694:	07d5      	lsls	r5, r2, #31
1000a696:	4305      	orrs	r5, r0
1000a698:	0857      	lsrs	r7, r2, #1
1000a69a:	e733      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a69c:	1c2b      	adds	r3, r5, #0
1000a69e:	4313      	orrs	r3, r2
1000a6a0:	d048      	beq.n	1000a734 <__aeabi_dadd+0x280>
1000a6a2:	2380      	movs	r3, #128	; 0x80
1000a6a4:	031b      	lsls	r3, r3, #12
1000a6a6:	431a      	orrs	r2, r3
1000a6a8:	0312      	lsls	r2, r2, #12
1000a6aa:	0b12      	lsrs	r2, r2, #12
1000a6ac:	e74e      	b.n	1000a54c <__aeabi_dadd+0x98>
1000a6ae:	3801      	subs	r0, #1
1000a6b0:	2800      	cmp	r0, #0
1000a6b2:	d178      	bne.n	1000a7a6 <__aeabi_dadd+0x2f2>
1000a6b4:	4663      	mov	r3, ip
1000a6b6:	1aee      	subs	r6, r5, r3
1000a6b8:	42b5      	cmp	r5, r6
1000a6ba:	419b      	sbcs	r3, r3
1000a6bc:	1a7a      	subs	r2, r7, r1
1000a6be:	425b      	negs	r3, r3
1000a6c0:	1ad7      	subs	r7, r2, r3
1000a6c2:	1c35      	adds	r5, r6, #0
1000a6c4:	e77a      	b.n	1000a5bc <__aeabi_dadd+0x108>
1000a6c6:	1c02      	adds	r2, r0, #0
1000a6c8:	430a      	orrs	r2, r1
1000a6ca:	d100      	bne.n	1000a6ce <__aeabi_dadd+0x21a>
1000a6cc:	e71a      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a6ce:	3b01      	subs	r3, #1
1000a6d0:	2b00      	cmp	r3, #0
1000a6d2:	d000      	beq.n	1000a6d6 <__aeabi_dadd+0x222>
1000a6d4:	e0f2      	b.n	1000a8bc <__aeabi_dadd+0x408>
1000a6d6:	1940      	adds	r0, r0, r5
1000a6d8:	42a8      	cmp	r0, r5
1000a6da:	419b      	sbcs	r3, r3
1000a6dc:	19ca      	adds	r2, r1, r7
1000a6de:	425b      	negs	r3, r3
1000a6e0:	18d7      	adds	r7, r2, r3
1000a6e2:	1c05      	adds	r5, r0, #0
1000a6e4:	e7c9      	b.n	1000a67a <__aeabi_dadd+0x1c6>
1000a6e6:	1c13      	adds	r3, r2, #0
1000a6e8:	4333      	orrs	r3, r6
1000a6ea:	d100      	bne.n	1000a6ee <__aeabi_dadd+0x23a>
1000a6ec:	e118      	b.n	1000a920 <__aeabi_dadd+0x46c>
1000a6ee:	1c17      	adds	r7, r2, #0
1000a6f0:	1c35      	adds	r5, r6, #0
1000a6f2:	4646      	mov	r6, r8
1000a6f4:	076b      	lsls	r3, r5, #29
1000a6f6:	d000      	beq.n	1000a6fa <__aeabi_dadd+0x246>
1000a6f8:	e707      	b.n	1000a50a <__aeabi_dadd+0x56>
1000a6fa:	e795      	b.n	1000a628 <__aeabi_dadd+0x174>
1000a6fc:	2800      	cmp	r0, #0
1000a6fe:	d17a      	bne.n	1000a7f6 <__aeabi_dadd+0x342>
1000a700:	1c62      	adds	r2, r4, #1
1000a702:	0552      	lsls	r2, r2, #21
1000a704:	0d52      	lsrs	r2, r2, #21
1000a706:	2a01      	cmp	r2, #1
1000a708:	dc00      	bgt.n	1000a70c <__aeabi_dadd+0x258>
1000a70a:	e0fb      	b.n	1000a904 <__aeabi_dadd+0x450>
1000a70c:	4662      	mov	r2, ip
1000a70e:	1aaa      	subs	r2, r5, r2
1000a710:	4295      	cmp	r5, r2
1000a712:	41b6      	sbcs	r6, r6
1000a714:	4691      	mov	r9, r2
1000a716:	1a78      	subs	r0, r7, r1
1000a718:	4272      	negs	r2, r6
1000a71a:	1a86      	subs	r6, r0, r2
1000a71c:	0232      	lsls	r2, r6, #8
1000a71e:	d400      	bmi.n	1000a722 <__aeabi_dadd+0x26e>
1000a720:	e093      	b.n	1000a84a <__aeabi_dadd+0x396>
1000a722:	4662      	mov	r2, ip
1000a724:	1b55      	subs	r5, r2, r5
1000a726:	45ac      	cmp	ip, r5
1000a728:	4180      	sbcs	r0, r0
1000a72a:	1bcf      	subs	r7, r1, r7
1000a72c:	4240      	negs	r0, r0
1000a72e:	1a3e      	subs	r6, r7, r0
1000a730:	4698      	mov	r8, r3
1000a732:	e748      	b.n	1000a5c6 <__aeabi_dadd+0x112>
1000a734:	2200      	movs	r2, #0
1000a736:	2500      	movs	r5, #0
1000a738:	e708      	b.n	1000a54c <__aeabi_dadd+0x98>
1000a73a:	1c28      	adds	r0, r5, #0
1000a73c:	f001 fd18 	bl	1000c170 <__clzsi2>
1000a740:	3020      	adds	r0, #32
1000a742:	1c03      	adds	r3, r0, #0
1000a744:	3b08      	subs	r3, #8
1000a746:	2b1f      	cmp	r3, #31
1000a748:	dc00      	bgt.n	1000a74c <__aeabi_dadd+0x298>
1000a74a:	e747      	b.n	1000a5dc <__aeabi_dadd+0x128>
1000a74c:	3828      	subs	r0, #40	; 0x28
1000a74e:	4085      	lsls	r5, r0
1000a750:	1c2e      	adds	r6, r5, #0
1000a752:	2500      	movs	r5, #0
1000a754:	429c      	cmp	r4, r3
1000a756:	dc00      	bgt.n	1000a75a <__aeabi_dadd+0x2a6>
1000a758:	e74c      	b.n	1000a5f4 <__aeabi_dadd+0x140>
1000a75a:	4a42      	ldr	r2, [pc, #264]	; (1000a864 <__aeabi_dadd+0x3b0>)
1000a75c:	1ae4      	subs	r4, r4, r3
1000a75e:	4016      	ands	r6, r2
1000a760:	1c37      	adds	r7, r6, #0
1000a762:	e6cf      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a764:	4663      	mov	r3, ip
1000a766:	4319      	orrs	r1, r3
1000a768:	1e4b      	subs	r3, r1, #1
1000a76a:	4199      	sbcs	r1, r3
1000a76c:	2200      	movs	r2, #0
1000a76e:	b2cb      	uxtb	r3, r1
1000a770:	e71d      	b.n	1000a5ae <__aeabi_dadd+0xfa>
1000a772:	2b00      	cmp	r3, #0
1000a774:	d000      	beq.n	1000a778 <__aeabi_dadd+0x2c4>
1000a776:	e0f2      	b.n	1000a95e <__aeabi_dadd+0x4aa>
1000a778:	1c60      	adds	r0, r4, #1
1000a77a:	0543      	lsls	r3, r0, #21
1000a77c:	0d5b      	lsrs	r3, r3, #21
1000a77e:	2b01      	cmp	r3, #1
1000a780:	dc00      	bgt.n	1000a784 <__aeabi_dadd+0x2d0>
1000a782:	e0a4      	b.n	1000a8ce <__aeabi_dadd+0x41a>
1000a784:	4b36      	ldr	r3, [pc, #216]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a786:	4298      	cmp	r0, r3
1000a788:	d100      	bne.n	1000a78c <__aeabi_dadd+0x2d8>
1000a78a:	e121      	b.n	1000a9d0 <__aeabi_dadd+0x51c>
1000a78c:	4663      	mov	r3, ip
1000a78e:	195c      	adds	r4, r3, r5
1000a790:	42ac      	cmp	r4, r5
1000a792:	419b      	sbcs	r3, r3
1000a794:	19cf      	adds	r7, r1, r7
1000a796:	425b      	negs	r3, r3
1000a798:	18fa      	adds	r2, r7, r3
1000a79a:	0864      	lsrs	r4, r4, #1
1000a79c:	07d5      	lsls	r5, r2, #31
1000a79e:	4325      	orrs	r5, r4
1000a7a0:	0857      	lsrs	r7, r2, #1
1000a7a2:	1c04      	adds	r4, r0, #0
1000a7a4:	e6ae      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a7a6:	4b2e      	ldr	r3, [pc, #184]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a7a8:	429c      	cmp	r4, r3
1000a7aa:	d000      	beq.n	1000a7ae <__aeabi_dadd+0x2fa>
1000a7ac:	e6ea      	b.n	1000a584 <__aeabi_dadd+0xd0>
1000a7ae:	e6a9      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a7b0:	1c21      	adds	r1, r4, #0
1000a7b2:	1c33      	adds	r3, r6, #0
1000a7b4:	391f      	subs	r1, #31
1000a7b6:	40cb      	lsrs	r3, r1
1000a7b8:	1c19      	adds	r1, r3, #0
1000a7ba:	2a20      	cmp	r2, #32
1000a7bc:	d100      	bne.n	1000a7c0 <__aeabi_dadd+0x30c>
1000a7be:	e082      	b.n	1000a8c6 <__aeabi_dadd+0x412>
1000a7c0:	233f      	movs	r3, #63	; 0x3f
1000a7c2:	1b1c      	subs	r4, r3, r4
1000a7c4:	40a6      	lsls	r6, r4
1000a7c6:	4335      	orrs	r5, r6
1000a7c8:	1e6e      	subs	r6, r5, #1
1000a7ca:	41b5      	sbcs	r5, r6
1000a7cc:	2700      	movs	r7, #0
1000a7ce:	430d      	orrs	r5, r1
1000a7d0:	2400      	movs	r4, #0
1000a7d2:	e78e      	b.n	1000a6f2 <__aeabi_dadd+0x23e>
1000a7d4:	1c03      	adds	r3, r0, #0
1000a7d6:	1c0e      	adds	r6, r1, #0
1000a7d8:	3b20      	subs	r3, #32
1000a7da:	40de      	lsrs	r6, r3
1000a7dc:	2820      	cmp	r0, #32
1000a7de:	d074      	beq.n	1000a8ca <__aeabi_dadd+0x416>
1000a7e0:	2340      	movs	r3, #64	; 0x40
1000a7e2:	1a1b      	subs	r3, r3, r0
1000a7e4:	4099      	lsls	r1, r3
1000a7e6:	1c0b      	adds	r3, r1, #0
1000a7e8:	4662      	mov	r2, ip
1000a7ea:	4313      	orrs	r3, r2
1000a7ec:	1e59      	subs	r1, r3, #1
1000a7ee:	418b      	sbcs	r3, r1
1000a7f0:	2200      	movs	r2, #0
1000a7f2:	4333      	orrs	r3, r6
1000a7f4:	e6db      	b.n	1000a5ae <__aeabi_dadd+0xfa>
1000a7f6:	2c00      	cmp	r4, #0
1000a7f8:	d050      	beq.n	1000a89c <__aeabi_dadd+0x3e8>
1000a7fa:	4c19      	ldr	r4, [pc, #100]	; (1000a860 <__aeabi_dadd+0x3ac>)
1000a7fc:	42a2      	cmp	r2, r4
1000a7fe:	d100      	bne.n	1000a802 <__aeabi_dadd+0x34e>
1000a800:	e0a8      	b.n	1000a954 <__aeabi_dadd+0x4a0>
1000a802:	2480      	movs	r4, #128	; 0x80
1000a804:	0424      	lsls	r4, r4, #16
1000a806:	4240      	negs	r0, r0
1000a808:	4327      	orrs	r7, r4
1000a80a:	2838      	cmp	r0, #56	; 0x38
1000a80c:	dd00      	ble.n	1000a810 <__aeabi_dadd+0x35c>
1000a80e:	e0d9      	b.n	1000a9c4 <__aeabi_dadd+0x510>
1000a810:	281f      	cmp	r0, #31
1000a812:	dd00      	ble.n	1000a816 <__aeabi_dadd+0x362>
1000a814:	e139      	b.n	1000aa8a <__aeabi_dadd+0x5d6>
1000a816:	2420      	movs	r4, #32
1000a818:	1c3e      	adds	r6, r7, #0
1000a81a:	1a24      	subs	r4, r4, r0
1000a81c:	40a6      	lsls	r6, r4
1000a81e:	46b0      	mov	r8, r6
1000a820:	1c2e      	adds	r6, r5, #0
1000a822:	46a1      	mov	r9, r4
1000a824:	40c6      	lsrs	r6, r0
1000a826:	4644      	mov	r4, r8
1000a828:	4326      	orrs	r6, r4
1000a82a:	464c      	mov	r4, r9
1000a82c:	40a5      	lsls	r5, r4
1000a82e:	1e6c      	subs	r4, r5, #1
1000a830:	41a5      	sbcs	r5, r4
1000a832:	40c7      	lsrs	r7, r0
1000a834:	4335      	orrs	r5, r6
1000a836:	4660      	mov	r0, ip
1000a838:	1b45      	subs	r5, r0, r5
1000a83a:	1bcf      	subs	r7, r1, r7
1000a83c:	45ac      	cmp	ip, r5
1000a83e:	4189      	sbcs	r1, r1
1000a840:	4249      	negs	r1, r1
1000a842:	1a7f      	subs	r7, r7, r1
1000a844:	1c14      	adds	r4, r2, #0
1000a846:	4698      	mov	r8, r3
1000a848:	e6b8      	b.n	1000a5bc <__aeabi_dadd+0x108>
1000a84a:	464b      	mov	r3, r9
1000a84c:	464d      	mov	r5, r9
1000a84e:	4333      	orrs	r3, r6
1000a850:	d000      	beq.n	1000a854 <__aeabi_dadd+0x3a0>
1000a852:	e6b8      	b.n	1000a5c6 <__aeabi_dadd+0x112>
1000a854:	2600      	movs	r6, #0
1000a856:	2700      	movs	r7, #0
1000a858:	2400      	movs	r4, #0
1000a85a:	2500      	movs	r5, #0
1000a85c:	e6e4      	b.n	1000a628 <__aeabi_dadd+0x174>
1000a85e:	46c0      	nop			; (mov r8, r8)
1000a860:	000007ff 	.word	0x000007ff
1000a864:	ff7fffff 	.word	0xff7fffff
1000a868:	800fffff 	.word	0x800fffff
1000a86c:	2b1f      	cmp	r3, #31
1000a86e:	dc5b      	bgt.n	1000a928 <__aeabi_dadd+0x474>
1000a870:	2220      	movs	r2, #32
1000a872:	1c08      	adds	r0, r1, #0
1000a874:	1ad2      	subs	r2, r2, r3
1000a876:	4090      	lsls	r0, r2
1000a878:	4681      	mov	r9, r0
1000a87a:	4660      	mov	r0, ip
1000a87c:	4692      	mov	sl, r2
1000a87e:	40d8      	lsrs	r0, r3
1000a880:	464a      	mov	r2, r9
1000a882:	4310      	orrs	r0, r2
1000a884:	4681      	mov	r9, r0
1000a886:	4652      	mov	r2, sl
1000a888:	4660      	mov	r0, ip
1000a88a:	4090      	lsls	r0, r2
1000a88c:	1c02      	adds	r2, r0, #0
1000a88e:	1e50      	subs	r0, r2, #1
1000a890:	4182      	sbcs	r2, r0
1000a892:	4648      	mov	r0, r9
1000a894:	4310      	orrs	r0, r2
1000a896:	1c0a      	adds	r2, r1, #0
1000a898:	40da      	lsrs	r2, r3
1000a89a:	e6e7      	b.n	1000a66c <__aeabi_dadd+0x1b8>
1000a89c:	1c3c      	adds	r4, r7, #0
1000a89e:	432c      	orrs	r4, r5
1000a8a0:	d058      	beq.n	1000a954 <__aeabi_dadd+0x4a0>
1000a8a2:	43c0      	mvns	r0, r0
1000a8a4:	2800      	cmp	r0, #0
1000a8a6:	d151      	bne.n	1000a94c <__aeabi_dadd+0x498>
1000a8a8:	4660      	mov	r0, ip
1000a8aa:	1b45      	subs	r5, r0, r5
1000a8ac:	45ac      	cmp	ip, r5
1000a8ae:	4180      	sbcs	r0, r0
1000a8b0:	1bcf      	subs	r7, r1, r7
1000a8b2:	4240      	negs	r0, r0
1000a8b4:	1a3f      	subs	r7, r7, r0
1000a8b6:	1c14      	adds	r4, r2, #0
1000a8b8:	4698      	mov	r8, r3
1000a8ba:	e67f      	b.n	1000a5bc <__aeabi_dadd+0x108>
1000a8bc:	4a8f      	ldr	r2, [pc, #572]	; (1000aafc <__aeabi_dadd+0x648>)
1000a8be:	4294      	cmp	r4, r2
1000a8c0:	d000      	beq.n	1000a8c4 <__aeabi_dadd+0x410>
1000a8c2:	e6ca      	b.n	1000a65a <__aeabi_dadd+0x1a6>
1000a8c4:	e61e      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a8c6:	2600      	movs	r6, #0
1000a8c8:	e77d      	b.n	1000a7c6 <__aeabi_dadd+0x312>
1000a8ca:	2300      	movs	r3, #0
1000a8cc:	e78c      	b.n	1000a7e8 <__aeabi_dadd+0x334>
1000a8ce:	1c3b      	adds	r3, r7, #0
1000a8d0:	432b      	orrs	r3, r5
1000a8d2:	2c00      	cmp	r4, #0
1000a8d4:	d000      	beq.n	1000a8d8 <__aeabi_dadd+0x424>
1000a8d6:	e0bd      	b.n	1000aa54 <__aeabi_dadd+0x5a0>
1000a8d8:	2b00      	cmp	r3, #0
1000a8da:	d100      	bne.n	1000a8de <__aeabi_dadd+0x42a>
1000a8dc:	e0f5      	b.n	1000aaca <__aeabi_dadd+0x616>
1000a8de:	4663      	mov	r3, ip
1000a8e0:	430b      	orrs	r3, r1
1000a8e2:	d100      	bne.n	1000a8e6 <__aeabi_dadd+0x432>
1000a8e4:	e60e      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a8e6:	4663      	mov	r3, ip
1000a8e8:	195b      	adds	r3, r3, r5
1000a8ea:	42ab      	cmp	r3, r5
1000a8ec:	4180      	sbcs	r0, r0
1000a8ee:	19ca      	adds	r2, r1, r7
1000a8f0:	4240      	negs	r0, r0
1000a8f2:	1817      	adds	r7, r2, r0
1000a8f4:	023a      	lsls	r2, r7, #8
1000a8f6:	d400      	bmi.n	1000a8fa <__aeabi_dadd+0x446>
1000a8f8:	e0fc      	b.n	1000aaf4 <__aeabi_dadd+0x640>
1000a8fa:	4a81      	ldr	r2, [pc, #516]	; (1000ab00 <__aeabi_dadd+0x64c>)
1000a8fc:	1c1d      	adds	r5, r3, #0
1000a8fe:	4017      	ands	r7, r2
1000a900:	3401      	adds	r4, #1
1000a902:	e5ff      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a904:	1c3a      	adds	r2, r7, #0
1000a906:	432a      	orrs	r2, r5
1000a908:	2c00      	cmp	r4, #0
1000a90a:	d151      	bne.n	1000a9b0 <__aeabi_dadd+0x4fc>
1000a90c:	2a00      	cmp	r2, #0
1000a90e:	d000      	beq.n	1000a912 <__aeabi_dadd+0x45e>
1000a910:	e085      	b.n	1000aa1e <__aeabi_dadd+0x56a>
1000a912:	4662      	mov	r2, ip
1000a914:	430a      	orrs	r2, r1
1000a916:	d003      	beq.n	1000a920 <__aeabi_dadd+0x46c>
1000a918:	1c0f      	adds	r7, r1, #0
1000a91a:	4665      	mov	r5, ip
1000a91c:	4698      	mov	r8, r3
1000a91e:	e5f1      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a920:	2600      	movs	r6, #0
1000a922:	2700      	movs	r7, #0
1000a924:	2500      	movs	r5, #0
1000a926:	e67f      	b.n	1000a628 <__aeabi_dadd+0x174>
1000a928:	1c18      	adds	r0, r3, #0
1000a92a:	1c0a      	adds	r2, r1, #0
1000a92c:	3820      	subs	r0, #32
1000a92e:	40c2      	lsrs	r2, r0
1000a930:	2b20      	cmp	r3, #32
1000a932:	d100      	bne.n	1000a936 <__aeabi_dadd+0x482>
1000a934:	e0a7      	b.n	1000aa86 <__aeabi_dadd+0x5d2>
1000a936:	2040      	movs	r0, #64	; 0x40
1000a938:	1ac0      	subs	r0, r0, r3
1000a93a:	4081      	lsls	r1, r0
1000a93c:	1c08      	adds	r0, r1, #0
1000a93e:	4663      	mov	r3, ip
1000a940:	4318      	orrs	r0, r3
1000a942:	1e41      	subs	r1, r0, #1
1000a944:	4188      	sbcs	r0, r1
1000a946:	4310      	orrs	r0, r2
1000a948:	2200      	movs	r2, #0
1000a94a:	e68f      	b.n	1000a66c <__aeabi_dadd+0x1b8>
1000a94c:	4c6b      	ldr	r4, [pc, #428]	; (1000aafc <__aeabi_dadd+0x648>)
1000a94e:	42a2      	cmp	r2, r4
1000a950:	d000      	beq.n	1000a954 <__aeabi_dadd+0x4a0>
1000a952:	e75a      	b.n	1000a80a <__aeabi_dadd+0x356>
1000a954:	1c0f      	adds	r7, r1, #0
1000a956:	4665      	mov	r5, ip
1000a958:	1c14      	adds	r4, r2, #0
1000a95a:	4698      	mov	r8, r3
1000a95c:	e5d2      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a95e:	2c00      	cmp	r4, #0
1000a960:	d13a      	bne.n	1000a9d8 <__aeabi_dadd+0x524>
1000a962:	1c38      	adds	r0, r7, #0
1000a964:	4328      	orrs	r0, r5
1000a966:	d071      	beq.n	1000aa4c <__aeabi_dadd+0x598>
1000a968:	43db      	mvns	r3, r3
1000a96a:	2b00      	cmp	r3, #0
1000a96c:	d018      	beq.n	1000a9a0 <__aeabi_dadd+0x4ec>
1000a96e:	4863      	ldr	r0, [pc, #396]	; (1000aafc <__aeabi_dadd+0x648>)
1000a970:	4282      	cmp	r2, r0
1000a972:	d06b      	beq.n	1000aa4c <__aeabi_dadd+0x598>
1000a974:	2b38      	cmp	r3, #56	; 0x38
1000a976:	dd00      	ble.n	1000a97a <__aeabi_dadd+0x4c6>
1000a978:	e09d      	b.n	1000aab6 <__aeabi_dadd+0x602>
1000a97a:	2b1f      	cmp	r3, #31
1000a97c:	dd00      	ble.n	1000a980 <__aeabi_dadd+0x4cc>
1000a97e:	e0a7      	b.n	1000aad0 <__aeabi_dadd+0x61c>
1000a980:	2020      	movs	r0, #32
1000a982:	1c3c      	adds	r4, r7, #0
1000a984:	1ac0      	subs	r0, r0, r3
1000a986:	4084      	lsls	r4, r0
1000a988:	46a1      	mov	r9, r4
1000a98a:	1c2c      	adds	r4, r5, #0
1000a98c:	4682      	mov	sl, r0
1000a98e:	40dc      	lsrs	r4, r3
1000a990:	4648      	mov	r0, r9
1000a992:	4304      	orrs	r4, r0
1000a994:	4650      	mov	r0, sl
1000a996:	4085      	lsls	r5, r0
1000a998:	1e68      	subs	r0, r5, #1
1000a99a:	4185      	sbcs	r5, r0
1000a99c:	40df      	lsrs	r7, r3
1000a99e:	4325      	orrs	r5, r4
1000a9a0:	4465      	add	r5, ip
1000a9a2:	4565      	cmp	r5, ip
1000a9a4:	419b      	sbcs	r3, r3
1000a9a6:	187f      	adds	r7, r7, r1
1000a9a8:	425b      	negs	r3, r3
1000a9aa:	18ff      	adds	r7, r7, r3
1000a9ac:	1c14      	adds	r4, r2, #0
1000a9ae:	e664      	b.n	1000a67a <__aeabi_dadd+0x1c6>
1000a9b0:	2a00      	cmp	r2, #0
1000a9b2:	d119      	bne.n	1000a9e8 <__aeabi_dadd+0x534>
1000a9b4:	4662      	mov	r2, ip
1000a9b6:	430a      	orrs	r2, r1
1000a9b8:	d077      	beq.n	1000aaaa <__aeabi_dadd+0x5f6>
1000a9ba:	1c0f      	adds	r7, r1, #0
1000a9bc:	4665      	mov	r5, ip
1000a9be:	4698      	mov	r8, r3
1000a9c0:	4c4e      	ldr	r4, [pc, #312]	; (1000aafc <__aeabi_dadd+0x648>)
1000a9c2:	e59f      	b.n	1000a504 <__aeabi_dadd+0x50>
1000a9c4:	433d      	orrs	r5, r7
1000a9c6:	1e6f      	subs	r7, r5, #1
1000a9c8:	41bd      	sbcs	r5, r7
1000a9ca:	2700      	movs	r7, #0
1000a9cc:	b2ed      	uxtb	r5, r5
1000a9ce:	e732      	b.n	1000a836 <__aeabi_dadd+0x382>
1000a9d0:	1c04      	adds	r4, r0, #0
1000a9d2:	2700      	movs	r7, #0
1000a9d4:	2500      	movs	r5, #0
1000a9d6:	e627      	b.n	1000a628 <__aeabi_dadd+0x174>
1000a9d8:	4848      	ldr	r0, [pc, #288]	; (1000aafc <__aeabi_dadd+0x648>)
1000a9da:	4282      	cmp	r2, r0
1000a9dc:	d036      	beq.n	1000aa4c <__aeabi_dadd+0x598>
1000a9de:	2080      	movs	r0, #128	; 0x80
1000a9e0:	0400      	lsls	r0, r0, #16
1000a9e2:	425b      	negs	r3, r3
1000a9e4:	4307      	orrs	r7, r0
1000a9e6:	e7c5      	b.n	1000a974 <__aeabi_dadd+0x4c0>
1000a9e8:	4662      	mov	r2, ip
1000a9ea:	430a      	orrs	r2, r1
1000a9ec:	d049      	beq.n	1000aa82 <__aeabi_dadd+0x5ce>
1000a9ee:	2480      	movs	r4, #128	; 0x80
1000a9f0:	08ed      	lsrs	r5, r5, #3
1000a9f2:	0778      	lsls	r0, r7, #29
1000a9f4:	08fa      	lsrs	r2, r7, #3
1000a9f6:	0324      	lsls	r4, r4, #12
1000a9f8:	4328      	orrs	r0, r5
1000a9fa:	4222      	tst	r2, r4
1000a9fc:	d009      	beq.n	1000aa12 <__aeabi_dadd+0x55e>
1000a9fe:	08ce      	lsrs	r6, r1, #3
1000aa00:	4226      	tst	r6, r4
1000aa02:	d106      	bne.n	1000aa12 <__aeabi_dadd+0x55e>
1000aa04:	4662      	mov	r2, ip
1000aa06:	074f      	lsls	r7, r1, #29
1000aa08:	1c38      	adds	r0, r7, #0
1000aa0a:	08d2      	lsrs	r2, r2, #3
1000aa0c:	4310      	orrs	r0, r2
1000aa0e:	4698      	mov	r8, r3
1000aa10:	1c32      	adds	r2, r6, #0
1000aa12:	00d2      	lsls	r2, r2, #3
1000aa14:	0f47      	lsrs	r7, r0, #29
1000aa16:	4317      	orrs	r7, r2
1000aa18:	00c5      	lsls	r5, r0, #3
1000aa1a:	4c38      	ldr	r4, [pc, #224]	; (1000aafc <__aeabi_dadd+0x648>)
1000aa1c:	e572      	b.n	1000a504 <__aeabi_dadd+0x50>
1000aa1e:	4662      	mov	r2, ip
1000aa20:	430a      	orrs	r2, r1
1000aa22:	d100      	bne.n	1000aa26 <__aeabi_dadd+0x572>
1000aa24:	e56e      	b.n	1000a504 <__aeabi_dadd+0x50>
1000aa26:	4662      	mov	r2, ip
1000aa28:	1aae      	subs	r6, r5, r2
1000aa2a:	42b5      	cmp	r5, r6
1000aa2c:	4192      	sbcs	r2, r2
1000aa2e:	1a78      	subs	r0, r7, r1
1000aa30:	4252      	negs	r2, r2
1000aa32:	1a82      	subs	r2, r0, r2
1000aa34:	0210      	lsls	r0, r2, #8
1000aa36:	d400      	bmi.n	1000aa3a <__aeabi_dadd+0x586>
1000aa38:	e655      	b.n	1000a6e6 <__aeabi_dadd+0x232>
1000aa3a:	4662      	mov	r2, ip
1000aa3c:	1b55      	subs	r5, r2, r5
1000aa3e:	45ac      	cmp	ip, r5
1000aa40:	4180      	sbcs	r0, r0
1000aa42:	1bca      	subs	r2, r1, r7
1000aa44:	4240      	negs	r0, r0
1000aa46:	1a17      	subs	r7, r2, r0
1000aa48:	4698      	mov	r8, r3
1000aa4a:	e55b      	b.n	1000a504 <__aeabi_dadd+0x50>
1000aa4c:	1c0f      	adds	r7, r1, #0
1000aa4e:	4665      	mov	r5, ip
1000aa50:	1c14      	adds	r4, r2, #0
1000aa52:	e557      	b.n	1000a504 <__aeabi_dadd+0x50>
1000aa54:	2b00      	cmp	r3, #0
1000aa56:	d034      	beq.n	1000aac2 <__aeabi_dadd+0x60e>
1000aa58:	4663      	mov	r3, ip
1000aa5a:	430b      	orrs	r3, r1
1000aa5c:	d011      	beq.n	1000aa82 <__aeabi_dadd+0x5ce>
1000aa5e:	2480      	movs	r4, #128	; 0x80
1000aa60:	08ed      	lsrs	r5, r5, #3
1000aa62:	0778      	lsls	r0, r7, #29
1000aa64:	08fa      	lsrs	r2, r7, #3
1000aa66:	0324      	lsls	r4, r4, #12
1000aa68:	4328      	orrs	r0, r5
1000aa6a:	4222      	tst	r2, r4
1000aa6c:	d0d1      	beq.n	1000aa12 <__aeabi_dadd+0x55e>
1000aa6e:	08cb      	lsrs	r3, r1, #3
1000aa70:	4223      	tst	r3, r4
1000aa72:	d1ce      	bne.n	1000aa12 <__aeabi_dadd+0x55e>
1000aa74:	4662      	mov	r2, ip
1000aa76:	074f      	lsls	r7, r1, #29
1000aa78:	1c38      	adds	r0, r7, #0
1000aa7a:	08d2      	lsrs	r2, r2, #3
1000aa7c:	4310      	orrs	r0, r2
1000aa7e:	1c1a      	adds	r2, r3, #0
1000aa80:	e7c7      	b.n	1000aa12 <__aeabi_dadd+0x55e>
1000aa82:	4c1e      	ldr	r4, [pc, #120]	; (1000aafc <__aeabi_dadd+0x648>)
1000aa84:	e53e      	b.n	1000a504 <__aeabi_dadd+0x50>
1000aa86:	2000      	movs	r0, #0
1000aa88:	e759      	b.n	1000a93e <__aeabi_dadd+0x48a>
1000aa8a:	1c04      	adds	r4, r0, #0
1000aa8c:	1c3e      	adds	r6, r7, #0
1000aa8e:	3c20      	subs	r4, #32
1000aa90:	40e6      	lsrs	r6, r4
1000aa92:	1c34      	adds	r4, r6, #0
1000aa94:	2820      	cmp	r0, #32
1000aa96:	d02b      	beq.n	1000aaf0 <__aeabi_dadd+0x63c>
1000aa98:	2640      	movs	r6, #64	; 0x40
1000aa9a:	1a30      	subs	r0, r6, r0
1000aa9c:	4087      	lsls	r7, r0
1000aa9e:	433d      	orrs	r5, r7
1000aaa0:	1e6f      	subs	r7, r5, #1
1000aaa2:	41bd      	sbcs	r5, r7
1000aaa4:	2700      	movs	r7, #0
1000aaa6:	4325      	orrs	r5, r4
1000aaa8:	e6c5      	b.n	1000a836 <__aeabi_dadd+0x382>
1000aaaa:	2780      	movs	r7, #128	; 0x80
1000aaac:	2600      	movs	r6, #0
1000aaae:	03ff      	lsls	r7, r7, #15
1000aab0:	4c12      	ldr	r4, [pc, #72]	; (1000aafc <__aeabi_dadd+0x648>)
1000aab2:	2500      	movs	r5, #0
1000aab4:	e5b8      	b.n	1000a628 <__aeabi_dadd+0x174>
1000aab6:	433d      	orrs	r5, r7
1000aab8:	1e6f      	subs	r7, r5, #1
1000aaba:	41bd      	sbcs	r5, r7
1000aabc:	2700      	movs	r7, #0
1000aabe:	b2ed      	uxtb	r5, r5
1000aac0:	e76e      	b.n	1000a9a0 <__aeabi_dadd+0x4ec>
1000aac2:	1c0f      	adds	r7, r1, #0
1000aac4:	4665      	mov	r5, ip
1000aac6:	4c0d      	ldr	r4, [pc, #52]	; (1000aafc <__aeabi_dadd+0x648>)
1000aac8:	e51c      	b.n	1000a504 <__aeabi_dadd+0x50>
1000aaca:	1c0f      	adds	r7, r1, #0
1000aacc:	4665      	mov	r5, ip
1000aace:	e519      	b.n	1000a504 <__aeabi_dadd+0x50>
1000aad0:	1c1c      	adds	r4, r3, #0
1000aad2:	1c38      	adds	r0, r7, #0
1000aad4:	3c20      	subs	r4, #32
1000aad6:	40e0      	lsrs	r0, r4
1000aad8:	1c04      	adds	r4, r0, #0
1000aada:	2b20      	cmp	r3, #32
1000aadc:	d00c      	beq.n	1000aaf8 <__aeabi_dadd+0x644>
1000aade:	2040      	movs	r0, #64	; 0x40
1000aae0:	1ac3      	subs	r3, r0, r3
1000aae2:	409f      	lsls	r7, r3
1000aae4:	433d      	orrs	r5, r7
1000aae6:	1e6f      	subs	r7, r5, #1
1000aae8:	41bd      	sbcs	r5, r7
1000aaea:	2700      	movs	r7, #0
1000aaec:	4325      	orrs	r5, r4
1000aaee:	e757      	b.n	1000a9a0 <__aeabi_dadd+0x4ec>
1000aaf0:	2700      	movs	r7, #0
1000aaf2:	e7d4      	b.n	1000aa9e <__aeabi_dadd+0x5ea>
1000aaf4:	1c1d      	adds	r5, r3, #0
1000aaf6:	e5fc      	b.n	1000a6f2 <__aeabi_dadd+0x23e>
1000aaf8:	2700      	movs	r7, #0
1000aafa:	e7f3      	b.n	1000aae4 <__aeabi_dadd+0x630>
1000aafc:	000007ff 	.word	0x000007ff
1000ab00:	ff7fffff 	.word	0xff7fffff

1000ab04 <__aeabi_ddiv>:
1000ab04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab06:	465f      	mov	r7, fp
1000ab08:	4656      	mov	r6, sl
1000ab0a:	464d      	mov	r5, r9
1000ab0c:	4644      	mov	r4, r8
1000ab0e:	b4f0      	push	{r4, r5, r6, r7}
1000ab10:	030f      	lsls	r7, r1, #12
1000ab12:	b087      	sub	sp, #28
1000ab14:	4698      	mov	r8, r3
1000ab16:	004d      	lsls	r5, r1, #1
1000ab18:	0b3b      	lsrs	r3, r7, #12
1000ab1a:	0fcc      	lsrs	r4, r1, #31
1000ab1c:	1c06      	adds	r6, r0, #0
1000ab1e:	4692      	mov	sl, r2
1000ab20:	4681      	mov	r9, r0
1000ab22:	469b      	mov	fp, r3
1000ab24:	0d6d      	lsrs	r5, r5, #21
1000ab26:	9401      	str	r4, [sp, #4]
1000ab28:	d06b      	beq.n	1000ac02 <__aeabi_ddiv+0xfe>
1000ab2a:	4b66      	ldr	r3, [pc, #408]	; (1000acc4 <__aeabi_ddiv+0x1c0>)
1000ab2c:	429d      	cmp	r5, r3
1000ab2e:	d035      	beq.n	1000ab9c <__aeabi_ddiv+0x98>
1000ab30:	2780      	movs	r7, #128	; 0x80
1000ab32:	465b      	mov	r3, fp
1000ab34:	037f      	lsls	r7, r7, #13
1000ab36:	431f      	orrs	r7, r3
1000ab38:	00f3      	lsls	r3, r6, #3
1000ab3a:	4699      	mov	r9, r3
1000ab3c:	4b62      	ldr	r3, [pc, #392]	; (1000acc8 <__aeabi_ddiv+0x1c4>)
1000ab3e:	00ff      	lsls	r7, r7, #3
1000ab40:	0f40      	lsrs	r0, r0, #29
1000ab42:	469c      	mov	ip, r3
1000ab44:	4307      	orrs	r7, r0
1000ab46:	2300      	movs	r3, #0
1000ab48:	46bb      	mov	fp, r7
1000ab4a:	2600      	movs	r6, #0
1000ab4c:	4465      	add	r5, ip
1000ab4e:	9300      	str	r3, [sp, #0]
1000ab50:	4642      	mov	r2, r8
1000ab52:	0317      	lsls	r7, r2, #12
1000ab54:	0050      	lsls	r0, r2, #1
1000ab56:	0fd2      	lsrs	r2, r2, #31
1000ab58:	4653      	mov	r3, sl
1000ab5a:	0b3f      	lsrs	r7, r7, #12
1000ab5c:	0d40      	lsrs	r0, r0, #21
1000ab5e:	4690      	mov	r8, r2
1000ab60:	d100      	bne.n	1000ab64 <__aeabi_ddiv+0x60>
1000ab62:	e072      	b.n	1000ac4a <__aeabi_ddiv+0x146>
1000ab64:	4a57      	ldr	r2, [pc, #348]	; (1000acc4 <__aeabi_ddiv+0x1c0>)
1000ab66:	4290      	cmp	r0, r2
1000ab68:	d067      	beq.n	1000ac3a <__aeabi_ddiv+0x136>
1000ab6a:	2380      	movs	r3, #128	; 0x80
1000ab6c:	035b      	lsls	r3, r3, #13
1000ab6e:	431f      	orrs	r7, r3
1000ab70:	4653      	mov	r3, sl
1000ab72:	4a55      	ldr	r2, [pc, #340]	; (1000acc8 <__aeabi_ddiv+0x1c4>)
1000ab74:	0f5b      	lsrs	r3, r3, #29
1000ab76:	00ff      	lsls	r7, r7, #3
1000ab78:	431f      	orrs	r7, r3
1000ab7a:	4694      	mov	ip, r2
1000ab7c:	4653      	mov	r3, sl
1000ab7e:	2100      	movs	r1, #0
1000ab80:	00db      	lsls	r3, r3, #3
1000ab82:	4460      	add	r0, ip
1000ab84:	4642      	mov	r2, r8
1000ab86:	4062      	eors	r2, r4
1000ab88:	4692      	mov	sl, r2
1000ab8a:	1a2d      	subs	r5, r5, r0
1000ab8c:	430e      	orrs	r6, r1
1000ab8e:	2e0f      	cmp	r6, #15
1000ab90:	d900      	bls.n	1000ab94 <__aeabi_ddiv+0x90>
1000ab92:	e0a1      	b.n	1000acd8 <__aeabi_ddiv+0x1d4>
1000ab94:	484d      	ldr	r0, [pc, #308]	; (1000accc <__aeabi_ddiv+0x1c8>)
1000ab96:	00b6      	lsls	r6, r6, #2
1000ab98:	5980      	ldr	r0, [r0, r6]
1000ab9a:	4687      	mov	pc, r0
1000ab9c:	465b      	mov	r3, fp
1000ab9e:	431e      	orrs	r6, r3
1000aba0:	d000      	beq.n	1000aba4 <__aeabi_ddiv+0xa0>
1000aba2:	e076      	b.n	1000ac92 <__aeabi_ddiv+0x18e>
1000aba4:	2300      	movs	r3, #0
1000aba6:	469b      	mov	fp, r3
1000aba8:	4699      	mov	r9, r3
1000abaa:	3302      	adds	r3, #2
1000abac:	2608      	movs	r6, #8
1000abae:	9300      	str	r3, [sp, #0]
1000abb0:	e7ce      	b.n	1000ab50 <__aeabi_ddiv+0x4c>
1000abb2:	4699      	mov	r9, r3
1000abb4:	4643      	mov	r3, r8
1000abb6:	46bb      	mov	fp, r7
1000abb8:	9301      	str	r3, [sp, #4]
1000abba:	9100      	str	r1, [sp, #0]
1000abbc:	9b00      	ldr	r3, [sp, #0]
1000abbe:	2b02      	cmp	r3, #2
1000abc0:	d16b      	bne.n	1000ac9a <__aeabi_ddiv+0x196>
1000abc2:	9b01      	ldr	r3, [sp, #4]
1000abc4:	469a      	mov	sl, r3
1000abc6:	2100      	movs	r1, #0
1000abc8:	4653      	mov	r3, sl
1000abca:	2201      	movs	r2, #1
1000abcc:	2700      	movs	r7, #0
1000abce:	4689      	mov	r9, r1
1000abd0:	401a      	ands	r2, r3
1000abd2:	4b3c      	ldr	r3, [pc, #240]	; (1000acc4 <__aeabi_ddiv+0x1c0>)
1000abd4:	2100      	movs	r1, #0
1000abd6:	033f      	lsls	r7, r7, #12
1000abd8:	0d0c      	lsrs	r4, r1, #20
1000abda:	0524      	lsls	r4, r4, #20
1000abdc:	0b3f      	lsrs	r7, r7, #12
1000abde:	4327      	orrs	r7, r4
1000abe0:	4c3b      	ldr	r4, [pc, #236]	; (1000acd0 <__aeabi_ddiv+0x1cc>)
1000abe2:	051b      	lsls	r3, r3, #20
1000abe4:	4027      	ands	r7, r4
1000abe6:	431f      	orrs	r7, r3
1000abe8:	007f      	lsls	r7, r7, #1
1000abea:	07d2      	lsls	r2, r2, #31
1000abec:	087f      	lsrs	r7, r7, #1
1000abee:	4317      	orrs	r7, r2
1000abf0:	4648      	mov	r0, r9
1000abf2:	1c39      	adds	r1, r7, #0
1000abf4:	b007      	add	sp, #28
1000abf6:	bc3c      	pop	{r2, r3, r4, r5}
1000abf8:	4690      	mov	r8, r2
1000abfa:	4699      	mov	r9, r3
1000abfc:	46a2      	mov	sl, r4
1000abfe:	46ab      	mov	fp, r5
1000ac00:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ac02:	4303      	orrs	r3, r0
1000ac04:	d03e      	beq.n	1000ac84 <__aeabi_ddiv+0x180>
1000ac06:	465b      	mov	r3, fp
1000ac08:	2b00      	cmp	r3, #0
1000ac0a:	d100      	bne.n	1000ac0e <__aeabi_ddiv+0x10a>
1000ac0c:	e19c      	b.n	1000af48 <__aeabi_ddiv+0x444>
1000ac0e:	4658      	mov	r0, fp
1000ac10:	f001 faae 	bl	1000c170 <__clzsi2>
1000ac14:	2328      	movs	r3, #40	; 0x28
1000ac16:	1c31      	adds	r1, r6, #0
1000ac18:	1a1b      	subs	r3, r3, r0
1000ac1a:	1c02      	adds	r2, r0, #0
1000ac1c:	465f      	mov	r7, fp
1000ac1e:	40d9      	lsrs	r1, r3
1000ac20:	3a08      	subs	r2, #8
1000ac22:	4097      	lsls	r7, r2
1000ac24:	1c0b      	adds	r3, r1, #0
1000ac26:	4096      	lsls	r6, r2
1000ac28:	433b      	orrs	r3, r7
1000ac2a:	469b      	mov	fp, r3
1000ac2c:	46b1      	mov	r9, r6
1000ac2e:	2300      	movs	r3, #0
1000ac30:	4d28      	ldr	r5, [pc, #160]	; (1000acd4 <__aeabi_ddiv+0x1d0>)
1000ac32:	2600      	movs	r6, #0
1000ac34:	1a2d      	subs	r5, r5, r0
1000ac36:	9300      	str	r3, [sp, #0]
1000ac38:	e78a      	b.n	1000ab50 <__aeabi_ddiv+0x4c>
1000ac3a:	4652      	mov	r2, sl
1000ac3c:	2103      	movs	r1, #3
1000ac3e:	433a      	orrs	r2, r7
1000ac40:	d1a0      	bne.n	1000ab84 <__aeabi_ddiv+0x80>
1000ac42:	2700      	movs	r7, #0
1000ac44:	2300      	movs	r3, #0
1000ac46:	2102      	movs	r1, #2
1000ac48:	e79c      	b.n	1000ab84 <__aeabi_ddiv+0x80>
1000ac4a:	4652      	mov	r2, sl
1000ac4c:	433a      	orrs	r2, r7
1000ac4e:	d015      	beq.n	1000ac7c <__aeabi_ddiv+0x178>
1000ac50:	2f00      	cmp	r7, #0
1000ac52:	d100      	bne.n	1000ac56 <__aeabi_ddiv+0x152>
1000ac54:	e185      	b.n	1000af62 <__aeabi_ddiv+0x45e>
1000ac56:	1c38      	adds	r0, r7, #0
1000ac58:	f001 fa8a 	bl	1000c170 <__clzsi2>
1000ac5c:	1c02      	adds	r2, r0, #0
1000ac5e:	2128      	movs	r1, #40	; 0x28
1000ac60:	4650      	mov	r0, sl
1000ac62:	1a89      	subs	r1, r1, r2
1000ac64:	1c13      	adds	r3, r2, #0
1000ac66:	40c8      	lsrs	r0, r1
1000ac68:	4651      	mov	r1, sl
1000ac6a:	3b08      	subs	r3, #8
1000ac6c:	4099      	lsls	r1, r3
1000ac6e:	409f      	lsls	r7, r3
1000ac70:	1c0b      	adds	r3, r1, #0
1000ac72:	4307      	orrs	r7, r0
1000ac74:	4817      	ldr	r0, [pc, #92]	; (1000acd4 <__aeabi_ddiv+0x1d0>)
1000ac76:	2100      	movs	r1, #0
1000ac78:	1a80      	subs	r0, r0, r2
1000ac7a:	e783      	b.n	1000ab84 <__aeabi_ddiv+0x80>
1000ac7c:	2700      	movs	r7, #0
1000ac7e:	2300      	movs	r3, #0
1000ac80:	2101      	movs	r1, #1
1000ac82:	e77f      	b.n	1000ab84 <__aeabi_ddiv+0x80>
1000ac84:	2300      	movs	r3, #0
1000ac86:	469b      	mov	fp, r3
1000ac88:	4699      	mov	r9, r3
1000ac8a:	3301      	adds	r3, #1
1000ac8c:	2604      	movs	r6, #4
1000ac8e:	9300      	str	r3, [sp, #0]
1000ac90:	e75e      	b.n	1000ab50 <__aeabi_ddiv+0x4c>
1000ac92:	2303      	movs	r3, #3
1000ac94:	260c      	movs	r6, #12
1000ac96:	9300      	str	r3, [sp, #0]
1000ac98:	e75a      	b.n	1000ab50 <__aeabi_ddiv+0x4c>
1000ac9a:	2b03      	cmp	r3, #3
1000ac9c:	d100      	bne.n	1000aca0 <__aeabi_ddiv+0x19c>
1000ac9e:	e23c      	b.n	1000b11a <__aeabi_ddiv+0x616>
1000aca0:	2b01      	cmp	r3, #1
1000aca2:	d000      	beq.n	1000aca6 <__aeabi_ddiv+0x1a2>
1000aca4:	e1bf      	b.n	1000b026 <__aeabi_ddiv+0x522>
1000aca6:	1c1a      	adds	r2, r3, #0
1000aca8:	9b01      	ldr	r3, [sp, #4]
1000acaa:	401a      	ands	r2, r3
1000acac:	2100      	movs	r1, #0
1000acae:	2300      	movs	r3, #0
1000acb0:	2700      	movs	r7, #0
1000acb2:	4689      	mov	r9, r1
1000acb4:	e78e      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000acb6:	2300      	movs	r3, #0
1000acb8:	2780      	movs	r7, #128	; 0x80
1000acba:	4699      	mov	r9, r3
1000acbc:	2200      	movs	r2, #0
1000acbe:	033f      	lsls	r7, r7, #12
1000acc0:	4b00      	ldr	r3, [pc, #0]	; (1000acc4 <__aeabi_ddiv+0x1c0>)
1000acc2:	e787      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000acc4:	000007ff 	.word	0x000007ff
1000acc8:	fffffc01 	.word	0xfffffc01
1000accc:	1000c5f0 	.word	0x1000c5f0
1000acd0:	800fffff 	.word	0x800fffff
1000acd4:	fffffc0d 	.word	0xfffffc0d
1000acd8:	45bb      	cmp	fp, r7
1000acda:	d900      	bls.n	1000acde <__aeabi_ddiv+0x1da>
1000acdc:	e151      	b.n	1000af82 <__aeabi_ddiv+0x47e>
1000acde:	d100      	bne.n	1000ace2 <__aeabi_ddiv+0x1de>
1000ace0:	e14c      	b.n	1000af7c <__aeabi_ddiv+0x478>
1000ace2:	464a      	mov	r2, r9
1000ace4:	9203      	str	r2, [sp, #12]
1000ace6:	2200      	movs	r2, #0
1000ace8:	465c      	mov	r4, fp
1000acea:	4690      	mov	r8, r2
1000acec:	3d01      	subs	r5, #1
1000acee:	0e18      	lsrs	r0, r3, #24
1000acf0:	023f      	lsls	r7, r7, #8
1000acf2:	4338      	orrs	r0, r7
1000acf4:	021b      	lsls	r3, r3, #8
1000acf6:	9301      	str	r3, [sp, #4]
1000acf8:	0c03      	lsrs	r3, r0, #16
1000acfa:	4699      	mov	r9, r3
1000acfc:	0403      	lsls	r3, r0, #16
1000acfe:	0c1b      	lsrs	r3, r3, #16
1000ad00:	4649      	mov	r1, r9
1000ad02:	1c06      	adds	r6, r0, #0
1000ad04:	1c20      	adds	r0, r4, #0
1000ad06:	1c1f      	adds	r7, r3, #0
1000ad08:	9300      	str	r3, [sp, #0]
1000ad0a:	f7f7 fab7 	bl	1000227c <__aeabi_uidiv>
1000ad0e:	1c02      	adds	r2, r0, #0
1000ad10:	437a      	muls	r2, r7
1000ad12:	9002      	str	r0, [sp, #8]
1000ad14:	4649      	mov	r1, r9
1000ad16:	1c20      	adds	r0, r4, #0
1000ad18:	1c17      	adds	r7, r2, #0
1000ad1a:	f7f7 faff 	bl	1000231c <__aeabi_uidivmod>
1000ad1e:	9b03      	ldr	r3, [sp, #12]
1000ad20:	0409      	lsls	r1, r1, #16
1000ad22:	0c1b      	lsrs	r3, r3, #16
1000ad24:	4319      	orrs	r1, r3
1000ad26:	428f      	cmp	r7, r1
1000ad28:	d90c      	bls.n	1000ad44 <__aeabi_ddiv+0x240>
1000ad2a:	9b02      	ldr	r3, [sp, #8]
1000ad2c:	1989      	adds	r1, r1, r6
1000ad2e:	3b01      	subs	r3, #1
1000ad30:	428e      	cmp	r6, r1
1000ad32:	d900      	bls.n	1000ad36 <__aeabi_ddiv+0x232>
1000ad34:	e152      	b.n	1000afdc <__aeabi_ddiv+0x4d8>
1000ad36:	428f      	cmp	r7, r1
1000ad38:	d800      	bhi.n	1000ad3c <__aeabi_ddiv+0x238>
1000ad3a:	e14f      	b.n	1000afdc <__aeabi_ddiv+0x4d8>
1000ad3c:	9b02      	ldr	r3, [sp, #8]
1000ad3e:	1989      	adds	r1, r1, r6
1000ad40:	3b02      	subs	r3, #2
1000ad42:	9302      	str	r3, [sp, #8]
1000ad44:	1bcc      	subs	r4, r1, r7
1000ad46:	1c20      	adds	r0, r4, #0
1000ad48:	4649      	mov	r1, r9
1000ad4a:	f7f7 fa97 	bl	1000227c <__aeabi_uidiv>
1000ad4e:	9f00      	ldr	r7, [sp, #0]
1000ad50:	4683      	mov	fp, r0
1000ad52:	4347      	muls	r7, r0
1000ad54:	4649      	mov	r1, r9
1000ad56:	1c20      	adds	r0, r4, #0
1000ad58:	f7f7 fae0 	bl	1000231c <__aeabi_uidivmod>
1000ad5c:	9a03      	ldr	r2, [sp, #12]
1000ad5e:	040b      	lsls	r3, r1, #16
1000ad60:	0414      	lsls	r4, r2, #16
1000ad62:	0c24      	lsrs	r4, r4, #16
1000ad64:	4323      	orrs	r3, r4
1000ad66:	429f      	cmp	r7, r3
1000ad68:	d90d      	bls.n	1000ad86 <__aeabi_ddiv+0x282>
1000ad6a:	465a      	mov	r2, fp
1000ad6c:	199b      	adds	r3, r3, r6
1000ad6e:	3a01      	subs	r2, #1
1000ad70:	429e      	cmp	r6, r3
1000ad72:	d900      	bls.n	1000ad76 <__aeabi_ddiv+0x272>
1000ad74:	e130      	b.n	1000afd8 <__aeabi_ddiv+0x4d4>
1000ad76:	429f      	cmp	r7, r3
1000ad78:	d800      	bhi.n	1000ad7c <__aeabi_ddiv+0x278>
1000ad7a:	e12d      	b.n	1000afd8 <__aeabi_ddiv+0x4d4>
1000ad7c:	2202      	movs	r2, #2
1000ad7e:	4252      	negs	r2, r2
1000ad80:	4694      	mov	ip, r2
1000ad82:	199b      	adds	r3, r3, r6
1000ad84:	44e3      	add	fp, ip
1000ad86:	9a02      	ldr	r2, [sp, #8]
1000ad88:	1bdb      	subs	r3, r3, r7
1000ad8a:	0417      	lsls	r7, r2, #16
1000ad8c:	465a      	mov	r2, fp
1000ad8e:	433a      	orrs	r2, r7
1000ad90:	4693      	mov	fp, r2
1000ad92:	9c01      	ldr	r4, [sp, #4]
1000ad94:	0c17      	lsrs	r7, r2, #16
1000ad96:	0c22      	lsrs	r2, r4, #16
1000ad98:	1c10      	adds	r0, r2, #0
1000ad9a:	9204      	str	r2, [sp, #16]
1000ad9c:	465a      	mov	r2, fp
1000ad9e:	0411      	lsls	r1, r2, #16
1000ada0:	0422      	lsls	r2, r4, #16
1000ada2:	0c12      	lsrs	r2, r2, #16
1000ada4:	1c14      	adds	r4, r2, #0
1000ada6:	0c09      	lsrs	r1, r1, #16
1000ada8:	437c      	muls	r4, r7
1000adaa:	9205      	str	r2, [sp, #20]
1000adac:	434a      	muls	r2, r1
1000adae:	4341      	muls	r1, r0
1000adb0:	4347      	muls	r7, r0
1000adb2:	1861      	adds	r1, r4, r1
1000adb4:	0c10      	lsrs	r0, r2, #16
1000adb6:	1809      	adds	r1, r1, r0
1000adb8:	428c      	cmp	r4, r1
1000adba:	d903      	bls.n	1000adc4 <__aeabi_ddiv+0x2c0>
1000adbc:	2080      	movs	r0, #128	; 0x80
1000adbe:	0240      	lsls	r0, r0, #9
1000adc0:	4684      	mov	ip, r0
1000adc2:	4467      	add	r7, ip
1000adc4:	0c0c      	lsrs	r4, r1, #16
1000adc6:	0412      	lsls	r2, r2, #16
1000adc8:	0408      	lsls	r0, r1, #16
1000adca:	0c12      	lsrs	r2, r2, #16
1000adcc:	193c      	adds	r4, r7, r4
1000adce:	1881      	adds	r1, r0, r2
1000add0:	42a3      	cmp	r3, r4
1000add2:	d200      	bcs.n	1000add6 <__aeabi_ddiv+0x2d2>
1000add4:	e0e5      	b.n	1000afa2 <__aeabi_ddiv+0x49e>
1000add6:	d100      	bne.n	1000adda <__aeabi_ddiv+0x2d6>
1000add8:	e0df      	b.n	1000af9a <__aeabi_ddiv+0x496>
1000adda:	1b1f      	subs	r7, r3, r4
1000addc:	4643      	mov	r3, r8
1000adde:	1a5c      	subs	r4, r3, r1
1000ade0:	45a0      	cmp	r8, r4
1000ade2:	4192      	sbcs	r2, r2
1000ade4:	4252      	negs	r2, r2
1000ade6:	1abf      	subs	r7, r7, r2
1000ade8:	42b7      	cmp	r7, r6
1000adea:	d100      	bne.n	1000adee <__aeabi_ddiv+0x2ea>
1000adec:	e10e      	b.n	1000b00c <__aeabi_ddiv+0x508>
1000adee:	1c38      	adds	r0, r7, #0
1000adf0:	4649      	mov	r1, r9
1000adf2:	f7f7 fa43 	bl	1000227c <__aeabi_uidiv>
1000adf6:	9b00      	ldr	r3, [sp, #0]
1000adf8:	9002      	str	r0, [sp, #8]
1000adfa:	4343      	muls	r3, r0
1000adfc:	4649      	mov	r1, r9
1000adfe:	1c38      	adds	r0, r7, #0
1000ae00:	4698      	mov	r8, r3
1000ae02:	f7f7 fa8b 	bl	1000231c <__aeabi_uidivmod>
1000ae06:	0c23      	lsrs	r3, r4, #16
1000ae08:	040f      	lsls	r7, r1, #16
1000ae0a:	431f      	orrs	r7, r3
1000ae0c:	45b8      	cmp	r8, r7
1000ae0e:	d90c      	bls.n	1000ae2a <__aeabi_ddiv+0x326>
1000ae10:	9b02      	ldr	r3, [sp, #8]
1000ae12:	19bf      	adds	r7, r7, r6
1000ae14:	3b01      	subs	r3, #1
1000ae16:	42be      	cmp	r6, r7
1000ae18:	d900      	bls.n	1000ae1c <__aeabi_ddiv+0x318>
1000ae1a:	e0fb      	b.n	1000b014 <__aeabi_ddiv+0x510>
1000ae1c:	45b8      	cmp	r8, r7
1000ae1e:	d800      	bhi.n	1000ae22 <__aeabi_ddiv+0x31e>
1000ae20:	e0f8      	b.n	1000b014 <__aeabi_ddiv+0x510>
1000ae22:	9b02      	ldr	r3, [sp, #8]
1000ae24:	19bf      	adds	r7, r7, r6
1000ae26:	3b02      	subs	r3, #2
1000ae28:	9302      	str	r3, [sp, #8]
1000ae2a:	4643      	mov	r3, r8
1000ae2c:	1aff      	subs	r7, r7, r3
1000ae2e:	4649      	mov	r1, r9
1000ae30:	1c38      	adds	r0, r7, #0
1000ae32:	f7f7 fa23 	bl	1000227c <__aeabi_uidiv>
1000ae36:	9b00      	ldr	r3, [sp, #0]
1000ae38:	9003      	str	r0, [sp, #12]
1000ae3a:	4343      	muls	r3, r0
1000ae3c:	4649      	mov	r1, r9
1000ae3e:	1c38      	adds	r0, r7, #0
1000ae40:	4698      	mov	r8, r3
1000ae42:	f7f7 fa6b 	bl	1000231c <__aeabi_uidivmod>
1000ae46:	0424      	lsls	r4, r4, #16
1000ae48:	0409      	lsls	r1, r1, #16
1000ae4a:	0c24      	lsrs	r4, r4, #16
1000ae4c:	4321      	orrs	r1, r4
1000ae4e:	4588      	cmp	r8, r1
1000ae50:	d90c      	bls.n	1000ae6c <__aeabi_ddiv+0x368>
1000ae52:	9b03      	ldr	r3, [sp, #12]
1000ae54:	1989      	adds	r1, r1, r6
1000ae56:	3b01      	subs	r3, #1
1000ae58:	428e      	cmp	r6, r1
1000ae5a:	d900      	bls.n	1000ae5e <__aeabi_ddiv+0x35a>
1000ae5c:	e0dc      	b.n	1000b018 <__aeabi_ddiv+0x514>
1000ae5e:	4588      	cmp	r8, r1
1000ae60:	d800      	bhi.n	1000ae64 <__aeabi_ddiv+0x360>
1000ae62:	e0d9      	b.n	1000b018 <__aeabi_ddiv+0x514>
1000ae64:	9b03      	ldr	r3, [sp, #12]
1000ae66:	1989      	adds	r1, r1, r6
1000ae68:	3b02      	subs	r3, #2
1000ae6a:	9303      	str	r3, [sp, #12]
1000ae6c:	4643      	mov	r3, r8
1000ae6e:	1ac9      	subs	r1, r1, r3
1000ae70:	9b02      	ldr	r3, [sp, #8]
1000ae72:	9a03      	ldr	r2, [sp, #12]
1000ae74:	041b      	lsls	r3, r3, #16
1000ae76:	9c05      	ldr	r4, [sp, #20]
1000ae78:	431a      	orrs	r2, r3
1000ae7a:	0c10      	lsrs	r0, r2, #16
1000ae7c:	0413      	lsls	r3, r2, #16
1000ae7e:	4691      	mov	r9, r2
1000ae80:	1c22      	adds	r2, r4, #0
1000ae82:	9f04      	ldr	r7, [sp, #16]
1000ae84:	0c1b      	lsrs	r3, r3, #16
1000ae86:	435a      	muls	r2, r3
1000ae88:	4344      	muls	r4, r0
1000ae8a:	437b      	muls	r3, r7
1000ae8c:	4378      	muls	r0, r7
1000ae8e:	18e3      	adds	r3, r4, r3
1000ae90:	0c17      	lsrs	r7, r2, #16
1000ae92:	19db      	adds	r3, r3, r7
1000ae94:	429c      	cmp	r4, r3
1000ae96:	d903      	bls.n	1000aea0 <__aeabi_ddiv+0x39c>
1000ae98:	2480      	movs	r4, #128	; 0x80
1000ae9a:	0264      	lsls	r4, r4, #9
1000ae9c:	46a4      	mov	ip, r4
1000ae9e:	4460      	add	r0, ip
1000aea0:	0c1c      	lsrs	r4, r3, #16
1000aea2:	0412      	lsls	r2, r2, #16
1000aea4:	041b      	lsls	r3, r3, #16
1000aea6:	0c12      	lsrs	r2, r2, #16
1000aea8:	1900      	adds	r0, r0, r4
1000aeaa:	189b      	adds	r3, r3, r2
1000aeac:	4281      	cmp	r1, r0
1000aeae:	d200      	bcs.n	1000aeb2 <__aeabi_ddiv+0x3ae>
1000aeb0:	e096      	b.n	1000afe0 <__aeabi_ddiv+0x4dc>
1000aeb2:	d100      	bne.n	1000aeb6 <__aeabi_ddiv+0x3b2>
1000aeb4:	e0fc      	b.n	1000b0b0 <__aeabi_ddiv+0x5ac>
1000aeb6:	464a      	mov	r2, r9
1000aeb8:	2301      	movs	r3, #1
1000aeba:	431a      	orrs	r2, r3
1000aebc:	4691      	mov	r9, r2
1000aebe:	4b9b      	ldr	r3, [pc, #620]	; (1000b12c <__aeabi_ddiv+0x628>)
1000aec0:	18eb      	adds	r3, r5, r3
1000aec2:	2b00      	cmp	r3, #0
1000aec4:	dc00      	bgt.n	1000aec8 <__aeabi_ddiv+0x3c4>
1000aec6:	e099      	b.n	1000affc <__aeabi_ddiv+0x4f8>
1000aec8:	464a      	mov	r2, r9
1000aeca:	0752      	lsls	r2, r2, #29
1000aecc:	d00a      	beq.n	1000aee4 <__aeabi_ddiv+0x3e0>
1000aece:	220f      	movs	r2, #15
1000aed0:	4649      	mov	r1, r9
1000aed2:	400a      	ands	r2, r1
1000aed4:	2a04      	cmp	r2, #4
1000aed6:	d005      	beq.n	1000aee4 <__aeabi_ddiv+0x3e0>
1000aed8:	3104      	adds	r1, #4
1000aeda:	4549      	cmp	r1, r9
1000aedc:	4192      	sbcs	r2, r2
1000aede:	4689      	mov	r9, r1
1000aee0:	4252      	negs	r2, r2
1000aee2:	4493      	add	fp, r2
1000aee4:	465a      	mov	r2, fp
1000aee6:	01d2      	lsls	r2, r2, #7
1000aee8:	d506      	bpl.n	1000aef8 <__aeabi_ddiv+0x3f4>
1000aeea:	465a      	mov	r2, fp
1000aeec:	4b90      	ldr	r3, [pc, #576]	; (1000b130 <__aeabi_ddiv+0x62c>)
1000aeee:	401a      	ands	r2, r3
1000aef0:	2380      	movs	r3, #128	; 0x80
1000aef2:	4693      	mov	fp, r2
1000aef4:	00db      	lsls	r3, r3, #3
1000aef6:	18eb      	adds	r3, r5, r3
1000aef8:	4a8e      	ldr	r2, [pc, #568]	; (1000b134 <__aeabi_ddiv+0x630>)
1000aefa:	4293      	cmp	r3, r2
1000aefc:	dd00      	ble.n	1000af00 <__aeabi_ddiv+0x3fc>
1000aefe:	e662      	b.n	1000abc6 <__aeabi_ddiv+0xc2>
1000af00:	464a      	mov	r2, r9
1000af02:	4659      	mov	r1, fp
1000af04:	08d2      	lsrs	r2, r2, #3
1000af06:	0749      	lsls	r1, r1, #29
1000af08:	4311      	orrs	r1, r2
1000af0a:	465a      	mov	r2, fp
1000af0c:	4689      	mov	r9, r1
1000af0e:	0257      	lsls	r7, r2, #9
1000af10:	4651      	mov	r1, sl
1000af12:	2201      	movs	r2, #1
1000af14:	055b      	lsls	r3, r3, #21
1000af16:	0b3f      	lsrs	r7, r7, #12
1000af18:	0d5b      	lsrs	r3, r3, #21
1000af1a:	400a      	ands	r2, r1
1000af1c:	e65a      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000af1e:	2080      	movs	r0, #128	; 0x80
1000af20:	465a      	mov	r2, fp
1000af22:	0300      	lsls	r0, r0, #12
1000af24:	4202      	tst	r2, r0
1000af26:	d008      	beq.n	1000af3a <__aeabi_ddiv+0x436>
1000af28:	4207      	tst	r7, r0
1000af2a:	d106      	bne.n	1000af3a <__aeabi_ddiv+0x436>
1000af2c:	4307      	orrs	r7, r0
1000af2e:	033f      	lsls	r7, r7, #12
1000af30:	4699      	mov	r9, r3
1000af32:	0b3f      	lsrs	r7, r7, #12
1000af34:	4642      	mov	r2, r8
1000af36:	4b80      	ldr	r3, [pc, #512]	; (1000b138 <__aeabi_ddiv+0x634>)
1000af38:	e64c      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000af3a:	465f      	mov	r7, fp
1000af3c:	4307      	orrs	r7, r0
1000af3e:	033f      	lsls	r7, r7, #12
1000af40:	0b3f      	lsrs	r7, r7, #12
1000af42:	1c22      	adds	r2, r4, #0
1000af44:	4b7c      	ldr	r3, [pc, #496]	; (1000b138 <__aeabi_ddiv+0x634>)
1000af46:	e645      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000af48:	f001 f912 	bl	1000c170 <__clzsi2>
1000af4c:	1c03      	adds	r3, r0, #0
1000af4e:	3020      	adds	r0, #32
1000af50:	2827      	cmp	r0, #39	; 0x27
1000af52:	dc00      	bgt.n	1000af56 <__aeabi_ddiv+0x452>
1000af54:	e65e      	b.n	1000ac14 <__aeabi_ddiv+0x110>
1000af56:	3b08      	subs	r3, #8
1000af58:	409e      	lsls	r6, r3
1000af5a:	2300      	movs	r3, #0
1000af5c:	46b3      	mov	fp, r6
1000af5e:	4699      	mov	r9, r3
1000af60:	e665      	b.n	1000ac2e <__aeabi_ddiv+0x12a>
1000af62:	4650      	mov	r0, sl
1000af64:	f001 f904 	bl	1000c170 <__clzsi2>
1000af68:	1c02      	adds	r2, r0, #0
1000af6a:	3220      	adds	r2, #32
1000af6c:	2a27      	cmp	r2, #39	; 0x27
1000af6e:	dc00      	bgt.n	1000af72 <__aeabi_ddiv+0x46e>
1000af70:	e675      	b.n	1000ac5e <__aeabi_ddiv+0x15a>
1000af72:	4657      	mov	r7, sl
1000af74:	3808      	subs	r0, #8
1000af76:	4087      	lsls	r7, r0
1000af78:	2300      	movs	r3, #0
1000af7a:	e67b      	b.n	1000ac74 <__aeabi_ddiv+0x170>
1000af7c:	4599      	cmp	r9, r3
1000af7e:	d200      	bcs.n	1000af82 <__aeabi_ddiv+0x47e>
1000af80:	e6af      	b.n	1000ace2 <__aeabi_ddiv+0x1de>
1000af82:	465a      	mov	r2, fp
1000af84:	4659      	mov	r1, fp
1000af86:	0854      	lsrs	r4, r2, #1
1000af88:	464a      	mov	r2, r9
1000af8a:	07c8      	lsls	r0, r1, #31
1000af8c:	0852      	lsrs	r2, r2, #1
1000af8e:	4302      	orrs	r2, r0
1000af90:	9203      	str	r2, [sp, #12]
1000af92:	464a      	mov	r2, r9
1000af94:	07d2      	lsls	r2, r2, #31
1000af96:	4690      	mov	r8, r2
1000af98:	e6a9      	b.n	1000acee <__aeabi_ddiv+0x1ea>
1000af9a:	2700      	movs	r7, #0
1000af9c:	4588      	cmp	r8, r1
1000af9e:	d300      	bcc.n	1000afa2 <__aeabi_ddiv+0x49e>
1000afa0:	e71c      	b.n	1000addc <__aeabi_ddiv+0x2d8>
1000afa2:	9f01      	ldr	r7, [sp, #4]
1000afa4:	465a      	mov	r2, fp
1000afa6:	46bc      	mov	ip, r7
1000afa8:	44e0      	add	r8, ip
1000afaa:	45b8      	cmp	r8, r7
1000afac:	41bf      	sbcs	r7, r7
1000afae:	427f      	negs	r7, r7
1000afb0:	19bf      	adds	r7, r7, r6
1000afb2:	18ff      	adds	r7, r7, r3
1000afb4:	3a01      	subs	r2, #1
1000afb6:	42be      	cmp	r6, r7
1000afb8:	d206      	bcs.n	1000afc8 <__aeabi_ddiv+0x4c4>
1000afba:	42bc      	cmp	r4, r7
1000afbc:	d85f      	bhi.n	1000b07e <__aeabi_ddiv+0x57a>
1000afbe:	d100      	bne.n	1000afc2 <__aeabi_ddiv+0x4be>
1000afc0:	e09f      	b.n	1000b102 <__aeabi_ddiv+0x5fe>
1000afc2:	1b3f      	subs	r7, r7, r4
1000afc4:	4693      	mov	fp, r2
1000afc6:	e709      	b.n	1000addc <__aeabi_ddiv+0x2d8>
1000afc8:	42b7      	cmp	r7, r6
1000afca:	d1fa      	bne.n	1000afc2 <__aeabi_ddiv+0x4be>
1000afcc:	9b01      	ldr	r3, [sp, #4]
1000afce:	4543      	cmp	r3, r8
1000afd0:	d9f3      	bls.n	1000afba <__aeabi_ddiv+0x4b6>
1000afd2:	1b37      	subs	r7, r6, r4
1000afd4:	4693      	mov	fp, r2
1000afd6:	e701      	b.n	1000addc <__aeabi_ddiv+0x2d8>
1000afd8:	4693      	mov	fp, r2
1000afda:	e6d4      	b.n	1000ad86 <__aeabi_ddiv+0x282>
1000afdc:	9302      	str	r3, [sp, #8]
1000afde:	e6b1      	b.n	1000ad44 <__aeabi_ddiv+0x240>
1000afe0:	464a      	mov	r2, r9
1000afe2:	1989      	adds	r1, r1, r6
1000afe4:	3a01      	subs	r2, #1
1000afe6:	428e      	cmp	r6, r1
1000afe8:	d918      	bls.n	1000b01c <__aeabi_ddiv+0x518>
1000afea:	4691      	mov	r9, r2
1000afec:	4281      	cmp	r1, r0
1000afee:	d000      	beq.n	1000aff2 <__aeabi_ddiv+0x4ee>
1000aff0:	e761      	b.n	1000aeb6 <__aeabi_ddiv+0x3b2>
1000aff2:	9a01      	ldr	r2, [sp, #4]
1000aff4:	429a      	cmp	r2, r3
1000aff6:	d000      	beq.n	1000affa <__aeabi_ddiv+0x4f6>
1000aff8:	e75d      	b.n	1000aeb6 <__aeabi_ddiv+0x3b2>
1000affa:	e760      	b.n	1000aebe <__aeabi_ddiv+0x3ba>
1000affc:	4f4f      	ldr	r7, [pc, #316]	; (1000b13c <__aeabi_ddiv+0x638>)
1000affe:	1b7f      	subs	r7, r7, r5
1000b000:	2f38      	cmp	r7, #56	; 0x38
1000b002:	dd13      	ble.n	1000b02c <__aeabi_ddiv+0x528>
1000b004:	2201      	movs	r2, #1
1000b006:	4653      	mov	r3, sl
1000b008:	401a      	ands	r2, r3
1000b00a:	e64f      	b.n	1000acac <__aeabi_ddiv+0x1a8>
1000b00c:	2301      	movs	r3, #1
1000b00e:	425b      	negs	r3, r3
1000b010:	4699      	mov	r9, r3
1000b012:	e754      	b.n	1000aebe <__aeabi_ddiv+0x3ba>
1000b014:	9302      	str	r3, [sp, #8]
1000b016:	e708      	b.n	1000ae2a <__aeabi_ddiv+0x326>
1000b018:	9303      	str	r3, [sp, #12]
1000b01a:	e727      	b.n	1000ae6c <__aeabi_ddiv+0x368>
1000b01c:	4288      	cmp	r0, r1
1000b01e:	d83c      	bhi.n	1000b09a <__aeabi_ddiv+0x596>
1000b020:	d074      	beq.n	1000b10c <__aeabi_ddiv+0x608>
1000b022:	4691      	mov	r9, r2
1000b024:	e747      	b.n	1000aeb6 <__aeabi_ddiv+0x3b2>
1000b026:	9b01      	ldr	r3, [sp, #4]
1000b028:	469a      	mov	sl, r3
1000b02a:	e748      	b.n	1000aebe <__aeabi_ddiv+0x3ba>
1000b02c:	2f1f      	cmp	r7, #31
1000b02e:	dc44      	bgt.n	1000b0ba <__aeabi_ddiv+0x5b6>
1000b030:	4b43      	ldr	r3, [pc, #268]	; (1000b140 <__aeabi_ddiv+0x63c>)
1000b032:	464a      	mov	r2, r9
1000b034:	469c      	mov	ip, r3
1000b036:	465b      	mov	r3, fp
1000b038:	4465      	add	r5, ip
1000b03a:	40fa      	lsrs	r2, r7
1000b03c:	40ab      	lsls	r3, r5
1000b03e:	4313      	orrs	r3, r2
1000b040:	464a      	mov	r2, r9
1000b042:	40aa      	lsls	r2, r5
1000b044:	1c15      	adds	r5, r2, #0
1000b046:	1e6a      	subs	r2, r5, #1
1000b048:	4195      	sbcs	r5, r2
1000b04a:	465a      	mov	r2, fp
1000b04c:	40fa      	lsrs	r2, r7
1000b04e:	432b      	orrs	r3, r5
1000b050:	1c17      	adds	r7, r2, #0
1000b052:	075a      	lsls	r2, r3, #29
1000b054:	d009      	beq.n	1000b06a <__aeabi_ddiv+0x566>
1000b056:	220f      	movs	r2, #15
1000b058:	401a      	ands	r2, r3
1000b05a:	2a04      	cmp	r2, #4
1000b05c:	d005      	beq.n	1000b06a <__aeabi_ddiv+0x566>
1000b05e:	1d1a      	adds	r2, r3, #4
1000b060:	429a      	cmp	r2, r3
1000b062:	419b      	sbcs	r3, r3
1000b064:	425b      	negs	r3, r3
1000b066:	18ff      	adds	r7, r7, r3
1000b068:	1c13      	adds	r3, r2, #0
1000b06a:	023a      	lsls	r2, r7, #8
1000b06c:	d53e      	bpl.n	1000b0ec <__aeabi_ddiv+0x5e8>
1000b06e:	4653      	mov	r3, sl
1000b070:	2201      	movs	r2, #1
1000b072:	2100      	movs	r1, #0
1000b074:	401a      	ands	r2, r3
1000b076:	2700      	movs	r7, #0
1000b078:	2301      	movs	r3, #1
1000b07a:	4689      	mov	r9, r1
1000b07c:	e5aa      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000b07e:	2302      	movs	r3, #2
1000b080:	425b      	negs	r3, r3
1000b082:	469c      	mov	ip, r3
1000b084:	9a01      	ldr	r2, [sp, #4]
1000b086:	44e3      	add	fp, ip
1000b088:	4694      	mov	ip, r2
1000b08a:	44e0      	add	r8, ip
1000b08c:	4590      	cmp	r8, r2
1000b08e:	419b      	sbcs	r3, r3
1000b090:	425b      	negs	r3, r3
1000b092:	199b      	adds	r3, r3, r6
1000b094:	19df      	adds	r7, r3, r7
1000b096:	1b3f      	subs	r7, r7, r4
1000b098:	e6a0      	b.n	1000addc <__aeabi_ddiv+0x2d8>
1000b09a:	9f01      	ldr	r7, [sp, #4]
1000b09c:	464a      	mov	r2, r9
1000b09e:	007c      	lsls	r4, r7, #1
1000b0a0:	42bc      	cmp	r4, r7
1000b0a2:	41bf      	sbcs	r7, r7
1000b0a4:	427f      	negs	r7, r7
1000b0a6:	19bf      	adds	r7, r7, r6
1000b0a8:	3a02      	subs	r2, #2
1000b0aa:	19c9      	adds	r1, r1, r7
1000b0ac:	9401      	str	r4, [sp, #4]
1000b0ae:	e79c      	b.n	1000afea <__aeabi_ddiv+0x4e6>
1000b0b0:	2b00      	cmp	r3, #0
1000b0b2:	d195      	bne.n	1000afe0 <__aeabi_ddiv+0x4dc>
1000b0b4:	2200      	movs	r2, #0
1000b0b6:	9201      	str	r2, [sp, #4]
1000b0b8:	e79b      	b.n	1000aff2 <__aeabi_ddiv+0x4ee>
1000b0ba:	465a      	mov	r2, fp
1000b0bc:	4b21      	ldr	r3, [pc, #132]	; (1000b144 <__aeabi_ddiv+0x640>)
1000b0be:	1b5b      	subs	r3, r3, r5
1000b0c0:	40da      	lsrs	r2, r3
1000b0c2:	2f20      	cmp	r7, #32
1000b0c4:	d027      	beq.n	1000b116 <__aeabi_ddiv+0x612>
1000b0c6:	4b20      	ldr	r3, [pc, #128]	; (1000b148 <__aeabi_ddiv+0x644>)
1000b0c8:	469c      	mov	ip, r3
1000b0ca:	465b      	mov	r3, fp
1000b0cc:	4465      	add	r5, ip
1000b0ce:	40ab      	lsls	r3, r5
1000b0d0:	4649      	mov	r1, r9
1000b0d2:	430b      	orrs	r3, r1
1000b0d4:	1e59      	subs	r1, r3, #1
1000b0d6:	418b      	sbcs	r3, r1
1000b0d8:	4313      	orrs	r3, r2
1000b0da:	2207      	movs	r2, #7
1000b0dc:	2700      	movs	r7, #0
1000b0de:	401a      	ands	r2, r3
1000b0e0:	d007      	beq.n	1000b0f2 <__aeabi_ddiv+0x5ee>
1000b0e2:	220f      	movs	r2, #15
1000b0e4:	2700      	movs	r7, #0
1000b0e6:	401a      	ands	r2, r3
1000b0e8:	2a04      	cmp	r2, #4
1000b0ea:	d1b8      	bne.n	1000b05e <__aeabi_ddiv+0x55a>
1000b0ec:	077a      	lsls	r2, r7, #29
1000b0ee:	027f      	lsls	r7, r7, #9
1000b0f0:	0b3f      	lsrs	r7, r7, #12
1000b0f2:	08db      	lsrs	r3, r3, #3
1000b0f4:	4313      	orrs	r3, r2
1000b0f6:	4699      	mov	r9, r3
1000b0f8:	2201      	movs	r2, #1
1000b0fa:	4653      	mov	r3, sl
1000b0fc:	401a      	ands	r2, r3
1000b0fe:	2300      	movs	r3, #0
1000b100:	e568      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000b102:	4541      	cmp	r1, r8
1000b104:	d8bb      	bhi.n	1000b07e <__aeabi_ddiv+0x57a>
1000b106:	4693      	mov	fp, r2
1000b108:	2700      	movs	r7, #0
1000b10a:	e667      	b.n	1000addc <__aeabi_ddiv+0x2d8>
1000b10c:	9c01      	ldr	r4, [sp, #4]
1000b10e:	429c      	cmp	r4, r3
1000b110:	d3c3      	bcc.n	1000b09a <__aeabi_ddiv+0x596>
1000b112:	4691      	mov	r9, r2
1000b114:	e76d      	b.n	1000aff2 <__aeabi_ddiv+0x4ee>
1000b116:	2300      	movs	r3, #0
1000b118:	e7da      	b.n	1000b0d0 <__aeabi_ddiv+0x5cc>
1000b11a:	2780      	movs	r7, #128	; 0x80
1000b11c:	465b      	mov	r3, fp
1000b11e:	033f      	lsls	r7, r7, #12
1000b120:	431f      	orrs	r7, r3
1000b122:	033f      	lsls	r7, r7, #12
1000b124:	0b3f      	lsrs	r7, r7, #12
1000b126:	9a01      	ldr	r2, [sp, #4]
1000b128:	4b03      	ldr	r3, [pc, #12]	; (1000b138 <__aeabi_ddiv+0x634>)
1000b12a:	e553      	b.n	1000abd4 <__aeabi_ddiv+0xd0>
1000b12c:	000003ff 	.word	0x000003ff
1000b130:	feffffff 	.word	0xfeffffff
1000b134:	000007fe 	.word	0x000007fe
1000b138:	000007ff 	.word	0x000007ff
1000b13c:	fffffc02 	.word	0xfffffc02
1000b140:	0000041e 	.word	0x0000041e
1000b144:	fffffbe2 	.word	0xfffffbe2
1000b148:	0000043e 	.word	0x0000043e

1000b14c <__eqdf2>:
1000b14c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b14e:	465f      	mov	r7, fp
1000b150:	464d      	mov	r5, r9
1000b152:	4644      	mov	r4, r8
1000b154:	4656      	mov	r6, sl
1000b156:	b4f0      	push	{r4, r5, r6, r7}
1000b158:	031f      	lsls	r7, r3, #12
1000b15a:	005c      	lsls	r4, r3, #1
1000b15c:	0fdb      	lsrs	r3, r3, #31
1000b15e:	4699      	mov	r9, r3
1000b160:	4b1b      	ldr	r3, [pc, #108]	; (1000b1d0 <__eqdf2+0x84>)
1000b162:	030e      	lsls	r6, r1, #12
1000b164:	004d      	lsls	r5, r1, #1
1000b166:	0fc9      	lsrs	r1, r1, #31
1000b168:	4684      	mov	ip, r0
1000b16a:	0b36      	lsrs	r6, r6, #12
1000b16c:	0d6d      	lsrs	r5, r5, #21
1000b16e:	468b      	mov	fp, r1
1000b170:	4690      	mov	r8, r2
1000b172:	0b3f      	lsrs	r7, r7, #12
1000b174:	0d64      	lsrs	r4, r4, #21
1000b176:	429d      	cmp	r5, r3
1000b178:	d00c      	beq.n	1000b194 <__eqdf2+0x48>
1000b17a:	4b15      	ldr	r3, [pc, #84]	; (1000b1d0 <__eqdf2+0x84>)
1000b17c:	429c      	cmp	r4, r3
1000b17e:	d010      	beq.n	1000b1a2 <__eqdf2+0x56>
1000b180:	2301      	movs	r3, #1
1000b182:	42a5      	cmp	r5, r4
1000b184:	d014      	beq.n	1000b1b0 <__eqdf2+0x64>
1000b186:	1c18      	adds	r0, r3, #0
1000b188:	bc3c      	pop	{r2, r3, r4, r5}
1000b18a:	4690      	mov	r8, r2
1000b18c:	4699      	mov	r9, r3
1000b18e:	46a2      	mov	sl, r4
1000b190:	46ab      	mov	fp, r5
1000b192:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b194:	1c31      	adds	r1, r6, #0
1000b196:	2301      	movs	r3, #1
1000b198:	4301      	orrs	r1, r0
1000b19a:	d1f4      	bne.n	1000b186 <__eqdf2+0x3a>
1000b19c:	4b0c      	ldr	r3, [pc, #48]	; (1000b1d0 <__eqdf2+0x84>)
1000b19e:	429c      	cmp	r4, r3
1000b1a0:	d1ee      	bne.n	1000b180 <__eqdf2+0x34>
1000b1a2:	433a      	orrs	r2, r7
1000b1a4:	2301      	movs	r3, #1
1000b1a6:	2a00      	cmp	r2, #0
1000b1a8:	d1ed      	bne.n	1000b186 <__eqdf2+0x3a>
1000b1aa:	2301      	movs	r3, #1
1000b1ac:	42a5      	cmp	r5, r4
1000b1ae:	d1ea      	bne.n	1000b186 <__eqdf2+0x3a>
1000b1b0:	42be      	cmp	r6, r7
1000b1b2:	d1e8      	bne.n	1000b186 <__eqdf2+0x3a>
1000b1b4:	45c4      	cmp	ip, r8
1000b1b6:	d1e6      	bne.n	1000b186 <__eqdf2+0x3a>
1000b1b8:	45cb      	cmp	fp, r9
1000b1ba:	d006      	beq.n	1000b1ca <__eqdf2+0x7e>
1000b1bc:	2d00      	cmp	r5, #0
1000b1be:	d1e2      	bne.n	1000b186 <__eqdf2+0x3a>
1000b1c0:	4330      	orrs	r0, r6
1000b1c2:	1c03      	adds	r3, r0, #0
1000b1c4:	1e58      	subs	r0, r3, #1
1000b1c6:	4183      	sbcs	r3, r0
1000b1c8:	e7dd      	b.n	1000b186 <__eqdf2+0x3a>
1000b1ca:	2300      	movs	r3, #0
1000b1cc:	e7db      	b.n	1000b186 <__eqdf2+0x3a>
1000b1ce:	46c0      	nop			; (mov r8, r8)
1000b1d0:	000007ff 	.word	0x000007ff

1000b1d4 <__gedf2>:
1000b1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b1d6:	4657      	mov	r7, sl
1000b1d8:	4645      	mov	r5, r8
1000b1da:	464e      	mov	r6, r9
1000b1dc:	b4e0      	push	{r5, r6, r7}
1000b1de:	030f      	lsls	r7, r1, #12
1000b1e0:	004e      	lsls	r6, r1, #1
1000b1e2:	0fc9      	lsrs	r1, r1, #31
1000b1e4:	468a      	mov	sl, r1
1000b1e6:	4932      	ldr	r1, [pc, #200]	; (1000b2b0 <__gedf2+0xdc>)
1000b1e8:	031d      	lsls	r5, r3, #12
1000b1ea:	005c      	lsls	r4, r3, #1
1000b1ec:	4684      	mov	ip, r0
1000b1ee:	0b3f      	lsrs	r7, r7, #12
1000b1f0:	0d76      	lsrs	r6, r6, #21
1000b1f2:	4690      	mov	r8, r2
1000b1f4:	0b2d      	lsrs	r5, r5, #12
1000b1f6:	0d64      	lsrs	r4, r4, #21
1000b1f8:	0fdb      	lsrs	r3, r3, #31
1000b1fa:	428e      	cmp	r6, r1
1000b1fc:	d00f      	beq.n	1000b21e <__gedf2+0x4a>
1000b1fe:	428c      	cmp	r4, r1
1000b200:	d039      	beq.n	1000b276 <__gedf2+0xa2>
1000b202:	2e00      	cmp	r6, #0
1000b204:	d110      	bne.n	1000b228 <__gedf2+0x54>
1000b206:	4338      	orrs	r0, r7
1000b208:	4241      	negs	r1, r0
1000b20a:	4141      	adcs	r1, r0
1000b20c:	4689      	mov	r9, r1
1000b20e:	2c00      	cmp	r4, #0
1000b210:	d127      	bne.n	1000b262 <__gedf2+0x8e>
1000b212:	432a      	orrs	r2, r5
1000b214:	d125      	bne.n	1000b262 <__gedf2+0x8e>
1000b216:	2000      	movs	r0, #0
1000b218:	2900      	cmp	r1, #0
1000b21a:	d10e      	bne.n	1000b23a <__gedf2+0x66>
1000b21c:	e008      	b.n	1000b230 <__gedf2+0x5c>
1000b21e:	1c39      	adds	r1, r7, #0
1000b220:	4301      	orrs	r1, r0
1000b222:	d12e      	bne.n	1000b282 <__gedf2+0xae>
1000b224:	42b4      	cmp	r4, r6
1000b226:	d026      	beq.n	1000b276 <__gedf2+0xa2>
1000b228:	2c00      	cmp	r4, #0
1000b22a:	d00b      	beq.n	1000b244 <__gedf2+0x70>
1000b22c:	459a      	cmp	sl, r3
1000b22e:	d00d      	beq.n	1000b24c <__gedf2+0x78>
1000b230:	4653      	mov	r3, sl
1000b232:	4259      	negs	r1, r3
1000b234:	2301      	movs	r3, #1
1000b236:	4319      	orrs	r1, r3
1000b238:	1c08      	adds	r0, r1, #0
1000b23a:	bc1c      	pop	{r2, r3, r4}
1000b23c:	4690      	mov	r8, r2
1000b23e:	4699      	mov	r9, r3
1000b240:	46a2      	mov	sl, r4
1000b242:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b244:	432a      	orrs	r2, r5
1000b246:	d0f3      	beq.n	1000b230 <__gedf2+0x5c>
1000b248:	459a      	cmp	sl, r3
1000b24a:	d1f1      	bne.n	1000b230 <__gedf2+0x5c>
1000b24c:	42a6      	cmp	r6, r4
1000b24e:	dcef      	bgt.n	1000b230 <__gedf2+0x5c>
1000b250:	da1a      	bge.n	1000b288 <__gedf2+0xb4>
1000b252:	4650      	mov	r0, sl
1000b254:	4241      	negs	r1, r0
1000b256:	4148      	adcs	r0, r1
1000b258:	2301      	movs	r3, #1
1000b25a:	4241      	negs	r1, r0
1000b25c:	4319      	orrs	r1, r3
1000b25e:	1c08      	adds	r0, r1, #0
1000b260:	e7eb      	b.n	1000b23a <__gedf2+0x66>
1000b262:	464a      	mov	r2, r9
1000b264:	2a00      	cmp	r2, #0
1000b266:	d0e1      	beq.n	1000b22c <__gedf2+0x58>
1000b268:	4258      	negs	r0, r3
1000b26a:	4158      	adcs	r0, r3
1000b26c:	2201      	movs	r2, #1
1000b26e:	4241      	negs	r1, r0
1000b270:	4311      	orrs	r1, r2
1000b272:	1c08      	adds	r0, r1, #0
1000b274:	e7e1      	b.n	1000b23a <__gedf2+0x66>
1000b276:	1c29      	adds	r1, r5, #0
1000b278:	4311      	orrs	r1, r2
1000b27a:	d102      	bne.n	1000b282 <__gedf2+0xae>
1000b27c:	2e00      	cmp	r6, #0
1000b27e:	d0c2      	beq.n	1000b206 <__gedf2+0x32>
1000b280:	e7d4      	b.n	1000b22c <__gedf2+0x58>
1000b282:	2002      	movs	r0, #2
1000b284:	4240      	negs	r0, r0
1000b286:	e7d8      	b.n	1000b23a <__gedf2+0x66>
1000b288:	42af      	cmp	r7, r5
1000b28a:	d8d1      	bhi.n	1000b230 <__gedf2+0x5c>
1000b28c:	d009      	beq.n	1000b2a2 <__gedf2+0xce>
1000b28e:	2000      	movs	r0, #0
1000b290:	42af      	cmp	r7, r5
1000b292:	d2d2      	bcs.n	1000b23a <__gedf2+0x66>
1000b294:	4650      	mov	r0, sl
1000b296:	4241      	negs	r1, r0
1000b298:	4148      	adcs	r0, r1
1000b29a:	2301      	movs	r3, #1
1000b29c:	4240      	negs	r0, r0
1000b29e:	4318      	orrs	r0, r3
1000b2a0:	e7cb      	b.n	1000b23a <__gedf2+0x66>
1000b2a2:	45c4      	cmp	ip, r8
1000b2a4:	d8c4      	bhi.n	1000b230 <__gedf2+0x5c>
1000b2a6:	2000      	movs	r0, #0
1000b2a8:	45c4      	cmp	ip, r8
1000b2aa:	d3f3      	bcc.n	1000b294 <__gedf2+0xc0>
1000b2ac:	e7c5      	b.n	1000b23a <__gedf2+0x66>
1000b2ae:	46c0      	nop			; (mov r8, r8)
1000b2b0:	000007ff 	.word	0x000007ff

1000b2b4 <__ledf2>:
1000b2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b2b6:	465f      	mov	r7, fp
1000b2b8:	464d      	mov	r5, r9
1000b2ba:	4644      	mov	r4, r8
1000b2bc:	4656      	mov	r6, sl
1000b2be:	4680      	mov	r8, r0
1000b2c0:	b4f0      	push	{r4, r5, r6, r7}
1000b2c2:	1c06      	adds	r6, r0, #0
1000b2c4:	0308      	lsls	r0, r1, #12
1000b2c6:	0b00      	lsrs	r0, r0, #12
1000b2c8:	4684      	mov	ip, r0
1000b2ca:	482c      	ldr	r0, [pc, #176]	; (1000b37c <__ledf2+0xc8>)
1000b2cc:	004c      	lsls	r4, r1, #1
1000b2ce:	031f      	lsls	r7, r3, #12
1000b2d0:	005d      	lsls	r5, r3, #1
1000b2d2:	0fc9      	lsrs	r1, r1, #31
1000b2d4:	0d64      	lsrs	r4, r4, #21
1000b2d6:	468b      	mov	fp, r1
1000b2d8:	4691      	mov	r9, r2
1000b2da:	0b3f      	lsrs	r7, r7, #12
1000b2dc:	0d6d      	lsrs	r5, r5, #21
1000b2de:	0fdb      	lsrs	r3, r3, #31
1000b2e0:	4284      	cmp	r4, r0
1000b2e2:	d012      	beq.n	1000b30a <__ledf2+0x56>
1000b2e4:	4285      	cmp	r5, r0
1000b2e6:	d025      	beq.n	1000b334 <__ledf2+0x80>
1000b2e8:	2c00      	cmp	r4, #0
1000b2ea:	d114      	bne.n	1000b316 <__ledf2+0x62>
1000b2ec:	4661      	mov	r1, ip
1000b2ee:	430e      	orrs	r6, r1
1000b2f0:	4270      	negs	r0, r6
1000b2f2:	4146      	adcs	r6, r0
1000b2f4:	2d00      	cmp	r5, #0
1000b2f6:	d035      	beq.n	1000b364 <__ledf2+0xb0>
1000b2f8:	2e00      	cmp	r6, #0
1000b2fa:	d021      	beq.n	1000b340 <__ledf2+0x8c>
1000b2fc:	4258      	negs	r0, r3
1000b2fe:	4158      	adcs	r0, r3
1000b300:	2101      	movs	r1, #1
1000b302:	4243      	negs	r3, r0
1000b304:	430b      	orrs	r3, r1
1000b306:	1c18      	adds	r0, r3, #0
1000b308:	e00e      	b.n	1000b328 <__ledf2+0x74>
1000b30a:	4661      	mov	r1, ip
1000b30c:	2002      	movs	r0, #2
1000b30e:	4331      	orrs	r1, r6
1000b310:	d10a      	bne.n	1000b328 <__ledf2+0x74>
1000b312:	42a5      	cmp	r5, r4
1000b314:	d00e      	beq.n	1000b334 <__ledf2+0x80>
1000b316:	2d00      	cmp	r5, #0
1000b318:	d112      	bne.n	1000b340 <__ledf2+0x8c>
1000b31a:	433a      	orrs	r2, r7
1000b31c:	d110      	bne.n	1000b340 <__ledf2+0x8c>
1000b31e:	465b      	mov	r3, fp
1000b320:	4259      	negs	r1, r3
1000b322:	2301      	movs	r3, #1
1000b324:	4319      	orrs	r1, r3
1000b326:	1c08      	adds	r0, r1, #0
1000b328:	bc3c      	pop	{r2, r3, r4, r5}
1000b32a:	4690      	mov	r8, r2
1000b32c:	4699      	mov	r9, r3
1000b32e:	46a2      	mov	sl, r4
1000b330:	46ab      	mov	fp, r5
1000b332:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b334:	1c39      	adds	r1, r7, #0
1000b336:	2002      	movs	r0, #2
1000b338:	4311      	orrs	r1, r2
1000b33a:	d1f5      	bne.n	1000b328 <__ledf2+0x74>
1000b33c:	2c00      	cmp	r4, #0
1000b33e:	d0d5      	beq.n	1000b2ec <__ledf2+0x38>
1000b340:	459b      	cmp	fp, r3
1000b342:	d1ec      	bne.n	1000b31e <__ledf2+0x6a>
1000b344:	42ac      	cmp	r4, r5
1000b346:	dcea      	bgt.n	1000b31e <__ledf2+0x6a>
1000b348:	db05      	blt.n	1000b356 <__ledf2+0xa2>
1000b34a:	45bc      	cmp	ip, r7
1000b34c:	d8e7      	bhi.n	1000b31e <__ledf2+0x6a>
1000b34e:	d00f      	beq.n	1000b370 <__ledf2+0xbc>
1000b350:	2000      	movs	r0, #0
1000b352:	45bc      	cmp	ip, r7
1000b354:	d2e8      	bcs.n	1000b328 <__ledf2+0x74>
1000b356:	4658      	mov	r0, fp
1000b358:	4241      	negs	r1, r0
1000b35a:	4148      	adcs	r0, r1
1000b35c:	4241      	negs	r1, r0
1000b35e:	2001      	movs	r0, #1
1000b360:	4308      	orrs	r0, r1
1000b362:	e7e1      	b.n	1000b328 <__ledf2+0x74>
1000b364:	433a      	orrs	r2, r7
1000b366:	d1c7      	bne.n	1000b2f8 <__ledf2+0x44>
1000b368:	2000      	movs	r0, #0
1000b36a:	2e00      	cmp	r6, #0
1000b36c:	d1dc      	bne.n	1000b328 <__ledf2+0x74>
1000b36e:	e7d6      	b.n	1000b31e <__ledf2+0x6a>
1000b370:	45c8      	cmp	r8, r9
1000b372:	d8d4      	bhi.n	1000b31e <__ledf2+0x6a>
1000b374:	2000      	movs	r0, #0
1000b376:	45c8      	cmp	r8, r9
1000b378:	d3ed      	bcc.n	1000b356 <__ledf2+0xa2>
1000b37a:	e7d5      	b.n	1000b328 <__ledf2+0x74>
1000b37c:	000007ff 	.word	0x000007ff

1000b380 <__aeabi_dmul>:
1000b380:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b382:	465f      	mov	r7, fp
1000b384:	4656      	mov	r6, sl
1000b386:	464d      	mov	r5, r9
1000b388:	4644      	mov	r4, r8
1000b38a:	b4f0      	push	{r4, r5, r6, r7}
1000b38c:	1c05      	adds	r5, r0, #0
1000b38e:	1c06      	adds	r6, r0, #0
1000b390:	0308      	lsls	r0, r1, #12
1000b392:	b087      	sub	sp, #28
1000b394:	4699      	mov	r9, r3
1000b396:	004f      	lsls	r7, r1, #1
1000b398:	0b03      	lsrs	r3, r0, #12
1000b39a:	0fcc      	lsrs	r4, r1, #31
1000b39c:	4692      	mov	sl, r2
1000b39e:	469b      	mov	fp, r3
1000b3a0:	0d7f      	lsrs	r7, r7, #21
1000b3a2:	9401      	str	r4, [sp, #4]
1000b3a4:	d067      	beq.n	1000b476 <__aeabi_dmul+0xf6>
1000b3a6:	4b6c      	ldr	r3, [pc, #432]	; (1000b558 <__aeabi_dmul+0x1d8>)
1000b3a8:	429f      	cmp	r7, r3
1000b3aa:	d036      	beq.n	1000b41a <__aeabi_dmul+0x9a>
1000b3ac:	2080      	movs	r0, #128	; 0x80
1000b3ae:	465b      	mov	r3, fp
1000b3b0:	0340      	lsls	r0, r0, #13
1000b3b2:	4318      	orrs	r0, r3
1000b3b4:	00c0      	lsls	r0, r0, #3
1000b3b6:	0f6b      	lsrs	r3, r5, #29
1000b3b8:	4318      	orrs	r0, r3
1000b3ba:	4b68      	ldr	r3, [pc, #416]	; (1000b55c <__aeabi_dmul+0x1dc>)
1000b3bc:	4683      	mov	fp, r0
1000b3be:	469c      	mov	ip, r3
1000b3c0:	2300      	movs	r3, #0
1000b3c2:	4698      	mov	r8, r3
1000b3c4:	00ee      	lsls	r6, r5, #3
1000b3c6:	4467      	add	r7, ip
1000b3c8:	9300      	str	r3, [sp, #0]
1000b3ca:	464b      	mov	r3, r9
1000b3cc:	4649      	mov	r1, r9
1000b3ce:	031d      	lsls	r5, r3, #12
1000b3d0:	0fc9      	lsrs	r1, r1, #31
1000b3d2:	005b      	lsls	r3, r3, #1
1000b3d4:	4652      	mov	r2, sl
1000b3d6:	0b2d      	lsrs	r5, r5, #12
1000b3d8:	0d5b      	lsrs	r3, r3, #21
1000b3da:	4689      	mov	r9, r1
1000b3dc:	d100      	bne.n	1000b3e0 <__aeabi_dmul+0x60>
1000b3de:	e06e      	b.n	1000b4be <__aeabi_dmul+0x13e>
1000b3e0:	495d      	ldr	r1, [pc, #372]	; (1000b558 <__aeabi_dmul+0x1d8>)
1000b3e2:	428b      	cmp	r3, r1
1000b3e4:	d064      	beq.n	1000b4b0 <__aeabi_dmul+0x130>
1000b3e6:	2080      	movs	r0, #128	; 0x80
1000b3e8:	495c      	ldr	r1, [pc, #368]	; (1000b55c <__aeabi_dmul+0x1dc>)
1000b3ea:	0340      	lsls	r0, r0, #13
1000b3ec:	468c      	mov	ip, r1
1000b3ee:	2100      	movs	r1, #0
1000b3f0:	4305      	orrs	r5, r0
1000b3f2:	00ed      	lsls	r5, r5, #3
1000b3f4:	0f50      	lsrs	r0, r2, #29
1000b3f6:	4305      	orrs	r5, r0
1000b3f8:	00d2      	lsls	r2, r2, #3
1000b3fa:	4463      	add	r3, ip
1000b3fc:	4648      	mov	r0, r9
1000b3fe:	18ff      	adds	r7, r7, r3
1000b400:	1c7b      	adds	r3, r7, #1
1000b402:	469a      	mov	sl, r3
1000b404:	9b00      	ldr	r3, [sp, #0]
1000b406:	4060      	eors	r0, r4
1000b408:	9002      	str	r0, [sp, #8]
1000b40a:	430b      	orrs	r3, r1
1000b40c:	2b0f      	cmp	r3, #15
1000b40e:	d900      	bls.n	1000b412 <__aeabi_dmul+0x92>
1000b410:	e0ac      	b.n	1000b56c <__aeabi_dmul+0x1ec>
1000b412:	4853      	ldr	r0, [pc, #332]	; (1000b560 <__aeabi_dmul+0x1e0>)
1000b414:	009b      	lsls	r3, r3, #2
1000b416:	58c3      	ldr	r3, [r0, r3]
1000b418:	469f      	mov	pc, r3
1000b41a:	465b      	mov	r3, fp
1000b41c:	431d      	orrs	r5, r3
1000b41e:	d000      	beq.n	1000b422 <__aeabi_dmul+0xa2>
1000b420:	e082      	b.n	1000b528 <__aeabi_dmul+0x1a8>
1000b422:	2308      	movs	r3, #8
1000b424:	9300      	str	r3, [sp, #0]
1000b426:	2300      	movs	r3, #0
1000b428:	469b      	mov	fp, r3
1000b42a:	3302      	adds	r3, #2
1000b42c:	2600      	movs	r6, #0
1000b42e:	4698      	mov	r8, r3
1000b430:	e7cb      	b.n	1000b3ca <__aeabi_dmul+0x4a>
1000b432:	9b02      	ldr	r3, [sp, #8]
1000b434:	9301      	str	r3, [sp, #4]
1000b436:	4643      	mov	r3, r8
1000b438:	2b02      	cmp	r3, #2
1000b43a:	d159      	bne.n	1000b4f0 <__aeabi_dmul+0x170>
1000b43c:	2401      	movs	r4, #1
1000b43e:	2500      	movs	r5, #0
1000b440:	2600      	movs	r6, #0
1000b442:	9b01      	ldr	r3, [sp, #4]
1000b444:	401c      	ands	r4, r3
1000b446:	4b44      	ldr	r3, [pc, #272]	; (1000b558 <__aeabi_dmul+0x1d8>)
1000b448:	2100      	movs	r1, #0
1000b44a:	032d      	lsls	r5, r5, #12
1000b44c:	0d0a      	lsrs	r2, r1, #20
1000b44e:	0512      	lsls	r2, r2, #20
1000b450:	0b2d      	lsrs	r5, r5, #12
1000b452:	4315      	orrs	r5, r2
1000b454:	4a43      	ldr	r2, [pc, #268]	; (1000b564 <__aeabi_dmul+0x1e4>)
1000b456:	051b      	lsls	r3, r3, #20
1000b458:	4015      	ands	r5, r2
1000b45a:	431d      	orrs	r5, r3
1000b45c:	006d      	lsls	r5, r5, #1
1000b45e:	07e4      	lsls	r4, r4, #31
1000b460:	086d      	lsrs	r5, r5, #1
1000b462:	4325      	orrs	r5, r4
1000b464:	1c30      	adds	r0, r6, #0
1000b466:	1c29      	adds	r1, r5, #0
1000b468:	b007      	add	sp, #28
1000b46a:	bc3c      	pop	{r2, r3, r4, r5}
1000b46c:	4690      	mov	r8, r2
1000b46e:	4699      	mov	r9, r3
1000b470:	46a2      	mov	sl, r4
1000b472:	46ab      	mov	fp, r5
1000b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b476:	432b      	orrs	r3, r5
1000b478:	d04e      	beq.n	1000b518 <__aeabi_dmul+0x198>
1000b47a:	465b      	mov	r3, fp
1000b47c:	2b00      	cmp	r3, #0
1000b47e:	d100      	bne.n	1000b482 <__aeabi_dmul+0x102>
1000b480:	e185      	b.n	1000b78e <__aeabi_dmul+0x40e>
1000b482:	4658      	mov	r0, fp
1000b484:	f000 fe74 	bl	1000c170 <__clzsi2>
1000b488:	1c02      	adds	r2, r0, #0
1000b48a:	2328      	movs	r3, #40	; 0x28
1000b48c:	1c29      	adds	r1, r5, #0
1000b48e:	1a9b      	subs	r3, r3, r2
1000b490:	1c16      	adds	r6, r2, #0
1000b492:	4658      	mov	r0, fp
1000b494:	40d9      	lsrs	r1, r3
1000b496:	3e08      	subs	r6, #8
1000b498:	40b0      	lsls	r0, r6
1000b49a:	1c0b      	adds	r3, r1, #0
1000b49c:	40b5      	lsls	r5, r6
1000b49e:	4303      	orrs	r3, r0
1000b4a0:	469b      	mov	fp, r3
1000b4a2:	1c2e      	adds	r6, r5, #0
1000b4a4:	2300      	movs	r3, #0
1000b4a6:	4f30      	ldr	r7, [pc, #192]	; (1000b568 <__aeabi_dmul+0x1e8>)
1000b4a8:	9300      	str	r3, [sp, #0]
1000b4aa:	1abf      	subs	r7, r7, r2
1000b4ac:	4698      	mov	r8, r3
1000b4ae:	e78c      	b.n	1000b3ca <__aeabi_dmul+0x4a>
1000b4b0:	4651      	mov	r1, sl
1000b4b2:	4329      	orrs	r1, r5
1000b4b4:	d12e      	bne.n	1000b514 <__aeabi_dmul+0x194>
1000b4b6:	2500      	movs	r5, #0
1000b4b8:	2200      	movs	r2, #0
1000b4ba:	2102      	movs	r1, #2
1000b4bc:	e79e      	b.n	1000b3fc <__aeabi_dmul+0x7c>
1000b4be:	4651      	mov	r1, sl
1000b4c0:	4329      	orrs	r1, r5
1000b4c2:	d023      	beq.n	1000b50c <__aeabi_dmul+0x18c>
1000b4c4:	2d00      	cmp	r5, #0
1000b4c6:	d100      	bne.n	1000b4ca <__aeabi_dmul+0x14a>
1000b4c8:	e154      	b.n	1000b774 <__aeabi_dmul+0x3f4>
1000b4ca:	1c28      	adds	r0, r5, #0
1000b4cc:	f000 fe50 	bl	1000c170 <__clzsi2>
1000b4d0:	1c03      	adds	r3, r0, #0
1000b4d2:	2128      	movs	r1, #40	; 0x28
1000b4d4:	4650      	mov	r0, sl
1000b4d6:	1ac9      	subs	r1, r1, r3
1000b4d8:	1c1a      	adds	r2, r3, #0
1000b4da:	40c8      	lsrs	r0, r1
1000b4dc:	4651      	mov	r1, sl
1000b4de:	3a08      	subs	r2, #8
1000b4e0:	4091      	lsls	r1, r2
1000b4e2:	4095      	lsls	r5, r2
1000b4e4:	1c0a      	adds	r2, r1, #0
1000b4e6:	4305      	orrs	r5, r0
1000b4e8:	481f      	ldr	r0, [pc, #124]	; (1000b568 <__aeabi_dmul+0x1e8>)
1000b4ea:	2100      	movs	r1, #0
1000b4ec:	1ac3      	subs	r3, r0, r3
1000b4ee:	e785      	b.n	1000b3fc <__aeabi_dmul+0x7c>
1000b4f0:	2b03      	cmp	r3, #3
1000b4f2:	d100      	bne.n	1000b4f6 <__aeabi_dmul+0x176>
1000b4f4:	e1c2      	b.n	1000b87c <__aeabi_dmul+0x4fc>
1000b4f6:	2b01      	cmp	r3, #1
1000b4f8:	d000      	beq.n	1000b4fc <__aeabi_dmul+0x17c>
1000b4fa:	e16d      	b.n	1000b7d8 <__aeabi_dmul+0x458>
1000b4fc:	4644      	mov	r4, r8
1000b4fe:	9b01      	ldr	r3, [sp, #4]
1000b500:	2500      	movs	r5, #0
1000b502:	401c      	ands	r4, r3
1000b504:	b2e4      	uxtb	r4, r4
1000b506:	2300      	movs	r3, #0
1000b508:	2600      	movs	r6, #0
1000b50a:	e79d      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b50c:	2500      	movs	r5, #0
1000b50e:	2200      	movs	r2, #0
1000b510:	2101      	movs	r1, #1
1000b512:	e773      	b.n	1000b3fc <__aeabi_dmul+0x7c>
1000b514:	2103      	movs	r1, #3
1000b516:	e771      	b.n	1000b3fc <__aeabi_dmul+0x7c>
1000b518:	2304      	movs	r3, #4
1000b51a:	9300      	str	r3, [sp, #0]
1000b51c:	2300      	movs	r3, #0
1000b51e:	469b      	mov	fp, r3
1000b520:	3301      	adds	r3, #1
1000b522:	2600      	movs	r6, #0
1000b524:	4698      	mov	r8, r3
1000b526:	e750      	b.n	1000b3ca <__aeabi_dmul+0x4a>
1000b528:	230c      	movs	r3, #12
1000b52a:	9300      	str	r3, [sp, #0]
1000b52c:	3b09      	subs	r3, #9
1000b52e:	4698      	mov	r8, r3
1000b530:	e74b      	b.n	1000b3ca <__aeabi_dmul+0x4a>
1000b532:	2580      	movs	r5, #128	; 0x80
1000b534:	2400      	movs	r4, #0
1000b536:	032d      	lsls	r5, r5, #12
1000b538:	2600      	movs	r6, #0
1000b53a:	4b07      	ldr	r3, [pc, #28]	; (1000b558 <__aeabi_dmul+0x1d8>)
1000b53c:	e784      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b53e:	464b      	mov	r3, r9
1000b540:	46ab      	mov	fp, r5
1000b542:	1c16      	adds	r6, r2, #0
1000b544:	9301      	str	r3, [sp, #4]
1000b546:	4688      	mov	r8, r1
1000b548:	e775      	b.n	1000b436 <__aeabi_dmul+0xb6>
1000b54a:	9b02      	ldr	r3, [sp, #8]
1000b54c:	46ab      	mov	fp, r5
1000b54e:	1c16      	adds	r6, r2, #0
1000b550:	9301      	str	r3, [sp, #4]
1000b552:	4688      	mov	r8, r1
1000b554:	e76f      	b.n	1000b436 <__aeabi_dmul+0xb6>
1000b556:	46c0      	nop			; (mov r8, r8)
1000b558:	000007ff 	.word	0x000007ff
1000b55c:	fffffc01 	.word	0xfffffc01
1000b560:	1000c630 	.word	0x1000c630
1000b564:	800fffff 	.word	0x800fffff
1000b568:	fffffc0d 	.word	0xfffffc0d
1000b56c:	0c33      	lsrs	r3, r6, #16
1000b56e:	0436      	lsls	r6, r6, #16
1000b570:	0c36      	lsrs	r6, r6, #16
1000b572:	469c      	mov	ip, r3
1000b574:	1c33      	adds	r3, r6, #0
1000b576:	0c14      	lsrs	r4, r2, #16
1000b578:	0412      	lsls	r2, r2, #16
1000b57a:	0c12      	lsrs	r2, r2, #16
1000b57c:	4353      	muls	r3, r2
1000b57e:	4698      	mov	r8, r3
1000b580:	4663      	mov	r3, ip
1000b582:	4353      	muls	r3, r2
1000b584:	4699      	mov	r9, r3
1000b586:	4663      	mov	r3, ip
1000b588:	4363      	muls	r3, r4
1000b58a:	9301      	str	r3, [sp, #4]
1000b58c:	1c33      	adds	r3, r6, #0
1000b58e:	4641      	mov	r1, r8
1000b590:	4363      	muls	r3, r4
1000b592:	0c09      	lsrs	r1, r1, #16
1000b594:	444b      	add	r3, r9
1000b596:	185b      	adds	r3, r3, r1
1000b598:	4599      	cmp	r9, r3
1000b59a:	d905      	bls.n	1000b5a8 <__aeabi_dmul+0x228>
1000b59c:	2080      	movs	r0, #128	; 0x80
1000b59e:	0240      	lsls	r0, r0, #9
1000b5a0:	4681      	mov	r9, r0
1000b5a2:	9901      	ldr	r1, [sp, #4]
1000b5a4:	4449      	add	r1, r9
1000b5a6:	9101      	str	r1, [sp, #4]
1000b5a8:	0c19      	lsrs	r1, r3, #16
1000b5aa:	9103      	str	r1, [sp, #12]
1000b5ac:	4641      	mov	r1, r8
1000b5ae:	0409      	lsls	r1, r1, #16
1000b5b0:	0c09      	lsrs	r1, r1, #16
1000b5b2:	041b      	lsls	r3, r3, #16
1000b5b4:	185b      	adds	r3, r3, r1
1000b5b6:	9304      	str	r3, [sp, #16]
1000b5b8:	0c2b      	lsrs	r3, r5, #16
1000b5ba:	4698      	mov	r8, r3
1000b5bc:	1c33      	adds	r3, r6, #0
1000b5be:	042d      	lsls	r5, r5, #16
1000b5c0:	0c29      	lsrs	r1, r5, #16
1000b5c2:	434b      	muls	r3, r1
1000b5c4:	4660      	mov	r0, ip
1000b5c6:	9300      	str	r3, [sp, #0]
1000b5c8:	4643      	mov	r3, r8
1000b5ca:	4665      	mov	r5, ip
1000b5cc:	4358      	muls	r0, r3
1000b5ce:	435e      	muls	r6, r3
1000b5d0:	9b00      	ldr	r3, [sp, #0]
1000b5d2:	434d      	muls	r5, r1
1000b5d4:	0c1b      	lsrs	r3, r3, #16
1000b5d6:	4699      	mov	r9, r3
1000b5d8:	19ae      	adds	r6, r5, r6
1000b5da:	444e      	add	r6, r9
1000b5dc:	4684      	mov	ip, r0
1000b5de:	42b5      	cmp	r5, r6
1000b5e0:	d903      	bls.n	1000b5ea <__aeabi_dmul+0x26a>
1000b5e2:	2380      	movs	r3, #128	; 0x80
1000b5e4:	025b      	lsls	r3, r3, #9
1000b5e6:	4699      	mov	r9, r3
1000b5e8:	44cc      	add	ip, r9
1000b5ea:	0c35      	lsrs	r5, r6, #16
1000b5ec:	1c2b      	adds	r3, r5, #0
1000b5ee:	9803      	ldr	r0, [sp, #12]
1000b5f0:	4463      	add	r3, ip
1000b5f2:	4684      	mov	ip, r0
1000b5f4:	9305      	str	r3, [sp, #20]
1000b5f6:	9b00      	ldr	r3, [sp, #0]
1000b5f8:	0436      	lsls	r6, r6, #16
1000b5fa:	041b      	lsls	r3, r3, #16
1000b5fc:	0c1b      	lsrs	r3, r3, #16
1000b5fe:	18f3      	adds	r3, r6, r3
1000b600:	449c      	add	ip, r3
1000b602:	4660      	mov	r0, ip
1000b604:	9003      	str	r0, [sp, #12]
1000b606:	4658      	mov	r0, fp
1000b608:	0405      	lsls	r5, r0, #16
1000b60a:	0c06      	lsrs	r6, r0, #16
1000b60c:	0c28      	lsrs	r0, r5, #16
1000b60e:	4684      	mov	ip, r0
1000b610:	4350      	muls	r0, r2
1000b612:	1c35      	adds	r5, r6, #0
1000b614:	4681      	mov	r9, r0
1000b616:	4660      	mov	r0, ip
1000b618:	4365      	muls	r5, r4
1000b61a:	4344      	muls	r4, r0
1000b61c:	4648      	mov	r0, r9
1000b61e:	0c00      	lsrs	r0, r0, #16
1000b620:	4683      	mov	fp, r0
1000b622:	4372      	muls	r2, r6
1000b624:	1914      	adds	r4, r2, r4
1000b626:	445c      	add	r4, fp
1000b628:	42a2      	cmp	r2, r4
1000b62a:	d903      	bls.n	1000b634 <__aeabi_dmul+0x2b4>
1000b62c:	2280      	movs	r2, #128	; 0x80
1000b62e:	0252      	lsls	r2, r2, #9
1000b630:	4693      	mov	fp, r2
1000b632:	445d      	add	r5, fp
1000b634:	0c22      	lsrs	r2, r4, #16
1000b636:	18ad      	adds	r5, r5, r2
1000b638:	464a      	mov	r2, r9
1000b63a:	0412      	lsls	r2, r2, #16
1000b63c:	0c12      	lsrs	r2, r2, #16
1000b63e:	0424      	lsls	r4, r4, #16
1000b640:	4640      	mov	r0, r8
1000b642:	18a4      	adds	r4, r4, r2
1000b644:	4662      	mov	r2, ip
1000b646:	434a      	muls	r2, r1
1000b648:	4371      	muls	r1, r6
1000b64a:	4346      	muls	r6, r0
1000b64c:	4660      	mov	r0, ip
1000b64e:	9600      	str	r6, [sp, #0]
1000b650:	4646      	mov	r6, r8
1000b652:	4370      	muls	r0, r6
1000b654:	4680      	mov	r8, r0
1000b656:	0c10      	lsrs	r0, r2, #16
1000b658:	4684      	mov	ip, r0
1000b65a:	4488      	add	r8, r1
1000b65c:	44e0      	add	r8, ip
1000b65e:	4541      	cmp	r1, r8
1000b660:	d905      	bls.n	1000b66e <__aeabi_dmul+0x2ee>
1000b662:	2180      	movs	r1, #128	; 0x80
1000b664:	0249      	lsls	r1, r1, #9
1000b666:	468c      	mov	ip, r1
1000b668:	9900      	ldr	r1, [sp, #0]
1000b66a:	4461      	add	r1, ip
1000b66c:	9100      	str	r1, [sp, #0]
1000b66e:	9801      	ldr	r0, [sp, #4]
1000b670:	9903      	ldr	r1, [sp, #12]
1000b672:	4684      	mov	ip, r0
1000b674:	4461      	add	r1, ip
1000b676:	4299      	cmp	r1, r3
1000b678:	419b      	sbcs	r3, r3
1000b67a:	425b      	negs	r3, r3
1000b67c:	4699      	mov	r9, r3
1000b67e:	9805      	ldr	r0, [sp, #20]
1000b680:	4643      	mov	r3, r8
1000b682:	4684      	mov	ip, r0
1000b684:	0412      	lsls	r2, r2, #16
1000b686:	0c12      	lsrs	r2, r2, #16
1000b688:	041b      	lsls	r3, r3, #16
1000b68a:	189b      	adds	r3, r3, r2
1000b68c:	4463      	add	r3, ip
1000b68e:	469c      	mov	ip, r3
1000b690:	46ab      	mov	fp, r5
1000b692:	4283      	cmp	r3, r0
1000b694:	419b      	sbcs	r3, r3
1000b696:	4640      	mov	r0, r8
1000b698:	190a      	adds	r2, r1, r4
1000b69a:	44cc      	add	ip, r9
1000b69c:	42a2      	cmp	r2, r4
1000b69e:	4189      	sbcs	r1, r1
1000b6a0:	44e3      	add	fp, ip
1000b6a2:	45cc      	cmp	ip, r9
1000b6a4:	41b6      	sbcs	r6, r6
1000b6a6:	465c      	mov	r4, fp
1000b6a8:	0c00      	lsrs	r0, r0, #16
1000b6aa:	4680      	mov	r8, r0
1000b6ac:	4249      	negs	r1, r1
1000b6ae:	4276      	negs	r6, r6
1000b6b0:	425b      	negs	r3, r3
1000b6b2:	1864      	adds	r4, r4, r1
1000b6b4:	4333      	orrs	r3, r6
1000b6b6:	4498      	add	r8, r3
1000b6b8:	428c      	cmp	r4, r1
1000b6ba:	4189      	sbcs	r1, r1
1000b6bc:	45ab      	cmp	fp, r5
1000b6be:	419b      	sbcs	r3, r3
1000b6c0:	4249      	negs	r1, r1
1000b6c2:	425b      	negs	r3, r3
1000b6c4:	4319      	orrs	r1, r3
1000b6c6:	1c0d      	adds	r5, r1, #0
1000b6c8:	9b00      	ldr	r3, [sp, #0]
1000b6ca:	4445      	add	r5, r8
1000b6cc:	18ee      	adds	r6, r5, r3
1000b6ce:	0276      	lsls	r6, r6, #9
1000b6d0:	0de5      	lsrs	r5, r4, #23
1000b6d2:	432e      	orrs	r6, r5
1000b6d4:	46b3      	mov	fp, r6
1000b6d6:	9b04      	ldr	r3, [sp, #16]
1000b6d8:	0256      	lsls	r6, r2, #9
1000b6da:	431e      	orrs	r6, r3
1000b6dc:	1e73      	subs	r3, r6, #1
1000b6de:	419e      	sbcs	r6, r3
1000b6e0:	465b      	mov	r3, fp
1000b6e2:	0dd2      	lsrs	r2, r2, #23
1000b6e4:	4332      	orrs	r2, r6
1000b6e6:	0266      	lsls	r6, r4, #9
1000b6e8:	4316      	orrs	r6, r2
1000b6ea:	01db      	lsls	r3, r3, #7
1000b6ec:	d50a      	bpl.n	1000b704 <__aeabi_dmul+0x384>
1000b6ee:	2301      	movs	r3, #1
1000b6f0:	4033      	ands	r3, r6
1000b6f2:	0876      	lsrs	r6, r6, #1
1000b6f4:	431e      	orrs	r6, r3
1000b6f6:	465b      	mov	r3, fp
1000b6f8:	07db      	lsls	r3, r3, #31
1000b6fa:	431e      	orrs	r6, r3
1000b6fc:	465b      	mov	r3, fp
1000b6fe:	085b      	lsrs	r3, r3, #1
1000b700:	469b      	mov	fp, r3
1000b702:	4657      	mov	r7, sl
1000b704:	4b63      	ldr	r3, [pc, #396]	; (1000b894 <__aeabi_dmul+0x514>)
1000b706:	18fb      	adds	r3, r7, r3
1000b708:	2b00      	cmp	r3, #0
1000b70a:	dd5a      	ble.n	1000b7c2 <__aeabi_dmul+0x442>
1000b70c:	0772      	lsls	r2, r6, #29
1000b70e:	d009      	beq.n	1000b724 <__aeabi_dmul+0x3a4>
1000b710:	220f      	movs	r2, #15
1000b712:	4032      	ands	r2, r6
1000b714:	2a04      	cmp	r2, #4
1000b716:	d005      	beq.n	1000b724 <__aeabi_dmul+0x3a4>
1000b718:	1d32      	adds	r2, r6, #4
1000b71a:	42b2      	cmp	r2, r6
1000b71c:	41b6      	sbcs	r6, r6
1000b71e:	4276      	negs	r6, r6
1000b720:	44b3      	add	fp, r6
1000b722:	1c16      	adds	r6, r2, #0
1000b724:	465a      	mov	r2, fp
1000b726:	01d2      	lsls	r2, r2, #7
1000b728:	d506      	bpl.n	1000b738 <__aeabi_dmul+0x3b8>
1000b72a:	465a      	mov	r2, fp
1000b72c:	4b5a      	ldr	r3, [pc, #360]	; (1000b898 <__aeabi_dmul+0x518>)
1000b72e:	401a      	ands	r2, r3
1000b730:	2380      	movs	r3, #128	; 0x80
1000b732:	4693      	mov	fp, r2
1000b734:	00db      	lsls	r3, r3, #3
1000b736:	18fb      	adds	r3, r7, r3
1000b738:	4a58      	ldr	r2, [pc, #352]	; (1000b89c <__aeabi_dmul+0x51c>)
1000b73a:	4293      	cmp	r3, r2
1000b73c:	dd34      	ble.n	1000b7a8 <__aeabi_dmul+0x428>
1000b73e:	2401      	movs	r4, #1
1000b740:	9b02      	ldr	r3, [sp, #8]
1000b742:	2500      	movs	r5, #0
1000b744:	401c      	ands	r4, r3
1000b746:	2600      	movs	r6, #0
1000b748:	4b55      	ldr	r3, [pc, #340]	; (1000b8a0 <__aeabi_dmul+0x520>)
1000b74a:	e67d      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b74c:	2080      	movs	r0, #128	; 0x80
1000b74e:	465b      	mov	r3, fp
1000b750:	0300      	lsls	r0, r0, #12
1000b752:	4203      	tst	r3, r0
1000b754:	d008      	beq.n	1000b768 <__aeabi_dmul+0x3e8>
1000b756:	4205      	tst	r5, r0
1000b758:	d106      	bne.n	1000b768 <__aeabi_dmul+0x3e8>
1000b75a:	4305      	orrs	r5, r0
1000b75c:	032d      	lsls	r5, r5, #12
1000b75e:	0b2d      	lsrs	r5, r5, #12
1000b760:	464c      	mov	r4, r9
1000b762:	1c16      	adds	r6, r2, #0
1000b764:	4b4e      	ldr	r3, [pc, #312]	; (1000b8a0 <__aeabi_dmul+0x520>)
1000b766:	e66f      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b768:	465d      	mov	r5, fp
1000b76a:	4305      	orrs	r5, r0
1000b76c:	032d      	lsls	r5, r5, #12
1000b76e:	0b2d      	lsrs	r5, r5, #12
1000b770:	4b4b      	ldr	r3, [pc, #300]	; (1000b8a0 <__aeabi_dmul+0x520>)
1000b772:	e669      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b774:	4650      	mov	r0, sl
1000b776:	f000 fcfb 	bl	1000c170 <__clzsi2>
1000b77a:	1c03      	adds	r3, r0, #0
1000b77c:	3320      	adds	r3, #32
1000b77e:	2b27      	cmp	r3, #39	; 0x27
1000b780:	dc00      	bgt.n	1000b784 <__aeabi_dmul+0x404>
1000b782:	e6a6      	b.n	1000b4d2 <__aeabi_dmul+0x152>
1000b784:	4655      	mov	r5, sl
1000b786:	3808      	subs	r0, #8
1000b788:	4085      	lsls	r5, r0
1000b78a:	2200      	movs	r2, #0
1000b78c:	e6ac      	b.n	1000b4e8 <__aeabi_dmul+0x168>
1000b78e:	1c28      	adds	r0, r5, #0
1000b790:	f000 fcee 	bl	1000c170 <__clzsi2>
1000b794:	1c02      	adds	r2, r0, #0
1000b796:	3220      	adds	r2, #32
1000b798:	2a27      	cmp	r2, #39	; 0x27
1000b79a:	dc00      	bgt.n	1000b79e <__aeabi_dmul+0x41e>
1000b79c:	e675      	b.n	1000b48a <__aeabi_dmul+0x10a>
1000b79e:	3808      	subs	r0, #8
1000b7a0:	4085      	lsls	r5, r0
1000b7a2:	2600      	movs	r6, #0
1000b7a4:	46ab      	mov	fp, r5
1000b7a6:	e67d      	b.n	1000b4a4 <__aeabi_dmul+0x124>
1000b7a8:	465a      	mov	r2, fp
1000b7aa:	08f6      	lsrs	r6, r6, #3
1000b7ac:	0752      	lsls	r2, r2, #29
1000b7ae:	4316      	orrs	r6, r2
1000b7b0:	465a      	mov	r2, fp
1000b7b2:	2401      	movs	r4, #1
1000b7b4:	0255      	lsls	r5, r2, #9
1000b7b6:	9a02      	ldr	r2, [sp, #8]
1000b7b8:	055b      	lsls	r3, r3, #21
1000b7ba:	0b2d      	lsrs	r5, r5, #12
1000b7bc:	0d5b      	lsrs	r3, r3, #21
1000b7be:	4014      	ands	r4, r2
1000b7c0:	e642      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b7c2:	4d38      	ldr	r5, [pc, #224]	; (1000b8a4 <__aeabi_dmul+0x524>)
1000b7c4:	1bed      	subs	r5, r5, r7
1000b7c6:	2d38      	cmp	r5, #56	; 0x38
1000b7c8:	dd0a      	ble.n	1000b7e0 <__aeabi_dmul+0x460>
1000b7ca:	2401      	movs	r4, #1
1000b7cc:	9b02      	ldr	r3, [sp, #8]
1000b7ce:	2500      	movs	r5, #0
1000b7d0:	401c      	ands	r4, r3
1000b7d2:	2600      	movs	r6, #0
1000b7d4:	2300      	movs	r3, #0
1000b7d6:	e637      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b7d8:	9b01      	ldr	r3, [sp, #4]
1000b7da:	4657      	mov	r7, sl
1000b7dc:	9302      	str	r3, [sp, #8]
1000b7de:	e791      	b.n	1000b704 <__aeabi_dmul+0x384>
1000b7e0:	2d1f      	cmp	r5, #31
1000b7e2:	dc25      	bgt.n	1000b830 <__aeabi_dmul+0x4b0>
1000b7e4:	4b30      	ldr	r3, [pc, #192]	; (1000b8a8 <__aeabi_dmul+0x528>)
1000b7e6:	1c32      	adds	r2, r6, #0
1000b7e8:	469c      	mov	ip, r3
1000b7ea:	4467      	add	r7, ip
1000b7ec:	40be      	lsls	r6, r7
1000b7ee:	465b      	mov	r3, fp
1000b7f0:	40bb      	lsls	r3, r7
1000b7f2:	1c37      	adds	r7, r6, #0
1000b7f4:	40ea      	lsrs	r2, r5
1000b7f6:	1e7e      	subs	r6, r7, #1
1000b7f8:	41b7      	sbcs	r7, r6
1000b7fa:	4313      	orrs	r3, r2
1000b7fc:	433b      	orrs	r3, r7
1000b7fe:	1c1e      	adds	r6, r3, #0
1000b800:	465b      	mov	r3, fp
1000b802:	40eb      	lsrs	r3, r5
1000b804:	1c1d      	adds	r5, r3, #0
1000b806:	0773      	lsls	r3, r6, #29
1000b808:	d009      	beq.n	1000b81e <__aeabi_dmul+0x49e>
1000b80a:	230f      	movs	r3, #15
1000b80c:	4033      	ands	r3, r6
1000b80e:	2b04      	cmp	r3, #4
1000b810:	d005      	beq.n	1000b81e <__aeabi_dmul+0x49e>
1000b812:	1d33      	adds	r3, r6, #4
1000b814:	42b3      	cmp	r3, r6
1000b816:	41b6      	sbcs	r6, r6
1000b818:	4276      	negs	r6, r6
1000b81a:	19ad      	adds	r5, r5, r6
1000b81c:	1c1e      	adds	r6, r3, #0
1000b81e:	022b      	lsls	r3, r5, #8
1000b820:	d520      	bpl.n	1000b864 <__aeabi_dmul+0x4e4>
1000b822:	2401      	movs	r4, #1
1000b824:	9b02      	ldr	r3, [sp, #8]
1000b826:	2500      	movs	r5, #0
1000b828:	401c      	ands	r4, r3
1000b82a:	2600      	movs	r6, #0
1000b82c:	2301      	movs	r3, #1
1000b82e:	e60b      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b830:	465a      	mov	r2, fp
1000b832:	4b1e      	ldr	r3, [pc, #120]	; (1000b8ac <__aeabi_dmul+0x52c>)
1000b834:	1bdb      	subs	r3, r3, r7
1000b836:	40da      	lsrs	r2, r3
1000b838:	1c13      	adds	r3, r2, #0
1000b83a:	2d20      	cmp	r5, #32
1000b83c:	d01c      	beq.n	1000b878 <__aeabi_dmul+0x4f8>
1000b83e:	4a1c      	ldr	r2, [pc, #112]	; (1000b8b0 <__aeabi_dmul+0x530>)
1000b840:	4694      	mov	ip, r2
1000b842:	465a      	mov	r2, fp
1000b844:	4467      	add	r7, ip
1000b846:	40ba      	lsls	r2, r7
1000b848:	1c17      	adds	r7, r2, #0
1000b84a:	433e      	orrs	r6, r7
1000b84c:	1e72      	subs	r2, r6, #1
1000b84e:	4196      	sbcs	r6, r2
1000b850:	431e      	orrs	r6, r3
1000b852:	2307      	movs	r3, #7
1000b854:	2500      	movs	r5, #0
1000b856:	4033      	ands	r3, r6
1000b858:	d007      	beq.n	1000b86a <__aeabi_dmul+0x4ea>
1000b85a:	230f      	movs	r3, #15
1000b85c:	2500      	movs	r5, #0
1000b85e:	4033      	ands	r3, r6
1000b860:	2b04      	cmp	r3, #4
1000b862:	d1d6      	bne.n	1000b812 <__aeabi_dmul+0x492>
1000b864:	076b      	lsls	r3, r5, #29
1000b866:	026d      	lsls	r5, r5, #9
1000b868:	0b2d      	lsrs	r5, r5, #12
1000b86a:	2401      	movs	r4, #1
1000b86c:	08f6      	lsrs	r6, r6, #3
1000b86e:	431e      	orrs	r6, r3
1000b870:	9b02      	ldr	r3, [sp, #8]
1000b872:	401c      	ands	r4, r3
1000b874:	2300      	movs	r3, #0
1000b876:	e5e7      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b878:	2700      	movs	r7, #0
1000b87a:	e7e6      	b.n	1000b84a <__aeabi_dmul+0x4ca>
1000b87c:	2580      	movs	r5, #128	; 0x80
1000b87e:	465b      	mov	r3, fp
1000b880:	2401      	movs	r4, #1
1000b882:	032d      	lsls	r5, r5, #12
1000b884:	431d      	orrs	r5, r3
1000b886:	9b01      	ldr	r3, [sp, #4]
1000b888:	032d      	lsls	r5, r5, #12
1000b88a:	4023      	ands	r3, r4
1000b88c:	1c1c      	adds	r4, r3, #0
1000b88e:	0b2d      	lsrs	r5, r5, #12
1000b890:	4b03      	ldr	r3, [pc, #12]	; (1000b8a0 <__aeabi_dmul+0x520>)
1000b892:	e5d9      	b.n	1000b448 <__aeabi_dmul+0xc8>
1000b894:	000003ff 	.word	0x000003ff
1000b898:	feffffff 	.word	0xfeffffff
1000b89c:	000007fe 	.word	0x000007fe
1000b8a0:	000007ff 	.word	0x000007ff
1000b8a4:	fffffc02 	.word	0xfffffc02
1000b8a8:	0000041e 	.word	0x0000041e
1000b8ac:	fffffbe2 	.word	0xfffffbe2
1000b8b0:	0000043e 	.word	0x0000043e

1000b8b4 <__aeabi_dsub>:
1000b8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b8b6:	464d      	mov	r5, r9
1000b8b8:	4644      	mov	r4, r8
1000b8ba:	465f      	mov	r7, fp
1000b8bc:	4656      	mov	r6, sl
1000b8be:	b4f0      	push	{r4, r5, r6, r7}
1000b8c0:	1c0e      	adds	r6, r1, #0
1000b8c2:	1c11      	adds	r1, r2, #0
1000b8c4:	0332      	lsls	r2, r6, #12
1000b8c6:	0a52      	lsrs	r2, r2, #9
1000b8c8:	0f47      	lsrs	r7, r0, #29
1000b8ca:	4317      	orrs	r7, r2
1000b8cc:	00c5      	lsls	r5, r0, #3
1000b8ce:	031a      	lsls	r2, r3, #12
1000b8d0:	0058      	lsls	r0, r3, #1
1000b8d2:	0fdb      	lsrs	r3, r3, #31
1000b8d4:	4699      	mov	r9, r3
1000b8d6:	0a52      	lsrs	r2, r2, #9
1000b8d8:	0f4b      	lsrs	r3, r1, #29
1000b8da:	b083      	sub	sp, #12
1000b8dc:	431a      	orrs	r2, r3
1000b8de:	00cb      	lsls	r3, r1, #3
1000b8e0:	9301      	str	r3, [sp, #4]
1000b8e2:	4bcf      	ldr	r3, [pc, #828]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000b8e4:	0074      	lsls	r4, r6, #1
1000b8e6:	0ff6      	lsrs	r6, r6, #31
1000b8e8:	0d64      	lsrs	r4, r4, #21
1000b8ea:	46b0      	mov	r8, r6
1000b8ec:	0d40      	lsrs	r0, r0, #21
1000b8ee:	4298      	cmp	r0, r3
1000b8f0:	d100      	bne.n	1000b8f4 <__aeabi_dsub+0x40>
1000b8f2:	e0e8      	b.n	1000bac6 <__aeabi_dsub+0x212>
1000b8f4:	2301      	movs	r3, #1
1000b8f6:	4649      	mov	r1, r9
1000b8f8:	4059      	eors	r1, r3
1000b8fa:	1c0b      	adds	r3, r1, #0
1000b8fc:	429e      	cmp	r6, r3
1000b8fe:	d100      	bne.n	1000b902 <__aeabi_dsub+0x4e>
1000b900:	e0b1      	b.n	1000ba66 <__aeabi_dsub+0x1b2>
1000b902:	1a26      	subs	r6, r4, r0
1000b904:	2e00      	cmp	r6, #0
1000b906:	dc00      	bgt.n	1000b90a <__aeabi_dsub+0x56>
1000b908:	e11c      	b.n	1000bb44 <__aeabi_dsub+0x290>
1000b90a:	2800      	cmp	r0, #0
1000b90c:	d142      	bne.n	1000b994 <__aeabi_dsub+0xe0>
1000b90e:	1c13      	adds	r3, r2, #0
1000b910:	9901      	ldr	r1, [sp, #4]
1000b912:	430b      	orrs	r3, r1
1000b914:	d000      	beq.n	1000b918 <__aeabi_dsub+0x64>
1000b916:	e0e6      	b.n	1000bae6 <__aeabi_dsub+0x232>
1000b918:	076b      	lsls	r3, r5, #29
1000b91a:	d100      	bne.n	1000b91e <__aeabi_dsub+0x6a>
1000b91c:	e08e      	b.n	1000ba3c <__aeabi_dsub+0x188>
1000b91e:	230f      	movs	r3, #15
1000b920:	402b      	ands	r3, r5
1000b922:	2b04      	cmp	r3, #4
1000b924:	d100      	bne.n	1000b928 <__aeabi_dsub+0x74>
1000b926:	e089      	b.n	1000ba3c <__aeabi_dsub+0x188>
1000b928:	1d2a      	adds	r2, r5, #4
1000b92a:	42aa      	cmp	r2, r5
1000b92c:	41ad      	sbcs	r5, r5
1000b92e:	2380      	movs	r3, #128	; 0x80
1000b930:	2601      	movs	r6, #1
1000b932:	4641      	mov	r1, r8
1000b934:	426d      	negs	r5, r5
1000b936:	197f      	adds	r7, r7, r5
1000b938:	041b      	lsls	r3, r3, #16
1000b93a:	403b      	ands	r3, r7
1000b93c:	400e      	ands	r6, r1
1000b93e:	1c15      	adds	r5, r2, #0
1000b940:	2b00      	cmp	r3, #0
1000b942:	d100      	bne.n	1000b946 <__aeabi_dsub+0x92>
1000b944:	e083      	b.n	1000ba4e <__aeabi_dsub+0x19a>
1000b946:	4bb6      	ldr	r3, [pc, #728]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000b948:	3401      	adds	r4, #1
1000b94a:	429c      	cmp	r4, r3
1000b94c:	d100      	bne.n	1000b950 <__aeabi_dsub+0x9c>
1000b94e:	e116      	b.n	1000bb7e <__aeabi_dsub+0x2ca>
1000b950:	1c3a      	adds	r2, r7, #0
1000b952:	4bb4      	ldr	r3, [pc, #720]	; (1000bc24 <__aeabi_dsub+0x370>)
1000b954:	08ed      	lsrs	r5, r5, #3
1000b956:	401a      	ands	r2, r3
1000b958:	0750      	lsls	r0, r2, #29
1000b95a:	0564      	lsls	r4, r4, #21
1000b95c:	0252      	lsls	r2, r2, #9
1000b95e:	4305      	orrs	r5, r0
1000b960:	0b12      	lsrs	r2, r2, #12
1000b962:	0d64      	lsrs	r4, r4, #21
1000b964:	2100      	movs	r1, #0
1000b966:	0312      	lsls	r2, r2, #12
1000b968:	0d0b      	lsrs	r3, r1, #20
1000b96a:	051b      	lsls	r3, r3, #20
1000b96c:	0564      	lsls	r4, r4, #21
1000b96e:	0b12      	lsrs	r2, r2, #12
1000b970:	431a      	orrs	r2, r3
1000b972:	0863      	lsrs	r3, r4, #1
1000b974:	4cac      	ldr	r4, [pc, #688]	; (1000bc28 <__aeabi_dsub+0x374>)
1000b976:	07f6      	lsls	r6, r6, #31
1000b978:	4014      	ands	r4, r2
1000b97a:	431c      	orrs	r4, r3
1000b97c:	0064      	lsls	r4, r4, #1
1000b97e:	0864      	lsrs	r4, r4, #1
1000b980:	4334      	orrs	r4, r6
1000b982:	1c28      	adds	r0, r5, #0
1000b984:	1c21      	adds	r1, r4, #0
1000b986:	b003      	add	sp, #12
1000b988:	bc3c      	pop	{r2, r3, r4, r5}
1000b98a:	4690      	mov	r8, r2
1000b98c:	4699      	mov	r9, r3
1000b98e:	46a2      	mov	sl, r4
1000b990:	46ab      	mov	fp, r5
1000b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b994:	4ba2      	ldr	r3, [pc, #648]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000b996:	429c      	cmp	r4, r3
1000b998:	d0be      	beq.n	1000b918 <__aeabi_dsub+0x64>
1000b99a:	2380      	movs	r3, #128	; 0x80
1000b99c:	041b      	lsls	r3, r3, #16
1000b99e:	431a      	orrs	r2, r3
1000b9a0:	2e38      	cmp	r6, #56	; 0x38
1000b9a2:	dd00      	ble.n	1000b9a6 <__aeabi_dsub+0xf2>
1000b9a4:	e103      	b.n	1000bbae <__aeabi_dsub+0x2fa>
1000b9a6:	2e1f      	cmp	r6, #31
1000b9a8:	dd00      	ble.n	1000b9ac <__aeabi_dsub+0xf8>
1000b9aa:	e13f      	b.n	1000bc2c <__aeabi_dsub+0x378>
1000b9ac:	2020      	movs	r0, #32
1000b9ae:	1b83      	subs	r3, r0, r6
1000b9b0:	4699      	mov	r9, r3
1000b9b2:	1c13      	adds	r3, r2, #0
1000b9b4:	4649      	mov	r1, r9
1000b9b6:	408b      	lsls	r3, r1
1000b9b8:	469c      	mov	ip, r3
1000b9ba:	9b01      	ldr	r3, [sp, #4]
1000b9bc:	4660      	mov	r0, ip
1000b9be:	40f3      	lsrs	r3, r6
1000b9c0:	4303      	orrs	r3, r0
1000b9c2:	9801      	ldr	r0, [sp, #4]
1000b9c4:	40f2      	lsrs	r2, r6
1000b9c6:	4088      	lsls	r0, r1
1000b9c8:	1c01      	adds	r1, r0, #0
1000b9ca:	1e48      	subs	r0, r1, #1
1000b9cc:	4181      	sbcs	r1, r0
1000b9ce:	430b      	orrs	r3, r1
1000b9d0:	1aeb      	subs	r3, r5, r3
1000b9d2:	429d      	cmp	r5, r3
1000b9d4:	4180      	sbcs	r0, r0
1000b9d6:	1c1d      	adds	r5, r3, #0
1000b9d8:	1aba      	subs	r2, r7, r2
1000b9da:	4240      	negs	r0, r0
1000b9dc:	1a17      	subs	r7, r2, r0
1000b9de:	023b      	lsls	r3, r7, #8
1000b9e0:	d400      	bmi.n	1000b9e4 <__aeabi_dsub+0x130>
1000b9e2:	e0a8      	b.n	1000bb36 <__aeabi_dsub+0x282>
1000b9e4:	027a      	lsls	r2, r7, #9
1000b9e6:	0a56      	lsrs	r6, r2, #9
1000b9e8:	2e00      	cmp	r6, #0
1000b9ea:	d100      	bne.n	1000b9ee <__aeabi_dsub+0x13a>
1000b9ec:	e0ca      	b.n	1000bb84 <__aeabi_dsub+0x2d0>
1000b9ee:	1c30      	adds	r0, r6, #0
1000b9f0:	f000 fbbe 	bl	1000c170 <__clzsi2>
1000b9f4:	1c03      	adds	r3, r0, #0
1000b9f6:	3b08      	subs	r3, #8
1000b9f8:	2b1f      	cmp	r3, #31
1000b9fa:	dd00      	ble.n	1000b9fe <__aeabi_dsub+0x14a>
1000b9fc:	e0cb      	b.n	1000bb96 <__aeabi_dsub+0x2e2>
1000b9fe:	2228      	movs	r2, #40	; 0x28
1000ba00:	1c29      	adds	r1, r5, #0
1000ba02:	1a12      	subs	r2, r2, r0
1000ba04:	40d1      	lsrs	r1, r2
1000ba06:	409e      	lsls	r6, r3
1000ba08:	1c0a      	adds	r2, r1, #0
1000ba0a:	409d      	lsls	r5, r3
1000ba0c:	4332      	orrs	r2, r6
1000ba0e:	429c      	cmp	r4, r3
1000ba10:	dd00      	ble.n	1000ba14 <__aeabi_dsub+0x160>
1000ba12:	e0c8      	b.n	1000bba6 <__aeabi_dsub+0x2f2>
1000ba14:	1b1c      	subs	r4, r3, r4
1000ba16:	1c67      	adds	r7, r4, #1
1000ba18:	2f1f      	cmp	r7, #31
1000ba1a:	dd00      	ble.n	1000ba1e <__aeabi_dsub+0x16a>
1000ba1c:	e0ed      	b.n	1000bbfa <__aeabi_dsub+0x346>
1000ba1e:	231f      	movs	r3, #31
1000ba20:	1c29      	adds	r1, r5, #0
1000ba22:	1b1c      	subs	r4, r3, r4
1000ba24:	1c13      	adds	r3, r2, #0
1000ba26:	40a5      	lsls	r5, r4
1000ba28:	40a3      	lsls	r3, r4
1000ba2a:	40f9      	lsrs	r1, r7
1000ba2c:	1e6c      	subs	r4, r5, #1
1000ba2e:	41a5      	sbcs	r5, r4
1000ba30:	40fa      	lsrs	r2, r7
1000ba32:	4319      	orrs	r1, r3
1000ba34:	430d      	orrs	r5, r1
1000ba36:	1c17      	adds	r7, r2, #0
1000ba38:	2400      	movs	r4, #0
1000ba3a:	e76d      	b.n	1000b918 <__aeabi_dsub+0x64>
1000ba3c:	2380      	movs	r3, #128	; 0x80
1000ba3e:	2601      	movs	r6, #1
1000ba40:	4642      	mov	r2, r8
1000ba42:	041b      	lsls	r3, r3, #16
1000ba44:	403b      	ands	r3, r7
1000ba46:	4016      	ands	r6, r2
1000ba48:	2b00      	cmp	r3, #0
1000ba4a:	d000      	beq.n	1000ba4e <__aeabi_dsub+0x19a>
1000ba4c:	e77b      	b.n	1000b946 <__aeabi_dsub+0x92>
1000ba4e:	4b74      	ldr	r3, [pc, #464]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000ba50:	08ed      	lsrs	r5, r5, #3
1000ba52:	0778      	lsls	r0, r7, #29
1000ba54:	4305      	orrs	r5, r0
1000ba56:	08fa      	lsrs	r2, r7, #3
1000ba58:	429c      	cmp	r4, r3
1000ba5a:	d03b      	beq.n	1000bad4 <__aeabi_dsub+0x220>
1000ba5c:	0312      	lsls	r2, r2, #12
1000ba5e:	0564      	lsls	r4, r4, #21
1000ba60:	0b12      	lsrs	r2, r2, #12
1000ba62:	0d64      	lsrs	r4, r4, #21
1000ba64:	e77e      	b.n	1000b964 <__aeabi_dsub+0xb0>
1000ba66:	1a23      	subs	r3, r4, r0
1000ba68:	469a      	mov	sl, r3
1000ba6a:	2b00      	cmp	r3, #0
1000ba6c:	dc00      	bgt.n	1000ba70 <__aeabi_dsub+0x1bc>
1000ba6e:	e0a5      	b.n	1000bbbc <__aeabi_dsub+0x308>
1000ba70:	2800      	cmp	r0, #0
1000ba72:	d044      	beq.n	1000bafe <__aeabi_dsub+0x24a>
1000ba74:	486a      	ldr	r0, [pc, #424]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000ba76:	4284      	cmp	r4, r0
1000ba78:	d100      	bne.n	1000ba7c <__aeabi_dsub+0x1c8>
1000ba7a:	e74d      	b.n	1000b918 <__aeabi_dsub+0x64>
1000ba7c:	2080      	movs	r0, #128	; 0x80
1000ba7e:	0400      	lsls	r0, r0, #16
1000ba80:	4302      	orrs	r2, r0
1000ba82:	4653      	mov	r3, sl
1000ba84:	2b38      	cmp	r3, #56	; 0x38
1000ba86:	dc00      	bgt.n	1000ba8a <__aeabi_dsub+0x1d6>
1000ba88:	e11c      	b.n	1000bcc4 <__aeabi_dsub+0x410>
1000ba8a:	9b01      	ldr	r3, [sp, #4]
1000ba8c:	431a      	orrs	r2, r3
1000ba8e:	1e51      	subs	r1, r2, #1
1000ba90:	418a      	sbcs	r2, r1
1000ba92:	b2d1      	uxtb	r1, r2
1000ba94:	2200      	movs	r2, #0
1000ba96:	1949      	adds	r1, r1, r5
1000ba98:	42a9      	cmp	r1, r5
1000ba9a:	4180      	sbcs	r0, r0
1000ba9c:	1c0d      	adds	r5, r1, #0
1000ba9e:	19d2      	adds	r2, r2, r7
1000baa0:	4240      	negs	r0, r0
1000baa2:	1817      	adds	r7, r2, r0
1000baa4:	023b      	lsls	r3, r7, #8
1000baa6:	d546      	bpl.n	1000bb36 <__aeabi_dsub+0x282>
1000baa8:	4b5d      	ldr	r3, [pc, #372]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000baaa:	3401      	adds	r4, #1
1000baac:	429c      	cmp	r4, r3
1000baae:	d100      	bne.n	1000bab2 <__aeabi_dsub+0x1fe>
1000bab0:	e169      	b.n	1000bd86 <__aeabi_dsub+0x4d2>
1000bab2:	2001      	movs	r0, #1
1000bab4:	4a5b      	ldr	r2, [pc, #364]	; (1000bc24 <__aeabi_dsub+0x370>)
1000bab6:	086b      	lsrs	r3, r5, #1
1000bab8:	403a      	ands	r2, r7
1000baba:	4028      	ands	r0, r5
1000babc:	4318      	orrs	r0, r3
1000babe:	07d5      	lsls	r5, r2, #31
1000bac0:	4305      	orrs	r5, r0
1000bac2:	0857      	lsrs	r7, r2, #1
1000bac4:	e728      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bac6:	1c13      	adds	r3, r2, #0
1000bac8:	9901      	ldr	r1, [sp, #4]
1000baca:	430b      	orrs	r3, r1
1000bacc:	d100      	bne.n	1000bad0 <__aeabi_dsub+0x21c>
1000bace:	e711      	b.n	1000b8f4 <__aeabi_dsub+0x40>
1000bad0:	464b      	mov	r3, r9
1000bad2:	e713      	b.n	1000b8fc <__aeabi_dsub+0x48>
1000bad4:	1c2b      	adds	r3, r5, #0
1000bad6:	4313      	orrs	r3, r2
1000bad8:	d051      	beq.n	1000bb7e <__aeabi_dsub+0x2ca>
1000bada:	2380      	movs	r3, #128	; 0x80
1000badc:	031b      	lsls	r3, r3, #12
1000bade:	431a      	orrs	r2, r3
1000bae0:	0312      	lsls	r2, r2, #12
1000bae2:	0b12      	lsrs	r2, r2, #12
1000bae4:	e73e      	b.n	1000b964 <__aeabi_dsub+0xb0>
1000bae6:	3e01      	subs	r6, #1
1000bae8:	2e00      	cmp	r6, #0
1000baea:	d000      	beq.n	1000baee <__aeabi_dsub+0x23a>
1000baec:	e080      	b.n	1000bbf0 <__aeabi_dsub+0x33c>
1000baee:	1a69      	subs	r1, r5, r1
1000baf0:	428d      	cmp	r5, r1
1000baf2:	419b      	sbcs	r3, r3
1000baf4:	1aba      	subs	r2, r7, r2
1000baf6:	425b      	negs	r3, r3
1000baf8:	1ad7      	subs	r7, r2, r3
1000bafa:	1c0d      	adds	r5, r1, #0
1000bafc:	e76f      	b.n	1000b9de <__aeabi_dsub+0x12a>
1000bafe:	1c10      	adds	r0, r2, #0
1000bb00:	9b01      	ldr	r3, [sp, #4]
1000bb02:	4318      	orrs	r0, r3
1000bb04:	d100      	bne.n	1000bb08 <__aeabi_dsub+0x254>
1000bb06:	e707      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bb08:	2301      	movs	r3, #1
1000bb0a:	425b      	negs	r3, r3
1000bb0c:	469c      	mov	ip, r3
1000bb0e:	44e2      	add	sl, ip
1000bb10:	4653      	mov	r3, sl
1000bb12:	2b00      	cmp	r3, #0
1000bb14:	d000      	beq.n	1000bb18 <__aeabi_dsub+0x264>
1000bb16:	e102      	b.n	1000bd1e <__aeabi_dsub+0x46a>
1000bb18:	9b01      	ldr	r3, [sp, #4]
1000bb1a:	19d2      	adds	r2, r2, r7
1000bb1c:	1959      	adds	r1, r3, r5
1000bb1e:	42a9      	cmp	r1, r5
1000bb20:	419b      	sbcs	r3, r3
1000bb22:	425b      	negs	r3, r3
1000bb24:	18d7      	adds	r7, r2, r3
1000bb26:	1c0d      	adds	r5, r1, #0
1000bb28:	e7bc      	b.n	1000baa4 <__aeabi_dsub+0x1f0>
1000bb2a:	4663      	mov	r3, ip
1000bb2c:	4303      	orrs	r3, r0
1000bb2e:	d100      	bne.n	1000bb32 <__aeabi_dsub+0x27e>
1000bb30:	e128      	b.n	1000bd84 <__aeabi_dsub+0x4d0>
1000bb32:	1c07      	adds	r7, r0, #0
1000bb34:	4665      	mov	r5, ip
1000bb36:	076b      	lsls	r3, r5, #29
1000bb38:	d000      	beq.n	1000bb3c <__aeabi_dsub+0x288>
1000bb3a:	e6f0      	b.n	1000b91e <__aeabi_dsub+0x6a>
1000bb3c:	2601      	movs	r6, #1
1000bb3e:	4643      	mov	r3, r8
1000bb40:	401e      	ands	r6, r3
1000bb42:	e784      	b.n	1000ba4e <__aeabi_dsub+0x19a>
1000bb44:	2e00      	cmp	r6, #0
1000bb46:	d000      	beq.n	1000bb4a <__aeabi_dsub+0x296>
1000bb48:	e081      	b.n	1000bc4e <__aeabi_dsub+0x39a>
1000bb4a:	1c60      	adds	r0, r4, #1
1000bb4c:	0540      	lsls	r0, r0, #21
1000bb4e:	0d40      	lsrs	r0, r0, #21
1000bb50:	2801      	cmp	r0, #1
1000bb52:	dc00      	bgt.n	1000bb56 <__aeabi_dsub+0x2a2>
1000bb54:	e107      	b.n	1000bd66 <__aeabi_dsub+0x4b2>
1000bb56:	9901      	ldr	r1, [sp, #4]
1000bb58:	1a68      	subs	r0, r5, r1
1000bb5a:	4684      	mov	ip, r0
1000bb5c:	4565      	cmp	r5, ip
1000bb5e:	41b6      	sbcs	r6, r6
1000bb60:	1ab8      	subs	r0, r7, r2
1000bb62:	4276      	negs	r6, r6
1000bb64:	1b86      	subs	r6, r0, r6
1000bb66:	0230      	lsls	r0, r6, #8
1000bb68:	d400      	bmi.n	1000bb6c <__aeabi_dsub+0x2b8>
1000bb6a:	e0a1      	b.n	1000bcb0 <__aeabi_dsub+0x3fc>
1000bb6c:	468c      	mov	ip, r1
1000bb6e:	1b4d      	subs	r5, r1, r5
1000bb70:	45ac      	cmp	ip, r5
1000bb72:	4189      	sbcs	r1, r1
1000bb74:	1bd2      	subs	r2, r2, r7
1000bb76:	4249      	negs	r1, r1
1000bb78:	1a56      	subs	r6, r2, r1
1000bb7a:	4698      	mov	r8, r3
1000bb7c:	e734      	b.n	1000b9e8 <__aeabi_dsub+0x134>
1000bb7e:	2200      	movs	r2, #0
1000bb80:	2500      	movs	r5, #0
1000bb82:	e6ef      	b.n	1000b964 <__aeabi_dsub+0xb0>
1000bb84:	1c28      	adds	r0, r5, #0
1000bb86:	f000 faf3 	bl	1000c170 <__clzsi2>
1000bb8a:	3020      	adds	r0, #32
1000bb8c:	1c03      	adds	r3, r0, #0
1000bb8e:	3b08      	subs	r3, #8
1000bb90:	2b1f      	cmp	r3, #31
1000bb92:	dc00      	bgt.n	1000bb96 <__aeabi_dsub+0x2e2>
1000bb94:	e733      	b.n	1000b9fe <__aeabi_dsub+0x14a>
1000bb96:	1c02      	adds	r2, r0, #0
1000bb98:	3a28      	subs	r2, #40	; 0x28
1000bb9a:	4095      	lsls	r5, r2
1000bb9c:	1c2a      	adds	r2, r5, #0
1000bb9e:	2500      	movs	r5, #0
1000bba0:	429c      	cmp	r4, r3
1000bba2:	dc00      	bgt.n	1000bba6 <__aeabi_dsub+0x2f2>
1000bba4:	e736      	b.n	1000ba14 <__aeabi_dsub+0x160>
1000bba6:	4f1f      	ldr	r7, [pc, #124]	; (1000bc24 <__aeabi_dsub+0x370>)
1000bba8:	1ae4      	subs	r4, r4, r3
1000bbaa:	4017      	ands	r7, r2
1000bbac:	e6b4      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bbae:	9b01      	ldr	r3, [sp, #4]
1000bbb0:	431a      	orrs	r2, r3
1000bbb2:	1e51      	subs	r1, r2, #1
1000bbb4:	418a      	sbcs	r2, r1
1000bbb6:	b2d3      	uxtb	r3, r2
1000bbb8:	2200      	movs	r2, #0
1000bbba:	e709      	b.n	1000b9d0 <__aeabi_dsub+0x11c>
1000bbbc:	2b00      	cmp	r3, #0
1000bbbe:	d000      	beq.n	1000bbc2 <__aeabi_dsub+0x30e>
1000bbc0:	e101      	b.n	1000bdc6 <__aeabi_dsub+0x512>
1000bbc2:	1c60      	adds	r0, r4, #1
1000bbc4:	0543      	lsls	r3, r0, #21
1000bbc6:	0d5b      	lsrs	r3, r3, #21
1000bbc8:	2b01      	cmp	r3, #1
1000bbca:	dc00      	bgt.n	1000bbce <__aeabi_dsub+0x31a>
1000bbcc:	e0b0      	b.n	1000bd30 <__aeabi_dsub+0x47c>
1000bbce:	4b14      	ldr	r3, [pc, #80]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000bbd0:	4298      	cmp	r0, r3
1000bbd2:	d100      	bne.n	1000bbd6 <__aeabi_dsub+0x322>
1000bbd4:	e11e      	b.n	1000be14 <__aeabi_dsub+0x560>
1000bbd6:	9b01      	ldr	r3, [sp, #4]
1000bbd8:	19d2      	adds	r2, r2, r7
1000bbda:	1959      	adds	r1, r3, r5
1000bbdc:	42a9      	cmp	r1, r5
1000bbde:	419b      	sbcs	r3, r3
1000bbe0:	425b      	negs	r3, r3
1000bbe2:	18d2      	adds	r2, r2, r3
1000bbe4:	0849      	lsrs	r1, r1, #1
1000bbe6:	07d5      	lsls	r5, r2, #31
1000bbe8:	430d      	orrs	r5, r1
1000bbea:	0857      	lsrs	r7, r2, #1
1000bbec:	1c04      	adds	r4, r0, #0
1000bbee:	e693      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bbf0:	4b0b      	ldr	r3, [pc, #44]	; (1000bc20 <__aeabi_dsub+0x36c>)
1000bbf2:	429c      	cmp	r4, r3
1000bbf4:	d000      	beq.n	1000bbf8 <__aeabi_dsub+0x344>
1000bbf6:	e6d3      	b.n	1000b9a0 <__aeabi_dsub+0xec>
1000bbf8:	e68e      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bbfa:	1c21      	adds	r1, r4, #0
1000bbfc:	1c13      	adds	r3, r2, #0
1000bbfe:	391f      	subs	r1, #31
1000bc00:	40cb      	lsrs	r3, r1
1000bc02:	1c19      	adds	r1, r3, #0
1000bc04:	2f20      	cmp	r7, #32
1000bc06:	d100      	bne.n	1000bc0a <__aeabi_dsub+0x356>
1000bc08:	e08e      	b.n	1000bd28 <__aeabi_dsub+0x474>
1000bc0a:	233f      	movs	r3, #63	; 0x3f
1000bc0c:	1b1c      	subs	r4, r3, r4
1000bc0e:	40a2      	lsls	r2, r4
1000bc10:	4315      	orrs	r5, r2
1000bc12:	1e6a      	subs	r2, r5, #1
1000bc14:	4195      	sbcs	r5, r2
1000bc16:	2700      	movs	r7, #0
1000bc18:	430d      	orrs	r5, r1
1000bc1a:	2400      	movs	r4, #0
1000bc1c:	e78b      	b.n	1000bb36 <__aeabi_dsub+0x282>
1000bc1e:	46c0      	nop			; (mov r8, r8)
1000bc20:	000007ff 	.word	0x000007ff
1000bc24:	ff7fffff 	.word	0xff7fffff
1000bc28:	800fffff 	.word	0x800fffff
1000bc2c:	1c33      	adds	r3, r6, #0
1000bc2e:	1c10      	adds	r0, r2, #0
1000bc30:	3b20      	subs	r3, #32
1000bc32:	40d8      	lsrs	r0, r3
1000bc34:	2e20      	cmp	r6, #32
1000bc36:	d079      	beq.n	1000bd2c <__aeabi_dsub+0x478>
1000bc38:	2340      	movs	r3, #64	; 0x40
1000bc3a:	1b9b      	subs	r3, r3, r6
1000bc3c:	409a      	lsls	r2, r3
1000bc3e:	1c13      	adds	r3, r2, #0
1000bc40:	9a01      	ldr	r2, [sp, #4]
1000bc42:	4313      	orrs	r3, r2
1000bc44:	1e59      	subs	r1, r3, #1
1000bc46:	418b      	sbcs	r3, r1
1000bc48:	2200      	movs	r2, #0
1000bc4a:	4303      	orrs	r3, r0
1000bc4c:	e6c0      	b.n	1000b9d0 <__aeabi_dsub+0x11c>
1000bc4e:	2c00      	cmp	r4, #0
1000bc50:	d053      	beq.n	1000bcfa <__aeabi_dsub+0x446>
1000bc52:	4cc7      	ldr	r4, [pc, #796]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bc54:	42a0      	cmp	r0, r4
1000bc56:	d100      	bne.n	1000bc5a <__aeabi_dsub+0x3a6>
1000bc58:	e0b0      	b.n	1000bdbc <__aeabi_dsub+0x508>
1000bc5a:	2480      	movs	r4, #128	; 0x80
1000bc5c:	4271      	negs	r1, r6
1000bc5e:	4689      	mov	r9, r1
1000bc60:	0424      	lsls	r4, r4, #16
1000bc62:	4327      	orrs	r7, r4
1000bc64:	4649      	mov	r1, r9
1000bc66:	2938      	cmp	r1, #56	; 0x38
1000bc68:	dd00      	ble.n	1000bc6c <__aeabi_dsub+0x3b8>
1000bc6a:	e0cd      	b.n	1000be08 <__aeabi_dsub+0x554>
1000bc6c:	291f      	cmp	r1, #31
1000bc6e:	dd00      	ble.n	1000bc72 <__aeabi_dsub+0x3be>
1000bc70:	e159      	b.n	1000bf26 <__aeabi_dsub+0x672>
1000bc72:	2420      	movs	r4, #32
1000bc74:	1c3e      	adds	r6, r7, #0
1000bc76:	1a61      	subs	r1, r4, r1
1000bc78:	408e      	lsls	r6, r1
1000bc7a:	468a      	mov	sl, r1
1000bc7c:	46b0      	mov	r8, r6
1000bc7e:	4649      	mov	r1, r9
1000bc80:	1c2e      	adds	r6, r5, #0
1000bc82:	40ce      	lsrs	r6, r1
1000bc84:	4651      	mov	r1, sl
1000bc86:	46b4      	mov	ip, r6
1000bc88:	408d      	lsls	r5, r1
1000bc8a:	4664      	mov	r4, ip
1000bc8c:	4646      	mov	r6, r8
1000bc8e:	4649      	mov	r1, r9
1000bc90:	4326      	orrs	r6, r4
1000bc92:	1e6c      	subs	r4, r5, #1
1000bc94:	41a5      	sbcs	r5, r4
1000bc96:	40cf      	lsrs	r7, r1
1000bc98:	4335      	orrs	r5, r6
1000bc9a:	9901      	ldr	r1, [sp, #4]
1000bc9c:	1bd7      	subs	r7, r2, r7
1000bc9e:	468c      	mov	ip, r1
1000bca0:	1b4d      	subs	r5, r1, r5
1000bca2:	45ac      	cmp	ip, r5
1000bca4:	4192      	sbcs	r2, r2
1000bca6:	4252      	negs	r2, r2
1000bca8:	1abf      	subs	r7, r7, r2
1000bcaa:	1c04      	adds	r4, r0, #0
1000bcac:	4698      	mov	r8, r3
1000bcae:	e696      	b.n	1000b9de <__aeabi_dsub+0x12a>
1000bcb0:	4663      	mov	r3, ip
1000bcb2:	4665      	mov	r5, ip
1000bcb4:	4333      	orrs	r3, r6
1000bcb6:	d000      	beq.n	1000bcba <__aeabi_dsub+0x406>
1000bcb8:	e696      	b.n	1000b9e8 <__aeabi_dsub+0x134>
1000bcba:	2600      	movs	r6, #0
1000bcbc:	2700      	movs	r7, #0
1000bcbe:	2400      	movs	r4, #0
1000bcc0:	2500      	movs	r5, #0
1000bcc2:	e6c4      	b.n	1000ba4e <__aeabi_dsub+0x19a>
1000bcc4:	2b1f      	cmp	r3, #31
1000bcc6:	dc61      	bgt.n	1000bd8c <__aeabi_dsub+0x4d8>
1000bcc8:	2020      	movs	r0, #32
1000bcca:	1ac3      	subs	r3, r0, r3
1000bccc:	469b      	mov	fp, r3
1000bcce:	1c13      	adds	r3, r2, #0
1000bcd0:	4659      	mov	r1, fp
1000bcd2:	408b      	lsls	r3, r1
1000bcd4:	4651      	mov	r1, sl
1000bcd6:	4699      	mov	r9, r3
1000bcd8:	9b01      	ldr	r3, [sp, #4]
1000bcda:	40cb      	lsrs	r3, r1
1000bcdc:	469c      	mov	ip, r3
1000bcde:	464b      	mov	r3, r9
1000bce0:	4660      	mov	r0, ip
1000bce2:	4303      	orrs	r3, r0
1000bce4:	469c      	mov	ip, r3
1000bce6:	465b      	mov	r3, fp
1000bce8:	9901      	ldr	r1, [sp, #4]
1000bcea:	4099      	lsls	r1, r3
1000bcec:	4663      	mov	r3, ip
1000bcee:	1e48      	subs	r0, r1, #1
1000bcf0:	4181      	sbcs	r1, r0
1000bcf2:	4319      	orrs	r1, r3
1000bcf4:	4653      	mov	r3, sl
1000bcf6:	40da      	lsrs	r2, r3
1000bcf8:	e6cd      	b.n	1000ba96 <__aeabi_dsub+0x1e2>
1000bcfa:	1c3c      	adds	r4, r7, #0
1000bcfc:	432c      	orrs	r4, r5
1000bcfe:	d05d      	beq.n	1000bdbc <__aeabi_dsub+0x508>
1000bd00:	43f1      	mvns	r1, r6
1000bd02:	4689      	mov	r9, r1
1000bd04:	2900      	cmp	r1, #0
1000bd06:	d155      	bne.n	1000bdb4 <__aeabi_dsub+0x500>
1000bd08:	9901      	ldr	r1, [sp, #4]
1000bd0a:	1bd2      	subs	r2, r2, r7
1000bd0c:	468c      	mov	ip, r1
1000bd0e:	1b4d      	subs	r5, r1, r5
1000bd10:	45ac      	cmp	ip, r5
1000bd12:	4189      	sbcs	r1, r1
1000bd14:	4249      	negs	r1, r1
1000bd16:	1a57      	subs	r7, r2, r1
1000bd18:	1c04      	adds	r4, r0, #0
1000bd1a:	4698      	mov	r8, r3
1000bd1c:	e65f      	b.n	1000b9de <__aeabi_dsub+0x12a>
1000bd1e:	4894      	ldr	r0, [pc, #592]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bd20:	4284      	cmp	r4, r0
1000bd22:	d000      	beq.n	1000bd26 <__aeabi_dsub+0x472>
1000bd24:	e6ad      	b.n	1000ba82 <__aeabi_dsub+0x1ce>
1000bd26:	e5f7      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bd28:	2200      	movs	r2, #0
1000bd2a:	e771      	b.n	1000bc10 <__aeabi_dsub+0x35c>
1000bd2c:	2300      	movs	r3, #0
1000bd2e:	e787      	b.n	1000bc40 <__aeabi_dsub+0x38c>
1000bd30:	1c3b      	adds	r3, r7, #0
1000bd32:	432b      	orrs	r3, r5
1000bd34:	2c00      	cmp	r4, #0
1000bd36:	d000      	beq.n	1000bd3a <__aeabi_dsub+0x486>
1000bd38:	e0da      	b.n	1000bef0 <__aeabi_dsub+0x63c>
1000bd3a:	2b00      	cmp	r3, #0
1000bd3c:	d100      	bne.n	1000bd40 <__aeabi_dsub+0x48c>
1000bd3e:	e113      	b.n	1000bf68 <__aeabi_dsub+0x6b4>
1000bd40:	1c13      	adds	r3, r2, #0
1000bd42:	9901      	ldr	r1, [sp, #4]
1000bd44:	430b      	orrs	r3, r1
1000bd46:	d100      	bne.n	1000bd4a <__aeabi_dsub+0x496>
1000bd48:	e5e6      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bd4a:	1949      	adds	r1, r1, r5
1000bd4c:	42a9      	cmp	r1, r5
1000bd4e:	419b      	sbcs	r3, r3
1000bd50:	19d2      	adds	r2, r2, r7
1000bd52:	425b      	negs	r3, r3
1000bd54:	18d7      	adds	r7, r2, r3
1000bd56:	023b      	lsls	r3, r7, #8
1000bd58:	d400      	bmi.n	1000bd5c <__aeabi_dsub+0x4a8>
1000bd5a:	e121      	b.n	1000bfa0 <__aeabi_dsub+0x6ec>
1000bd5c:	4b85      	ldr	r3, [pc, #532]	; (1000bf74 <__aeabi_dsub+0x6c0>)
1000bd5e:	1c0d      	adds	r5, r1, #0
1000bd60:	401f      	ands	r7, r3
1000bd62:	1c04      	adds	r4, r0, #0
1000bd64:	e5d8      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bd66:	1c38      	adds	r0, r7, #0
1000bd68:	4328      	orrs	r0, r5
1000bd6a:	2c00      	cmp	r4, #0
1000bd6c:	d140      	bne.n	1000bdf0 <__aeabi_dsub+0x53c>
1000bd6e:	2800      	cmp	r0, #0
1000bd70:	d000      	beq.n	1000bd74 <__aeabi_dsub+0x4c0>
1000bd72:	e083      	b.n	1000be7c <__aeabi_dsub+0x5c8>
1000bd74:	1c10      	adds	r0, r2, #0
1000bd76:	9901      	ldr	r1, [sp, #4]
1000bd78:	4308      	orrs	r0, r1
1000bd7a:	d003      	beq.n	1000bd84 <__aeabi_dsub+0x4d0>
1000bd7c:	1c17      	adds	r7, r2, #0
1000bd7e:	1c0d      	adds	r5, r1, #0
1000bd80:	4698      	mov	r8, r3
1000bd82:	e5c9      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bd84:	2600      	movs	r6, #0
1000bd86:	2700      	movs	r7, #0
1000bd88:	2500      	movs	r5, #0
1000bd8a:	e660      	b.n	1000ba4e <__aeabi_dsub+0x19a>
1000bd8c:	4650      	mov	r0, sl
1000bd8e:	1c13      	adds	r3, r2, #0
1000bd90:	3820      	subs	r0, #32
1000bd92:	40c3      	lsrs	r3, r0
1000bd94:	1c18      	adds	r0, r3, #0
1000bd96:	4653      	mov	r3, sl
1000bd98:	2b20      	cmp	r3, #32
1000bd9a:	d100      	bne.n	1000bd9e <__aeabi_dsub+0x4ea>
1000bd9c:	e0c1      	b.n	1000bf22 <__aeabi_dsub+0x66e>
1000bd9e:	2340      	movs	r3, #64	; 0x40
1000bda0:	4651      	mov	r1, sl
1000bda2:	1a5b      	subs	r3, r3, r1
1000bda4:	409a      	lsls	r2, r3
1000bda6:	9901      	ldr	r1, [sp, #4]
1000bda8:	4311      	orrs	r1, r2
1000bdaa:	1e4a      	subs	r2, r1, #1
1000bdac:	4191      	sbcs	r1, r2
1000bdae:	2200      	movs	r2, #0
1000bdb0:	4301      	orrs	r1, r0
1000bdb2:	e670      	b.n	1000ba96 <__aeabi_dsub+0x1e2>
1000bdb4:	4c6e      	ldr	r4, [pc, #440]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bdb6:	42a0      	cmp	r0, r4
1000bdb8:	d000      	beq.n	1000bdbc <__aeabi_dsub+0x508>
1000bdba:	e753      	b.n	1000bc64 <__aeabi_dsub+0x3b0>
1000bdbc:	1c17      	adds	r7, r2, #0
1000bdbe:	9d01      	ldr	r5, [sp, #4]
1000bdc0:	1c04      	adds	r4, r0, #0
1000bdc2:	4698      	mov	r8, r3
1000bdc4:	e5a8      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bdc6:	2c00      	cmp	r4, #0
1000bdc8:	d128      	bne.n	1000be1c <__aeabi_dsub+0x568>
1000bdca:	1c3c      	adds	r4, r7, #0
1000bdcc:	432c      	orrs	r4, r5
1000bdce:	d100      	bne.n	1000bdd2 <__aeabi_dsub+0x51e>
1000bdd0:	e08a      	b.n	1000bee8 <__aeabi_dsub+0x634>
1000bdd2:	43db      	mvns	r3, r3
1000bdd4:	469a      	mov	sl, r3
1000bdd6:	2b00      	cmp	r3, #0
1000bdd8:	d000      	beq.n	1000bddc <__aeabi_dsub+0x528>
1000bdda:	e082      	b.n	1000bee2 <__aeabi_dsub+0x62e>
1000bddc:	9b01      	ldr	r3, [sp, #4]
1000bdde:	19d2      	adds	r2, r2, r7
1000bde0:	469c      	mov	ip, r3
1000bde2:	4465      	add	r5, ip
1000bde4:	429d      	cmp	r5, r3
1000bde6:	4189      	sbcs	r1, r1
1000bde8:	4249      	negs	r1, r1
1000bdea:	1857      	adds	r7, r2, r1
1000bdec:	1c04      	adds	r4, r0, #0
1000bdee:	e659      	b.n	1000baa4 <__aeabi_dsub+0x1f0>
1000bdf0:	2800      	cmp	r0, #0
1000bdf2:	d15b      	bne.n	1000beac <__aeabi_dsub+0x5f8>
1000bdf4:	1c10      	adds	r0, r2, #0
1000bdf6:	9901      	ldr	r1, [sp, #4]
1000bdf8:	4308      	orrs	r0, r1
1000bdfa:	d100      	bne.n	1000bdfe <__aeabi_dsub+0x54a>
1000bdfc:	e0a4      	b.n	1000bf48 <__aeabi_dsub+0x694>
1000bdfe:	1c17      	adds	r7, r2, #0
1000be00:	1c0d      	adds	r5, r1, #0
1000be02:	4698      	mov	r8, r3
1000be04:	4c5a      	ldr	r4, [pc, #360]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000be06:	e587      	b.n	1000b918 <__aeabi_dsub+0x64>
1000be08:	433d      	orrs	r5, r7
1000be0a:	1e6f      	subs	r7, r5, #1
1000be0c:	41bd      	sbcs	r5, r7
1000be0e:	2700      	movs	r7, #0
1000be10:	b2ed      	uxtb	r5, r5
1000be12:	e742      	b.n	1000bc9a <__aeabi_dsub+0x3e6>
1000be14:	1c04      	adds	r4, r0, #0
1000be16:	2700      	movs	r7, #0
1000be18:	2500      	movs	r5, #0
1000be1a:	e618      	b.n	1000ba4e <__aeabi_dsub+0x19a>
1000be1c:	4c54      	ldr	r4, [pc, #336]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000be1e:	42a0      	cmp	r0, r4
1000be20:	d062      	beq.n	1000bee8 <__aeabi_dsub+0x634>
1000be22:	4653      	mov	r3, sl
1000be24:	2480      	movs	r4, #128	; 0x80
1000be26:	425b      	negs	r3, r3
1000be28:	469a      	mov	sl, r3
1000be2a:	0424      	lsls	r4, r4, #16
1000be2c:	4327      	orrs	r7, r4
1000be2e:	4653      	mov	r3, sl
1000be30:	2b38      	cmp	r3, #56	; 0x38
1000be32:	dd00      	ble.n	1000be36 <__aeabi_dsub+0x582>
1000be34:	e08e      	b.n	1000bf54 <__aeabi_dsub+0x6a0>
1000be36:	2b1f      	cmp	r3, #31
1000be38:	dd00      	ble.n	1000be3c <__aeabi_dsub+0x588>
1000be3a:	e09d      	b.n	1000bf78 <__aeabi_dsub+0x6c4>
1000be3c:	2420      	movs	r4, #32
1000be3e:	1ae3      	subs	r3, r4, r3
1000be40:	469b      	mov	fp, r3
1000be42:	1c3b      	adds	r3, r7, #0
1000be44:	4659      	mov	r1, fp
1000be46:	408b      	lsls	r3, r1
1000be48:	4651      	mov	r1, sl
1000be4a:	4699      	mov	r9, r3
1000be4c:	1c2b      	adds	r3, r5, #0
1000be4e:	40cb      	lsrs	r3, r1
1000be50:	469c      	mov	ip, r3
1000be52:	464b      	mov	r3, r9
1000be54:	4664      	mov	r4, ip
1000be56:	4323      	orrs	r3, r4
1000be58:	469c      	mov	ip, r3
1000be5a:	465b      	mov	r3, fp
1000be5c:	409d      	lsls	r5, r3
1000be5e:	4663      	mov	r3, ip
1000be60:	1e6c      	subs	r4, r5, #1
1000be62:	41a5      	sbcs	r5, r4
1000be64:	40cf      	lsrs	r7, r1
1000be66:	431d      	orrs	r5, r3
1000be68:	9b01      	ldr	r3, [sp, #4]
1000be6a:	18bf      	adds	r7, r7, r2
1000be6c:	469c      	mov	ip, r3
1000be6e:	4465      	add	r5, ip
1000be70:	429d      	cmp	r5, r3
1000be72:	4192      	sbcs	r2, r2
1000be74:	4252      	negs	r2, r2
1000be76:	18bf      	adds	r7, r7, r2
1000be78:	1c04      	adds	r4, r0, #0
1000be7a:	e613      	b.n	1000baa4 <__aeabi_dsub+0x1f0>
1000be7c:	1c10      	adds	r0, r2, #0
1000be7e:	9901      	ldr	r1, [sp, #4]
1000be80:	4308      	orrs	r0, r1
1000be82:	d100      	bne.n	1000be86 <__aeabi_dsub+0x5d2>
1000be84:	e548      	b.n	1000b918 <__aeabi_dsub+0x64>
1000be86:	1a68      	subs	r0, r5, r1
1000be88:	4684      	mov	ip, r0
1000be8a:	4285      	cmp	r5, r0
1000be8c:	4180      	sbcs	r0, r0
1000be8e:	1abe      	subs	r6, r7, r2
1000be90:	4240      	negs	r0, r0
1000be92:	1a30      	subs	r0, r6, r0
1000be94:	0206      	lsls	r6, r0, #8
1000be96:	d400      	bmi.n	1000be9a <__aeabi_dsub+0x5e6>
1000be98:	e647      	b.n	1000bb2a <__aeabi_dsub+0x276>
1000be9a:	468c      	mov	ip, r1
1000be9c:	1b4d      	subs	r5, r1, r5
1000be9e:	45ac      	cmp	ip, r5
1000bea0:	4189      	sbcs	r1, r1
1000bea2:	1bd2      	subs	r2, r2, r7
1000bea4:	4249      	negs	r1, r1
1000bea6:	1a57      	subs	r7, r2, r1
1000bea8:	4698      	mov	r8, r3
1000beaa:	e535      	b.n	1000b918 <__aeabi_dsub+0x64>
1000beac:	1c10      	adds	r0, r2, #0
1000beae:	9901      	ldr	r1, [sp, #4]
1000beb0:	4308      	orrs	r0, r1
1000beb2:	d034      	beq.n	1000bf1e <__aeabi_dsub+0x66a>
1000beb4:	2480      	movs	r4, #128	; 0x80
1000beb6:	0778      	lsls	r0, r7, #29
1000beb8:	08ed      	lsrs	r5, r5, #3
1000beba:	08ff      	lsrs	r7, r7, #3
1000bebc:	0324      	lsls	r4, r4, #12
1000bebe:	4328      	orrs	r0, r5
1000bec0:	4227      	tst	r7, r4
1000bec2:	d008      	beq.n	1000bed6 <__aeabi_dsub+0x622>
1000bec4:	08d6      	lsrs	r6, r2, #3
1000bec6:	4226      	tst	r6, r4
1000bec8:	d105      	bne.n	1000bed6 <__aeabi_dsub+0x622>
1000beca:	08c9      	lsrs	r1, r1, #3
1000becc:	0752      	lsls	r2, r2, #29
1000bece:	430a      	orrs	r2, r1
1000bed0:	1c10      	adds	r0, r2, #0
1000bed2:	1c37      	adds	r7, r6, #0
1000bed4:	4698      	mov	r8, r3
1000bed6:	00ff      	lsls	r7, r7, #3
1000bed8:	0f42      	lsrs	r2, r0, #29
1000beda:	4317      	orrs	r7, r2
1000bedc:	00c5      	lsls	r5, r0, #3
1000bede:	4c24      	ldr	r4, [pc, #144]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bee0:	e51a      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bee2:	4c23      	ldr	r4, [pc, #140]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bee4:	42a0      	cmp	r0, r4
1000bee6:	d1a2      	bne.n	1000be2e <__aeabi_dsub+0x57a>
1000bee8:	1c17      	adds	r7, r2, #0
1000beea:	9d01      	ldr	r5, [sp, #4]
1000beec:	1c04      	adds	r4, r0, #0
1000beee:	e513      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bef0:	2b00      	cmp	r3, #0
1000bef2:	d035      	beq.n	1000bf60 <__aeabi_dsub+0x6ac>
1000bef4:	1c13      	adds	r3, r2, #0
1000bef6:	9901      	ldr	r1, [sp, #4]
1000bef8:	430b      	orrs	r3, r1
1000befa:	d010      	beq.n	1000bf1e <__aeabi_dsub+0x66a>
1000befc:	2480      	movs	r4, #128	; 0x80
1000befe:	0778      	lsls	r0, r7, #29
1000bf00:	08ed      	lsrs	r5, r5, #3
1000bf02:	08ff      	lsrs	r7, r7, #3
1000bf04:	0324      	lsls	r4, r4, #12
1000bf06:	4328      	orrs	r0, r5
1000bf08:	4227      	tst	r7, r4
1000bf0a:	d0e4      	beq.n	1000bed6 <__aeabi_dsub+0x622>
1000bf0c:	08d3      	lsrs	r3, r2, #3
1000bf0e:	4223      	tst	r3, r4
1000bf10:	d1e1      	bne.n	1000bed6 <__aeabi_dsub+0x622>
1000bf12:	08c9      	lsrs	r1, r1, #3
1000bf14:	0752      	lsls	r2, r2, #29
1000bf16:	430a      	orrs	r2, r1
1000bf18:	1c10      	adds	r0, r2, #0
1000bf1a:	1c1f      	adds	r7, r3, #0
1000bf1c:	e7db      	b.n	1000bed6 <__aeabi_dsub+0x622>
1000bf1e:	4c14      	ldr	r4, [pc, #80]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bf20:	e4fa      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bf22:	2200      	movs	r2, #0
1000bf24:	e73f      	b.n	1000bda6 <__aeabi_dsub+0x4f2>
1000bf26:	464c      	mov	r4, r9
1000bf28:	1c3e      	adds	r6, r7, #0
1000bf2a:	3c20      	subs	r4, #32
1000bf2c:	40e6      	lsrs	r6, r4
1000bf2e:	4649      	mov	r1, r9
1000bf30:	1c34      	adds	r4, r6, #0
1000bf32:	2920      	cmp	r1, #32
1000bf34:	d032      	beq.n	1000bf9c <__aeabi_dsub+0x6e8>
1000bf36:	2640      	movs	r6, #64	; 0x40
1000bf38:	1a76      	subs	r6, r6, r1
1000bf3a:	40b7      	lsls	r7, r6
1000bf3c:	433d      	orrs	r5, r7
1000bf3e:	1e6f      	subs	r7, r5, #1
1000bf40:	41bd      	sbcs	r5, r7
1000bf42:	2700      	movs	r7, #0
1000bf44:	4325      	orrs	r5, r4
1000bf46:	e6a8      	b.n	1000bc9a <__aeabi_dsub+0x3e6>
1000bf48:	2780      	movs	r7, #128	; 0x80
1000bf4a:	2600      	movs	r6, #0
1000bf4c:	03ff      	lsls	r7, r7, #15
1000bf4e:	4c08      	ldr	r4, [pc, #32]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bf50:	2500      	movs	r5, #0
1000bf52:	e57c      	b.n	1000ba4e <__aeabi_dsub+0x19a>
1000bf54:	433d      	orrs	r5, r7
1000bf56:	1e6f      	subs	r7, r5, #1
1000bf58:	41bd      	sbcs	r5, r7
1000bf5a:	2700      	movs	r7, #0
1000bf5c:	b2ed      	uxtb	r5, r5
1000bf5e:	e783      	b.n	1000be68 <__aeabi_dsub+0x5b4>
1000bf60:	1c17      	adds	r7, r2, #0
1000bf62:	9d01      	ldr	r5, [sp, #4]
1000bf64:	4c02      	ldr	r4, [pc, #8]	; (1000bf70 <__aeabi_dsub+0x6bc>)
1000bf66:	e4d7      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bf68:	1c17      	adds	r7, r2, #0
1000bf6a:	9d01      	ldr	r5, [sp, #4]
1000bf6c:	e4d4      	b.n	1000b918 <__aeabi_dsub+0x64>
1000bf6e:	46c0      	nop			; (mov r8, r8)
1000bf70:	000007ff 	.word	0x000007ff
1000bf74:	ff7fffff 	.word	0xff7fffff
1000bf78:	4654      	mov	r4, sl
1000bf7a:	1c3b      	adds	r3, r7, #0
1000bf7c:	3c20      	subs	r4, #32
1000bf7e:	40e3      	lsrs	r3, r4
1000bf80:	1c1c      	adds	r4, r3, #0
1000bf82:	4653      	mov	r3, sl
1000bf84:	2b20      	cmp	r3, #32
1000bf86:	d00d      	beq.n	1000bfa4 <__aeabi_dsub+0x6f0>
1000bf88:	2340      	movs	r3, #64	; 0x40
1000bf8a:	4651      	mov	r1, sl
1000bf8c:	1a5b      	subs	r3, r3, r1
1000bf8e:	409f      	lsls	r7, r3
1000bf90:	433d      	orrs	r5, r7
1000bf92:	1e6f      	subs	r7, r5, #1
1000bf94:	41bd      	sbcs	r5, r7
1000bf96:	2700      	movs	r7, #0
1000bf98:	4325      	orrs	r5, r4
1000bf9a:	e765      	b.n	1000be68 <__aeabi_dsub+0x5b4>
1000bf9c:	2700      	movs	r7, #0
1000bf9e:	e7cd      	b.n	1000bf3c <__aeabi_dsub+0x688>
1000bfa0:	1c0d      	adds	r5, r1, #0
1000bfa2:	e5c8      	b.n	1000bb36 <__aeabi_dsub+0x282>
1000bfa4:	2700      	movs	r7, #0
1000bfa6:	e7f3      	b.n	1000bf90 <__aeabi_dsub+0x6dc>

1000bfa8 <__aeabi_f2d>:
1000bfa8:	0042      	lsls	r2, r0, #1
1000bfaa:	0e12      	lsrs	r2, r2, #24
1000bfac:	1c51      	adds	r1, r2, #1
1000bfae:	b538      	push	{r3, r4, r5, lr}
1000bfb0:	b2c9      	uxtb	r1, r1
1000bfb2:	0243      	lsls	r3, r0, #9
1000bfb4:	0a5d      	lsrs	r5, r3, #9
1000bfb6:	0fc4      	lsrs	r4, r0, #31
1000bfb8:	2901      	cmp	r1, #1
1000bfba:	dd15      	ble.n	1000bfe8 <__aeabi_f2d+0x40>
1000bfbc:	21e0      	movs	r1, #224	; 0xe0
1000bfbe:	0089      	lsls	r1, r1, #2
1000bfc0:	468c      	mov	ip, r1
1000bfc2:	076d      	lsls	r5, r5, #29
1000bfc4:	0b1b      	lsrs	r3, r3, #12
1000bfc6:	4462      	add	r2, ip
1000bfc8:	2100      	movs	r1, #0
1000bfca:	1c28      	adds	r0, r5, #0
1000bfcc:	0d0d      	lsrs	r5, r1, #20
1000bfce:	052d      	lsls	r5, r5, #20
1000bfd0:	432b      	orrs	r3, r5
1000bfd2:	4d1c      	ldr	r5, [pc, #112]	; (1000c044 <__aeabi_f2d+0x9c>)
1000bfd4:	0552      	lsls	r2, r2, #21
1000bfd6:	402b      	ands	r3, r5
1000bfd8:	0852      	lsrs	r2, r2, #1
1000bfda:	4313      	orrs	r3, r2
1000bfdc:	005b      	lsls	r3, r3, #1
1000bfde:	07e4      	lsls	r4, r4, #31
1000bfe0:	085b      	lsrs	r3, r3, #1
1000bfe2:	4323      	orrs	r3, r4
1000bfe4:	1c19      	adds	r1, r3, #0
1000bfe6:	bd38      	pop	{r3, r4, r5, pc}
1000bfe8:	2a00      	cmp	r2, #0
1000bfea:	d115      	bne.n	1000c018 <__aeabi_f2d+0x70>
1000bfec:	2d00      	cmp	r5, #0
1000bfee:	d01f      	beq.n	1000c030 <__aeabi_f2d+0x88>
1000bff0:	1c28      	adds	r0, r5, #0
1000bff2:	f000 f8bd 	bl	1000c170 <__clzsi2>
1000bff6:	280a      	cmp	r0, #10
1000bff8:	dc1d      	bgt.n	1000c036 <__aeabi_f2d+0x8e>
1000bffa:	230b      	movs	r3, #11
1000bffc:	1c2a      	adds	r2, r5, #0
1000bffe:	1a1b      	subs	r3, r3, r0
1000c000:	40da      	lsrs	r2, r3
1000c002:	1c13      	adds	r3, r2, #0
1000c004:	1c02      	adds	r2, r0, #0
1000c006:	3215      	adds	r2, #21
1000c008:	4095      	lsls	r5, r2
1000c00a:	4a0f      	ldr	r2, [pc, #60]	; (1000c048 <__aeabi_f2d+0xa0>)
1000c00c:	031b      	lsls	r3, r3, #12
1000c00e:	1a12      	subs	r2, r2, r0
1000c010:	0552      	lsls	r2, r2, #21
1000c012:	0b1b      	lsrs	r3, r3, #12
1000c014:	0d52      	lsrs	r2, r2, #21
1000c016:	e7d7      	b.n	1000bfc8 <__aeabi_f2d+0x20>
1000c018:	2d00      	cmp	r5, #0
1000c01a:	d006      	beq.n	1000c02a <__aeabi_f2d+0x82>
1000c01c:	2280      	movs	r2, #128	; 0x80
1000c01e:	0b1b      	lsrs	r3, r3, #12
1000c020:	0312      	lsls	r2, r2, #12
1000c022:	4313      	orrs	r3, r2
1000c024:	076d      	lsls	r5, r5, #29
1000c026:	4a09      	ldr	r2, [pc, #36]	; (1000c04c <__aeabi_f2d+0xa4>)
1000c028:	e7ce      	b.n	1000bfc8 <__aeabi_f2d+0x20>
1000c02a:	4a08      	ldr	r2, [pc, #32]	; (1000c04c <__aeabi_f2d+0xa4>)
1000c02c:	2300      	movs	r3, #0
1000c02e:	e7cb      	b.n	1000bfc8 <__aeabi_f2d+0x20>
1000c030:	2200      	movs	r2, #0
1000c032:	2300      	movs	r3, #0
1000c034:	e7c8      	b.n	1000bfc8 <__aeabi_f2d+0x20>
1000c036:	1c03      	adds	r3, r0, #0
1000c038:	3b0b      	subs	r3, #11
1000c03a:	409d      	lsls	r5, r3
1000c03c:	1c2b      	adds	r3, r5, #0
1000c03e:	2500      	movs	r5, #0
1000c040:	e7e3      	b.n	1000c00a <__aeabi_f2d+0x62>
1000c042:	46c0      	nop			; (mov r8, r8)
1000c044:	800fffff 	.word	0x800fffff
1000c048:	00000389 	.word	0x00000389
1000c04c:	000007ff 	.word	0x000007ff

1000c050 <__aeabi_d2f>:
1000c050:	b570      	push	{r4, r5, r6, lr}
1000c052:	030b      	lsls	r3, r1, #12
1000c054:	004d      	lsls	r5, r1, #1
1000c056:	0f44      	lsrs	r4, r0, #29
1000c058:	0d6d      	lsrs	r5, r5, #21
1000c05a:	0a5b      	lsrs	r3, r3, #9
1000c05c:	4323      	orrs	r3, r4
1000c05e:	1c6c      	adds	r4, r5, #1
1000c060:	0564      	lsls	r4, r4, #21
1000c062:	0fc9      	lsrs	r1, r1, #31
1000c064:	00c2      	lsls	r2, r0, #3
1000c066:	0d64      	lsrs	r4, r4, #21
1000c068:	2c01      	cmp	r4, #1
1000c06a:	dd2a      	ble.n	1000c0c2 <__aeabi_d2f+0x72>
1000c06c:	4c3b      	ldr	r4, [pc, #236]	; (1000c15c <__aeabi_d2f+0x10c>)
1000c06e:	192c      	adds	r4, r5, r4
1000c070:	2cfe      	cmp	r4, #254	; 0xfe
1000c072:	dc1a      	bgt.n	1000c0aa <__aeabi_d2f+0x5a>
1000c074:	2c00      	cmp	r4, #0
1000c076:	dd35      	ble.n	1000c0e4 <__aeabi_d2f+0x94>
1000c078:	0180      	lsls	r0, r0, #6
1000c07a:	1e45      	subs	r5, r0, #1
1000c07c:	41a8      	sbcs	r0, r5
1000c07e:	00db      	lsls	r3, r3, #3
1000c080:	4303      	orrs	r3, r0
1000c082:	0f52      	lsrs	r2, r2, #29
1000c084:	4313      	orrs	r3, r2
1000c086:	075a      	lsls	r2, r3, #29
1000c088:	d004      	beq.n	1000c094 <__aeabi_d2f+0x44>
1000c08a:	220f      	movs	r2, #15
1000c08c:	401a      	ands	r2, r3
1000c08e:	2a04      	cmp	r2, #4
1000c090:	d000      	beq.n	1000c094 <__aeabi_d2f+0x44>
1000c092:	3304      	adds	r3, #4
1000c094:	2280      	movs	r2, #128	; 0x80
1000c096:	04d2      	lsls	r2, r2, #19
1000c098:	401a      	ands	r2, r3
1000c09a:	d027      	beq.n	1000c0ec <__aeabi_d2f+0x9c>
1000c09c:	3401      	adds	r4, #1
1000c09e:	2cff      	cmp	r4, #255	; 0xff
1000c0a0:	d003      	beq.n	1000c0aa <__aeabi_d2f+0x5a>
1000c0a2:	019b      	lsls	r3, r3, #6
1000c0a4:	0a5b      	lsrs	r3, r3, #9
1000c0a6:	b2e4      	uxtb	r4, r4
1000c0a8:	e001      	b.n	1000c0ae <__aeabi_d2f+0x5e>
1000c0aa:	24ff      	movs	r4, #255	; 0xff
1000c0ac:	2300      	movs	r3, #0
1000c0ae:	025b      	lsls	r3, r3, #9
1000c0b0:	05e4      	lsls	r4, r4, #23
1000c0b2:	0a5b      	lsrs	r3, r3, #9
1000c0b4:	4323      	orrs	r3, r4
1000c0b6:	005b      	lsls	r3, r3, #1
1000c0b8:	07c9      	lsls	r1, r1, #31
1000c0ba:	085b      	lsrs	r3, r3, #1
1000c0bc:	430b      	orrs	r3, r1
1000c0be:	1c18      	adds	r0, r3, #0
1000c0c0:	bd70      	pop	{r4, r5, r6, pc}
1000c0c2:	2d00      	cmp	r5, #0
1000c0c4:	d106      	bne.n	1000c0d4 <__aeabi_d2f+0x84>
1000c0c6:	4313      	orrs	r3, r2
1000c0c8:	d10e      	bne.n	1000c0e8 <__aeabi_d2f+0x98>
1000c0ca:	2400      	movs	r4, #0
1000c0cc:	025b      	lsls	r3, r3, #9
1000c0ce:	0a5b      	lsrs	r3, r3, #9
1000c0d0:	b2e4      	uxtb	r4, r4
1000c0d2:	e7ec      	b.n	1000c0ae <__aeabi_d2f+0x5e>
1000c0d4:	431a      	orrs	r2, r3
1000c0d6:	d0e8      	beq.n	1000c0aa <__aeabi_d2f+0x5a>
1000c0d8:	2080      	movs	r0, #128	; 0x80
1000c0da:	00db      	lsls	r3, r3, #3
1000c0dc:	0480      	lsls	r0, r0, #18
1000c0de:	4303      	orrs	r3, r0
1000c0e0:	24ff      	movs	r4, #255	; 0xff
1000c0e2:	e7d0      	b.n	1000c086 <__aeabi_d2f+0x36>
1000c0e4:	3417      	adds	r4, #23
1000c0e6:	da0c      	bge.n	1000c102 <__aeabi_d2f+0xb2>
1000c0e8:	2305      	movs	r3, #5
1000c0ea:	2400      	movs	r4, #0
1000c0ec:	08db      	lsrs	r3, r3, #3
1000c0ee:	2cff      	cmp	r4, #255	; 0xff
1000c0f0:	d1ec      	bne.n	1000c0cc <__aeabi_d2f+0x7c>
1000c0f2:	2b00      	cmp	r3, #0
1000c0f4:	d02d      	beq.n	1000c152 <__aeabi_d2f+0x102>
1000c0f6:	2280      	movs	r2, #128	; 0x80
1000c0f8:	03d2      	lsls	r2, r2, #15
1000c0fa:	4313      	orrs	r3, r2
1000c0fc:	025b      	lsls	r3, r3, #9
1000c0fe:	0a5b      	lsrs	r3, r3, #9
1000c100:	e7d5      	b.n	1000c0ae <__aeabi_d2f+0x5e>
1000c102:	2480      	movs	r4, #128	; 0x80
1000c104:	4816      	ldr	r0, [pc, #88]	; (1000c160 <__aeabi_d2f+0x110>)
1000c106:	0424      	lsls	r4, r4, #16
1000c108:	4323      	orrs	r3, r4
1000c10a:	1b40      	subs	r0, r0, r5
1000c10c:	281f      	cmp	r0, #31
1000c10e:	dc0d      	bgt.n	1000c12c <__aeabi_d2f+0xdc>
1000c110:	4c14      	ldr	r4, [pc, #80]	; (1000c164 <__aeabi_d2f+0x114>)
1000c112:	46a4      	mov	ip, r4
1000c114:	4465      	add	r5, ip
1000c116:	40ab      	lsls	r3, r5
1000c118:	1c1c      	adds	r4, r3, #0
1000c11a:	1c13      	adds	r3, r2, #0
1000c11c:	40ab      	lsls	r3, r5
1000c11e:	1e5d      	subs	r5, r3, #1
1000c120:	41ab      	sbcs	r3, r5
1000c122:	40c2      	lsrs	r2, r0
1000c124:	4323      	orrs	r3, r4
1000c126:	4313      	orrs	r3, r2
1000c128:	2400      	movs	r4, #0
1000c12a:	e7ac      	b.n	1000c086 <__aeabi_d2f+0x36>
1000c12c:	1c1e      	adds	r6, r3, #0
1000c12e:	4c0e      	ldr	r4, [pc, #56]	; (1000c168 <__aeabi_d2f+0x118>)
1000c130:	1b64      	subs	r4, r4, r5
1000c132:	40e6      	lsrs	r6, r4
1000c134:	1c34      	adds	r4, r6, #0
1000c136:	2820      	cmp	r0, #32
1000c138:	d00d      	beq.n	1000c156 <__aeabi_d2f+0x106>
1000c13a:	480c      	ldr	r0, [pc, #48]	; (1000c16c <__aeabi_d2f+0x11c>)
1000c13c:	4684      	mov	ip, r0
1000c13e:	4465      	add	r5, ip
1000c140:	40ab      	lsls	r3, r5
1000c142:	1c1d      	adds	r5, r3, #0
1000c144:	432a      	orrs	r2, r5
1000c146:	1e53      	subs	r3, r2, #1
1000c148:	419a      	sbcs	r2, r3
1000c14a:	1c13      	adds	r3, r2, #0
1000c14c:	4323      	orrs	r3, r4
1000c14e:	2400      	movs	r4, #0
1000c150:	e799      	b.n	1000c086 <__aeabi_d2f+0x36>
1000c152:	2300      	movs	r3, #0
1000c154:	e7ab      	b.n	1000c0ae <__aeabi_d2f+0x5e>
1000c156:	2500      	movs	r5, #0
1000c158:	e7f4      	b.n	1000c144 <__aeabi_d2f+0xf4>
1000c15a:	46c0      	nop			; (mov r8, r8)
1000c15c:	fffffc80 	.word	0xfffffc80
1000c160:	0000039e 	.word	0x0000039e
1000c164:	fffffc82 	.word	0xfffffc82
1000c168:	0000037e 	.word	0x0000037e
1000c16c:	fffffca2 	.word	0xfffffca2

1000c170 <__clzsi2>:
1000c170:	211c      	movs	r1, #28
1000c172:	2301      	movs	r3, #1
1000c174:	041b      	lsls	r3, r3, #16
1000c176:	4298      	cmp	r0, r3
1000c178:	d301      	bcc.n	1000c17e <__clzsi2+0xe>
1000c17a:	0c00      	lsrs	r0, r0, #16
1000c17c:	3910      	subs	r1, #16
1000c17e:	0a1b      	lsrs	r3, r3, #8
1000c180:	4298      	cmp	r0, r3
1000c182:	d301      	bcc.n	1000c188 <__clzsi2+0x18>
1000c184:	0a00      	lsrs	r0, r0, #8
1000c186:	3908      	subs	r1, #8
1000c188:	091b      	lsrs	r3, r3, #4
1000c18a:	4298      	cmp	r0, r3
1000c18c:	d301      	bcc.n	1000c192 <__clzsi2+0x22>
1000c18e:	0900      	lsrs	r0, r0, #4
1000c190:	3904      	subs	r1, #4
1000c192:	a202      	add	r2, pc, #8	; (adr r2, 1000c19c <__clzsi2+0x2c>)
1000c194:	5c10      	ldrb	r0, [r2, r0]
1000c196:	1840      	adds	r0, r0, r1
1000c198:	4770      	bx	lr
1000c19a:	46c0      	nop			; (mov r8, r8)
1000c19c:	02020304 	.word	0x02020304
1000c1a0:	01010101 	.word	0x01010101
	...

1000c1ac <__errno>:
1000c1ac:	4b01      	ldr	r3, [pc, #4]	; (1000c1b4 <__errno+0x8>)
1000c1ae:	6818      	ldr	r0, [r3, #0]
1000c1b0:	4770      	bx	lr
1000c1b2:	46c0      	nop			; (mov r8, r8)
1000c1b4:	20000698 	.word	0x20000698

1000c1b8 <__libc_init_array>:
1000c1b8:	4b0e      	ldr	r3, [pc, #56]	; (1000c1f4 <__libc_init_array+0x3c>)
1000c1ba:	b570      	push	{r4, r5, r6, lr}
1000c1bc:	2500      	movs	r5, #0
1000c1be:	1c1e      	adds	r6, r3, #0
1000c1c0:	4c0d      	ldr	r4, [pc, #52]	; (1000c1f8 <__libc_init_array+0x40>)
1000c1c2:	1ae4      	subs	r4, r4, r3
1000c1c4:	10a4      	asrs	r4, r4, #2
1000c1c6:	42a5      	cmp	r5, r4
1000c1c8:	d004      	beq.n	1000c1d4 <__libc_init_array+0x1c>
1000c1ca:	00ab      	lsls	r3, r5, #2
1000c1cc:	58f3      	ldr	r3, [r6, r3]
1000c1ce:	4798      	blx	r3
1000c1d0:	3501      	adds	r5, #1
1000c1d2:	e7f8      	b.n	1000c1c6 <__libc_init_array+0xe>
1000c1d4:	f7f6 fb84 	bl	100028e0 <_init>
1000c1d8:	4b08      	ldr	r3, [pc, #32]	; (1000c1fc <__libc_init_array+0x44>)
1000c1da:	2500      	movs	r5, #0
1000c1dc:	1c1e      	adds	r6, r3, #0
1000c1de:	4c08      	ldr	r4, [pc, #32]	; (1000c200 <__libc_init_array+0x48>)
1000c1e0:	1ae4      	subs	r4, r4, r3
1000c1e2:	10a4      	asrs	r4, r4, #2
1000c1e4:	42a5      	cmp	r5, r4
1000c1e6:	d004      	beq.n	1000c1f2 <__libc_init_array+0x3a>
1000c1e8:	00ab      	lsls	r3, r5, #2
1000c1ea:	58f3      	ldr	r3, [r6, r3]
1000c1ec:	4798      	blx	r3
1000c1ee:	3501      	adds	r5, #1
1000c1f0:	e7f8      	b.n	1000c1e4 <__libc_init_array+0x2c>
1000c1f2:	bd70      	pop	{r4, r5, r6, pc}
1000c1f4:	2000069c 	.word	0x2000069c
1000c1f8:	2000069c 	.word	0x2000069c
1000c1fc:	2000069c 	.word	0x2000069c
1000c200:	2000069c 	.word	0x2000069c

1000c204 <memset>:
1000c204:	1c03      	adds	r3, r0, #0
1000c206:	1882      	adds	r2, r0, r2
1000c208:	4293      	cmp	r3, r2
1000c20a:	d002      	beq.n	1000c212 <memset+0xe>
1000c20c:	7019      	strb	r1, [r3, #0]
1000c20e:	3301      	adds	r3, #1
1000c210:	e7fa      	b.n	1000c208 <memset+0x4>
1000c212:	4770      	bx	lr
1000c214:	10001c1a 	.word	0x10001c1a
1000c218:	10001c1a 	.word	0x10001c1a
1000c21c:	10001c24 	.word	0x10001c24
1000c220:	10001c24 	.word	0x10001c24
1000c224:	10001c46 	.word	0x10001c46
1000c228:	10001c46 	.word	0x10001c46
1000c22c:	10001c46 	.word	0x10001c46
1000c230:	10001c46 	.word	0x10001c46
1000c234:	10001c2e 	.word	0x10001c2e
1000c238:	10001c3a 	.word	0x10001c3a

1000c23c <UART_0_channel_config>:
1000c23c:	00002580 10010808 00000000              .%..........

1000c248 <UART_0_tx_pin_config>:
1000c248:	0000009c 00000001                       ........

1000c250 <UART_0_tx_pin>:
1000c250:	40040000 00000007 1000c248              ...@....H...

1000c25c <UART_0_config>:
1000c25c:	1000c23c 100031c1 00000000 10007fc1     <....1..........
	...
1000c280:	1000c250 04000000 00000304              P...........

1000c28c <UART_0_rx_pin_config>:
1000c28c:	00000000 00000001                       ........

1000c294 <PIN_INTERRUPT_ANG_MAX>:
1000c294:	40010600 40040200 00000008 00000000     ...@...@........
1000c2a4:	00000000 00000139 03060000 01000300     ....9...........

1000c2b4 <INTERRUPT_0>:
1000c2b4:	03070002 00000001                       ........

1000c2bc <I2C_MASTER_0_sda_pin_config>:
1000c2bc:	000000e4 00000001                       ........

1000c2c4 <I2C_MASTER_0_scl_pin_config>:
1000c2c4:	000000e0 00000001                       ........

1000c2cc <I2C_MASTER_0_channel_config>:
1000c2cc:	00030d40 00000000                       @.......

1000c2d4 <I2C_MASTER_0_config>:
1000c2d4:	1000c2cc 10004c99 10004c71 10004c4d     .....L..qL..ML..
	...
1000c2f8:	04040000 0000090a                       ........

1000c300 <GLOBAL_SCU_XMC1_0_config>:
1000c300:	01030303 00000101 100058be 1000586e     .........X..nX..
1000c310:	1000587a 100058aa 100058be 10005874     zX...X...X..tX..
1000c320:	1000589a 100058a0 100058b4              .X...X...X..

1000c32c <E_EEPROM_XMC1_block_Config>:
1000c32c:	00000001 00000001 00000002 00000001     ................
1000c33c:	00000003 00000002 00000004 00000002     ................
1000c34c:	00000005 00000002 00000006 00000004     ................

1000c35c <LED1>:
1000c35c:	40040100 00000080 00010000 00000002     ...@............

1000c36c <LED2>:
1000c36c:	40040100 00000080 00010000 00000003     ...@............

1000c37c <PARTIDA>:
1000c37c:	40040100 00000080 00010000 00000000     ...@............

1000c38c <REVERSAO>:
1000c38c:	40040100 00000080 00010000 00000001     ...@............

1000c39c <LED_CONF_10>:
1000c39c:	40040400 00000080 00010000 00000007     ...@............

1000c3ac <LED_CONF_5>:
1000c3ac:	40040400 00000080 00010000 00000008     ...@............

1000c3bc <LED_CONF_15>:
1000c3bc:	40040400 00000080 00010000 00000006     ...@............

1000c3cc <LED_CONF_MIN_0>:
1000c3cc:	40040400 00000080 00010000 00000009     ...@............

1000c3dc <LED_CONF_MIN_5>:
1000c3dc:	40040400 00000080 00010000 0000000a     ...@............

1000c3ec <BOT_AUTO>:
1000c3ec:	40040200 00000000 00000000 00000002     ...@............

1000c3fc <BOT_MANUAL>:
1000c3fc:	40040400 00000000 00000000 0000000b     ...@............

1000c40c <BOT_MIN>:
1000c40c:	40040200 00000000 00000000 00000001     ...@............
1000c41c:	00010000 03300000 00010000 00000000     ......0.........
1000c42c:	10007ff0 10008158 10008158 10008158     ....X...X...X...
1000c43c:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c44c:	10008158 10008158 1000800a 10008158     X...X.......X...
1000c45c:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c46c:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c47c:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c48c:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c49c:	10008158 10008158 1000803a 10008158     X...X...:...X...
1000c4ac:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c4bc:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c4cc:	10008060 10008158 10008158 10008158     `...X...X...X...
1000c4dc:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c4ec:	10008158 10008158 100080a2 10008158     X...X.......X...
1000c4fc:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c50c:	10008158 10008158 10008158 10008158     X...X...X...X...
1000c51c:	100080ca 736f6361 00000000 6e697361     ....acos....asin
1000c52c:	00000000 10009bf6 10009bbe 10009bda     ................
1000c53c:	10009bb2 10009bda 10009b1e 10009bda     ................
1000c54c:	10009bb2 10009bbe 10009bbe 10009b1e     ................
1000c55c:	10009bb2 10009c5c 10009c5c 10009c5c     ....\...\...\...
1000c56c:	10009be0 10009bbe 10009bbe 10009ca6     ................
1000c57c:	10009bb0 10009ca6 10009b1e 10009ca6     ................
1000c58c:	10009bb0 10009bbe 10009bbe 10009b1e     ................
1000c59c:	10009bb0 10009c5c 10009c5c 10009c5c     ....\...\...\...
1000c5ac:	10009c8a 10009fbe 10009fb6 10009fb6     ................
1000c5bc:	10009fae 10009f00 10009f00 10009fa4     ................
1000c5cc:	10009fae 10009f00 10009fa4 10009f00     ................
1000c5dc:	10009fae 10009f02 10009f02 10009f02     ................
1000c5ec:	1000a048 1000acd8 1000abc6 1000acac     H...............
1000c5fc:	1000abb2 1000acac 1000acb6 1000acac     ................
1000c60c:	1000abb2 1000abc6 1000abc6 1000acb6     ................
1000c61c:	1000abb2 1000abbc 1000abbc 1000abbc     ................
1000c62c:	1000af1e 1000b56c 1000b54a 1000b54a     ....l...J...J...
1000c63c:	1000b53e 1000b432 1000b432 1000b532     >...2...2...2...
1000c64c:	1000b53e 1000b432 1000b532 1000b432     >...2...2...2...
1000c65c:	1000b53e 1000b436 1000b436 1000b436     >...6...6...6...
1000c66c:	1000b74c 00000043                       L...C...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	10004fb5 	.word	0x10004fb5
	Insert_InterruptVeener IRQ1	
200000d4:	10004fc5 	.word	0x10004fc5
	Insert_InterruptVeener IRQ2	
200000d8:	10004fd5 	.word	0x10004fd5
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	10007949 	.word	0x10007949
	Insert_InterruptVeener IRQ7	
200000ec:	10008a49 	.word	0x10008a49
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	10004de1 	.word	0x10004de1
	Insert_InterruptVeener IRQ10	
200000f8:	10004dcd 	.word	0x10004dcd
	Insert_InterruptVeener IRQ11	
200000fc:	100032d5 	.word	0x100032d5
	Insert_InterruptVeener IRQ12	
20000100:	100032c1 	.word	0x100032c1
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
